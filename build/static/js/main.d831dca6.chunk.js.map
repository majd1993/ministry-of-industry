{"version":3,"sources":["WebChat.js","avatar.png","MinimizableWebChat.js","MoIAT.png","App.js","serviceWorker.js","index.js"],"names":["WebChat","className","onFetchToken","store","token","directLine","useMemo","createDirectLine","styleSet","createStyleSet","userAvatarBackgroundColor","botAvatarBackgroundColor","bubbleBackground","bubbleFromUserBackground","botAvatarInitials","userAvatarInitials","backgroundColor","bubbleFromUserBorderRadius","bubbleBorderRadius","bubbleTextColor","bubbleFromUserTextColor","suggestedActionBorderColor","suggestedActionBorderRadius","suggestedActionBackground","suggestedActionDisabledTextColor","suggestedActionTextColor","sendBoxTextColor","avatarSize","useEffect","useStyles","makeStyles","theme","root","width","title1","margin","fontFamily","fontSize","color","fontWeight","title2","emptyMainTypography","flexGrow","headerIconButton","padding","avatarIcon","height","MinimizableWebChat","props","classes","createStore","dispatch","next","action","type","payload","name","value","language","window","navigator","activity","from","role","setNewMessage","useState","loaded","setLoaded","minimized","setMinimized","newMessage","side","setSide","setToken","handleFetchToken","useCallback","a","fetch","method","headers","res","text","substring","length","handleMaximizeButtonClick","handleMinimizeButtonClick","handleSwitchButtonClick","onClick","classNames","ListItem","style","Typography","IconButton","React","createElement","Icons","groupTitleLeftIcon","src","AvatarIcon","alt","App","state","MoIATBG","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d831dca6.chunk.js","sourcesContent":["// import React, { useEffect, useMemo } from 'react';\nimport ReactWebChat, { createDirectLine, createStyleSet } from 'botframework-webchat';\nimport React, { /* useState,  */useEffect, useMemo } from \"react\";\n//import socketIOClient from \"socket.io-client\";\nimport './WebChat.css';\nimport './custom.css'\n\n//import * as adaptiveCardsPackage from 'adaptivecards';\n\n/* adaptiveCardsPackage.AdaptiveCard.onParseElement = element => {\n\n  console.log('element ', element)\n  if (element.id && element.id === 'first_password') {\n    console.log('changed')\n  }\n}; */\n\n/* adaptiveCardsPackage.AdaptiveCard.onParseAction = action => {\n  // const card = action.getActionById(\"openurl\")\n  // card.on\n  console.log('action ', action)\n  if (action.id && action.id === 'openurl') {\n    //action.addEventListener(\"click\", (console.log('kkk')));\n    console.log(' clickkked 2')\n    //action.onExecute(console.log(' clickkked 3'))\n  }\n}; */\n\n//const ENDPOINT = \"https://e-councilhr.azurewebsites.net\"\n\nconst WebChat = ({ className, onFetchToken, store, token, /* handleFormDialogOpen */ }) => {\n\n  const directLine = useMemo(() => createDirectLine({ token }), [token]);\n  // We are adding a new middleware to handle card action\n  /* const cardActionMiddleware = () => next => async ({ cardAction, getSignInUrl }) => {\n    const { type, value } = cardAction;\n\n    console.log('cardAction', cardAction)\n    console.log('getSignInUrl', getSignInUrl)\n\n    if (type === 'postBack' && value.url) {\n      //console.log('openUrl: ', type)\n      //console.log('supportteam: ', value)\n\n      handleFormDialogOpen(value.url)\n    }\n    else {\n      return next({ cardAction, getSignInUrl });\n    }\n  } */\n\n  //const [language, setLanguage] = useState(\"\"); \n  //.webchat--css-iyfsm-rctxl4.webchat__stacked-layout.webchat__stacked-layout--from-user .webchat__stacked-layout__message-row\n  //.webchat--css-iyfsm-rctxl4.webchat__stacked-layout .webchat__stacked-layout__message-row\n\n  const styleSet = useMemo(\n    () =>\n      createStyleSet({\n        userAvatarBackgroundColor: 'rgb(105,105,105)',\n        botAvatarBackgroundColor: 'rgba(193, 52, 52, 0.93)',\n        bubbleBackground: '#EEEEEE',\n        bubbleFromUserBackground: '#245BB2',\n        botAvatarInitials: 'Bot',\n        userAvatarInitials: 'User',\n        backgroundColor: '#f5f5f5',\n        bubbleFromUserBorderRadius: \"15px 15px 2px 15px\",\n        bubbleBorderRadius: \"15px 15px 15px 2px\",\n        bubbleTextColor: '#070707',\n        bubbleFromUserTextColor: \"white\",\n        suggestedActionBorderColor: '#245BB2',\n        suggestedActionBorderRadius: \"8px\",\n        suggestedActionBackground: '#245BB2',\n        suggestedActionDisabledTextColor: 'white',\n        suggestedActionTextColor: \"#ffffff\",\n        sendBoxTextColor: 'black',\n        avatarSize: 40,\n      }),\n    []\n  );\n  /* const [response, setResponse] = useState(\"\");\n  useEffect(() => {\n    const socket = socketIOClient(ENDPOINT);\n    socket.on(\"language\", data => {\n      console.log(\"wessel\")\n      console.log(data)\n      setResponse(data);\n      //if else\n    });\n  }, []); */\n\n  useEffect(() => {\n    onFetchToken();\n  }, [onFetchToken]);\n\n  return token ? (\n    //<ReactWebChat className={`${className || ''} web-chat ${response.language!=='English'?'roula':''}`} directLine={directLine} store={store} styleSet={styleSet} /> // left to right\n    <ReactWebChat\n      className={`${className || ''} web-chat `}\n      directLine={directLine}\n      store={store}\n      styleSet={styleSet}\n    //adaptiveCardsPackage={adaptiveCardsPackage}\n    //cardActionMiddleware={cardActionMiddleware}\n    />\n  ) : (\n    <div className={`${className || ''} connect-spinner`}>\n      <div className=\"content\">\n        <div className=\"icon\">\n          <span className=\"ms-Icon ms-Icon--Robot\" />\n        </div>\n        <p>Please wait while we are connecting.</p>\n      </div>\n    </div>\n  );\n};\n\nexport default WebChat;\n","export default __webpack_public_path__ + \"static/media/avatar.c916259a.png\";","import classNames from 'classnames';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { createStore, createStyleSet } from 'botframework-webchat';\nimport Typography from '@material-ui/core/Typography';\nimport ListItem from '@material-ui/core/ListItem';\nimport { makeStyles } from '@material-ui/core/styles';\nimport * as Icons from '@material-ui/icons/';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport WebChat from './WebChat';\n\nimport AvatarIcon from './avatar.png';\n\nimport './fabric-icons-inline.css';\nimport './MinimizableWebChat.css';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  title1: {\n    margin: '0px 0px 0px 20px',\n    fontFamily: 'Inter, sans-serif',\n    fontSize: '27px',\n    color: '#fffff',\n    fontWeight: '700',\n  },\n  title2: {\n    margin: '5px 0px 5px 20px',\n    fontFamily: 'Inter, sans-serif',\n    fontSize: '15px',\n    color: '#b8b8b8', //'#C2C2C2',\n    fontWeight: '400',\n  },\n  emptyMainTypography: {\n    flexGrow: 1,\n  },\n  headerIconButton: {\n    padding: '10px 10px 10px 10px',\n  },\n  avatarIcon: {\n    width: '55px',\n    height: '55px',\n    margin: '0px 10px 0px 10px',\n  },\n}));\n\n\nconst MinimizableWebChat = (props) => {\n\n  const classes = useStyles();\n\n  const store = useMemo(\n    () =>\n      createStore({}, ({ dispatch }) => next => action => {\n        if (action.type === 'DIRECT_LINE/CONNECT_FULFILLED') {\n          dispatch({\n            type: 'WEB_CHAT/SEND_EVENT',\n            payload: {\n              name: 'webchat/join',\n              value: {\n                language: window.navigator.language\n              }\n            }\n          });\n        } else if (action.type === 'DIRECT_LINE/INCOMING_ACTIVITY') {\n          if (action.payload.activity.from.role === 'bot') {\n            setNewMessage(true);\n          }\n        }\n\n        return next(action);\n      }),\n    []\n  );\n\n  const styleSet = useMemo(\n    () =>\n      createStyleSet({\n        backgroundColor: 'Transparent'\n      }),\n    []\n  );\n\n  const [loaded, setLoaded] = useState(false);\n  const [minimized, setMinimized] = useState(true);\n  const [newMessage, setNewMessage] = useState(false);\n  const [side, setSide] = useState('right');\n  const [token, setToken] = useState();\n\n  // To learn about reconnecting to a conversation, see the following documentation:\n  // https://docs.microsoft.com/en-us/azure/bot-service/rest-api/bot-framework-rest-direct-line-3-0-reconnect-to-conversation?view=azure-bot-service-4.0\n\n  const handleFetchToken = useCallback(async () => {\n    if (!token) {\n      // const res = await fetch('https://e-councilhr.azurewebsites.net/directline/token', { method: 'POST' }, { mode: 'no-cors'});\n      const res = await fetch(\n        'https://webchat.botframework.com/api/tokens',\n        {\n          method: 'GET',\n          headers: {\n            'Authorization': 'BotConnector KxH5mTB3KH0.GOS2JFASIiLQlZttpBQUsxBmHjn-SbtS73Q7gKlh8ZA',\n          }\n        });\n      // 'Authorization', 'BotConnector ' + 'YugL9gop8Zk.SJVwc4Jheg5HadjeRyHDBfbVI8P19s_V3S5qzeUoMoM'\n      let token = await res.text();\n      //console.log(\"roula\")\n      //console.log(token)\n      // token =\"ew0KICAiYWxnIjogIlJTMjU2IiwNCiAgImtpZCI6ICJsY0oxTXFpNkdKYXdCZEw5Y0dieEt5S1R6OE0iLA0KICAieDV0IjogImxjSjFNcWk2R0phd0JkTDljR2J4S3lLVHo4TSIsDQogICJ0eXAiOiAiSldUIg0KfQ.ew0KICAiYm90IjogIkUtQ291bmNpbEhSIiwNCiAgInNpdGUiOiAiWXVnTDlnb3A4WmsiLA0KICAiY29udiI6ICJJTnExemJBVllTQUM1QzVHQVJuaHBNLWEiLA0KICAibmJmIjogMTYxMzU2MDgyMSwNCiAgImV4cCI6IDE2MTM1NjQ0MjEsDQogICJpc3MiOiAiaHR0cHM6Ly93ZWJjaGF0LmJvdGZyYW1ld29yay5jb20vIiwNCiAgImF1ZCI6ICJodHRwczovL3dlYmNoYXQuYm90ZnJhbWV3b3JrLmNvbS8iDQp9.zRjR7eP_7lMg77fafDYcC0EaWQHQ_Yr9Jvia5oEm5c972_GvQyS6MZYOJuGGl6yykIGPVEhvvSpwjEDQwowiJnBPe-MJO8XHGjq5PJne099QU_UFi4FKvKeCWEKgvBQkq3e9rfXCNBkLy76w_2UpnyPmzPjvrnMCn_59KrQwrODZyK9UZN28ciZ8g7kmM6JrvTMcRqKu7vfzyLT0wl_gvjznVzo6aj60TWiKUsTJMM7TUFAdVorJnfpOq-S4MDBr1l2RII51ZqYmjMTo9AGK45iABEbRQHYFD-cdEr75cc7qcuY3k-iXQOtWIc939lrrh8axJKo_B48pxNi2ikndEg\"\n      setToken(token.substring(1, token.length - 1));\n    }\n  }, [setToken, token]);\n\n  const handleMaximizeButtonClick = useCallback(async () => {\n    setLoaded(true);\n    setMinimized(false);\n    setNewMessage(false);\n  }, [setMinimized, setNewMessage]);\n\n  const handleMinimizeButtonClick = useCallback(() => {\n    setMinimized(true);\n    setNewMessage(false);\n  }, [setMinimized, setNewMessage]);\n\n  const handleSwitchButtonClick = useCallback(() => {\n    setSide(side === 'left' ? 'right' : 'left');\n  }, [setSide, side]);\n\n  // TODO: [P2] Currently, we cannot unmount Web Chat from DOM when it is minimized.\n  //       Today, if we unmount it, Web Chat will call disconnect on DirectLineJS object.\n  //       When minimized, we still want to maintain that connection while the UI is gone.\n  //       This is related to https://github.com/microsoft/BotFramework-WebChat/issues/2750.\n\n  return (\n    <div className=\"minimizable-web-chat\">\n      {minimized && (\n        <button className=\"maximize\" onClick={handleMaximizeButtonClick}>\n          <span className={token ? 'ms-Icon ms-Icon--MessageFill' : 'ms-Icon ms-Icon--Message'} />\n          {newMessage && <span className=\"ms-Icon ms-Icon--CircleShapeSolid red-dot\" />}\n        </button>\n      )}\n      {loaded && (\n        <div className={classNames(side === 'left' ? 'chat-box left' : 'chat-box right', minimized ? 'hide' : '')}>\n          <header>\n            {/* <div className=\"filler\" /> */}\n            <ListItem style={{ padding: '0px' }}>\n              <div>\n                <Typography className={classes.title1} >\n                  {'Wael'}\n                </Typography>\n                <Typography className={classes.title2} >\n                  {'Your MoIAT digital assistant'}\n                </Typography>\n              </div>\n              <Typography className={classes.emptyMainTypography} ></Typography>\n\n              <IconButton\n                onClick={handleMinimizeButtonClick}\n                className={classes.headerIconButton}\n              >\n                {React.createElement(\n                  Icons['Remove'], { className: classes.groupTitleLeftIcon },\n\n                )}\n              </IconButton>\n              <IconButton\n                onClick={handleSwitchButtonClick}\n                className={classes.headerIconButton}\n              >\n                {React.createElement(\n                  Icons['SwapHoriz'], { className: classes.groupTitleLeftIcon },\n\n                )}\n              </IconButton>\n              {/* <button className=\"switch\" onClick={handleSwitchButtonClick}>\n                <span className=\"ms-Icon ms-Icon--Switch\" />\n              </button>\n              <button className=\"minimize\" onClick={handleMinimizeButtonClick}>\n                <span className=\"ms-Icon ms-Icon--ChromeMinimize\" />\n              </button> */}\n              <img\n                src={AvatarIcon}\n                alt={''}\n                className={classes.avatarIcon}\n              />\n            </ListItem>\n          </header>\n          <WebChat\n            className=\"react-web-chat\"\n            onFetchToken={handleFetchToken}\n            store={store}\n            styleSet={styleSet}\n            token={token}\n          //handleFormDialogOpen={props.handleFormDialogOpen}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MinimizableWebChat;\n","export default __webpack_public_path__ + \"static/media/MoIAT.98d6c191.png\";","import React from 'react';\nimport MinimizableWebChat from './MinimizableWebChat';\n\n//import IFrameFromDialog from './iframeContainer'\n\nimport MoIATBG from './MoIAT.png';\n//import DubaiChamberBg2 from './dubai-chamber-bg-2.png';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    //this.handleFormDialogOpen = this.handleFormDialogOpen.bind(this)\n    //#ec6b05 orange color\n    //#0b3b5d blue color\n\n    this.state = {\n      //isFormDialogOpen: false,\n      //iFrameURL: null /* \"https://www.youtube.com/embed/8WkuChVeL0s\" */\n    }\n  }\n\n  /* componentDidMount() {\n    console.log('componentDidMount')\n  } */\n\n  /* componentDidUpdate(prevProps, prevState) {\n  }\n */\n\n  /* handleFormDialogClose = () => {\n    this.setState({\n      isFormDialogOpen: false,\n      iFrameURL: null\n    })\n  };\n\n  handleFormDialogOpen = (url) => {\n    this.setState({\n      isFormDialogOpen: true,\n      iFrameURL: url\n    })\n  }; */\n\n  render() {\n    /* console.log('this.state.----------------------')\n    console.log(this.state.isFormDialogOpen)\n    console.log(this.state.iFrameURL)\n    console.log('---------------------------------') */\n    return (\n      <div className=\"App\">\n        {/* <IFrameFromDialog\n          isFormDialogOpen={this.state.isFormDialogOpen}\n          iFrameURL={this.state.iFrameURL}\n          handleFormDialogClose={this.handleFormDialogClose}\n        /> */}\n        <img alt=\"product background\" src={MoIATBG} />\n        <MinimizableWebChat /* handleFormDialogOpen={this.handleFormDialogOpen} */ />\n      </div>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}