"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useCreateActivityStatusRenderer;

var _botframeworkWebchatCore = require("botframework-webchat-core");

var _react = _interopRequireWildcard(require("react"));

var _useGetSendTimeoutForActivity = _interopRequireDefault(require("./useGetSendTimeoutForActivity"));

var _useTimePassed = _interopRequireDefault(require("./internal/useTimePassed"));

var _useWebChatAPIContext2 = _interopRequireDefault(require("./internal/useWebChatAPIContext"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/* eslint react/prop-types: "off"*/
var _Constants$ActivityCl = _botframeworkWebchatCore.Constants.ActivityClientState,
    SEND_FAILED = _Constants$ActivityCl.SEND_FAILED,
    SENDING = _Constants$ActivityCl.SENDING,
    SENT = _Constants$ActivityCl.SENT;

var ActivityStatusContainer = function ActivityStatusContainer(_ref) {
  var activity = _ref.activity,
      hideTimestamp = _ref.hideTimestamp,
      nextVisibleActivity = _ref.nextVisibleActivity;

  var _useWebChatAPIContext = (0, _useWebChatAPIContext2.default)(),
      createActivityStatusRenderer = _useWebChatAPIContext.activityStatusRenderer;

  var getSendTimeoutForActivity = (0, _useGetSendTimeoutForActivity.default)(); // SEND_FAILED from the activity is ignored, and is instead based on styleOptions.sendTimeout.
  // Note that the derived state is time-sensitive. The useTimePassed() hook is used to make sure it changes over time.

  var _activity$channelData = activity.channelData;
  _activity$channelData = _activity$channelData === void 0 ? {} : _activity$channelData;
  var _activity$channelData2 = _activity$channelData.clientTimestamp,
      clientTimestamp = _activity$channelData2 === void 0 ? 0 : _activity$channelData2,
      state = _activity$channelData.state,
      role = activity.from.role;
  var activitySent = state !== SENDING && state !== SEND_FAILED;
  var fromUser = role === 'user';
  var sendTimeout = getSendTimeoutForActivity({
    activity: activity
  });
  var pastTimeout = (0, _useTimePassed.default)(fromUser && !activitySent ? new Date(clientTimestamp).getTime() + sendTimeout : 0);
  var sendState = activitySent || !fromUser ? SENT : pastTimeout ? SEND_FAILED : SENDING;
  return (0, _react.useMemo)(function () {
    return createActivityStatusRenderer({
      activity: activity,
      hideTimestamp: hideTimestamp,
      nextVisibleActivity: nextVisibleActivity,
      // "nextVisibleActivity" is for backward compatibility, please remove this line on or after 2022-07-22.
      sameTimestampGroup: hideTimestamp,
      // "sameTimestampGroup" is for backward compatibility, please remove this line on or after 2022-07-22.
      sendState: sendState
    });
  }, [activity, createActivityStatusRenderer, hideTimestamp, nextVisibleActivity, sendState]);
};

function useCreateActivityStatusRenderer() {
  return (0, _react.useMemo)(function () {
    return function (_ref2) {
      var activity = _ref2.activity,
          nextVisibleActivity = _ref2.nextVisibleActivity;
      return function () {
        var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            hideTimestamp = _ref3.hideTimestamp;

        return /*#__PURE__*/_react.default.createElement(ActivityStatusContainer, {
          activity: activity,
          hideTimestamp: hideTimestamp,
          nextVisibleActivity: nextVisibleActivity
        });
      };
    };
  }, []);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ob29rcy91c2VDcmVhdGVBY3Rpdml0eVN0YXR1c1JlbmRlcmVyLmpzIl0sIm5hbWVzIjpbIkNvbnN0YW50cyIsIkFjdGl2aXR5Q2xpZW50U3RhdGUiLCJTRU5EX0ZBSUxFRCIsIlNFTkRJTkciLCJTRU5UIiwiQWN0aXZpdHlTdGF0dXNDb250YWluZXIiLCJhY3Rpdml0eSIsImhpZGVUaW1lc3RhbXAiLCJuZXh0VmlzaWJsZUFjdGl2aXR5IiwiY3JlYXRlQWN0aXZpdHlTdGF0dXNSZW5kZXJlciIsImFjdGl2aXR5U3RhdHVzUmVuZGVyZXIiLCJnZXRTZW5kVGltZW91dEZvckFjdGl2aXR5IiwiY2hhbm5lbERhdGEiLCJjbGllbnRUaW1lc3RhbXAiLCJzdGF0ZSIsInJvbGUiLCJmcm9tIiwiYWN0aXZpdHlTZW50IiwiZnJvbVVzZXIiLCJzZW5kVGltZW91dCIsInBhc3RUaW1lb3V0IiwiRGF0ZSIsImdldFRpbWUiLCJzZW5kU3RhdGUiLCJzYW1lVGltZXN0YW1wR3JvdXAiLCJ1c2VDcmVhdGVBY3Rpdml0eVN0YXR1c1JlbmRlcmVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFFQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7QUFQQTs0QkFXSUEsa0MsQ0FERkMsbUI7SUFBdUJDLFcseUJBQUFBLFc7SUFBYUMsTyx5QkFBQUEsTztJQUFTQyxJLHlCQUFBQSxJOztBQUcvQyxJQUFNQyx1QkFBdUIsR0FBRyxTQUExQkEsdUJBQTBCLE9BQXNEO0FBQUEsTUFBbkRDLFFBQW1ELFFBQW5EQSxRQUFtRDtBQUFBLE1BQXpDQyxhQUF5QyxRQUF6Q0EsYUFBeUM7QUFBQSxNQUExQkMsbUJBQTBCLFFBQTFCQSxtQkFBMEI7O0FBQUEsOEJBQ25CLHFDQURtQjtBQUFBLE1BQ3BEQyw0QkFEb0QseUJBQzVFQyxzQkFENEU7O0FBRXBGLE1BQU1DLHlCQUF5QixHQUFHLDRDQUFsQyxDQUZvRixDQUlwRjtBQUNBOztBQUxvRiw4QkFTaEZMLFFBVGdGLENBT2xGTSxXQVBrRjtBQUFBLDZEQU9wQyxFQVBvQztBQUFBLHFEQU9uRUMsZUFQbUU7QUFBQSxNQU9uRUEsZUFQbUUsdUNBT2pELENBUGlEO0FBQUEsTUFPOUNDLEtBUDhDLHlCQU85Q0EsS0FQOEM7QUFBQSxNQVExRUMsSUFSMEUsR0FTaEZULFFBVGdGLENBUWxGVSxJQVJrRixDQVExRUQsSUFSMEU7QUFXcEYsTUFBTUUsWUFBWSxHQUFHSCxLQUFLLEtBQUtYLE9BQVYsSUFBcUJXLEtBQUssS0FBS1osV0FBcEQ7QUFDQSxNQUFNZ0IsUUFBUSxHQUFHSCxJQUFJLEtBQUssTUFBMUI7QUFDQSxNQUFNSSxXQUFXLEdBQUdSLHlCQUF5QixDQUFDO0FBQUVMLElBQUFBLFFBQVEsRUFBUkE7QUFBRixHQUFELENBQTdDO0FBRUEsTUFBTWMsV0FBVyxHQUFHLDRCQUFjRixRQUFRLElBQUksQ0FBQ0QsWUFBYixHQUE0QixJQUFJSSxJQUFKLENBQVNSLGVBQVQsRUFBMEJTLE9BQTFCLEtBQXNDSCxXQUFsRSxHQUFnRixDQUE5RixDQUFwQjtBQUVBLE1BQU1JLFNBQVMsR0FBR04sWUFBWSxJQUFJLENBQUNDLFFBQWpCLEdBQTRCZCxJQUE1QixHQUFtQ2dCLFdBQVcsR0FBR2xCLFdBQUgsR0FBaUJDLE9BQWpGO0FBRUEsU0FBTyxvQkFDTDtBQUFBLFdBQ0VNLDRCQUE0QixDQUFDO0FBQzNCSCxNQUFBQSxRQUFRLEVBQVJBLFFBRDJCO0FBRTNCQyxNQUFBQSxhQUFhLEVBQWJBLGFBRjJCO0FBRzNCQyxNQUFBQSxtQkFBbUIsRUFBbkJBLG1CQUgyQjtBQUdOO0FBQ3JCZ0IsTUFBQUEsa0JBQWtCLEVBQUVqQixhQUpPO0FBSVE7QUFDbkNnQixNQUFBQSxTQUFTLEVBQVRBO0FBTDJCLEtBQUQsQ0FEOUI7QUFBQSxHQURLLEVBU0wsQ0FBQ2pCLFFBQUQsRUFBV0csNEJBQVgsRUFBeUNGLGFBQXpDLEVBQXdEQyxtQkFBeEQsRUFBNkVlLFNBQTdFLENBVEssQ0FBUDtBQVdELENBOUJEOztBQWdDZSxTQUFTRSwrQkFBVCxHQUEyQztBQUN4RCxTQUFPLG9CQUNMO0FBQUEsV0FBTTtBQUFBLFVBQUduQixRQUFILFNBQUdBLFFBQUg7QUFBQSxVQUFhRSxtQkFBYixTQUFhQSxtQkFBYjtBQUFBLGFBQXVDO0FBQUEsd0ZBQXFCLEVBQXJCO0FBQUEsWUFBR0QsYUFBSCxTQUFHQSxhQUFIOztBQUFBLDRCQUMzQyw2QkFBQyx1QkFBRDtBQUNFLFVBQUEsUUFBUSxFQUFFRCxRQURaO0FBRUUsVUFBQSxhQUFhLEVBQUVDLGFBRmpCO0FBR0UsVUFBQSxtQkFBbUIsRUFBRUM7QUFIdkIsVUFEMkM7QUFBQSxPQUF2QztBQUFBLEtBQU47QUFBQSxHQURLLEVBUUwsRUFSSyxDQUFQO0FBVUQiLCJzb3VyY2VSb290IjoiY29tcG9uZW50Oi8vLyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludCByZWFjdC9wcm9wLXR5cGVzOiBcIm9mZlwiKi9cblxuaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSAnYm90ZnJhbWV3b3JrLXdlYmNoYXQtY29yZSc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHVzZUdldFNlbmRUaW1lb3V0Rm9yQWN0aXZpdHkgZnJvbSAnLi91c2VHZXRTZW5kVGltZW91dEZvckFjdGl2aXR5JztcbmltcG9ydCB1c2VUaW1lUGFzc2VkIGZyb20gJy4vaW50ZXJuYWwvdXNlVGltZVBhc3NlZCc7XG5pbXBvcnQgdXNlV2ViQ2hhdEFQSUNvbnRleHQgZnJvbSAnLi9pbnRlcm5hbC91c2VXZWJDaGF0QVBJQ29udGV4dCc7XG5cbmNvbnN0IHtcbiAgQWN0aXZpdHlDbGllbnRTdGF0ZTogeyBTRU5EX0ZBSUxFRCwgU0VORElORywgU0VOVCB9XG59ID0gQ29uc3RhbnRzO1xuXG5jb25zdCBBY3Rpdml0eVN0YXR1c0NvbnRhaW5lciA9ICh7IGFjdGl2aXR5LCBoaWRlVGltZXN0YW1wLCBuZXh0VmlzaWJsZUFjdGl2aXR5IH0pID0+IHtcbiAgY29uc3QgeyBhY3Rpdml0eVN0YXR1c1JlbmRlcmVyOiBjcmVhdGVBY3Rpdml0eVN0YXR1c1JlbmRlcmVyIH0gPSB1c2VXZWJDaGF0QVBJQ29udGV4dCgpO1xuICBjb25zdCBnZXRTZW5kVGltZW91dEZvckFjdGl2aXR5ID0gdXNlR2V0U2VuZFRpbWVvdXRGb3JBY3Rpdml0eSgpO1xuXG4gIC8vIFNFTkRfRkFJTEVEIGZyb20gdGhlIGFjdGl2aXR5IGlzIGlnbm9yZWQsIGFuZCBpcyBpbnN0ZWFkIGJhc2VkIG9uIHN0eWxlT3B0aW9ucy5zZW5kVGltZW91dC5cbiAgLy8gTm90ZSB0aGF0IHRoZSBkZXJpdmVkIHN0YXRlIGlzIHRpbWUtc2Vuc2l0aXZlLiBUaGUgdXNlVGltZVBhc3NlZCgpIGhvb2sgaXMgdXNlZCB0byBtYWtlIHN1cmUgaXQgY2hhbmdlcyBvdmVyIHRpbWUuXG4gIGNvbnN0IHtcbiAgICBjaGFubmVsRGF0YTogeyBjbGllbnRUaW1lc3RhbXAgPSAwLCBzdGF0ZSB9ID0ge30sXG4gICAgZnJvbTogeyByb2xlIH1cbiAgfSA9IGFjdGl2aXR5O1xuXG4gIGNvbnN0IGFjdGl2aXR5U2VudCA9IHN0YXRlICE9PSBTRU5ESU5HICYmIHN0YXRlICE9PSBTRU5EX0ZBSUxFRDtcbiAgY29uc3QgZnJvbVVzZXIgPSByb2xlID09PSAndXNlcic7XG4gIGNvbnN0IHNlbmRUaW1lb3V0ID0gZ2V0U2VuZFRpbWVvdXRGb3JBY3Rpdml0eSh7IGFjdGl2aXR5IH0pO1xuXG4gIGNvbnN0IHBhc3RUaW1lb3V0ID0gdXNlVGltZVBhc3NlZChmcm9tVXNlciAmJiAhYWN0aXZpdHlTZW50ID8gbmV3IERhdGUoY2xpZW50VGltZXN0YW1wKS5nZXRUaW1lKCkgKyBzZW5kVGltZW91dCA6IDApO1xuXG4gIGNvbnN0IHNlbmRTdGF0ZSA9IGFjdGl2aXR5U2VudCB8fCAhZnJvbVVzZXIgPyBTRU5UIDogcGFzdFRpbWVvdXQgPyBTRU5EX0ZBSUxFRCA6IFNFTkRJTkc7XG5cbiAgcmV0dXJuIHVzZU1lbW8oXG4gICAgKCkgPT5cbiAgICAgIGNyZWF0ZUFjdGl2aXR5U3RhdHVzUmVuZGVyZXIoe1xuICAgICAgICBhY3Rpdml0eSxcbiAgICAgICAgaGlkZVRpbWVzdGFtcCxcbiAgICAgICAgbmV4dFZpc2libGVBY3Rpdml0eSwgLy8gXCJuZXh0VmlzaWJsZUFjdGl2aXR5XCIgaXMgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHBsZWFzZSByZW1vdmUgdGhpcyBsaW5lIG9uIG9yIGFmdGVyIDIwMjItMDctMjIuXG4gICAgICAgIHNhbWVUaW1lc3RhbXBHcm91cDogaGlkZVRpbWVzdGFtcCwgLy8gXCJzYW1lVGltZXN0YW1wR3JvdXBcIiBpcyBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgcGxlYXNlIHJlbW92ZSB0aGlzIGxpbmUgb24gb3IgYWZ0ZXIgMjAyMi0wNy0yMi5cbiAgICAgICAgc2VuZFN0YXRlXG4gICAgICB9KSxcbiAgICBbYWN0aXZpdHksIGNyZWF0ZUFjdGl2aXR5U3RhdHVzUmVuZGVyZXIsIGhpZGVUaW1lc3RhbXAsIG5leHRWaXNpYmxlQWN0aXZpdHksIHNlbmRTdGF0ZV1cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUNyZWF0ZUFjdGl2aXR5U3RhdHVzUmVuZGVyZXIoKSB7XG4gIHJldHVybiB1c2VNZW1vKFxuICAgICgpID0+ICh7IGFjdGl2aXR5LCBuZXh0VmlzaWJsZUFjdGl2aXR5IH0pID0+ICh7IGhpZGVUaW1lc3RhbXAgfSA9IHt9KSA9PiAoXG4gICAgICA8QWN0aXZpdHlTdGF0dXNDb250YWluZXJcbiAgICAgICAgYWN0aXZpdHk9e2FjdGl2aXR5fVxuICAgICAgICBoaWRlVGltZXN0YW1wPXtoaWRlVGltZXN0YW1wfVxuICAgICAgICBuZXh0VmlzaWJsZUFjdGl2aXR5PXtuZXh0VmlzaWJsZUFjdGl2aXR5fVxuICAgICAgLz5cbiAgICApLFxuICAgIFtdXG4gICk7XG59XG4iXX0=