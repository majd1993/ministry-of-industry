"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = concatMiddleware;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function concatMiddleware() {
  for (var _len = arguments.length, middleware = new Array(_len), _key = 0; _key < _len; _key++) {
    middleware[_key] = arguments[_key];
  }

  return function (setupArgs) {
    var setup = middleware.reduce(function (setup, middleware) {
      return middleware ? [].concat(_toConsumableArray(setup), [middleware(setupArgs)]) : setup;
    }, []);
    return function (last) {
      var stack = setup.slice();

      var work = function work(index) {
        return function () {
          var next = stack[index];
          return (next ? next(work(index + 1)) : last).apply(void 0, arguments);
        };
      };

      return work(0);
    };
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ob29rcy9taWRkbGV3YXJlL2NvbmNhdE1pZGRsZXdhcmUuanMiXSwibmFtZXMiOlsiY29uY2F0TWlkZGxld2FyZSIsIm1pZGRsZXdhcmUiLCJzZXR1cEFyZ3MiLCJzZXR1cCIsInJlZHVjZSIsImxhc3QiLCJzdGFjayIsInNsaWNlIiwid29yayIsImluZGV4IiwibmV4dCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFlLFNBQVNBLGdCQUFULEdBQXlDO0FBQUEsb0NBQVpDLFVBQVk7QUFBWkEsSUFBQUEsVUFBWTtBQUFBOztBQUN0RCxTQUFPLFVBQUFDLFNBQVMsRUFBSTtBQUNsQixRQUFNQyxLQUFLLEdBQUdGLFVBQVUsQ0FBQ0csTUFBWCxDQUNaLFVBQUNELEtBQUQsRUFBUUYsVUFBUjtBQUFBLGFBQXdCQSxVQUFVLGdDQUFPRSxLQUFQLElBQWNGLFVBQVUsQ0FBQ0MsU0FBRCxDQUF4QixLQUF1Q0MsS0FBekU7QUFBQSxLQURZLEVBRVosRUFGWSxDQUFkO0FBS0EsV0FBTyxVQUFBRSxJQUFJLEVBQUk7QUFDYixVQUFNQyxLQUFLLEdBQUdILEtBQUssQ0FBQ0ksS0FBTixFQUFkOztBQUNBLFVBQU1DLElBQUksR0FBRyxTQUFQQSxJQUFPLENBQUFDLEtBQUs7QUFBQSxlQUFJLFlBQWdCO0FBQ3BDLGNBQU1DLElBQUksR0FBR0osS0FBSyxDQUFDRyxLQUFELENBQWxCO0FBRUEsaUJBQU8sQ0FBQ0MsSUFBSSxHQUFHQSxJQUFJLENBQUNGLElBQUksQ0FBQ0MsS0FBSyxHQUFHLENBQVQsQ0FBTCxDQUFQLEdBQTJCSixJQUFoQywwQkFBUDtBQUNELFNBSmlCO0FBQUEsT0FBbEI7O0FBTUEsYUFBT0csSUFBSSxDQUFDLENBQUQsQ0FBWDtBQUNELEtBVEQ7QUFVRCxHQWhCRDtBQWlCRCIsInNvdXJjZVJvb3QiOiJjb21wb25lbnQ6Ly8vIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29uY2F0TWlkZGxld2FyZSguLi5taWRkbGV3YXJlKSB7XG4gIHJldHVybiBzZXR1cEFyZ3MgPT4ge1xuICAgIGNvbnN0IHNldHVwID0gbWlkZGxld2FyZS5yZWR1Y2UoXG4gICAgICAoc2V0dXAsIG1pZGRsZXdhcmUpID0+IChtaWRkbGV3YXJlID8gWy4uLnNldHVwLCBtaWRkbGV3YXJlKHNldHVwQXJncyldIDogc2V0dXApLFxuICAgICAgW11cbiAgICApO1xuXG4gICAgcmV0dXJuIGxhc3QgPT4ge1xuICAgICAgY29uc3Qgc3RhY2sgPSBzZXR1cC5zbGljZSgpO1xuICAgICAgY29uc3Qgd29yayA9IGluZGV4ID0+ICguLi5ydW5BcmdzKSA9PiB7XG4gICAgICAgIGNvbnN0IG5leHQgPSBzdGFja1tpbmRleF07XG5cbiAgICAgICAgcmV0dXJuIChuZXh0ID8gbmV4dCh3b3JrKGluZGV4ICsgMSkpIDogbGFzdCkoLi4ucnVuQXJncyk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gd29yaygwKTtcbiAgICB9O1xuICB9O1xufVxuIl19