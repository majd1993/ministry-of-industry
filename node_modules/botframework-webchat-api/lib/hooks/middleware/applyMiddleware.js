"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = applyMiddleware;
exports.forRenderer = forRenderer;

var _react = _interopRequireWildcard(require("react"));

var _concatMiddleware = _interopRequireDefault(require("./concatMiddleware"));

var _ErrorBox = _interopRequireDefault(require("../internal/ErrorBox"));

var _UserlandBoundary = _interopRequireDefault(require("./UserlandBoundary"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function applyMiddleware(type) {
  for (var _len = arguments.length, middleware = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    middleware[_key - 1] = arguments[_key];
  }

  return function () {
    return _concatMiddleware.default.apply(void 0, middleware).apply(void 0, arguments)(function () {
      throw new Error("reached terminator of ".concat(type));
    });
  };
}

function forRenderer(type) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$strict = _ref.strict,
      strict = _ref$strict === void 0 ? false : _ref$strict;

  for (var _len2 = arguments.length, middleware = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
    middleware[_key2 - 2] = arguments[_key2];
  }

  return function () {
    var runMiddleware = _concatMiddleware.default.apply(void 0, middleware).apply(void 0, arguments)(function () {
      return /*#__PURE__*/_react.default.createElement(_ErrorBox.default, {
        error: new Error("reached terminator of ".concat(type)),
        type: type
      });
    }); // The createRendererArgs is "what to render", for example, activity.
    // The function should return with only one of the two results:
    // - Returns a function if there is a renderer *committed* to render;
    // - Returns false if nothing should be rendered.


    return function () {
      try {
        var render = runMiddleware.apply(void 0, arguments);

        if (!render) {
          return false;
        } else if ( /*#__PURE__*/(0, _react.isValidElement)(render)) {
          if (strict) {
            console.error("botframework-webchat: ".concat(type, " should only return either false or a render function."));
            return false;
          }

          return /*#__PURE__*/_react.default.createElement(_UserlandBoundary.default, {
            type: "render of ".concat(type)
          }, render);
        } else {
          return function () {
            for (var _len3 = arguments.length, renderTimeArgs = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
              renderTimeArgs[_key3] = arguments[_key3];
            }

            return /*#__PURE__*/_react.default.createElement(_UserlandBoundary.default, {
              type: "render of ".concat(type)
            }, function () {
              try {
                var element = render.apply(void 0, renderTimeArgs);

                if (strict && ! /*#__PURE__*/(0, _react.isValidElement)(element)) {
                  console.error("botframework-webchat: ".concat(type, " should return React element only."));
                }

                return element;
              } catch (err) {
                return /*#__PURE__*/_react.default.createElement(_ErrorBox.default, {
                  error: err,
                  type: type
                });
              }
            });
          };
        }
      } catch (err) {
        return /*#__PURE__*/_react.default.createElement(_ErrorBox.default, {
          error: err,
          type: type
        });
      }
    };
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ob29rcy9taWRkbGV3YXJlL2FwcGx5TWlkZGxld2FyZS5qcyJdLCJuYW1lcyI6WyJhcHBseU1pZGRsZXdhcmUiLCJ0eXBlIiwibWlkZGxld2FyZSIsImNvbmNhdE1pZGRsZXdhcmUiLCJFcnJvciIsImZvclJlbmRlcmVyIiwic3RyaWN0IiwicnVuTWlkZGxld2FyZSIsInJlbmRlciIsImNvbnNvbGUiLCJlcnJvciIsInJlbmRlclRpbWVBcmdzIiwiZWxlbWVudCIsImVyciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOztBQUVBOztBQUNBOztBQUNBOzs7Ozs7OztBQUVlLFNBQVNBLGVBQVQsQ0FBeUJDLElBQXpCLEVBQThDO0FBQUEsb0NBQVpDLFVBQVk7QUFBWkEsSUFBQUEsVUFBWTtBQUFBOztBQUMzRCxTQUFPO0FBQUEsV0FDTEMsd0NBQW9CRCxVQUFwQiwyQkFBOEMsWUFBTTtBQUNsRCxZQUFNLElBQUlFLEtBQUosaUNBQW1DSCxJQUFuQyxFQUFOO0FBQ0QsS0FGRCxDQURLO0FBQUEsR0FBUDtBQUlEOztBQUVNLFNBQVNJLFdBQVQsQ0FBcUJKLElBQXJCLEVBQW1FO0FBQUEsaUZBQW5CLEVBQW1CO0FBQUEseUJBQXRDSyxNQUFzQztBQUFBLE1BQXRDQSxNQUFzQyw0QkFBN0IsS0FBNkI7O0FBQUEscUNBQVpKLFVBQVk7QUFBWkEsSUFBQUEsVUFBWTtBQUFBOztBQUN4RSxTQUFPLFlBQWtCO0FBQ3ZCLFFBQU1LLGFBQWEsR0FBR0osd0NBQW9CRCxVQUFwQiwyQkFBOEM7QUFBQSwwQkFDbEUsNkJBQUMsaUJBQUQ7QUFBVSxRQUFBLEtBQUssRUFBRSxJQUFJRSxLQUFKLGlDQUFtQ0gsSUFBbkMsRUFBakI7QUFBNkQsUUFBQSxJQUFJLEVBQUVBO0FBQW5FLFFBRGtFO0FBQUEsS0FBOUMsQ0FBdEIsQ0FEdUIsQ0FLdkI7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLFdBQU8sWUFBMkI7QUFDaEMsVUFBSTtBQUNGLFlBQU1PLE1BQU0sR0FBR0QsYUFBYSxNQUFiLG1CQUFmOztBQUVBLFlBQUksQ0FBQ0MsTUFBTCxFQUFhO0FBQ1gsaUJBQU8sS0FBUDtBQUNELFNBRkQsTUFFTyxrQkFBSSwyQkFBZUEsTUFBZixDQUFKLEVBQTRCO0FBQ2pDLGNBQUlGLE1BQUosRUFBWTtBQUNWRyxZQUFBQSxPQUFPLENBQUNDLEtBQVIsaUNBQXVDVCxJQUF2QztBQUVBLG1CQUFPLEtBQVA7QUFDRDs7QUFFRCw4QkFBTyw2QkFBQyx5QkFBRDtBQUFrQixZQUFBLElBQUksc0JBQWVBLElBQWY7QUFBdEIsYUFBOENPLE1BQTlDLENBQVA7QUFDRCxTQVJNLE1BUUE7QUFDTCxpQkFBTztBQUFBLCtDQUFJRyxjQUFKO0FBQUlBLGNBQUFBLGNBQUo7QUFBQTs7QUFBQSxnQ0FDTCw2QkFBQyx5QkFBRDtBQUFrQixjQUFBLElBQUksc0JBQWVWLElBQWY7QUFBdEIsZUFDRyxZQUFNO0FBQ0wsa0JBQUk7QUFDRixvQkFBTVcsT0FBTyxHQUFHSixNQUFNLE1BQU4sU0FBVUcsY0FBVixDQUFoQjs7QUFFQSxvQkFBSUwsTUFBTSxJQUFJLGVBQUMsMkJBQWVNLE9BQWYsQ0FBZixFQUF3QztBQUN0Q0gsa0JBQUFBLE9BQU8sQ0FBQ0MsS0FBUixpQ0FBdUNULElBQXZDO0FBQ0Q7O0FBRUQsdUJBQU9XLE9BQVA7QUFDRCxlQVJELENBUUUsT0FBT0MsR0FBUCxFQUFZO0FBQ1osb0NBQU8sNkJBQUMsaUJBQUQ7QUFBVSxrQkFBQSxLQUFLLEVBQUVBLEdBQWpCO0FBQXNCLGtCQUFBLElBQUksRUFBRVo7QUFBNUIsa0JBQVA7QUFDRDtBQUNGLGFBYkgsQ0FESztBQUFBLFdBQVA7QUFpQkQ7QUFDRixPQWhDRCxDQWdDRSxPQUFPWSxHQUFQLEVBQVk7QUFDWiw0QkFBTyw2QkFBQyxpQkFBRDtBQUFVLFVBQUEsS0FBSyxFQUFFQSxHQUFqQjtBQUFzQixVQUFBLElBQUksRUFBRVo7QUFBNUIsVUFBUDtBQUNEO0FBQ0YsS0FwQ0Q7QUFxQ0QsR0E5Q0Q7QUErQ0QiLCJzb3VyY2VSb290IjoiY29tcG9uZW50Oi8vLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBpc1ZhbGlkRWxlbWVudCB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IGNvbmNhdE1pZGRsZXdhcmUgZnJvbSAnLi9jb25jYXRNaWRkbGV3YXJlJztcbmltcG9ydCBFcnJvckJveCBmcm9tICcuLi9pbnRlcm5hbC9FcnJvckJveCc7XG5pbXBvcnQgVXNlcmxhbmRCb3VuZGFyeSBmcm9tICcuL1VzZXJsYW5kQm91bmRhcnknO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhcHBseU1pZGRsZXdhcmUodHlwZSwgLi4ubWlkZGxld2FyZSkge1xuICByZXR1cm4gKC4uLnNldHVwQXJncykgPT5cbiAgICBjb25jYXRNaWRkbGV3YXJlKC4uLm1pZGRsZXdhcmUpKC4uLnNldHVwQXJncykoKCkgPT4ge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGByZWFjaGVkIHRlcm1pbmF0b3Igb2YgJHt0eXBlfWApO1xuICAgIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9yUmVuZGVyZXIodHlwZSwgeyBzdHJpY3QgPSBmYWxzZSB9ID0ge30sIC4uLm1pZGRsZXdhcmUpIHtcbiAgcmV0dXJuICguLi5zZXR1cEFyZ3MpID0+IHtcbiAgICBjb25zdCBydW5NaWRkbGV3YXJlID0gY29uY2F0TWlkZGxld2FyZSguLi5taWRkbGV3YXJlKSguLi5zZXR1cEFyZ3MpKCgpID0+IChcbiAgICAgIDxFcnJvckJveCBlcnJvcj17bmV3IEVycm9yKGByZWFjaGVkIHRlcm1pbmF0b3Igb2YgJHt0eXBlfWApfSB0eXBlPXt0eXBlfSAvPlxuICAgICkpO1xuXG4gICAgLy8gVGhlIGNyZWF0ZVJlbmRlcmVyQXJncyBpcyBcIndoYXQgdG8gcmVuZGVyXCIsIGZvciBleGFtcGxlLCBhY3Rpdml0eS5cbiAgICAvLyBUaGUgZnVuY3Rpb24gc2hvdWxkIHJldHVybiB3aXRoIG9ubHkgb25lIG9mIHRoZSB0d28gcmVzdWx0czpcbiAgICAvLyAtIFJldHVybnMgYSBmdW5jdGlvbiBpZiB0aGVyZSBpcyBhIHJlbmRlcmVyICpjb21taXR0ZWQqIHRvIHJlbmRlcjtcbiAgICAvLyAtIFJldHVybnMgZmFsc2UgaWYgbm90aGluZyBzaG91bGQgYmUgcmVuZGVyZWQuXG4gICAgcmV0dXJuICguLi5jcmVhdGVSZW5kZXJlckFyZ3MpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlbmRlciA9IHJ1bk1pZGRsZXdhcmUoLi4uY3JlYXRlUmVuZGVyZXJBcmdzKTtcblxuICAgICAgICBpZiAoIXJlbmRlcikge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChpc1ZhbGlkRWxlbWVudChyZW5kZXIpKSB7XG4gICAgICAgICAgaWYgKHN0cmljdCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgYm90ZnJhbWV3b3JrLXdlYmNoYXQ6ICR7dHlwZX0gc2hvdWxkIG9ubHkgcmV0dXJuIGVpdGhlciBmYWxzZSBvciBhIHJlbmRlciBmdW5jdGlvbi5gKTtcblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiA8VXNlcmxhbmRCb3VuZGFyeSB0eXBlPXtgcmVuZGVyIG9mICR7dHlwZX1gfT57cmVuZGVyfTwvVXNlcmxhbmRCb3VuZGFyeT47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuICguLi5yZW5kZXJUaW1lQXJncykgPT4gKFxuICAgICAgICAgICAgPFVzZXJsYW5kQm91bmRhcnkgdHlwZT17YHJlbmRlciBvZiAke3R5cGV9YH0+XG4gICAgICAgICAgICAgIHsoKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSByZW5kZXIoLi4ucmVuZGVyVGltZUFyZ3MpO1xuXG4gICAgICAgICAgICAgICAgICBpZiAoc3RyaWN0ICYmICFpc1ZhbGlkRWxlbWVudChlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBib3RmcmFtZXdvcmstd2ViY2hhdDogJHt0eXBlfSBzaG91bGQgcmV0dXJuIFJlYWN0IGVsZW1lbnQgb25seS5gKTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gPEVycm9yQm94IGVycm9yPXtlcnJ9IHR5cGU9e3R5cGV9IC8+O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIDwvVXNlcmxhbmRCb3VuZGFyeT5cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIDxFcnJvckJveCBlcnJvcj17ZXJyfSB0eXBlPXt0eXBlfSAvPjtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xufVxuIl19