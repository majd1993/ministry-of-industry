"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createDefaultGroupActivityMiddleware;

var _botframeworkWebchatCore = require("botframework-webchat-core");

var SENT = _botframeworkWebchatCore.Constants.ActivityClientState.SENT;

function bin(items, grouping) {
  var lastBin;
  var bins = [];
  var lastItem;
  items.forEach(function (item) {
    if (lastItem && grouping(lastItem, item)) {
      lastBin.push(item);
    } else {
      lastBin = [item];
      bins.push(lastBin);
    }

    lastItem = item;
  });
  return bins;
}

function sending(activity) {
  return activity.from.role === 'user' && activity.channelData && activity.channelData.state !== SENT;
}

function shouldGroupTimestamp(activityX, activityY, groupTimestamp) {
  if (groupTimestamp === false) {
    // Hide timestamp for all activities.
    return true;
  } else if (activityX && activityY) {
    if (sending(activityX) !== sending(activityY)) {
      return false;
    }

    groupTimestamp = typeof groupTimestamp === 'number' ? groupTimestamp : Infinity;
    var timeX = new Date(activityX.timestamp).getTime();
    var timeY = new Date(activityY.timestamp).getTime();
    return Math.abs(timeX - timeY) <= groupTimestamp;
  }

  return false;
}

function createDefaultGroupActivityMiddleware(_ref) {
  var groupTimestamp = _ref.groupTimestamp;
  return function () {
    return function () {
      return function (_ref2) {
        var activities = _ref2.activities;
        return {
          sender: bin(activities, function (x, y) {
            return x.from.role === y.from.role;
          }),
          status: bin(activities, function (x, y) {
            return shouldGroupTimestamp(x, y, groupTimestamp);
          })
        };
      };
    };
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ob29rcy9taWRkbGV3YXJlL2NyZWF0ZURlZmF1bHRHcm91cEFjdGl2aXRpZXNNaWRkbGV3YXJlLmpzIl0sIm5hbWVzIjpbIlNFTlQiLCJDb25zdGFudHMiLCJBY3Rpdml0eUNsaWVudFN0YXRlIiwiYmluIiwiaXRlbXMiLCJncm91cGluZyIsImxhc3RCaW4iLCJiaW5zIiwibGFzdEl0ZW0iLCJmb3JFYWNoIiwiaXRlbSIsInB1c2giLCJzZW5kaW5nIiwiYWN0aXZpdHkiLCJmcm9tIiwicm9sZSIsImNoYW5uZWxEYXRhIiwic3RhdGUiLCJzaG91bGRHcm91cFRpbWVzdGFtcCIsImFjdGl2aXR5WCIsImFjdGl2aXR5WSIsImdyb3VwVGltZXN0YW1wIiwiSW5maW5pdHkiLCJ0aW1lWCIsIkRhdGUiLCJ0aW1lc3RhbXAiLCJnZXRUaW1lIiwidGltZVkiLCJNYXRoIiwiYWJzIiwiY3JlYXRlRGVmYXVsdEdyb3VwQWN0aXZpdHlNaWRkbGV3YXJlIiwiYWN0aXZpdGllcyIsInNlbmRlciIsIngiLCJ5Iiwic3RhdHVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0lBR3lCQSxJLEdBQ3JCQyxrQyxDQURGQyxtQixDQUF1QkYsSTs7QUFHekIsU0FBU0csR0FBVCxDQUFhQyxLQUFiLEVBQW9CQyxRQUFwQixFQUE4QjtBQUM1QixNQUFJQyxPQUFKO0FBQ0EsTUFBTUMsSUFBSSxHQUFHLEVBQWI7QUFDQSxNQUFJQyxRQUFKO0FBRUFKLEVBQUFBLEtBQUssQ0FBQ0ssT0FBTixDQUFjLFVBQUFDLElBQUksRUFBSTtBQUNwQixRQUFJRixRQUFRLElBQUlILFFBQVEsQ0FBQ0csUUFBRCxFQUFXRSxJQUFYLENBQXhCLEVBQTBDO0FBQ3hDSixNQUFBQSxPQUFPLENBQUNLLElBQVIsQ0FBYUQsSUFBYjtBQUNELEtBRkQsTUFFTztBQUNMSixNQUFBQSxPQUFPLEdBQUcsQ0FBQ0ksSUFBRCxDQUFWO0FBQ0FILE1BQUFBLElBQUksQ0FBQ0ksSUFBTCxDQUFVTCxPQUFWO0FBQ0Q7O0FBRURFLElBQUFBLFFBQVEsR0FBR0UsSUFBWDtBQUNELEdBVEQ7QUFXQSxTQUFPSCxJQUFQO0FBQ0Q7O0FBRUQsU0FBU0ssT0FBVCxDQUFpQkMsUUFBakIsRUFBMkI7QUFDekIsU0FBT0EsUUFBUSxDQUFDQyxJQUFULENBQWNDLElBQWQsS0FBdUIsTUFBdkIsSUFBaUNGLFFBQVEsQ0FBQ0csV0FBMUMsSUFBeURILFFBQVEsQ0FBQ0csV0FBVCxDQUFxQkMsS0FBckIsS0FBK0JqQixJQUEvRjtBQUNEOztBQUVELFNBQVNrQixvQkFBVCxDQUE4QkMsU0FBOUIsRUFBeUNDLFNBQXpDLEVBQW9EQyxjQUFwRCxFQUFvRTtBQUNsRSxNQUFJQSxjQUFjLEtBQUssS0FBdkIsRUFBOEI7QUFDNUI7QUFDQSxXQUFPLElBQVA7QUFDRCxHQUhELE1BR08sSUFBSUYsU0FBUyxJQUFJQyxTQUFqQixFQUE0QjtBQUNqQyxRQUFJUixPQUFPLENBQUNPLFNBQUQsQ0FBUCxLQUF1QlAsT0FBTyxDQUFDUSxTQUFELENBQWxDLEVBQStDO0FBQzdDLGFBQU8sS0FBUDtBQUNEOztBQUVEQyxJQUFBQSxjQUFjLEdBQUcsT0FBT0EsY0FBUCxLQUEwQixRQUExQixHQUFxQ0EsY0FBckMsR0FBc0RDLFFBQXZFO0FBRUEsUUFBTUMsS0FBSyxHQUFHLElBQUlDLElBQUosQ0FBU0wsU0FBUyxDQUFDTSxTQUFuQixFQUE4QkMsT0FBOUIsRUFBZDtBQUNBLFFBQU1DLEtBQUssR0FBRyxJQUFJSCxJQUFKLENBQVNKLFNBQVMsQ0FBQ0ssU0FBbkIsRUFBOEJDLE9BQTlCLEVBQWQ7QUFFQSxXQUFPRSxJQUFJLENBQUNDLEdBQUwsQ0FBU04sS0FBSyxHQUFHSSxLQUFqQixLQUEyQk4sY0FBbEM7QUFDRDs7QUFFRCxTQUFPLEtBQVA7QUFDRDs7QUFFYyxTQUFTUyxvQ0FBVCxPQUFrRTtBQUFBLE1BQWxCVCxjQUFrQixRQUFsQkEsY0FBa0I7QUFDL0UsU0FBTztBQUFBLFdBQU07QUFBQSxhQUFNO0FBQUEsWUFBR1UsVUFBSCxTQUFHQSxVQUFIO0FBQUEsZUFBcUI7QUFDdENDLFVBQUFBLE1BQU0sRUFBRTdCLEdBQUcsQ0FBQzRCLFVBQUQsRUFBYSxVQUFDRSxDQUFELEVBQUlDLENBQUo7QUFBQSxtQkFBVUQsQ0FBQyxDQUFDbkIsSUFBRixDQUFPQyxJQUFQLEtBQWdCbUIsQ0FBQyxDQUFDcEIsSUFBRixDQUFPQyxJQUFqQztBQUFBLFdBQWIsQ0FEMkI7QUFFdENvQixVQUFBQSxNQUFNLEVBQUVoQyxHQUFHLENBQUM0QixVQUFELEVBQWEsVUFBQ0UsQ0FBRCxFQUFJQyxDQUFKO0FBQUEsbUJBQVVoQixvQkFBb0IsQ0FBQ2UsQ0FBRCxFQUFJQyxDQUFKLEVBQU9iLGNBQVAsQ0FBOUI7QUFBQSxXQUFiO0FBRjJCLFNBQXJCO0FBQUEsT0FBTjtBQUFBLEtBQU47QUFBQSxHQUFQO0FBSUQiLCJzb3VyY2VSb290IjoiY29tcG9uZW50Oi8vLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0YW50cyB9IGZyb20gJ2JvdGZyYW1ld29yay13ZWJjaGF0LWNvcmUnO1xuXG5jb25zdCB7XG4gIEFjdGl2aXR5Q2xpZW50U3RhdGU6IHsgU0VOVCB9XG59ID0gQ29uc3RhbnRzO1xuXG5mdW5jdGlvbiBiaW4oaXRlbXMsIGdyb3VwaW5nKSB7XG4gIGxldCBsYXN0QmluO1xuICBjb25zdCBiaW5zID0gW107XG4gIGxldCBsYXN0SXRlbTtcblxuICBpdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgIGlmIChsYXN0SXRlbSAmJiBncm91cGluZyhsYXN0SXRlbSwgaXRlbSkpIHtcbiAgICAgIGxhc3RCaW4ucHVzaChpdGVtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGFzdEJpbiA9IFtpdGVtXTtcbiAgICAgIGJpbnMucHVzaChsYXN0QmluKTtcbiAgICB9XG5cbiAgICBsYXN0SXRlbSA9IGl0ZW07XG4gIH0pO1xuXG4gIHJldHVybiBiaW5zO1xufVxuXG5mdW5jdGlvbiBzZW5kaW5nKGFjdGl2aXR5KSB7XG4gIHJldHVybiBhY3Rpdml0eS5mcm9tLnJvbGUgPT09ICd1c2VyJyAmJiBhY3Rpdml0eS5jaGFubmVsRGF0YSAmJiBhY3Rpdml0eS5jaGFubmVsRGF0YS5zdGF0ZSAhPT0gU0VOVDtcbn1cblxuZnVuY3Rpb24gc2hvdWxkR3JvdXBUaW1lc3RhbXAoYWN0aXZpdHlYLCBhY3Rpdml0eVksIGdyb3VwVGltZXN0YW1wKSB7XG4gIGlmIChncm91cFRpbWVzdGFtcCA9PT0gZmFsc2UpIHtcbiAgICAvLyBIaWRlIHRpbWVzdGFtcCBmb3IgYWxsIGFjdGl2aXRpZXMuXG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoYWN0aXZpdHlYICYmIGFjdGl2aXR5WSkge1xuICAgIGlmIChzZW5kaW5nKGFjdGl2aXR5WCkgIT09IHNlbmRpbmcoYWN0aXZpdHlZKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGdyb3VwVGltZXN0YW1wID0gdHlwZW9mIGdyb3VwVGltZXN0YW1wID09PSAnbnVtYmVyJyA/IGdyb3VwVGltZXN0YW1wIDogSW5maW5pdHk7XG5cbiAgICBjb25zdCB0aW1lWCA9IG5ldyBEYXRlKGFjdGl2aXR5WC50aW1lc3RhbXApLmdldFRpbWUoKTtcbiAgICBjb25zdCB0aW1lWSA9IG5ldyBEYXRlKGFjdGl2aXR5WS50aW1lc3RhbXApLmdldFRpbWUoKTtcblxuICAgIHJldHVybiBNYXRoLmFicyh0aW1lWCAtIHRpbWVZKSA8PSBncm91cFRpbWVzdGFtcDtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlRGVmYXVsdEdyb3VwQWN0aXZpdHlNaWRkbGV3YXJlKHsgZ3JvdXBUaW1lc3RhbXAgfSkge1xuICByZXR1cm4gKCkgPT4gKCkgPT4gKHsgYWN0aXZpdGllcyB9KSA9PiAoe1xuICAgIHNlbmRlcjogYmluKGFjdGl2aXRpZXMsICh4LCB5KSA9PiB4LmZyb20ucm9sZSA9PT0geS5mcm9tLnJvbGUpLFxuICAgIHN0YXR1czogYmluKGFjdGl2aXRpZXMsICh4LCB5KSA9PiBzaG91bGRHcm91cFRpbWVzdGFtcCh4LCB5LCBncm91cFRpbWVzdGFtcCkpXG4gIH0pO1xufVxuIl19