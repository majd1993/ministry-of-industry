"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useTrackEvent;

var _react = require("react");

var _createCustomEvent = _interopRequireDefault(require("../utils/createCustomEvent"));

var _isObject = _interopRequireDefault(require("../utils/isObject"));

var _useReadTelemetryDimensions = _interopRequireDefault(require("./internal/useReadTelemetryDimensions"));

var _useWebChatAPIContext2 = _interopRequireDefault(require("./internal/useWebChatAPIContext"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isNonNegativeFiniteNumberOrString(value) {
  return typeof value === 'number' && isFinite(value) && value >= 0 || typeof value === 'string';
}

function useTrackEvent() {
  var _useWebChatAPIContext = (0, _useWebChatAPIContext2.default)(),
      onTelemetry = _useWebChatAPIContext.onTelemetry;

  var readTelemetryDimensions = (0, _useReadTelemetryDimensions.default)();
  var trackEvent = (0, _react.useCallback)(function (level, name, data) {
    if (!name || typeof name !== 'string') {
      return console.warn('botframework-webchat: "name" passed to "useTrackEvent" hook must be a string.');
    }

    if (typeof data !== 'undefined') {
      if ((0, _isObject.default)(data)) {
        if (!Object.values(data).every(function (value) {
          return isNonNegativeFiniteNumberOrString(value);
        })) {
          return console.warn('botframework-webchat: Every value in "data" map passed to "useTrackEvent" hook must be a non-negative finite number or string.');
        }
      } else if (!isNonNegativeFiniteNumberOrString(data)) {
        return console.warn('botframework-webchat: "data" passed to "useTrackEvent" hook must be a non-negative finite number or string.');
      }
    }

    onTelemetry && onTelemetry((0, _createCustomEvent.default)('event', {
      data: data,
      dimensions: readTelemetryDimensions(),
      level: level,
      name: name
    }));
  }, [onTelemetry, readTelemetryDimensions]);
  return (0, _react.useMemo)(function () {
    var info = trackEvent.bind(null, 'info');
    info.debug = trackEvent.bind(null, 'debug');
    info.error = trackEvent.bind(null, 'error');
    info.info = info;
    info.warn = trackEvent.bind(null, 'warn');
    return info;
  }, [trackEvent]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ob29rcy91c2VUcmFja0V2ZW50LmpzIl0sIm5hbWVzIjpbImlzTm9uTmVnYXRpdmVGaW5pdGVOdW1iZXJPclN0cmluZyIsInZhbHVlIiwiaXNGaW5pdGUiLCJ1c2VUcmFja0V2ZW50Iiwib25UZWxlbWV0cnkiLCJyZWFkVGVsZW1ldHJ5RGltZW5zaW9ucyIsInRyYWNrRXZlbnQiLCJsZXZlbCIsIm5hbWUiLCJkYXRhIiwiY29uc29sZSIsIndhcm4iLCJPYmplY3QiLCJ2YWx1ZXMiLCJldmVyeSIsImRpbWVuc2lvbnMiLCJpbmZvIiwiYmluZCIsImRlYnVnIiwiZXJyb3IiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUVBLFNBQVNBLGlDQUFULENBQTJDQyxLQUEzQyxFQUFrRDtBQUNoRCxTQUFRLE9BQU9BLEtBQVAsS0FBaUIsUUFBakIsSUFBNkJDLFFBQVEsQ0FBQ0QsS0FBRCxDQUFyQyxJQUFnREEsS0FBSyxJQUFJLENBQTFELElBQWdFLE9BQU9BLEtBQVAsS0FBaUIsUUFBeEY7QUFDRDs7QUFFYyxTQUFTRSxhQUFULEdBQXlCO0FBQUEsOEJBQ2QscUNBRGM7QUFBQSxNQUM5QkMsV0FEOEIseUJBQzlCQSxXQUQ4Qjs7QUFFdEMsTUFBTUMsdUJBQXVCLEdBQUcsMENBQWhDO0FBRUEsTUFBTUMsVUFBVSxHQUFHLHdCQUNqQixVQUFDQyxLQUFELEVBQVFDLElBQVIsRUFBY0MsSUFBZCxFQUF1QjtBQUNyQixRQUFJLENBQUNELElBQUQsSUFBUyxPQUFPQSxJQUFQLEtBQWdCLFFBQTdCLEVBQXVDO0FBQ3JDLGFBQU9FLE9BQU8sQ0FBQ0MsSUFBUixDQUFhLCtFQUFiLENBQVA7QUFDRDs7QUFFRCxRQUFJLE9BQU9GLElBQVAsS0FBZ0IsV0FBcEIsRUFBaUM7QUFDL0IsVUFBSSx1QkFBU0EsSUFBVCxDQUFKLEVBQW9CO0FBQ2xCLFlBQUksQ0FBQ0csTUFBTSxDQUFDQyxNQUFQLENBQWNKLElBQWQsRUFBb0JLLEtBQXBCLENBQTBCLFVBQUFiLEtBQUs7QUFBQSxpQkFBSUQsaUNBQWlDLENBQUNDLEtBQUQsQ0FBckM7QUFBQSxTQUEvQixDQUFMLEVBQW1GO0FBQ2pGLGlCQUFPUyxPQUFPLENBQUNDLElBQVIsQ0FDTCxnSUFESyxDQUFQO0FBR0Q7QUFDRixPQU5ELE1BTU8sSUFBSSxDQUFDWCxpQ0FBaUMsQ0FBQ1MsSUFBRCxDQUF0QyxFQUE4QztBQUNuRCxlQUFPQyxPQUFPLENBQUNDLElBQVIsQ0FDTCw2R0FESyxDQUFQO0FBR0Q7QUFDRjs7QUFFRFAsSUFBQUEsV0FBVyxJQUNUQSxXQUFXLENBQUMsZ0NBQWtCLE9BQWxCLEVBQTJCO0FBQUVLLE1BQUFBLElBQUksRUFBSkEsSUFBRjtBQUFRTSxNQUFBQSxVQUFVLEVBQUVWLHVCQUF1QixFQUEzQztBQUErQ0UsTUFBQUEsS0FBSyxFQUFMQSxLQUEvQztBQUFzREMsTUFBQUEsSUFBSSxFQUFKQTtBQUF0RCxLQUEzQixDQUFELENBRGI7QUFFRCxHQXRCZ0IsRUF1QmpCLENBQUNKLFdBQUQsRUFBY0MsdUJBQWQsQ0F2QmlCLENBQW5CO0FBMEJBLFNBQU8sb0JBQVEsWUFBTTtBQUNuQixRQUFNVyxJQUFJLEdBQUdWLFVBQVUsQ0FBQ1csSUFBWCxDQUFnQixJQUFoQixFQUFzQixNQUF0QixDQUFiO0FBRUFELElBQUFBLElBQUksQ0FBQ0UsS0FBTCxHQUFhWixVQUFVLENBQUNXLElBQVgsQ0FBZ0IsSUFBaEIsRUFBc0IsT0FBdEIsQ0FBYjtBQUNBRCxJQUFBQSxJQUFJLENBQUNHLEtBQUwsR0FBYWIsVUFBVSxDQUFDVyxJQUFYLENBQWdCLElBQWhCLEVBQXNCLE9BQXRCLENBQWI7QUFDQUQsSUFBQUEsSUFBSSxDQUFDQSxJQUFMLEdBQVlBLElBQVo7QUFDQUEsSUFBQUEsSUFBSSxDQUFDTCxJQUFMLEdBQVlMLFVBQVUsQ0FBQ1csSUFBWCxDQUFnQixJQUFoQixFQUFzQixNQUF0QixDQUFaO0FBRUEsV0FBT0QsSUFBUDtBQUNELEdBVE0sRUFTSixDQUFDVixVQUFELENBVEksQ0FBUDtBQVVEIiwic291cmNlUm9vdCI6ImNvbXBvbmVudDovLy8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IGNyZWF0ZUN1c3RvbUV2ZW50IGZyb20gJy4uL3V0aWxzL2NyZWF0ZUN1c3RvbUV2ZW50JztcbmltcG9ydCBpc09iamVjdCBmcm9tICcuLi91dGlscy9pc09iamVjdCc7XG5pbXBvcnQgdXNlUmVhZFRlbGVtZXRyeURpbWVuc2lvbnMgZnJvbSAnLi9pbnRlcm5hbC91c2VSZWFkVGVsZW1ldHJ5RGltZW5zaW9ucyc7XG5pbXBvcnQgdXNlV2ViQ2hhdEFQSUNvbnRleHQgZnJvbSAnLi9pbnRlcm5hbC91c2VXZWJDaGF0QVBJQ29udGV4dCc7XG5cbmZ1bmN0aW9uIGlzTm9uTmVnYXRpdmVGaW5pdGVOdW1iZXJPclN0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUodmFsdWUpICYmIHZhbHVlID49IDApIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVRyYWNrRXZlbnQoKSB7XG4gIGNvbnN0IHsgb25UZWxlbWV0cnkgfSA9IHVzZVdlYkNoYXRBUElDb250ZXh0KCk7XG4gIGNvbnN0IHJlYWRUZWxlbWV0cnlEaW1lbnNpb25zID0gdXNlUmVhZFRlbGVtZXRyeURpbWVuc2lvbnMoKTtcblxuICBjb25zdCB0cmFja0V2ZW50ID0gdXNlQ2FsbGJhY2soXG4gICAgKGxldmVsLCBuYW1lLCBkYXRhKSA9PiB7XG4gICAgICBpZiAoIW5hbWUgfHwgdHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBjb25zb2xlLndhcm4oJ2JvdGZyYW1ld29yay13ZWJjaGF0OiBcIm5hbWVcIiBwYXNzZWQgdG8gXCJ1c2VUcmFja0V2ZW50XCIgaG9vayBtdXN0IGJlIGEgc3RyaW5nLicpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGRhdGEgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmIChpc09iamVjdChkYXRhKSkge1xuICAgICAgICAgIGlmICghT2JqZWN0LnZhbHVlcyhkYXRhKS5ldmVyeSh2YWx1ZSA9PiBpc05vbk5lZ2F0aXZlRmluaXRlTnVtYmVyT3JTdHJpbmcodmFsdWUpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgJ2JvdGZyYW1ld29yay13ZWJjaGF0OiBFdmVyeSB2YWx1ZSBpbiBcImRhdGFcIiBtYXAgcGFzc2VkIHRvIFwidXNlVHJhY2tFdmVudFwiIGhvb2sgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBmaW5pdGUgbnVtYmVyIG9yIHN0cmluZy4nXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghaXNOb25OZWdhdGl2ZUZpbml0ZU51bWJlck9yU3RyaW5nKGRhdGEpKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICdib3RmcmFtZXdvcmstd2ViY2hhdDogXCJkYXRhXCIgcGFzc2VkIHRvIFwidXNlVHJhY2tFdmVudFwiIGhvb2sgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBmaW5pdGUgbnVtYmVyIG9yIHN0cmluZy4nXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBvblRlbGVtZXRyeSAmJlxuICAgICAgICBvblRlbGVtZXRyeShjcmVhdGVDdXN0b21FdmVudCgnZXZlbnQnLCB7IGRhdGEsIGRpbWVuc2lvbnM6IHJlYWRUZWxlbWV0cnlEaW1lbnNpb25zKCksIGxldmVsLCBuYW1lIH0pKTtcbiAgICB9LFxuICAgIFtvblRlbGVtZXRyeSwgcmVhZFRlbGVtZXRyeURpbWVuc2lvbnNdXG4gICk7XG5cbiAgcmV0dXJuIHVzZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IGluZm8gPSB0cmFja0V2ZW50LmJpbmQobnVsbCwgJ2luZm8nKTtcblxuICAgIGluZm8uZGVidWcgPSB0cmFja0V2ZW50LmJpbmQobnVsbCwgJ2RlYnVnJyk7XG4gICAgaW5mby5lcnJvciA9IHRyYWNrRXZlbnQuYmluZChudWxsLCAnZXJyb3InKTtcbiAgICBpbmZvLmluZm8gPSBpbmZvO1xuICAgIGluZm8ud2FybiA9IHRyYWNrRXZlbnQuYmluZChudWxsLCAnd2FybicpO1xuXG4gICAgcmV0dXJuIGluZm87XG4gIH0sIFt0cmFja0V2ZW50XSk7XG59XG4iXX0=