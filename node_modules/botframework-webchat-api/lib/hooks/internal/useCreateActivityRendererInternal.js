"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useCreateActivityRendererInternal;

var _react = require("react");

var _useRenderAttachment = _interopRequireDefault(require("../useRenderAttachment"));

var _useWebChatAPIContext2 = _interopRequireDefault(require("./useWebChatAPIContext"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function useCreateActivityRendererInternal(renderAttachmentOverride) {
  var _useWebChatAPIContext = (0, _useWebChatAPIContext2.default)(),
      createActivityRenderer = _useWebChatAPIContext.activityRenderer;

  var defaultRenderAttachment = (0, _useRenderAttachment.default)();
  var renderAttachment = renderAttachmentOverride || defaultRenderAttachment;
  return (0, _react.useMemo)(function () {
    return function () {
      var renderActivity = createActivityRenderer.apply(void 0, arguments);

      if (!renderActivity) {
        return false;
      }

      return function (renderActivityOptions) {
        if ( /*#__PURE__*/(0, _react.isValidElement)(renderActivity)) {
          return renderActivity;
        }

        var activityElement = renderActivity(function () {
          return renderAttachment.apply(void 0, arguments);
        }, renderActivityOptions); // "activityElement" cannot be false. If the middleware want to hide the "activityElement", it should return "false" when we call createActivityRenderer().

        activityElement || console.warn('botframework-webchat: To hide an activity, the activity renderer should return false. It should not return a function that will return false when called.');
        return activityElement;
      };
    };
  }, [createActivityRenderer, renderAttachment]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ob29rcy9pbnRlcm5hbC91c2VDcmVhdGVBY3Rpdml0eVJlbmRlcmVySW50ZXJuYWwuanMiXSwibmFtZXMiOlsidXNlQ3JlYXRlQWN0aXZpdHlSZW5kZXJlckludGVybmFsIiwicmVuZGVyQXR0YWNobWVudE92ZXJyaWRlIiwiY3JlYXRlQWN0aXZpdHlSZW5kZXJlciIsImFjdGl2aXR5UmVuZGVyZXIiLCJkZWZhdWx0UmVuZGVyQXR0YWNobWVudCIsInJlbmRlckF0dGFjaG1lbnQiLCJyZW5kZXJBY3Rpdml0eSIsInJlbmRlckFjdGl2aXR5T3B0aW9ucyIsImFjdGl2aXR5RWxlbWVudCIsImNvbnNvbGUiLCJ3YXJuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBRUE7O0FBQ0E7Ozs7QUFFZSxTQUFTQSxpQ0FBVCxDQUEyQ0Msd0JBQTNDLEVBQXFFO0FBQUEsOEJBQzdCLHFDQUQ2QjtBQUFBLE1BQ3hEQyxzQkFEd0QseUJBQzFFQyxnQkFEMEU7O0FBRWxGLE1BQU1DLHVCQUF1QixHQUFHLG1DQUFoQztBQUVBLE1BQU1DLGdCQUFnQixHQUFHSix3QkFBd0IsSUFBSUcsdUJBQXJEO0FBRUEsU0FBTyxvQkFDTDtBQUFBLFdBQU0sWUFBc0M7QUFDMUMsVUFBTUUsY0FBYyxHQUFHSixzQkFBc0IsTUFBdEIsbUJBQXZCOztBQUVBLFVBQUksQ0FBQ0ksY0FBTCxFQUFxQjtBQUNuQixlQUFPLEtBQVA7QUFDRDs7QUFFRCxhQUFPLFVBQUFDLHFCQUFxQixFQUFJO0FBQzlCLDBCQUFJLDJCQUFlRCxjQUFmLENBQUosRUFBb0M7QUFDbEMsaUJBQU9BLGNBQVA7QUFDRDs7QUFFRCxZQUFNRSxlQUFlLEdBQUdGLGNBQWMsQ0FDcEM7QUFBQSxpQkFBNkJELGdCQUFnQixNQUFoQixtQkFBN0I7QUFBQSxTQURvQyxFQUVwQ0UscUJBRm9DLENBQXRDLENBTDhCLENBVTlCOztBQUNBQyxRQUFBQSxlQUFlLElBQ2JDLE9BQU8sQ0FBQ0MsSUFBUixDQUNFLDJKQURGLENBREY7QUFLQSxlQUFPRixlQUFQO0FBQ0QsT0FqQkQ7QUFrQkQsS0F6QkQ7QUFBQSxHQURLLEVBMkJMLENBQUNOLHNCQUFELEVBQXlCRyxnQkFBekIsQ0EzQkssQ0FBUDtBQTZCRCIsInNvdXJjZVJvb3QiOiJjb21wb25lbnQ6Ly8vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNWYWxpZEVsZW1lbnQsIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB1c2VSZW5kZXJBdHRhY2htZW50IGZyb20gJy4uL3VzZVJlbmRlckF0dGFjaG1lbnQnO1xuaW1wb3J0IHVzZVdlYkNoYXRBUElDb250ZXh0IGZyb20gJy4vdXNlV2ViQ2hhdEFQSUNvbnRleHQnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VDcmVhdGVBY3Rpdml0eVJlbmRlcmVySW50ZXJuYWwocmVuZGVyQXR0YWNobWVudE92ZXJyaWRlKSB7XG4gIGNvbnN0IHsgYWN0aXZpdHlSZW5kZXJlcjogY3JlYXRlQWN0aXZpdHlSZW5kZXJlciB9ID0gdXNlV2ViQ2hhdEFQSUNvbnRleHQoKTtcbiAgY29uc3QgZGVmYXVsdFJlbmRlckF0dGFjaG1lbnQgPSB1c2VSZW5kZXJBdHRhY2htZW50KCk7XG5cbiAgY29uc3QgcmVuZGVyQXR0YWNobWVudCA9IHJlbmRlckF0dGFjaG1lbnRPdmVycmlkZSB8fCBkZWZhdWx0UmVuZGVyQXR0YWNobWVudDtcblxuICByZXR1cm4gdXNlTWVtbyhcbiAgICAoKSA9PiAoLi4uY3JlYXRlQWN0aXZpdHlSZW5kZXJlck9wdGlvbnMpID0+IHtcbiAgICAgIGNvbnN0IHJlbmRlckFjdGl2aXR5ID0gY3JlYXRlQWN0aXZpdHlSZW5kZXJlciguLi5jcmVhdGVBY3Rpdml0eVJlbmRlcmVyT3B0aW9ucyk7XG5cbiAgICAgIGlmICghcmVuZGVyQWN0aXZpdHkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVuZGVyQWN0aXZpdHlPcHRpb25zID0+IHtcbiAgICAgICAgaWYgKGlzVmFsaWRFbGVtZW50KHJlbmRlckFjdGl2aXR5KSkge1xuICAgICAgICAgIHJldHVybiByZW5kZXJBY3Rpdml0eTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGFjdGl2aXR5RWxlbWVudCA9IHJlbmRlckFjdGl2aXR5KFxuICAgICAgICAgICguLi5yZW5kZXJBdHRhY2htZW50QXJncykgPT4gcmVuZGVyQXR0YWNobWVudCguLi5yZW5kZXJBdHRhY2htZW50QXJncyksXG4gICAgICAgICAgcmVuZGVyQWN0aXZpdHlPcHRpb25zXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gXCJhY3Rpdml0eUVsZW1lbnRcIiBjYW5ub3QgYmUgZmFsc2UuIElmIHRoZSBtaWRkbGV3YXJlIHdhbnQgdG8gaGlkZSB0aGUgXCJhY3Rpdml0eUVsZW1lbnRcIiwgaXQgc2hvdWxkIHJldHVybiBcImZhbHNlXCIgd2hlbiB3ZSBjYWxsIGNyZWF0ZUFjdGl2aXR5UmVuZGVyZXIoKS5cbiAgICAgICAgYWN0aXZpdHlFbGVtZW50IHx8XG4gICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgJ2JvdGZyYW1ld29yay13ZWJjaGF0OiBUbyBoaWRlIGFuIGFjdGl2aXR5LCB0aGUgYWN0aXZpdHkgcmVuZGVyZXIgc2hvdWxkIHJldHVybiBmYWxzZS4gSXQgc2hvdWxkIG5vdCByZXR1cm4gYSBmdW5jdGlvbiB0aGF0IHdpbGwgcmV0dXJuIGZhbHNlIHdoZW4gY2FsbGVkLidcbiAgICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiBhY3Rpdml0eUVsZW1lbnQ7XG4gICAgICB9O1xuICAgIH0sXG4gICAgW2NyZWF0ZUFjdGl2aXR5UmVuZGVyZXIsIHJlbmRlckF0dGFjaG1lbnRdXG4gICk7XG59XG4iXX0=