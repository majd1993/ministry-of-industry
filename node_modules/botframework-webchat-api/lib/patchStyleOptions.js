"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = patchStyleOptions;

var _defaultStyleOptions = _interopRequireDefault(require("./defaultStyleOptions"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// TODO: [P4] We should add a notice for people who want to use "styleSet" instead of "styleOptions".
//       "styleSet" is actually CSS stylesheet and it is based on the DOM tree.
//       DOM tree may change from time to time, thus, maintaining "styleSet" becomes a constant effort.
function parseBorder(border) {
  var dummyElement = document.createElement('div');
  dummyElement.setAttribute('style', "border: ".concat(border));
  var _dummyElement$style = dummyElement.style,
      color = _dummyElement$style.borderColor,
      style = _dummyElement$style.borderStyle,
      width = _dummyElement$style.borderWidth;
  return {
    color: color,
    style: style,
    width: width
  };
}

var PIXEL_UNIT_PATTERN = /^[0-9]+px$/;

function patchStyleOptions(options, _ref) {
  var groupTimestampFromProps = _ref.groupTimestamp,
      sendTimeoutFromProps = _ref.sendTimeout;

  var patchedOptions = _objectSpread(_objectSpread({}, _defaultStyleOptions.default), options); // Keep this list flat (no nested style) and serializable (no functions)
  // TODO: [P4] Deprecate this code after bump to v5


  var bubbleBorder = patchedOptions.bubbleBorder,
      bubbleFromUserBorder = patchedOptions.bubbleFromUserBorder,
      bubbleFromUserNubOffset = patchedOptions.bubbleFromUserNubOffset,
      bubbleNubOffset = patchedOptions.bubbleNubOffset,
      emojiSet = patchedOptions.emojiSet,
      suggestedActionBorder = patchedOptions.suggestedActionBorder,
      suggestedActionDisabledBorder = patchedOptions.suggestedActionDisabledBorder;

  if (bubbleBorder) {
    console.warn('botframework-webchat: "styleSet.bubbleBorder" is deprecated and will be removed on or after 2020-07-17. Please use "bubbleBorderColor", "bubbleBorderStyle", and, "bubbleBorderWidth.');

    var _parseBorder = parseBorder(bubbleBorder),
        color = _parseBorder.color,
        style = _parseBorder.style,
        width = _parseBorder.width;

    if (color && color !== 'initial') {
      patchedOptions.bubbleBorderColor = color;
    }

    if (style && style !== 'initial') {
      patchedOptions.bubbleBorderStyle = style;
    }

    if (PIXEL_UNIT_PATTERN.test(width)) {
      patchedOptions.bubbleBorderWidth = parseInt(width, 10);
    }
  }

  if (bubbleFromUserBorder) {
    console.warn('botframework-webchat: "styleSet.bubbleFromUserBorder" is deprecated and will be removed on or after 2020-07-17. Please use "bubbleFromUserBorderColor", "bubbleFromUserBorderStyle", and, "bubbleFromUserBorderWidth".');

    var _parseBorder2 = parseBorder(bubbleFromUserBorder),
        _color = _parseBorder2.color,
        _style = _parseBorder2.style,
        _width = _parseBorder2.width;

    if (_color && _color !== 'initial') {
      patchedOptions.bubbleFromUserBorderColor = _color;
    }

    if (_style && _style !== 'initial') {
      patchedOptions.bubbleFromUserBorderStyle = _style;
    }

    if (PIXEL_UNIT_PATTERN.test(_width)) {
      patchedOptions.bubbleFromUserBorderWidth = parseInt(_width, 10);
    }
  }

  if (suggestedActionBorder) {
    console.warn('botframework-webchat: "styleSet.suggestedActionBorder" is deprecated and will be removed on or after 2020-09-11. Please use "suggestedActionBorderColor", "suggestedActionBorderStyle", and, "suggestedActionBorderWidth".');

    var _parseBorder3 = parseBorder(suggestedActionBorder),
        _color2 = _parseBorder3.color,
        _style2 = _parseBorder3.style,
        _width2 = _parseBorder3.width;

    if (_color2 && _color2 !== 'initial') {
      patchedOptions.suggestedActionBorderColor = _color2;
    }

    if (_style2 && _style2 !== 'initial') {
      patchedOptions.suggestedActionBorderStyle = _style2;
    }

    if (PIXEL_UNIT_PATTERN.test(_width2)) {
      patchedOptions.suggestedActionBorderWidth = parseInt(_width2, 10);
    }
  }

  if (suggestedActionDisabledBorder) {
    console.warn('botframework-webcaht: "styleSet.suggestedActionDisabledBorder" is deprecated and will be removed on or after 2020-09-11. Please use "suggestedActionDisabledBorderColor", "suggestedActionDisabledBorderStyle", and, "suggestedActionDisabledBorderWidth".');

    var _parseBorder4 = parseBorder(suggestedActionDisabledBorder),
        _color3 = _parseBorder4.color,
        _style3 = _parseBorder4.style,
        _width3 = _parseBorder4.width;

    if (_color3 && _color3 !== 'initial') {
      patchedOptions.suggestedActionDisabledBorderColor = _color3;
    }

    if (_style3 && _style3 !== 'initial') {
      patchedOptions.suggestedActionDisabledBorderStyle = _style3;
    }

    if (PIXEL_UNIT_PATTERN.test(_width3)) {
      patchedOptions.suggestedActionDisabledBorderWidth = parseInt(_width3, 10);
    }
  }

  if (bubbleFromUserNubOffset === 'top') {
    patchedOptions.bubbleFromUserNubOffset = 0;
  } else if (typeof bubbleFromUserNubOffset !== 'number') {
    patchedOptions.bubbleFromUserNubOffset = -0;
  }

  if (bubbleNubOffset === 'top') {
    patchedOptions.bubbleNubOffset = 0;
  } else if (typeof bubbleNubOffset !== 'number') {
    patchedOptions.bubbleNubOffset = -0;
  }

  if (emojiSet === true) {
    patchedOptions.emojiSet = {
      ':)': '😊',
      ':-)': '😊',
      '(:': '😊',
      '(-:': '😊',
      ':-|': '😐',
      ':|': '😐',
      ':-(': '☹️',
      ':(': '☹️',
      ':-D': '😀',
      ':D': '😀',
      ':-p': '😛',
      ':p': '😛',
      ':-P': '😛',
      ':P': '😛',
      ':-o': '😲',
      ':o': '😲',
      ':O': '😲',
      ':-O': '😲',
      ':-0': '😲',
      ':0': '😲',
      ';-)': '😉',
      ';)': '😉',
      '<3': '❤️',
      '</3': '💔',
      '<\\3': '💔'
    };
  } else if (Object.prototype.toString.call(patchedOptions.emojiSet) !== '[object Object]') {
    console.warn('botframework-webchat: emojiSet must be a boolean or an object with emoticon: emojiValues');
    patchedOptions.emojiSet = false;
  }

  if (typeof groupTimestampFromProps !== 'undefined' && typeof options.groupTimestamp === 'undefined') {
    console.warn('Web Chat: "groupTimestamp" has been moved to "styleOptions". This deprecation migration will be removed on or after January 1 2022.');
    patchedOptions.groupTimestamp = groupTimestampFromProps;
  }

  if (typeof sendTimeoutFromProps !== 'undefined' && typeof options.sendTimeout === 'undefined') {
    console.warn('Web Chat: "sendTimeout" has been moved to "styleOptions". This deprecation migration will be removed on or after January 1 2022.');
    patchedOptions.sendTimeout = sendTimeoutFromProps;
  }

  if (patchedOptions.slowConnectionAfter < 0) {
    console.warn('Web Chat: "slowConnectionAfter" cannot be negative, will set to 0.');
    patchedOptions.slowConnectionAfter = 0;
  }

  return patchedOptions;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,