"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/* eslint no-magic-numbers: "off" */
function fontFamily(fonts) {
  return fonts.map(function (font) {
    return "'".concat(font, "'");
  }).join(', ');
}

var DEFAULT_ACCENT = '#0063B1';
var DEFAULT_SUBTLE = '#767676'; // With contrast 4.5:1 to white

var PADDING_REGULAR = 10;
var DEFAULT_OPTIONS = {
  // Color and paddings
  accent: DEFAULT_ACCENT,
  backgroundColor: 'White',
  cardEmphasisBackgroundColor: '#F0F0F0',
  paddingRegular: PADDING_REGULAR,
  paddingWide: PADDING_REGULAR * 2,
  subtle: DEFAULT_SUBTLE,
  // Word break
  messageActivityWordBreak: 'break-word',
  // 'normal' || 'break-all' || 'break-word' || 'keep-all'
  // Fonts
  fontSizeSmall: '80%',
  monospaceFont: fontFamily(['Consolas', 'Courier New', 'monospace']),
  primaryFont: fontFamily(['Calibri', 'Helvetica Neue', 'Arial', 'sans-serif']),
  // Avatar
  avatarBorderRadius: '50%',
  avatarSize: 40,
  botAvatarBackgroundColor: undefined,
  // defaults to accent color
  botAvatarImage: undefined,
  // Or a string of URL. Can be a data URI or blob.
  botAvatarInitials: undefined,
  // Or a string. Empty strings means it has avatar but not initials inside.
  userAvatarBackgroundColor: undefined,
  // defaults to accent color
  userAvatarImage: undefined,
  // Or a string of URL. Can be a data URI or blob.
  userAvatarInitials: undefined,
  // Or a string. Empty strings means it has avatar but not initials inside.
  showAvatarInGroup: 'status',
  // Or 'sender' or true (on every activity).
  // Bubble
  // TODO: Should we make a bubbleFromBot*
  bubbleBackground: 'White',
  bubbleBorderColor: '#E6E6E6',
  bubbleBorderRadius: 2,
  bubbleBorderStyle: 'solid',
  bubbleBorderWidth: 1,
  bubbleFromUserBackground: 'White',
  bubbleFromUserBorderColor: '#E6E6E6',
  bubbleFromUserBorderRadius: 2,
  bubbleFromUserBorderStyle: 'solid',
  bubbleFromUserBorderWidth: 1,
  bubbleFromUserNubOffset: 0,
  // Either a positive/negative number, or "bottom"
  bubbleFromUserNubSize: undefined,
  // Or a number. 0 means a sharp corner.
  bubbleFromUserTextColor: 'Black',
  bubbleImageHeight: 240,
  bubbleMaxWidth: 480,
  // screen width = 600px
  bubbleMinHeight: 40,
  bubbleMinWidth: 250,
  // min screen width = 300px, Microsoft Edge requires 372px (https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/13621468/)
  bubbleNubOffset: 0,
  // Either a positive/negative number, or "bottom"
  bubbleNubSize: undefined,
  // Or a number. 0 means a sharp corner.
  bubbleTextColor: 'Black',
  // Markdown
  markdownRespectCRLF: true,
  // Rich Cards
  richCardWrapTitle: false,
  // Applies to subtitles as well
  // Root
  rootHeight: '100%',
  rootWidth: '100%',
  rootZIndex: 0,
  // "z-index" for the root container of Web Chat. This will form a new stacking context so "z-index" used in children won't pollute.
  // Scroll to end button
  hideScrollToEndButton: false,
  // Send box
  hideSendBox: false,
  hideUploadButton: false,
  microphoneButtonColorOnDictate: '#F33',
  sendBoxBackground: 'White',
  sendBoxButtonColor: undefined,
  // defaults to subtle
  sendBoxButtonColorOnDisabled: '#CCC',
  sendBoxButtonColorOnFocus: '#333',
  sendBoxButtonColorOnHover: '#333',
  sendBoxDisabledTextColor: undefined,
  // defaults to subtle
  sendBoxHeight: 40,
  sendBoxMaxHeight: 200,
  sendBoxTextColor: 'Black',
  // TODO: We should deprecate this because there isn't an easy way to make the width of the send box narrower than the transcript
  sendBoxBorderBottom: '',
  sendBoxBorderLeft: '',
  sendBoxBorderRight: '',
  sendBoxBorderTop: 'solid 1px #E6E6E6',
  sendBoxPlaceholderColor: undefined,
  // defaults to subtle
  sendBoxTextWrap: false,
  // Visually show spoken text
  showSpokenText: false,
  // Suggested actions
  suggestedActionBackground: 'White',
  suggestedActionBorder: undefined,
  // split into 3, null
  suggestedActionBorderColor: undefined,
  // defaults to accent
  suggestedActionBorderRadius: 0,
  suggestedActionBorderStyle: 'solid',
  suggestedActionBorderWidth: 2,
  suggestedActionDisabledBackground: undefined,
  // defaults to suggestedActionBackground
  suggestedActionDisabledBorder: null,
  suggestedActionDisabledBorderColor: '#E6E6E6',
  suggestedActionDisabledBorderStyle: 'solid',
  suggestedActionDisabledBorderWidth: 2,
  suggestedActionDisabledTextColor: undefined,
  // defaults to subtle
  suggestedActionHeight: 40,
  suggestedActionImageHeight: 20,
  suggestedActionLayout: 'carousel',
  // either 'carousel' or 'stacked'
  suggestedActionTextColor: null,
  // Suggested actions carousel layout
  suggestedActionsCarouselFlipperCursor: null,
  // Cursor when mouse over on flipper
  suggestedActionsCarouselFlipperBoxWidth: 40,
  // Flipper bounding box size
  suggestedActionsCarouselFlipperSize: 20,
  // Flipper visible size
  // Suggested actions stacked layout
  suggestedActionsStackedHeight: undefined,
  // sets the container's max height. defaults to 'auto'
  suggestedActionsStackedOverflow: undefined,
  // defaults to 'auto',
  // Timestamp
  groupTimestamp: true,
  sendTimeout: 20000,
  sendTimeoutForAttachments: 120000,
  timestampColor: undefined,
  // defaults to subtle
  timestampFormat: 'relative',
  // 'absolute'
  // Transcript overlay buttons (e.g. carousel and suggested action flippers, scroll to bottom, etc.)
  newMessagesButtonFontSize: '85%',
  transcriptOverlayButtonBackground: 'rgba(0, 0, 0, .6)',
  transcriptOverlayButtonBackgroundOnFocus: 'rgba(0, 0, 0, .8)',
  transcriptOverlayButtonBackgroundOnHover: 'rgba(0, 0, 0, .8)',
  transcriptOverlayButtonColor: 'White',
  transcriptOverlayButtonColorOnFocus: undefined,
  // defaults to transcriptOverlayButtonColor
  transcriptOverlayButtonColorOnHover: undefined,
  // defaults to transcriptOverlayButtonColor
  // Video
  videoHeight: 270,
  // based on bubbleMaxWidth: 480 / 16 * 9 = 270
  // Connectivity UI
  connectivityIconPadding: PADDING_REGULAR * 1.2,
  connectivityMarginLeftRight: PADDING_REGULAR * 1.4,
  connectivityMarginTopBottom: PADDING_REGULAR * 0.8,
  connectivityTextSize: '75%',
  failedConnectivity: '#C50F1F',
  slowConnectivity: '#EAA300',
  notificationText: '#5E5E5E',
  slowConnectionAfter: 15000,
  typingAnimationBackgroundImage: null,
  typingAnimationDuration: 5000,
  typingAnimationHeight: 20,
  typingAnimationWidth: 64,
  spinnerAnimationBackgroundImage: null,
  spinnerAnimationHeight: 16,
  spinnerAnimationWidth: 16,
  spinnerAnimationPadding: 12,
  enableUploadThumbnail: true,
  uploadThumbnailContentType: 'image/jpeg',
  uploadThumbnailHeight: 360,
  uploadThumbnailQuality: 0.6,
  uploadThumbnailWidth: 720,
  // deprecated; will be removed on or after 2021-02-01
  spinnerAnimationPaddingRight: undefined,
  // Toast UI
  // New debounce timeout value only affects new notifications.
  notificationDebounceTimeout: 400,
  hideToaster: false,
  toasterHeight: 32,
  toasterMaxHeight: 32 * 5,
  toasterSingularMaxHeight: 50,
  toastFontSize: '87.5%',
  toastIconWidth: 36,
  toastSeparatorColor: '#E8EAEC',
  toastTextPadding: 6,
  toastErrorBackgroundColor: '#FDE7E9',
  toastErrorColor: '#A80000',
  toastInfoBackgroundColor: '#CEF1FF',
  toastInfoColor: '#105E7D',
  toastSuccessBackgroundColor: '#DFF6DD',
  toastSuccessColor: '#107C10',
  toastWarnBackgroundColor: '#FFF4CE',
  toastWarnColor: '#3B3A39',
  // Emoji
  emojiSet: true,
  // true || false || { ':)' : 'ðŸ˜Š'}
  // Internal
  internalLiveRegionFadeAfter: 1000
};
var _default = DEFAULT_OPTIONS;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9TdHlsZXMvZGVmYXVsdFN0eWxlT3B0aW9ucy5qcyJdLCJuYW1lcyI6WyJmb250RmFtaWx5IiwiZm9udHMiLCJtYXAiLCJmb250Iiwiam9pbiIsIkRFRkFVTFRfQUNDRU5UIiwiREVGQVVMVF9TVUJUTEUiLCJQQURESU5HX1JFR1VMQVIiLCJERUZBVUxUX09QVElPTlMiLCJhY2NlbnQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJjYXJkRW1waGFzaXNCYWNrZ3JvdW5kQ29sb3IiLCJwYWRkaW5nUmVndWxhciIsInBhZGRpbmdXaWRlIiwic3VidGxlIiwibWVzc2FnZUFjdGl2aXR5V29yZEJyZWFrIiwiZm9udFNpemVTbWFsbCIsIm1vbm9zcGFjZUZvbnQiLCJwcmltYXJ5Rm9udCIsImF2YXRhckJvcmRlclJhZGl1cyIsImF2YXRhclNpemUiLCJib3RBdmF0YXJCYWNrZ3JvdW5kQ29sb3IiLCJ1bmRlZmluZWQiLCJib3RBdmF0YXJJbWFnZSIsImJvdEF2YXRhckluaXRpYWxzIiwidXNlckF2YXRhckJhY2tncm91bmRDb2xvciIsInVzZXJBdmF0YXJJbWFnZSIsInVzZXJBdmF0YXJJbml0aWFscyIsInNob3dBdmF0YXJJbkdyb3VwIiwiYnViYmxlQmFja2dyb3VuZCIsImJ1YmJsZUJvcmRlckNvbG9yIiwiYnViYmxlQm9yZGVyUmFkaXVzIiwiYnViYmxlQm9yZGVyU3R5bGUiLCJidWJibGVCb3JkZXJXaWR0aCIsImJ1YmJsZUZyb21Vc2VyQmFja2dyb3VuZCIsImJ1YmJsZUZyb21Vc2VyQm9yZGVyQ29sb3IiLCJidWJibGVGcm9tVXNlckJvcmRlclJhZGl1cyIsImJ1YmJsZUZyb21Vc2VyQm9yZGVyU3R5bGUiLCJidWJibGVGcm9tVXNlckJvcmRlcldpZHRoIiwiYnViYmxlRnJvbVVzZXJOdWJPZmZzZXQiLCJidWJibGVGcm9tVXNlck51YlNpemUiLCJidWJibGVGcm9tVXNlclRleHRDb2xvciIsImJ1YmJsZUltYWdlSGVpZ2h0IiwiYnViYmxlTWF4V2lkdGgiLCJidWJibGVNaW5IZWlnaHQiLCJidWJibGVNaW5XaWR0aCIsImJ1YmJsZU51Yk9mZnNldCIsImJ1YmJsZU51YlNpemUiLCJidWJibGVUZXh0Q29sb3IiLCJtYXJrZG93blJlc3BlY3RDUkxGIiwicmljaENhcmRXcmFwVGl0bGUiLCJyb290SGVpZ2h0Iiwicm9vdFdpZHRoIiwicm9vdFpJbmRleCIsImhpZGVTY3JvbGxUb0VuZEJ1dHRvbiIsImhpZGVTZW5kQm94IiwiaGlkZVVwbG9hZEJ1dHRvbiIsIm1pY3JvcGhvbmVCdXR0b25Db2xvck9uRGljdGF0ZSIsInNlbmRCb3hCYWNrZ3JvdW5kIiwic2VuZEJveEJ1dHRvbkNvbG9yIiwic2VuZEJveEJ1dHRvbkNvbG9yT25EaXNhYmxlZCIsInNlbmRCb3hCdXR0b25Db2xvck9uRm9jdXMiLCJzZW5kQm94QnV0dG9uQ29sb3JPbkhvdmVyIiwic2VuZEJveERpc2FibGVkVGV4dENvbG9yIiwic2VuZEJveEhlaWdodCIsInNlbmRCb3hNYXhIZWlnaHQiLCJzZW5kQm94VGV4dENvbG9yIiwic2VuZEJveEJvcmRlckJvdHRvbSIsInNlbmRCb3hCb3JkZXJMZWZ0Iiwic2VuZEJveEJvcmRlclJpZ2h0Iiwic2VuZEJveEJvcmRlclRvcCIsInNlbmRCb3hQbGFjZWhvbGRlckNvbG9yIiwic2VuZEJveFRleHRXcmFwIiwic2hvd1Nwb2tlblRleHQiLCJzdWdnZXN0ZWRBY3Rpb25CYWNrZ3JvdW5kIiwic3VnZ2VzdGVkQWN0aW9uQm9yZGVyIiwic3VnZ2VzdGVkQWN0aW9uQm9yZGVyQ29sb3IiLCJzdWdnZXN0ZWRBY3Rpb25Cb3JkZXJSYWRpdXMiLCJzdWdnZXN0ZWRBY3Rpb25Cb3JkZXJTdHlsZSIsInN1Z2dlc3RlZEFjdGlvbkJvcmRlcldpZHRoIiwic3VnZ2VzdGVkQWN0aW9uRGlzYWJsZWRCYWNrZ3JvdW5kIiwic3VnZ2VzdGVkQWN0aW9uRGlzYWJsZWRCb3JkZXIiLCJzdWdnZXN0ZWRBY3Rpb25EaXNhYmxlZEJvcmRlckNvbG9yIiwic3VnZ2VzdGVkQWN0aW9uRGlzYWJsZWRCb3JkZXJTdHlsZSIsInN1Z2dlc3RlZEFjdGlvbkRpc2FibGVkQm9yZGVyV2lkdGgiLCJzdWdnZXN0ZWRBY3Rpb25EaXNhYmxlZFRleHRDb2xvciIsInN1Z2dlc3RlZEFjdGlvbkhlaWdodCIsInN1Z2dlc3RlZEFjdGlvbkltYWdlSGVpZ2h0Iiwic3VnZ2VzdGVkQWN0aW9uTGF5b3V0Iiwic3VnZ2VzdGVkQWN0aW9uVGV4dENvbG9yIiwic3VnZ2VzdGVkQWN0aW9uc0Nhcm91c2VsRmxpcHBlckN1cnNvciIsInN1Z2dlc3RlZEFjdGlvbnNDYXJvdXNlbEZsaXBwZXJCb3hXaWR0aCIsInN1Z2dlc3RlZEFjdGlvbnNDYXJvdXNlbEZsaXBwZXJTaXplIiwic3VnZ2VzdGVkQWN0aW9uc1N0YWNrZWRIZWlnaHQiLCJzdWdnZXN0ZWRBY3Rpb25zU3RhY2tlZE92ZXJmbG93IiwiZ3JvdXBUaW1lc3RhbXAiLCJzZW5kVGltZW91dCIsInNlbmRUaW1lb3V0Rm9yQXR0YWNobWVudHMiLCJ0aW1lc3RhbXBDb2xvciIsInRpbWVzdGFtcEZvcm1hdCIsIm5ld01lc3NhZ2VzQnV0dG9uRm9udFNpemUiLCJ0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkJhY2tncm91bmQiLCJ0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkJhY2tncm91bmRPbkZvY3VzIiwidHJhbnNjcmlwdE92ZXJsYXlCdXR0b25CYWNrZ3JvdW5kT25Ib3ZlciIsInRyYW5zY3JpcHRPdmVybGF5QnV0dG9uQ29sb3IiLCJ0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkNvbG9yT25Gb2N1cyIsInRyYW5zY3JpcHRPdmVybGF5QnV0dG9uQ29sb3JPbkhvdmVyIiwidmlkZW9IZWlnaHQiLCJjb25uZWN0aXZpdHlJY29uUGFkZGluZyIsImNvbm5lY3Rpdml0eU1hcmdpbkxlZnRSaWdodCIsImNvbm5lY3Rpdml0eU1hcmdpblRvcEJvdHRvbSIsImNvbm5lY3Rpdml0eVRleHRTaXplIiwiZmFpbGVkQ29ubmVjdGl2aXR5Iiwic2xvd0Nvbm5lY3Rpdml0eSIsIm5vdGlmaWNhdGlvblRleHQiLCJzbG93Q29ubmVjdGlvbkFmdGVyIiwidHlwaW5nQW5pbWF0aW9uQmFja2dyb3VuZEltYWdlIiwidHlwaW5nQW5pbWF0aW9uRHVyYXRpb24iLCJ0eXBpbmdBbmltYXRpb25IZWlnaHQiLCJ0eXBpbmdBbmltYXRpb25XaWR0aCIsInNwaW5uZXJBbmltYXRpb25CYWNrZ3JvdW5kSW1hZ2UiLCJzcGlubmVyQW5pbWF0aW9uSGVpZ2h0Iiwic3Bpbm5lckFuaW1hdGlvbldpZHRoIiwic3Bpbm5lckFuaW1hdGlvblBhZGRpbmciLCJlbmFibGVVcGxvYWRUaHVtYm5haWwiLCJ1cGxvYWRUaHVtYm5haWxDb250ZW50VHlwZSIsInVwbG9hZFRodW1ibmFpbEhlaWdodCIsInVwbG9hZFRodW1ibmFpbFF1YWxpdHkiLCJ1cGxvYWRUaHVtYm5haWxXaWR0aCIsInNwaW5uZXJBbmltYXRpb25QYWRkaW5nUmlnaHQiLCJub3RpZmljYXRpb25EZWJvdW5jZVRpbWVvdXQiLCJoaWRlVG9hc3RlciIsInRvYXN0ZXJIZWlnaHQiLCJ0b2FzdGVyTWF4SGVpZ2h0IiwidG9hc3RlclNpbmd1bGFyTWF4SGVpZ2h0IiwidG9hc3RGb250U2l6ZSIsInRvYXN0SWNvbldpZHRoIiwidG9hc3RTZXBhcmF0b3JDb2xvciIsInRvYXN0VGV4dFBhZGRpbmciLCJ0b2FzdEVycm9yQmFja2dyb3VuZENvbG9yIiwidG9hc3RFcnJvckNvbG9yIiwidG9hc3RJbmZvQmFja2dyb3VuZENvbG9yIiwidG9hc3RJbmZvQ29sb3IiLCJ0b2FzdFN1Y2Nlc3NCYWNrZ3JvdW5kQ29sb3IiLCJ0b2FzdFN1Y2Nlc3NDb2xvciIsInRvYXN0V2FybkJhY2tncm91bmRDb2xvciIsInRvYXN0V2FybkNvbG9yIiwiZW1vamlTZXQiLCJpbnRlcm5hbExpdmVSZWdpb25GYWRlQWZ0ZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUVBLFNBQVNBLFVBQVQsQ0FBb0JDLEtBQXBCLEVBQTJCO0FBQ3pCLFNBQU9BLEtBQUssQ0FB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QkFBMkIsRUFBRSxHQXZLUDtBQXlLdEJDLEVBQUFBLFdBQVcsRUFBRSxLQXpLUztBQTBLdEJDLEVBQUFBLGFBQWEsRUFBRSxFQTFLTztBQTJLdEJDLEVBQUFBLGdCQUFnQixFQUFFLEtBQUssQ0EzS0Q7QUE0S3RCQyxFQUFBQSx3QkFBd0IsRUFBRSxFQTVLSjtBQTZLdEJDLEVBQUFBLGFBQWEsRUFBRSxPQTdLTztBQThLdEJDLEVBQUFBLGNBQWMsRUFBRSxFQTlLTTtBQStLdEJDLEVBQUFBLG1CQUFtQixFQUFFLFNBL0tDO0FBZ0x0QkMsRUFBQUEsZ0JBQWdCLEVBQUUsQ0FoTEk7QUFrTHRCQyxFQUFBQSx5QkFBeUIsRUFBRSxTQWxMTDtBQW1MdEJDLEVBQUFBLGVBQWUsRUFBRSxTQW5MSztBQW9MdEJDLEVBQUFBLHdCQUF3QixFQUFFLFNBcExKO0FBcUx0QkMsRUFBQUEsY0FBYyxFQUFFLFNBckxNO0FBc0x0QkMsRUFBQUEsMkJBQTJCLEVBQUUsU0F0TFA7QUF1THRCQyxFQUFBQSxpQkFBaUIsRUFBRSxTQXZMRztBQXdMdEJDLEVBQUFBLHdCQUF3QixFQUFFLFNBeExKO0FBeUx0QkMsRUFBQUEsY0FBYyxFQUFFLFNBekxNO0FBMkx0QjtBQUNBQyxFQUFBQSxRQUFRLEVBQUUsSUE1TFk7QUE0TE47QUFFaEI7QUFDQUMsRUFBQUEsMkJBQTJCLEVBQUU7QUEvTFAsQ0FBeEI7ZUFrTWU1SSxlIiwic291cmNlUm9vdCI6ImNvbXBvbmVudDovLy8iLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQgbm8tbWFnaWMtbnVtYmVyczogXCJvZmZcIiAqL1xuXG5mdW5jdGlvbiBmb250RmFtaWx5KGZvbnRzKSB7XG4gIHJldHVybiBmb250cy5tYXAoZm9udCA9PiBgJyR7Zm9udH0nYCkuam9pbignLCAnKTtcbn1cblxuY29uc3QgREVGQVVMVF9BQ0NFTlQgPSAnIzAwNjNCMSc7XG5jb25zdCBERUZBVUxUX1NVQlRMRSA9ICcjNzY3Njc2JzsgLy8gV2l0aCBjb250cmFzdCA0LjU6MSB0byB3aGl0ZVxuY29uc3QgUEFERElOR19SRUdVTEFSID0gMTA7XG5cbmNvbnN0IERFRkFVTFRfT1BUSU9OUyA9IHtcbiAgLy8gQ29sb3IgYW5kIHBhZGRpbmdzXG4gIGFjY2VudDogREVGQVVMVF9BQ0NFTlQsXG4gIGJhY2tncm91bmRDb2xvcjogJ1doaXRlJyxcbiAgY2FyZEVtcGhhc2lzQmFja2dyb3VuZENvbG9yOiAnI0YwRjBGMCcsXG4gIHBhZGRpbmdSZWd1bGFyOiBQQURESU5HX1JFR1VMQVIsXG4gIHBhZGRpbmdXaWRlOiBQQURESU5HX1JFR1VMQVIgKiAyLFxuICBzdWJ0bGU6IERFRkFVTFRfU1VCVExFLFxuXG4gIC8vIFdvcmQgYnJlYWtcbiAgbWVzc2FnZUFjdGl2aXR5V29yZEJyZWFrOiAnYnJlYWstd29yZCcsIC8vICdub3JtYWwnIHx8ICdicmVhay1hbGwnIHx8ICdicmVhay13b3JkJyB8fCAna2VlcC1hbGwnXG5cbiAgLy8gRm9udHNcbiAgZm9udFNpemVTbWFsbDogJzgwJScsXG4gIG1vbm9zcGFjZUZvbnQ6IGZvbnRGYW1pbHkoWydDb25zb2xhcycsICdDb3VyaWVyIE5ldycsICdtb25vc3BhY2UnXSksXG4gIHByaW1hcnlGb250OiBmb250RmFtaWx5KFsnQ2FsaWJyaScsICdIZWx2ZXRpY2EgTmV1ZScsICdBcmlhbCcsICdzYW5zLXNlcmlmJ10pLFxuXG4gIC8vIEF2YXRhclxuICBhdmF0YXJCb3JkZXJSYWRpdXM6ICc1MCUnLFxuICBhdmF0YXJTaXplOiA0MCxcbiAgYm90QXZhdGFyQmFja2dyb3VuZENvbG9yOiB1bmRlZmluZWQsIC8vIGRlZmF1bHRzIHRvIGFjY2VudCBjb2xvclxuICBib3RBdmF0YXJJbWFnZTogdW5kZWZpbmVkLCAvLyBPciBhIHN0cmluZyBvZiBVUkwuIENhbiBiZSBhIGRhdGEgVVJJIG9yIGJsb2IuXG4gIGJvdEF2YXRhckluaXRpYWxzOiB1bmRlZmluZWQsIC8vIE9yIGEgc3RyaW5nLiBFbXB0eSBzdHJpbmdzIG1lYW5zIGl0IGhhcyBhdmF0YXIgYnV0IG5vdCBpbml0aWFscyBpbnNpZGUuXG4gIHVzZXJBdmF0YXJCYWNrZ3JvdW5kQ29sb3I6IHVuZGVmaW5lZCwgLy8gZGVmYXVsdHMgdG8gYWNjZW50IGNvbG9yXG4gIHVzZXJBdmF0YXJJbWFnZTogdW5kZWZpbmVkLCAvLyBPciBhIHN0cmluZyBvZiBVUkwuIENhbiBiZSBhIGRhdGEgVVJJIG9yIGJsb2IuXG4gIHVzZXJBdmF0YXJJbml0aWFsczogdW5kZWZpbmVkLCAvLyBPciBhIHN0cmluZy4gRW1wdHkgc3RyaW5ncyBtZWFucyBpdCBoYXMgYXZhdGFyIGJ1dCBub3QgaW5pdGlhbHMgaW5zaWRlLlxuICBzaG93QXZhdGFySW5Hcm91cDogJ3N0YXR1cycsIC8vIE9yICdzZW5kZXInIG9yIHRydWUgKG9uIGV2ZXJ5IGFjdGl2aXR5KS5cblxuICAvLyBCdWJibGVcbiAgLy8gVE9ETzogU2hvdWxkIHdlIG1ha2UgYSBidWJibGVGcm9tQm90KlxuICBidWJibGVCYWNrZ3JvdW5kOiAnV2hpdGUnLFxuICBidWJibGVCb3JkZXJDb2xvcjogJyNFNkU2RTYnLFxuICBidWJibGVCb3JkZXJSYWRpdXM6IDIsXG4gIGJ1YmJsZUJvcmRlclN0eWxlOiAnc29saWQnLFxuICBidWJibGVCb3JkZXJXaWR0aDogMSxcbiAgYnViYmxlRnJvbVVzZXJCYWNrZ3JvdW5kOiAnV2hpdGUnLFxuICBidWJibGVGcm9tVXNlckJvcmRlckNvbG9yOiAnI0U2RTZFNicsXG4gIGJ1YmJsZUZyb21Vc2VyQm9yZGVyUmFkaXVzOiAyLFxuICBidWJibGVGcm9tVXNlckJvcmRlclN0eWxlOiAnc29saWQnLFxuICBidWJibGVGcm9tVXNlckJvcmRlcldpZHRoOiAxLFxuICBidWJibGVGcm9tVXNlck51Yk9mZnNldDogMCwgLy8gRWl0aGVyIGEgcG9zaXRpdmUvbmVnYXRpdmUgbnVtYmVyLCBvciBcImJvdHRvbVwiXG4gIGJ1YmJsZUZyb21Vc2VyTnViU2l6ZTogdW5kZWZpbmVkLCAvLyBPciBhIG51bWJlci4gMCBtZWFucyBhIHNoYXJwIGNvcm5lci5cbiAgYnViYmxlRnJvbVVzZXJUZXh0Q29sb3I6ICdCbGFjaycsXG4gIGJ1YmJsZUltYWdlSGVpZ2h0OiAyNDAsXG4gIGJ1YmJsZU1heFdpZHRoOiA0ODAsIC8vIHNjcmVlbiB3aWR0aCA9IDYwMHB4XG4gIGJ1YmJsZU1pbkhlaWdodDogNDAsXG4gIGJ1YmJsZU1pbldpZHRoOiAyNTAsIC8vIG1pbiBzY3JlZW4gd2lkdGggPSAzMDBweCwgTWljcm9zb2Z0IEVkZ2UgcmVxdWlyZXMgMzcycHggKGh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vZW4tdXMvbWljcm9zb2Z0LWVkZ2UvcGxhdGZvcm0vaXNzdWVzLzEzNjIxNDY4LylcbiAgYnViYmxlTnViT2Zmc2V0OiAwLCAvLyBFaXRoZXIgYSBwb3NpdGl2ZS9uZWdhdGl2ZSBudW1iZXIsIG9yIFwiYm90dG9tXCJcbiAgYnViYmxlTnViU2l6ZTogdW5kZWZpbmVkLCAvLyBPciBhIG51bWJlci4gMCBtZWFucyBhIHNoYXJwIGNvcm5lci5cbiAgYnViYmxlVGV4dENvbG9yOiAnQmxhY2snLFxuXG4gIC8vIE1hcmtkb3duXG4gIG1hcmtkb3duUmVzcGVjdENSTEY6IHRydWUsXG5cbiAgLy8gUmljaCBDYXJkc1xuICByaWNoQ2FyZFdyYXBUaXRsZTogZmFsc2UsIC8vIEFwcGxpZXMgdG8gc3VidGl0bGVzIGFzIHdlbGxcblxuICAvLyBSb290XG4gIHJvb3RIZWlnaHQ6ICcxMDAlJyxcbiAgcm9vdFdpZHRoOiAnMTAwJScsXG4gIHJvb3RaSW5kZXg6IDAsIC8vIFwiei1pbmRleFwiIGZvciB0aGUgcm9vdCBjb250YWluZXIgb2YgV2ViIENoYXQuIFRoaXMgd2lsbCBmb3JtIGEgbmV3IHN0YWNraW5nIGNvbnRleHQgc28gXCJ6LWluZGV4XCIgdXNlZCBpbiBjaGlsZHJlbiB3b24ndCBwb2xsdXRlLlxuXG4gIC8vIFNjcm9sbCB0byBlbmQgYnV0dG9uXG4gIGhpZGVTY3JvbGxUb0VuZEJ1dHRvbjogZmFsc2UsXG5cbiAgLy8gU2VuZCBib3hcbiAgaGlkZVNlbmRCb3g6IGZhbHNlLFxuICBoaWRlVXBsb2FkQnV0dG9uOiBmYWxzZSxcbiAgbWljcm9waG9uZUJ1dHRvbkNvbG9yT25EaWN0YXRlOiAnI0YzMycsXG4gIHNlbmRCb3hCYWNrZ3JvdW5kOiAnV2hpdGUnLFxuICBzZW5kQm94QnV0dG9uQ29sb3I6IHVuZGVmaW5lZCwgLy8gZGVmYXVsdHMgdG8gc3VidGxlXG4gIHNlbmRCb3hCdXR0b25Db2xvck9uRGlzYWJsZWQ6ICcjQ0NDJyxcbiAgc2VuZEJveEJ1dHRvbkNvbG9yT25Gb2N1czogJyMzMzMnLFxuICBzZW5kQm94QnV0dG9uQ29sb3JPbkhvdmVyOiAnIzMzMycsXG4gIHNlbmRCb3hEaXNhYmxlZFRleHRDb2xvcjogdW5kZWZpbmVkLCAvLyBkZWZhdWx0cyB0byBzdWJ0bGVcbiAgc2VuZEJveEhlaWdodDogNDAsXG4gIHNlbmRCb3hNYXhIZWlnaHQ6IDIwMCxcbiAgc2VuZEJveFRleHRDb2xvcjogJ0JsYWNrJyxcbiAgLy8gVE9ETzogV2Ugc2hvdWxkIGRlcHJlY2F0ZSB0aGlzIGJlY2F1c2UgdGhlcmUgaXNuJ3QgYW4gZWFzeSB3YXkgdG8gbWFrZSB0aGUgd2lkdGggb2YgdGhlIHNlbmQgYm94IG5hcnJvd2VyIHRoYW4gdGhlIHRyYW5zY3JpcHRcbiAgc2VuZEJveEJvcmRlckJvdHRvbTogJycsXG4gIHNlbmRCb3hCb3JkZXJMZWZ0OiAnJyxcbiAgc2VuZEJveEJvcmRlclJpZ2h0OiAnJyxcbiAgc2VuZEJveEJvcmRlclRvcDogJ3NvbGlkIDFweCAjRTZFNkU2JyxcbiAgc2VuZEJveFBsYWNlaG9sZGVyQ29sb3I6IHVuZGVmaW5lZCwgLy8gZGVmYXVsdHMgdG8gc3VidGxlXG4gIHNlbmRCb3hUZXh0V3JhcDogZmFsc2UsXG5cbiAgLy8gVmlzdWFsbHkgc2hvdyBzcG9rZW4gdGV4dFxuICBzaG93U3Bva2VuVGV4dDogZmFsc2UsXG5cbiAgLy8gU3VnZ2VzdGVkIGFjdGlvbnNcbiAgc3VnZ2VzdGVkQWN0aW9uQmFja2dyb3VuZDogJ1doaXRlJyxcbiAgc3VnZ2VzdGVkQWN0aW9uQm9yZGVyOiB1bmRlZmluZWQsIC8vIHNwbGl0IGludG8gMywgbnVsbFxuICBzdWdnZXN0ZWRBY3Rpb25Cb3JkZXJDb2xvcjogdW5kZWZpbmVkLCAvLyBkZWZhdWx0cyB0byBhY2NlbnRcbiAgc3VnZ2VzdGVkQWN0aW9uQm9yZGVyUmFkaXVzOiAwLFxuICBzdWdnZXN0ZWRBY3Rpb25Cb3JkZXJTdHlsZTogJ3NvbGlkJyxcbiAgc3VnZ2VzdGVkQWN0aW9uQm9yZGVyV2lkdGg6IDIsXG4gIHN1Z2dlc3RlZEFjdGlvbkRpc2FibGVkQmFja2dyb3VuZDogdW5kZWZpbmVkLCAvLyBkZWZhdWx0cyB0byBzdWdnZXN0ZWRBY3Rpb25CYWNrZ3JvdW5kXG4gIHN1Z2dlc3RlZEFjdGlvbkRpc2FibGVkQm9yZGVyOiBudWxsLFxuICBzdWdnZXN0ZWRBY3Rpb25EaXNhYmxlZEJvcmRlckNvbG9yOiAnI0U2RTZFNicsXG4gIHN1Z2dlc3RlZEFjdGlvbkRpc2FibGVkQm9yZGVyU3R5bGU6ICdzb2xpZCcsXG4gIHN1Z2dlc3RlZEFjdGlvbkRpc2FibGVkQm9yZGVyV2lkdGg6IDIsXG4gIHN1Z2dlc3RlZEFjdGlvbkRpc2FibGVkVGV4dENvbG9yOiB1bmRlZmluZWQsIC8vIGRlZmF1bHRzIHRvIHN1YnRsZVxuICBzdWdnZXN0ZWRBY3Rpb25IZWlnaHQ6IDQwLFxuICBzdWdnZXN0ZWRBY3Rpb25JbWFnZUhlaWdodDogMjAsXG4gIHN1Z2dlc3RlZEFjdGlvbkxheW91dDogJ2Nhcm91c2VsJywgLy8gZWl0aGVyICdjYXJvdXNlbCcgb3IgJ3N0YWNrZWQnXG4gIHN1Z2dlc3RlZEFjdGlvblRleHRDb2xvcjogbnVsbCxcblxuICAvLyBTdWdnZXN0ZWQgYWN0aW9ucyBjYXJvdXNlbCBsYXlvdXRcbiAgc3VnZ2VzdGVkQWN0aW9uc0Nhcm91c2VsRmxpcHBlckN1cnNvcjogbnVsbCwgLy8gQ3Vyc29yIHdoZW4gbW91c2Ugb3ZlciBvbiBmbGlwcGVyXG4gIHN1Z2dlc3RlZEFjdGlvbnNDYXJvdXNlbEZsaXBwZXJCb3hXaWR0aDogNDAsIC8vIEZsaXBwZXIgYm91bmRpbmcgYm94IHNpemVcbiAgc3VnZ2VzdGVkQWN0aW9uc0Nhcm91c2VsRmxpcHBlclNpemU6IDIwLCAvLyBGbGlwcGVyIHZpc2libGUgc2l6ZVxuXG4gIC8vIFN1Z2dlc3RlZCBhY3Rpb25zIHN0YWNrZWQgbGF5b3V0XG4gIHN1Z2dlc3RlZEFjdGlvbnNTdGFja2VkSGVpZ2h0OiB1bmRlZmluZWQsIC8vIHNldHMgdGhlIGNvbnRhaW5lcidzIG1heCBoZWlnaHQuIGRlZmF1bHRzIHRvICdhdXRvJ1xuICBzdWdnZXN0ZWRBY3Rpb25zU3RhY2tlZE92ZXJmbG93OiB1bmRlZmluZWQsIC8vIGRlZmF1bHRzIHRvICdhdXRvJyxcblxuICAvLyBUaW1lc3RhbXBcbiAgZ3JvdXBUaW1lc3RhbXA6IHRydWUsXG4gIHNlbmRUaW1lb3V0OiAyMDAwMCxcbiAgc2VuZFRpbWVvdXRGb3JBdHRhY2htZW50czogMTIwMDAwLFxuICB0aW1lc3RhbXBDb2xvcjogdW5kZWZpbmVkLCAvLyBkZWZhdWx0cyB0byBzdWJ0bGVcbiAgdGltZXN0YW1wRm9ybWF0OiAncmVsYXRpdmUnLCAvLyAnYWJzb2x1dGUnXG5cbiAgLy8gVHJhbnNjcmlwdCBvdmVybGF5IGJ1dHRvbnMgKGUuZy4gY2Fyb3VzZWwgYW5kIHN1Z2dlc3RlZCBhY3Rpb24gZmxpcHBlcnMsIHNjcm9sbCB0byBib3R0b20sIGV0Yy4pXG4gIG5ld01lc3NhZ2VzQnV0dG9uRm9udFNpemU6ICc4NSUnLFxuICB0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkJhY2tncm91bmQ6ICdyZ2JhKDAsIDAsIDAsIC42KScsXG4gIHRyYW5zY3JpcHRPdmVybGF5QnV0dG9uQmFja2dyb3VuZE9uRm9jdXM6ICdyZ2JhKDAsIDAsIDAsIC44KScsXG4gIHRyYW5zY3JpcHRPdmVybGF5QnV0dG9uQmFja2dyb3VuZE9uSG92ZXI6ICdyZ2JhKDAsIDAsIDAsIC44KScsXG4gIHRyYW5zY3JpcHRPdmVybGF5QnV0dG9uQ29sb3I6ICdXaGl0ZScsXG4gIHRyYW5zY3JpcHRPdmVybGF5QnV0dG9uQ29sb3JPbkZvY3VzOiB1bmRlZmluZWQsIC8vIGRlZmF1bHRzIHRvIHRyYW5zY3JpcHRPdmVybGF5QnV0dG9uQ29sb3JcbiAgdHJhbnNjcmlwdE92ZXJsYXlCdXR0b25Db2xvck9uSG92ZXI6IHVuZGVmaW5lZCwgLy8gZGVmYXVsdHMgdG8gdHJhbnNjcmlwdE92ZXJsYXlCdXR0b25Db2xvclxuXG4gIC8vIFZpZGVvXG4gIHZpZGVvSGVpZ2h0OiAyNzAsIC8vIGJhc2VkIG9uIGJ1YmJsZU1heFdpZHRoOiA0ODAgLyAxNiAqIDkgPSAyNzBcblxuICAvLyBDb25uZWN0aXZpdHkgVUlcbiAgY29ubmVjdGl2aXR5SWNvblBhZGRpbmc6IFBBRERJTkdfUkVHVUxBUiAqIDEuMixcbiAgY29ubmVjdGl2aXR5TWFyZ2luTGVmdFJpZ2h0OiBQQURESU5HX1JFR1VMQVIgKiAxLjQsXG4gIGNvbm5lY3Rpdml0eU1hcmdpblRvcEJvdHRvbTogUEFERElOR19SRUdVTEFSICogMC44LFxuICBjb25uZWN0aXZpdHlUZXh0U2l6ZTogJzc1JScsXG4gIGZhaWxlZENvbm5lY3Rpdml0eTogJyNDNTBGMUYnLFxuICBzbG93Q29ubmVjdGl2aXR5OiAnI0VBQTMwMCcsXG4gIG5vdGlmaWNhdGlvblRleHQ6ICcjNUU1RTVFJyxcbiAgc2xvd0Nvbm5lY3Rpb25BZnRlcjogMTUwMDAsXG5cbiAgdHlwaW5nQW5pbWF0aW9uQmFja2dyb3VuZEltYWdlOiBudWxsLFxuICB0eXBpbmdBbmltYXRpb25EdXJhdGlvbjogNTAwMCxcbiAgdHlwaW5nQW5pbWF0aW9uSGVpZ2h0OiAyMCxcbiAgdHlwaW5nQW5pbWF0aW9uV2lkdGg6IDY0LFxuXG4gIHNwaW5uZXJBbmltYXRpb25CYWNrZ3JvdW5kSW1hZ2U6IG51bGwsXG4gIHNwaW5uZXJBbmltYXRpb25IZWlnaHQ6IDE2LFxuICBzcGlubmVyQW5pbWF0aW9uV2lkdGg6IDE2LFxuICBzcGlubmVyQW5pbWF0aW9uUGFkZGluZzogMTIsXG5cbiAgZW5hYmxlVXBsb2FkVGh1bWJuYWlsOiB0cnVlLFxuICB1cGxvYWRUaHVtYm5haWxDb250ZW50VHlwZTogJ2ltYWdlL2pwZWcnLFxuICB1cGxvYWRUaHVtYm5haWxIZWlnaHQ6IDM2MCxcbiAgdXBsb2FkVGh1bWJuYWlsUXVhbGl0eTogMC42LFxuICB1cGxvYWRUaHVtYm5haWxXaWR0aDogNzIwLFxuXG4gIC8vIGRlcHJlY2F0ZWQ7IHdpbGwgYmUgcmVtb3ZlZCBvbiBvciBhZnRlciAyMDIxLTAyLTAxXG4gIHNwaW5uZXJBbmltYXRpb25QYWRkaW5nUmlnaHQ6IHVuZGVmaW5lZCxcblxuICAvLyBUb2FzdCBVSVxuXG4gIC8vIE5ldyBkZWJvdW5jZSB0aW1lb3V0IHZhbHVlIG9ubHkgYWZmZWN0cyBuZXcgbm90aWZpY2F0aW9ucy5cbiAgbm90aWZpY2F0aW9uRGVib3VuY2VUaW1lb3V0OiA0MDAsXG5cbiAgaGlkZVRvYXN0ZXI6IGZhbHNlLFxuICB0b2FzdGVySGVpZ2h0OiAzMixcbiAgdG9hc3Rlck1heEhlaWdodDogMzIgKiA1LFxuICB0b2FzdGVyU2luZ3VsYXJNYXhIZWlnaHQ6IDUwLFxuICB0b2FzdEZvbnRTaXplOiAnODcuNSUnLFxuICB0b2FzdEljb25XaWR0aDogMzYsXG4gIHRvYXN0U2VwYXJhdG9yQ29sb3I6ICcjRThFQUVDJyxcbiAgdG9hc3RUZXh0UGFkZGluZzogNixcblxuICB0b2FzdEVycm9yQmFja2dyb3VuZENvbG9yOiAnI0ZERTdFOScsXG4gIHRvYXN0RXJyb3JDb2xvcjogJyNBODAwMDAnLFxuICB0b2FzdEluZm9CYWNrZ3JvdW5kQ29sb3I6ICcjQ0VGMUZGJyxcbiAgdG9hc3RJbmZvQ29sb3I6ICcjMTA1RTdEJyxcbiAgdG9hc3RTdWNjZXNzQmFja2dyb3VuZENvbG9yOiAnI0RGRjZERCcsXG4gIHRvYXN0U3VjY2Vzc0NvbG9yOiAnIzEwN0MxMCcsXG4gIHRvYXN0V2FybkJhY2tncm91bmRDb2xvcjogJyNGRkY0Q0UnLFxuICB0b2FzdFdhcm5Db2xvcjogJyMzQjNBMzknLFxuXG4gIC8vIEVtb2ppXG4gIGVtb2ppU2V0OiB0cnVlLCAvLyB0cnVlIHx8IGZhbHNlIHx8IHsgJzopJyA6ICfwn5iKJ31cblxuICAvLyBJbnRlcm5hbFxuICBpbnRlcm5hbExpdmVSZWdpb25GYWRlQWZ0ZXI6IDEwMDBcbn07XG5cbmV4cG9ydCBkZWZhdWx0IERFRkFVTFRfT1BUSU9OUztcbiJdfQ==