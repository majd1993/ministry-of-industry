"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _botframeworkWebchatApi = require("botframework-webchat-api");

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _DownloadIcon = _interopRequireDefault(require("./Assets/DownloadIcon"));

var _ScreenReaderText = _interopRequireDefault(require("../ScreenReaderText"));

var _useStyleSet3 = _interopRequireDefault(require("../hooks/useStyleSet"));

var _useStyleToEmotionObject = _interopRequireDefault(require("../hooks/internal/useStyleToEmotionObject"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useByteFormatter = _botframeworkWebchatApi.hooks.useByteFormatter,
    useDirection = _botframeworkWebchatApi.hooks.useDirection,
    useLocalizer = _botframeworkWebchatApi.hooks.useLocalizer;
var ROOT_STYLE = {
  display: 'flex',
  '& .webchat__fileContent__buttonLink': {
    display: 'flex',
    flex: 1
  },
  '& .webchat__fileContent__badge': {
    display: 'flex',
    flex: 1,
    flexDirection: 'column'
  }
};

var FileContentBadge = function FileContentBadge(_ref) {
  var downloadIcon = _ref.downloadIcon,
      fileName = _ref.fileName,
      size = _ref.size;

  var _useDirection = useDirection(),
      _useDirection2 = _slicedToArray(_useDirection, 1),
      direction = _useDirection2[0];

  var formatByte = useByteFormatter();
  var localizedSize = typeof size === 'number' && formatByte(size);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    "aria-hidden": true,
    className: "webchat__fileContent__badge"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__fileContent__fileName"
  }, fileName), !!localizedSize && /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__fileContent__size"
  }, localizedSize)), downloadIcon && /*#__PURE__*/_react.default.createElement(_DownloadIcon.default, {
    className: (0, _classnames.default)('webchat__fileContent__downloadIcon', direction === 'rtl' && 'webchat__fileContent__downloadIcon--rtl'),
    size: 1.5
  }));
};

FileContentBadge.defaultProps = {
  downloadIcon: false,
  size: undefined
};
FileContentBadge.propTypes = {
  downloadIcon: _propTypes.default.bool,
  fileName: _propTypes.default.string.isRequired,
  size: _propTypes.default.number
};

var FileContent = function FileContent(_ref2) {
  var className = _ref2.className,
      href = _ref2.href,
      fileName = _ref2.fileName,
      size = _ref2.size;

  var _useStyleSet = (0, _useStyleSet3.default)(),
      _useStyleSet2 = _slicedToArray(_useStyleSet, 1),
      fileContentStyleSet = _useStyleSet2[0].fileContent;

  var localize = useLocalizer();
  var localizeBytes = useByteFormatter();
  var rootClassName = (0, _useStyleToEmotionObject.default)()(ROOT_STYLE) + '';
  var localizedSize = typeof size === 'number' && localizeBytes(size);
  var alt = localize(href ? localizedSize ? 'FILE_CONTENT_DOWNLOADABLE_WITH_SIZE_ALT' : 'FILE_CONTENT_DOWNLOADABLE_ALT' : localizedSize ? 'FILE_CONTENT_WITH_SIZE_ALT' : 'FILE_CONTENT_ALT', fileName, localizedSize);
  return /*#__PURE__*/_react.default.createElement("div", {
    "aria-hidden": true,
    className: (0, _classnames.default)('webchat__fileContent', rootClassName, fileContentStyleSet + '', (className || '') + '')
  }, /*#__PURE__*/_react.default.createElement(_ScreenReaderText.default, {
    text: alt
  }), href ? /*#__PURE__*/_react.default.createElement("a", {
    "aria-hidden": true,
    className: "webchat__fileContent__buttonLink",
    download: fileName,
    href: href,
    rel: "noopener noreferrer",
    target: "_blank"
  }, /*#__PURE__*/_react.default.createElement(FileContentBadge, {
    downloadIcon: true,
    fileName: fileName,
    size: size
  })) : /*#__PURE__*/_react.default.createElement(FileContentBadge, {
    downloadIcon: false,
    fileName: fileName,
    size: size
  }));
};

FileContent.defaultProps = {
  className: '',
  href: undefined,
  size: undefined
};
FileContent.propTypes = {
  className: _propTypes.default.string,
  fileName: _propTypes.default.string.isRequired,
  href: _propTypes.default.string,
  size: _propTypes.default.number
};
var _default = FileContent;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,