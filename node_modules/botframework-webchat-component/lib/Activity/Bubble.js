"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _botframeworkWebchatApi = require("botframework-webchat-api");

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _isZeroOrPositive = _interopRequireDefault(require("../Utils/isZeroOrPositive"));

var _useStyleSet3 = _interopRequireDefault(require("../hooks/useStyleSet"));

var _useStyleToEmotionObject = _interopRequireDefault(require("../hooks/internal/useStyleToEmotionObject"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useDirection = _botframeworkWebchatApi.hooks.useDirection,
    useStyleOptions = _botframeworkWebchatApi.hooks.useStyleOptions;
var ROOT_STYLE = {
  '&.webchat__bubble': {
    display: 'flex',
    position: 'relative',
    '& .webchat__bubble__nub-pad': {
      flexShrink: 0
    },
    '& .webchat__bubble__content': {
      flexGrow: 1,
      // This is for hiding content outside of the bubble, for example, content outside of border radius
      overflow: 'hidden'
    }
  }
};

function acuteNubSVG(nubSize, strokeWidth, side) {
  var upSideDown = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

  if (typeof nubSize !== 'number') {
    return false;
  }

  var halfNubSize = nubSize / 2;
  var halfStrokeWidth = strokeWidth / 2; // Horizontally mirror the nub if it is from user

  var horizontalTransform = side === 'bot' ? '' : "translate(".concat(halfNubSize, " 0) scale(-1 1) translate(").concat(-halfNubSize, " 0)"); // Vertically mirror the nub if it is up-side-down

  var verticalTransform = upSideDown ? "translate(0 ".concat(halfNubSize, ") scale(1 -1) translate(0 ").concat(-halfNubSize, ")") : '';
  var p1 = [nubSize, halfStrokeWidth].join(' ');
  var p2 = [strokeWidth, halfStrokeWidth].join(' ');
  var p3 = [nubSize + strokeWidth, nubSize + halfStrokeWidth].join(' ');
  return /*#__PURE__*/_react.default.createElement("svg", {
    className: "webchat__bubble__nub",
    version: "1.1",
    viewBox: "0 0 ".concat(nubSize, " ").concat(nubSize),
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("g", {
    transform: "".concat(horizontalTransform, " ").concat(verticalTransform)
  }, /*#__PURE__*/_react.default.createElement("path", {
    className: "webchat__bubble__nub-outline",
    d: "M".concat(p1, " L").concat(p2, " L").concat(p3)
  })));
}

var Bubble = function Bubble(_ref) {
  var ariaHidden = _ref['aria-hidden'],
      children = _ref.children,
      className = _ref.className,
      fromUser = _ref.fromUser,
      nub = _ref.nub;

  var _useStyleSet = (0, _useStyleSet3.default)(),
      _useStyleSet2 = _slicedToArray(_useStyleSet, 1),
      bubbleStyleSet = _useStyleSet2[0].bubble;

  var _useDirection = useDirection(),
      _useDirection2 = _slicedToArray(_useDirection, 1),
      direction = _useDirection2[0];

  var _useStyleOptions = useStyleOptions(),
      _useStyleOptions2 = _slicedToArray(_useStyleOptions, 1),
      _useStyleOptions2$ = _useStyleOptions2[0],
      bubbleBorderWidth = _useStyleOptions2$.bubbleBorderWidth,
      bubbleFromUserBorderWidth = _useStyleOptions2$.bubbleFromUserBorderWidth,
      bubbleFromUserNubSize = _useStyleOptions2$.bubbleFromUserNubSize,
      bubbleNubSize = _useStyleOptions2$.bubbleNubSize,
      bubbleNubOffset = _useStyleOptions2$.bubbleNubOffset,
      bubbleFromUserNubOffset = _useStyleOptions2$.bubbleFromUserNubOffset;

  var rootClassName = (0, _useStyleToEmotionObject.default)()(ROOT_STYLE) + '';

  var _ref2 = fromUser ? {
    borderWidth: bubbleFromUserBorderWidth,
    nubOffset: bubbleFromUserNubOffset,
    nubSize: bubbleFromUserNubSize,
    side: 'user'
  } : {
    borderWidth: bubbleBorderWidth,
    nubOffset: bubbleNubOffset,
    nubSize: bubbleNubSize,
    side: 'bot'
  },
      borderWidth = _ref2.borderWidth,
      nubOffset = _ref2.nubOffset,
      nubSize = _ref2.nubSize,
      side = _ref2.side;

  return /*#__PURE__*/_react.default.createElement("div", {
    "aria-hidden": ariaHidden,
    className: (0, _classnames.default)('webchat__bubble', {
      'webchat__bubble--from-user': fromUser,
      'webchat__bubble--hide-nub': nub !== true && nub !== false,
      'webchat__bubble--nub-on-top': (0, _isZeroOrPositive.default)(nubOffset),
      'webchat__bubble--rtl': direction === 'rtl',
      'webchat__bubble--show-nub': nub === true
    }, rootClassName, bubbleStyleSet + '', (className || '') + '')
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__bubble__nub-pad"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__bubble__content"
  }, children), nub === true && acuteNubSVG(nubSize, borderWidth, side, !(0, _isZeroOrPositive.default)(nubOffset)));
};

Bubble.defaultProps = {
  'aria-hidden': undefined,
  children: undefined,
  className: '',
  fromUser: false,
  nub: false
};
Bubble.propTypes = {
  'aria-hidden': _propTypes.default.bool,
  children: _propTypes.default.any,
  className: _propTypes.default.string,
  fromUser: _propTypes.default.bool,
  nub: _propTypes.default.oneOf([true, false, 'hidden'])
};
var _default = Bubble;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,