"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMicrophoneButtonDisabled = useMicrophoneButtonDisabled;
exports.useMicrophoneButtonClick = exports.connectMicrophoneButton = exports.default = void 0;

var _botframeworkWebchatCore = require("botframework-webchat-core");

var _botframeworkWebchatApi = require("botframework-webchat-api");

var _classnames = _interopRequireDefault(require("classnames"));

var _memoizeOne = _interopRequireDefault(require("memoize-one"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _connectToWebChat = _interopRequireDefault(require("../connectToWebChat"));

var _IconButton = _interopRequireDefault(require("./IconButton"));

var _MicrophoneIcon = _interopRequireDefault(require("./Assets/MicrophoneIcon"));

var _useDictateAbortable3 = _interopRequireDefault(require("../hooks/useDictateAbortable"));

var _useStyleSet3 = _interopRequireDefault(require("../hooks/useStyleSet"));

var _useStyleToEmotionObject = _interopRequireDefault(require("../hooks/internal/useStyleToEmotionObject"));

var _useWebSpeechPonyfill4 = _interopRequireDefault(require("../hooks/useWebSpeechPonyfill"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var DictateState = _botframeworkWebchatCore.Constants.DictateState;
var useDictateInterims = _botframeworkWebchatApi.hooks.useDictateInterims,
    useDictateState = _botframeworkWebchatApi.hooks.useDictateState,
    useDisabled = _botframeworkWebchatApi.hooks.useDisabled,
    useLocalizer = _botframeworkWebchatApi.hooks.useLocalizer,
    useSendBoxValue = _botframeworkWebchatApi.hooks.useSendBoxValue,
    useShouldSpeakIncomingActivity = _botframeworkWebchatApi.hooks.useShouldSpeakIncomingActivity,
    useStartDictate = _botframeworkWebchatApi.hooks.useStartDictate,
    useStopDictate = _botframeworkWebchatApi.hooks.useStopDictate;
var ROOT_STYLE = {
  display: 'flex',
  height: '100%',
  // .sr-only - This component is intended to be invisible to the visual Web Chat user, but read by the AT when using a screen reader
  '& > .sr-only': {
    color: 'transparent',
    height: 1,
    left: -10000,
    overflow: 'hidden',
    position: 'absolute',
    top: 0,
    whiteSpace: 'nowrap',
    width: 1
  }
};

var connectMicrophoneButton = function connectMicrophoneButton() {
  var primeSpeechSynthesis = (0, _memoizeOne.default)(function (speechSynthesis, SpeechSynthesisUtterance) {
    if (speechSynthesis && SpeechSynthesisUtterance) {
      var utterance = new SpeechSynthesisUtterance('');

      var _speechSynthesis$getV = speechSynthesis.getVoices();

      var _speechSynthesis$getV2 = _slicedToArray(_speechSynthesis$getV, 1);

      utterance.voice = _speechSynthesis$getV2[0];
      speechSynthesis.speak(utterance);
    }
  });

  for (var _len = arguments.length, selectors = new Array(_len), _key = 0; _key < _len; _key++) {
    selectors[_key] = arguments[_key];
  }

  return _connectToWebChat.default.apply(void 0, [function (_ref) {
    var disabled = _ref.disabled,
        dictateInterims = _ref.dictateInterims,
        dictateState = _ref.dictateState,
        language = _ref.language,
        setSendBox = _ref.setSendBox,
        startDictate = _ref.startDictate,
        stopDictate = _ref.stopDictate,
        stopSpeakingActivity = _ref.stopSpeakingActivity,
        _ref$webSpeechPonyfil = _ref.webSpeechPonyfill;
    _ref$webSpeechPonyfil = _ref$webSpeechPonyfil === void 0 ? {} : _ref$webSpeechPonyfil;
    var speechSynthesis = _ref$webSpeechPonyfil.speechSynthesis,
        SpeechSynthesisUtterance = _ref$webSpeechPonyfil.SpeechSynthesisUtterance;
    return {
      click: function click() {
        if (dictateState === DictateState.WILL_START) {
          stopSpeakingActivity();
        } else if (dictateState === DictateState.DICTATING) {
          stopDictate();
          setSendBox(dictateInterims.join(' '));
        } else {
          stopSpeakingActivity();
          startDictate();
        }

        primeSpeechSynthesis(speechSynthesis, SpeechSynthesisUtterance);
      },
      dictating: dictateState === DictateState.DICTATING,
      disabled: disabled || dictateState === DictateState.STARTING && dictateState === DictateState.STOPPING,
      language: language
    };
  }].concat(selectors));
};

exports.connectMicrophoneButton = connectMicrophoneButton;

var useMicrophoneButtonClick = function useMicrophoneButtonClick() {
  var _useSendBoxValue = useSendBoxValue(),
      _useSendBoxValue2 = _slicedToArray(_useSendBoxValue, 2),
      setSendBox = _useSendBoxValue2[1];

  var _useShouldSpeakIncomi = useShouldSpeakIncomingActivity(),
      _useShouldSpeakIncomi2 = _slicedToArray(_useShouldSpeakIncomi, 2),
      setShouldSpeakIncomingActivity = _useShouldSpeakIncomi2[1];

  var _useWebSpeechPonyfill = (0, _useWebSpeechPonyfill4.default)(),
      _useWebSpeechPonyfill2 = _slicedToArray(_useWebSpeechPonyfill, 1),
      _useWebSpeechPonyfill3 = _useWebSpeechPonyfill2[0];

  _useWebSpeechPonyfill3 = _useWebSpeechPonyfill3 === void 0 ? {} : _useWebSpeechPonyfill3;
  var speechSynthesis = _useWebSpeechPonyfill3.speechSynthesis,
      SpeechSynthesisUtterance = _useWebSpeechPonyfill3.SpeechSynthesisUtterance;

  var _useDictateInterims = useDictateInterims(),
      _useDictateInterims2 = _slicedToArray(_useDictateInterims, 1),
      dictateInterims = _useDictateInterims2[0];

  var _useDictateState = useDictateState(),
      _useDictateState2 = _slicedToArray(_useDictateState, 1),
      dictateState = _useDictateState2[0];

  var startDictate = useStartDictate();
  var stopDictate = useStopDictate();

  var _useState = (0, _react.useState)(function () {
    return (0, _memoizeOne.default)(function (speechSynthesis, SpeechSynthesisUtterance) {
      if (speechSynthesis && SpeechSynthesisUtterance) {
        var utterance = new SpeechSynthesisUtterance('');

        var _speechSynthesis$getV3 = speechSynthesis.getVoices();

        var _speechSynthesis$getV4 = _slicedToArray(_speechSynthesis$getV3, 1);

        utterance.voice = _speechSynthesis$getV4[0];
        speechSynthesis.speak(utterance);
      }
    });
  }),
      _useState2 = _slicedToArray(_useState, 1),
      primeSpeechSynthesis = _useState2[0]; // TODO: [P2] We should revisit this function later
  //       The click() logic seems local to the component, but may not be generalized across all implementations.


  return (0, _react.useCallback)(function () {
    if (dictateState === DictateState.WILL_START) {
      setShouldSpeakIncomingActivity(false);
    } else if (dictateState === DictateState.DICTATING) {
      stopDictate();
      setSendBox(dictateInterims.join(' '));
    } else {
      setShouldSpeakIncomingActivity(false);
      startDictate();
    }

    primeSpeechSynthesis(speechSynthesis, SpeechSynthesisUtterance);
  }, [dictateInterims, dictateState, primeSpeechSynthesis, setSendBox, setShouldSpeakIncomingActivity, speechSynthesis, SpeechSynthesisUtterance, startDictate, stopDictate]);
};

exports.useMicrophoneButtonClick = useMicrophoneButtonClick;

function useMicrophoneButtonDisabled() {
  var _useDictateAbortable = (0, _useDictateAbortable3.default)(),
      _useDictateAbortable2 = _slicedToArray(_useDictateAbortable, 1),
      abortable = _useDictateAbortable2[0];

  var _useDictateState3 = useDictateState(),
      _useDictateState4 = _slicedToArray(_useDictateState3, 1),
      dictateState = _useDictateState4[0];

  var _useDisabled = useDisabled(),
      _useDisabled2 = _slicedToArray(_useDisabled, 1),
      disabled = _useDisabled2[0];

  return [disabled || dictateState === DictateState.STARTING || dictateState === DictateState.STOPPING || dictateState === DictateState.DICTATING && !abortable];
}

var MicrophoneButton = function MicrophoneButton(_ref2) {
  var className = _ref2.className;

  var _useStyleSet = (0, _useStyleSet3.default)(),
      _useStyleSet2 = _slicedToArray(_useStyleSet, 1),
      microphoneButtonStyleSet = _useStyleSet2[0].microphoneButton;

  var _useDictateState5 = useDictateState(),
      _useDictateState6 = _slicedToArray(_useDictateState5, 1),
      dictateState = _useDictateState6[0];

  var _useMicrophoneButtonD = useMicrophoneButtonDisabled(),
      _useMicrophoneButtonD2 = _slicedToArray(_useMicrophoneButtonD, 1),
      disabled = _useMicrophoneButtonD2[0];

  var click = useMicrophoneButtonClick();
  var localize = useLocalizer();
  var rootClassName = (0, _useStyleToEmotionObject.default)()(ROOT_STYLE) + '';
  var dictating = dictateState === DictateState.DICTATING;
  return /*#__PURE__*/_react.default.createElement("div", {
    "aria-controls": "webchatSendBoxMicrophoneButton",
    className: (0, _classnames.default)(microphoneButtonStyleSet + '', rootClassName, (className || '') + '', {
      dictating: dictating
    })
  }, /*#__PURE__*/_react.default.createElement(_IconButton.default, {
    alt: localize('TEXT_INPUT_SPEAK_BUTTON_ALT'),
    disabled: disabled,
    onClick: click
  }, /*#__PURE__*/_react.default.createElement(_MicrophoneIcon.default, null)), /*#__PURE__*/_react.default.createElement("div", {
    "aria-live": "polite",
    className: "sr-only",
    id: "webchatSendBoxMicrophoneButton",
    role: "status"
  }, localize(dictating ? 'SPEECH_INPUT_MICROPHONE_BUTTON_OPEN_ALT' : 'SPEECH_INPUT_MICROPHONE_BUTTON_CLOSE_ALT')));
};

MicrophoneButton.defaultProps = {
  className: ''
};
MicrophoneButton.propTypes = {
  className: _propTypes.default.string
};
var _default = MicrophoneButton;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,