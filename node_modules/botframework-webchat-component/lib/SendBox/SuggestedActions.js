"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connectSuggestedActions = exports.default = void 0;

var _botframeworkWebchatApi = require("botframework-webchat-api");

var _reactFilm = _interopRequireWildcard(require("react-film"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _connectToWebChat = _interopRequireDefault(require("../connectToWebChat"));

var _ScreenReaderText = _interopRequireDefault(require("../ScreenReaderText"));

var _SuggestedAction = _interopRequireDefault(require("./SuggestedAction"));

var _useLocalizeAccessKey = _interopRequireDefault(require("../hooks/internal/useLocalizeAccessKey"));

var _useNonce3 = _interopRequireDefault(require("../hooks/internal/useNonce"));

var _useStyleSet3 = _interopRequireDefault(require("../hooks/useStyleSet"));

var _useStyleToEmotionObject = _interopRequireDefault(require("../hooks/internal/useStyleToEmotionObject"));

var _useSuggestedActionsAccessKey = _interopRequireDefault(require("../hooks/internal/useSuggestedActionsAccessKey"));

var _useUniqueId = _interopRequireDefault(require("../hooks/internal/useUniqueId"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useDirection = _botframeworkWebchatApi.hooks.useDirection,
    useLocalizer = _botframeworkWebchatApi.hooks.useLocalizer,
    useStyleOptions = _botframeworkWebchatApi.hooks.useStyleOptions;
var ROOT_STYLE = {
  '&.webchat__suggested-actions .webchat__suggested-actions__stack': {
    display: 'flex',
    flexDirection: 'column'
  }
};

function suggestedActionText(_ref) {
  var displayText = _ref.displayText,
      title = _ref.title,
      type = _ref.type,
      value = _ref.value;

  if (type === 'messageBack') {
    return title || displayText;
  } else if (title) {
    return title;
  } else if (typeof value === 'string') {
    return value;
  }

  return JSON.stringify(value);
}

var connectSuggestedActions = function connectSuggestedActions() {
  for (var _len = arguments.length, selectors = new Array(_len), _key = 0; _key < _len; _key++) {
    selectors[_key] = arguments[_key];
  }

  return _connectToWebChat.default.apply(void 0, [function (_ref2) {
    var language = _ref2.language,
        suggestedActions = _ref2.suggestedActions;
    return {
      language: language,
      suggestedActions: suggestedActions
    };
  }].concat(selectors));
};

exports.connectSuggestedActions = connectSuggestedActions;

var SuggestedActions = function SuggestedActions(_ref3) {
  var className = _ref3.className,
      _ref3$suggestedAction = _ref3.suggestedActions,
      suggestedActions = _ref3$suggestedAction === void 0 ? [] : _ref3$suggestedAction;

  var _useStyleOptions = useStyleOptions(),
      _useStyleOptions2 = _slicedToArray(_useStyleOptions, 1),
      _useStyleOptions2$ = _useStyleOptions2[0],
      suggestedActionLayout = _useStyleOptions2$.suggestedActionLayout,
      suggestedActionsCarouselFlipperBoxWidth = _useStyleOptions2$.suggestedActionsCarouselFlipperBoxWidth,
      suggestedActionsCarouselFlipperCursor = _useStyleOptions2$.suggestedActionsCarouselFlipperCursor,
      suggestedActionsCarouselFlipperSize = _useStyleOptions2$.suggestedActionsCarouselFlipperSize;

  var _useStyleSet = (0, _useStyleSet3.default)(),
      _useStyleSet2 = _slicedToArray(_useStyleSet, 1),
      suggestedActionsStyleSet = _useStyleSet2[0].suggestedActions;

  var _useSuggestedActionsA = (0, _useSuggestedActionsAccessKey.default)(),
      _useSuggestedActionsA2 = _slicedToArray(_useSuggestedActionsA, 1),
      accessKey = _useSuggestedActionsA2[0];

  var _useDirection = useDirection(),
      _useDirection2 = _slicedToArray(_useDirection, 1),
      direction = _useDirection2[0];

  var _useNonce = (0, _useNonce3.default)(),
      _useNonce2 = _slicedToArray(_useNonce, 1),
      nonce = _useNonce2[0];

  var ariaLabelId = (0, _useUniqueId.default)('webchat__suggested-actions');
  var localize = useLocalizer();
  var localizeAccessKey = (0, _useLocalizeAccessKey.default)();
  var rootClassName = (0, _useStyleToEmotionObject.default)()(ROOT_STYLE) + '';
  var filmStyleSet = (0, _react.useMemo)(function () {
    return (0, _reactFilm.createBasicStyleSet)({
      cursor: suggestedActionsCarouselFlipperCursor,
      flipperBoxWidth: suggestedActionsCarouselFlipperBoxWidth,
      flipperSize: suggestedActionsCarouselFlipperSize
    });
  }, [suggestedActionsCarouselFlipperBoxWidth, suggestedActionsCarouselFlipperCursor, suggestedActionsCarouselFlipperSize]);
  var suggestedActionsContainerText = localize('SUGGESTED_ACTIONS_ALT', suggestedActions.length ? accessKey ? localize('SUGGESTED_ACTIONS_ALT_HAS_CONTENT_AND_ACCESS_KEY', localizeAccessKey(accessKey)) : localize('SUGGESTED_ACTIONS_ALT_HAS_CONTENT') : localize('SUGGESTED_ACTIONS_ALT_NO_CONTENT'));

  if (!suggestedActions.length) {
    return /*#__PURE__*/_react.default.createElement("div", {
      "aria-labelledby": ariaLabelId,
      "aria-live": "polite",
      role: "status"
    }, /*#__PURE__*/_react.default.createElement(_ScreenReaderText.default, {
      id: ariaLabelId,
      text: suggestedActionsContainerText
    }));
  }

  var children = suggestedActions.map(function (_ref4, index) {
    var displayText = _ref4.displayText,
        image = _ref4.image,
        imageAltText = _ref4.imageAltText,
        text = _ref4.text,
        title = _ref4.title,
        type = _ref4.type,
        value = _ref4.value;
    return /*#__PURE__*/_react.default.createElement(_SuggestedAction.default, {
      ariaHidden: true,
      buttonText: suggestedActionText({
        displayText: displayText,
        title: title,
        type: type,
        value: value
      }),
      displayText: displayText,
      image: image,
      imageAlt: imageAltText,
      key: index,
      text: text,
      type: type,
      value: value
    });
  });

  if (suggestedActionLayout === 'stacked') {
    return /*#__PURE__*/_react.default.createElement("div", {
      "aria-labelledby": ariaLabelId,
      "aria-live": "polite",
      className: (0, _classnames.default)('webchat__suggested-actions', rootClassName, suggestedActionsStyleSet + '', (className || '') + ''),
      role: "status"
    }, /*#__PURE__*/_react.default.createElement(_ScreenReaderText.default, {
      id: ariaLabelId,
      text: suggestedActionsContainerText
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "webchat__suggested-actions__stack"
    }, children));
  }

  return (
    /*#__PURE__*/
    // TODO: The content of suggested actions should be the labelled by the activity.
    //       That means, when the user focus into the suggested actions, it should read similar to "Bot said, what's your preference of today? Suggested actions has items: apple button, orange button, banana button."
    _react.default.createElement("div", {
      "aria-labelledby": ariaLabelId,
      "aria-live": "polite",
      className: (0, _classnames.default)('webchat__suggested-actions', rootClassName, suggestedActionsStyleSet + '', (className || '') + ''),
      role: "status"
    }, /*#__PURE__*/_react.default.createElement(_ScreenReaderText.default, {
      id: ariaLabelId,
      text: suggestedActionsContainerText
    }), /*#__PURE__*/_react.default.createElement(_reactFilm.default, {
      autoCenter: false,
      className: "webchat__suggested-actions__carousel",
      dir: direction,
      flipperBlurFocusOnClick: true,
      nonce: nonce,
      showDots: false,
      showScrollBar: false,
      styleSet: filmStyleSet
    }, children))
  );
};

SuggestedActions.defaultProps = {
  className: ''
};
SuggestedActions.propTypes = {
  className: _propTypes.default.string,
  suggestedActions: _propTypes.default.arrayOf(_propTypes.default.shape({
    displayText: _propTypes.default.string,
    image: _propTypes.default.string,
    imageAltText: _propTypes.default.string,
    text: _propTypes.default.string,
    title: _propTypes.default.string,
    type: _propTypes.default.string.isRequired,
    value: _propTypes.default.any
  })).isRequired
};

var _default = connectSuggestedActions()(SuggestedActions);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9TZW5kQm94L1N1Z2dlc3RlZEFjdGlvbnMuanMiXSwibmFtZXMiOlsidXNlRGlyZWN0aW9uIiwiaG9va3MiLCJ1c2VMb2NhbGl6ZXIiLCJ1c2VTdHlsZU9wdGlvbnMiLCJST09UX1NUWUxFIiwiZGlzcGxheSIsImZsZXhEaXJlY3Rpb24iLCJzdWdnZXN0ZWRBY3Rpb25UZXh0IiwiZGlzcGxheVRleHQiLCJ0aXRsZSIsInR5cGUiLCJ2YWx1ZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJjb25uZWN0U3VnZ2VzdGVkQWN0aW9ucyIsInNlbGVjdG9ycyIsImNvbm5lY3RUb1dlYkNoYXQiLCJsYW5ndWFnZSIsInN1Z2dlc3RlZEFjdGlvbnMiLCJTdWdnZXN0ZWRBY3Rpb25zIiwiY2xhc3NOYW1lIiwic3VnZ2VzdGVkQWN0aW9uTGF5b3V0Iiwic3VnZ2VzdGVkQWN0aW9uc0Nhcm91c2VsRmxpcHBlckJveFdpZHRoIiwic3VnZ2VzdGVkQWN0aW9uc0Nhcm91c2VsRmxpcHBlckN1cnNvciIsInN1Z2dlc3RlZEFjdGlvbnNDYXJvdXNlbEZsaXBwZXJTaXplIiwic3VnZ2VzdGVkQWN0aW9uc1N0eWxlU2V0IiwiYWNjZXNzS2V5IiwiZGlyZWN0aW9uIiwibm9uY2UiLCJhcmlhTGFiZWxJZCIsImxvY2FsaXplIiwibG9jYWxpemVBY2Nlc3NLZXkiLCJyb290Q2xhc3NOYW1lIiwiZmlsbVN0eWxlU2V0IiwiY3Vyc29yIiwiZmxpcHBlckJveFdpZHRoIiwiZmxpcHBlclNpemUiLCJzdWdnZXN0ZWRBY3Rpb25zQ29udGFpbmVyVGV4dCIsImxlbmd0aCIsImNoaWxkcmVuIiwibWFwIiwiaW5kZXgiLCJpbWFnZSIsImltYWdlQWx0VGV4dCIsInRleHQiLCJkZWZhdWx0UHJvcHMiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJzdHJpbmciLCJhcnJheU9mIiwic2hhcGUiLCJpc1JlcXVpcmVkIiwiYW55Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFFQTs7QUFDQTs7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UDtBQUlFLE1BQUEsdUJBQXVCLEVBQUUsSUFKM0I7QUFLRSxNQUFBLEtBQUssRUFBRUMsS0FMVDtBQU1FLE1BQUEsUUFBUSxFQUFFLEtBTlo7QUFPRSxNQUFBLGFBQWEsRUFBRSxLQVBqQjtBQVFFLE1BQUEsUUFBUSxFQUFFSztBQVJaLE9BVUdNLFFBVkgsQ0FaRjtBQUhGO0FBNkJELENBOUdEOztBQWdIQXBCLGdCQUFnQixDQUFDMEIsWUFBakIsR0FBZ0M7QUFDOUJ6QixFQUFBQSxTQUFTLEVBQUU7QUFEbUIsQ0FBaEM7QUFJQUQsZ0JBQWdCLENBQUMyQixTQUFqQixHQUE2QjtBQUMzQjFCLEVBQUFBLFNBQVMsRUFBRTJCLG1CQUFVQyxNQURNO0FBRTNCOUIsRUFBQUEsZ0JBQWdCLEVBQUU2QixtQkFBVUUsT0FBVixDQUNoQkYsbUJBQVVHLEtBQVYsQ0FBZ0I7QUFDZDFDLElBQUFBLFdBQVcsRUFBRXVDLG1CQUFVQyxNQURUO0FBRWROLElBQUFBLEtBQUssRUFBRUssbUJBQVVDLE1BRkg7QUFHZEwsSUFBQUEsWUFBWSxFQUFFSSxtQkFBVUMsTUFIVjtBQUlkSixJQUFBQSxJQUFJLEVBQUVHLG1CQUFVQyxNQUpGO0FBS2R2QyxJQUFBQSxLQUFLLEVBQUVzQyxtQkFBVUMsTUFMSDtBQU1kdEMsSUFBQUEsSUFBSSxFQUFFcUMsbUJBQVVDLE1BQVYsQ0FBaUJHLFVBTlQ7QUFPZHhDLElBQUFBLEtBQUssRUFBRW9DLG1CQUFVSztBQVBILEdBQWhCLENBRGdCLEVBVWhCRDtBQVp5QixDQUE3Qjs7ZUFlZXJDLHVCQUF1QixHQUFHSyxnQkFBSCxDIiwic291cmNlUm9vdCI6ImNvbXBvbmVudDovLy8iLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQgcmVhY3Qvbm8tYXJyYXktaW5kZXgta2V5OiBcIm9mZlwiICovXG5cbmltcG9ydCB7IGhvb2tzIH0gZnJvbSAnYm90ZnJhbWV3b3JrLXdlYmNoYXQtYXBpJztcbmltcG9ydCBCYXNpY0ZpbG0sIHsgY3JlYXRlQmFzaWNTdHlsZVNldCBhcyBjcmVhdGVCYXNpY1N0eWxlU2V0Rm9yUmVhY3RGaWxtIH0gZnJvbSAncmVhY3QtZmlsbSc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IGNvbm5lY3RUb1dlYkNoYXQgZnJvbSAnLi4vY29ubmVjdFRvV2ViQ2hhdCc7XG5pbXBvcnQgU2NyZWVuUmVhZGVyVGV4dCBmcm9tICcuLi9TY3JlZW5SZWFkZXJUZXh0JztcbmltcG9ydCBTdWdnZXN0ZWRBY3Rpb24gZnJvbSAnLi9TdWdnZXN0ZWRBY3Rpb24nO1xuaW1wb3J0IHVzZUxvY2FsaXplQWNjZXNzS2V5IGZyb20gJy4uL2hvb2tzL2ludGVybmFsL3VzZUxvY2FsaXplQWNjZXNzS2V5JztcbmltcG9ydCB1c2VOb25jZSBmcm9tICcuLi9ob29rcy9pbnRlcm5hbC91c2VOb25jZSc7XG5pbXBvcnQgdXNlU3R5bGVTZXQgZnJvbSAnLi4vaG9va3MvdXNlU3R5bGVTZXQnO1xuaW1wb3J0IHVzZVN0eWxlVG9FbW90aW9uT2JqZWN0IGZyb20gJy4uL2hvb2tzL2ludGVybmFsL3VzZVN0eWxlVG9FbW90aW9uT2JqZWN0JztcbmltcG9ydCB1c2VTdWdnZXN0ZWRBY3Rpb25zQWNjZXNzS2V5IGZyb20gJy4uL2hvb2tzL2ludGVybmFsL3VzZVN1Z2dlc3RlZEFjdGlvbnNBY2Nlc3NLZXknO1xuaW1wb3J0IHVzZVVuaXF1ZUlkIGZyb20gJy4uL2hvb2tzL2ludGVybmFsL3VzZVVuaXF1ZUlkJztcblxuY29uc3QgeyB1c2VEaXJlY3Rpb24sIHVzZUxvY2FsaXplciwgdXNlU3R5bGVPcHRpb25zIH0gPSBob29rcztcblxuY29uc3QgUk9PVF9TVFlMRSA9IHtcbiAgJyYud2ViY2hhdF9fc3VnZ2VzdGVkLWFjdGlvbnMgLndlYmNoYXRfX3N1Z2dlc3RlZC1hY3Rpb25zX19zdGFjayc6IHtcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbidcbiAgfVxufTtcblxuZnVuY3Rpb24gc3VnZ2VzdGVkQWN0aW9uVGV4dCh7IGRpc3BsYXlUZXh0LCB0aXRsZSwgdHlwZSwgdmFsdWUgfSkge1xuICBpZiAodHlwZSA9PT0gJ21lc3NhZ2VCYWNrJykge1xuICAgIHJldHVybiB0aXRsZSB8fCBkaXNwbGF5VGV4dDtcbiAgfSBlbHNlIGlmICh0aXRsZSkge1xuICAgIHJldHVybiB0aXRsZTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbn1cblxuY29uc3QgY29ubmVjdFN1Z2dlc3RlZEFjdGlvbnMgPSAoLi4uc2VsZWN0b3JzKSA9PlxuICBjb25uZWN0VG9XZWJDaGF0KFxuICAgICh7IGxhbmd1YWdlLCBzdWdnZXN0ZWRBY3Rpb25zIH0pID0+ICh7XG4gICAgICBsYW5ndWFnZSxcbiAgICAgIHN1Z2dlc3RlZEFjdGlvbnNcbiAgICB9KSxcbiAgICAuLi5zZWxlY3RvcnNcbiAgKTtcblxuY29uc3QgU3VnZ2VzdGVkQWN0aW9ucyA9ICh7IGNsYXNzTmFtZSwgc3VnZ2VzdGVkQWN0aW9ucyA9IFtdIH0pID0+IHtcbiAgY29uc3QgW1xuICAgIHtcbiAgICAgIHN1Z2dlc3RlZEFjdGlvbkxheW91dCxcbiAgICAgIHN1Z2dlc3RlZEFjdGlvbnNDYXJvdXNlbEZsaXBwZXJCb3hXaWR0aCxcbiAgICAgIHN1Z2dlc3RlZEFjdGlvbnNDYXJvdXNlbEZsaXBwZXJDdXJzb3IsXG4gICAgICBzdWdnZXN0ZWRBY3Rpb25zQ2Fyb3VzZWxGbGlwcGVyU2l6ZVxuICAgIH1cbiAgXSA9IHVzZVN0eWxlT3B0aW9ucygpO1xuICBjb25zdCBbeyBzdWdnZXN0ZWRBY3Rpb25zOiBzdWdnZXN0ZWRBY3Rpb25zU3R5bGVTZXQgfV0gPSB1c2VTdHlsZVNldCgpO1xuICBjb25zdCBbYWNjZXNzS2V5XSA9IHVzZVN1Z2dlc3RlZEFjdGlvbnNBY2Nlc3NLZXkoKTtcbiAgY29uc3QgW2RpcmVjdGlvbl0gPSB1c2VEaXJlY3Rpb24oKTtcbiAgY29uc3QgW25vbmNlXSA9IHVzZU5vbmNlKCk7XG4gIGNvbnN0IGFyaWFMYWJlbElkID0gdXNlVW5pcXVlSWQoJ3dlYmNoYXRfX3N1Z2dlc3RlZC1hY3Rpb25zJyk7XG4gIGNvbnN0IGxvY2FsaXplID0gdXNlTG9jYWxpemVyKCk7XG4gIGNvbnN0IGxvY2FsaXplQWNjZXNzS2V5ID0gdXNlTG9jYWxpemVBY2Nlc3NLZXkoKTtcbiAgY29uc3Qgcm9vdENsYXNzTmFtZSA9IHVzZVN0eWxlVG9FbW90aW9uT2JqZWN0KCkoUk9PVF9TVFlMRSkgKyAnJztcbiAgY29uc3QgZmlsbVN0eWxlU2V0ID0gdXNlTWVtbyhcbiAgICAoKSA9PlxuICAgICAgY3JlYXRlQmFzaWNTdHlsZVNldEZvclJlYWN0RmlsbSh7XG4gICAgICAgIGN1cnNvcjogc3VnZ2VzdGVkQWN0aW9uc0Nhcm91c2VsRmxpcHBlckN1cnNvcixcbiAgICAgICAgZmxpcHBlckJveFdpZHRoOiBzdWdnZXN0ZWRBY3Rpb25zQ2Fyb3VzZWxGbGlwcGVyQm94V2lkdGgsXG4gICAgICAgIGZsaXBwZXJTaXplOiBzdWdnZXN0ZWRBY3Rpb25zQ2Fyb3VzZWxGbGlwcGVyU2l6ZVxuICAgICAgfSksXG4gICAgW1xuICAgICAgc3VnZ2VzdGVkQWN0aW9uc0Nhcm91c2VsRmxpcHBlckJveFdpZHRoLFxuICAgICAgc3VnZ2VzdGVkQWN0aW9uc0Nhcm91c2VsRmxpcHBlckN1cnNvcixcbiAgICAgIHN1Z2dlc3RlZEFjdGlvbnNDYXJvdXNlbEZsaXBwZXJTaXplXG4gICAgXVxuICApO1xuXG4gIGNvbnN0IHN1Z2dlc3RlZEFjdGlvbnNDb250YWluZXJUZXh0ID0gbG9jYWxpemUoXG4gICAgJ1NVR0dFU1RFRF9BQ1RJT05TX0FMVCcsXG4gICAgc3VnZ2VzdGVkQWN0aW9ucy5sZW5ndGhcbiAgICAgID8gYWNjZXNzS2V5XG4gICAgICAgID8gbG9jYWxpemUoJ1NVR0dFU1RFRF9BQ1RJT05TX0FMVF9IQVNfQ09OVEVOVF9BTkRfQUNDRVNTX0tFWScsIGxvY2FsaXplQWNjZXNzS2V5KGFjY2Vzc0tleSkpXG4gICAgICAgIDogbG9jYWxpemUoJ1NVR0dFU1RFRF9BQ1RJT05TX0FMVF9IQVNfQ09OVEVOVCcpXG4gICAgICA6IGxvY2FsaXplKCdTVUdHRVNURURfQUNUSU9OU19BTFRfTk9fQ09OVEVOVCcpXG4gICk7XG5cbiAgaWYgKCFzdWdnZXN0ZWRBY3Rpb25zLmxlbmd0aCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGFyaWEtbGFiZWxsZWRieT17YXJpYUxhYmVsSWR9IGFyaWEtbGl2ZT1cInBvbGl0ZVwiIHJvbGU9XCJzdGF0dXNcIj5cbiAgICAgICAgPFNjcmVlblJlYWRlclRleHQgaWQ9e2FyaWFMYWJlbElkfSB0ZXh0PXtzdWdnZXN0ZWRBY3Rpb25zQ29udGFpbmVyVGV4dH0gLz5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxuICBjb25zdCBjaGlsZHJlbiA9IHN1Z2dlc3RlZEFjdGlvbnMubWFwKCh7IGRpc3BsYXlUZXh0LCBpbWFnZSwgaW1hZ2VBbHRUZXh0LCB0ZXh0LCB0aXRsZSwgdHlwZSwgdmFsdWUgfSwgaW5kZXgpID0+IChcbiAgICA8U3VnZ2VzdGVkQWN0aW9uXG4gICAgICBhcmlhSGlkZGVuPXt0cnVlfVxuICAgICAgYnV0dG9uVGV4dD17c3VnZ2VzdGVkQWN0aW9uVGV4dCh7IGRpc3BsYXlUZXh0LCB0aXRsZSwgdHlwZSwgdmFsdWUgfSl9XG4gICAgICBkaXNwbGF5VGV4dD17ZGlzcGxheVRleHR9XG4gICAgICBpbWFnZT17aW1hZ2V9XG4gICAgICBpbWFnZUFsdD17aW1hZ2VBbHRUZXh0fVxuICAgICAga2V5PXtpbmRleH1cbiAgICAgIHRleHQ9e3RleHR9XG4gICAgICB0eXBlPXt0eXBlfVxuICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgIC8+XG4gICkpO1xuXG4gIGlmIChzdWdnZXN0ZWRBY3Rpb25MYXlvdXQgPT09ICdzdGFja2VkJykge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2XG4gICAgICAgIGFyaWEtbGFiZWxsZWRieT17YXJpYUxhYmVsSWR9XG4gICAgICAgIGFyaWEtbGl2ZT1cInBvbGl0ZVwiXG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcyhcbiAgICAgICAgICAnd2ViY2hhdF9fc3VnZ2VzdGVkLWFjdGlvbnMnLFxuICAgICAgICAgIHJvb3RDbGFzc05hbWUsXG4gICAgICAgICAgc3VnZ2VzdGVkQWN0aW9uc1N0eWxlU2V0ICsgJycsXG4gICAgICAgICAgKGNsYXNzTmFtZSB8fCAnJykgKyAnJ1xuICAgICAgICApfVxuICAgICAgICByb2xlPVwic3RhdHVzXCJcbiAgICAgID5cbiAgICAgICAgPFNjcmVlblJlYWRlclRleHQgaWQ9e2FyaWFMYWJlbElkfSB0ZXh0PXtzdWdnZXN0ZWRBY3Rpb25zQ29udGFpbmVyVGV4dH0gLz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3ZWJjaGF0X19zdWdnZXN0ZWQtYWN0aW9uc19fc3RhY2tcIj57Y2hpbGRyZW59PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICAvLyBUT0RPOiBUaGUgY29udGVudCBvZiBzdWdnZXN0ZWQgYWN0aW9ucyBzaG91bGQgYmUgdGhlIGxhYmVsbGVkIGJ5IHRoZSBhY3Rpdml0eS5cbiAgICAvLyAgICAgICBUaGF0IG1lYW5zLCB3aGVuIHRoZSB1c2VyIGZvY3VzIGludG8gdGhlIHN1Z2dlc3RlZCBhY3Rpb25zLCBpdCBzaG91bGQgcmVhZCBzaW1pbGFyIHRvIFwiQm90IHNhaWQsIHdoYXQncyB5b3VyIHByZWZlcmVuY2Ugb2YgdG9kYXk/IFN1Z2dlc3RlZCBhY3Rpb25zIGhhcyBpdGVtczogYXBwbGUgYnV0dG9uLCBvcmFuZ2UgYnV0dG9uLCBiYW5hbmEgYnV0dG9uLlwiXG4gICAgPGRpdlxuICAgICAgYXJpYS1sYWJlbGxlZGJ5PXthcmlhTGFiZWxJZH1cbiAgICAgIGFyaWEtbGl2ZT1cInBvbGl0ZVwiXG4gICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoXG4gICAgICAgICd3ZWJjaGF0X19zdWdnZXN0ZWQtYWN0aW9ucycsXG4gICAgICAgIHJvb3RDbGFzc05hbWUsXG4gICAgICAgIHN1Z2dlc3RlZEFjdGlvbnNTdHlsZVNldCArICcnLFxuICAgICAgICAoY2xhc3NOYW1lIHx8ICcnKSArICcnXG4gICAgICApfVxuICAgICAgcm9sZT1cInN0YXR1c1wiXG4gICAgPlxuICAgICAgPFNjcmVlblJlYWRlclRleHQgaWQ9e2FyaWFMYWJlbElkfSB0ZXh0PXtzdWdnZXN0ZWRBY3Rpb25zQ29udGFpbmVyVGV4dH0gLz5cbiAgICAgIDxCYXNpY0ZpbG1cbiAgICAgICAgYXV0b0NlbnRlcj17ZmFsc2V9XG4gICAgICAgIGNsYXNzTmFtZT1cIndlYmNoYXRfX3N1Z2dlc3RlZC1hY3Rpb25zX19jYXJvdXNlbFwiXG4gICAgICAgIGRpcj17ZGlyZWN0aW9ufVxuICAgICAgICBmbGlwcGVyQmx1ckZvY3VzT25DbGljaz17dHJ1ZX1cbiAgICAgICAgbm9uY2U9e25vbmNlfVxuICAgICAgICBzaG93RG90cz17ZmFsc2V9XG4gICAgICAgIHNob3dTY3JvbGxCYXI9e2ZhbHNlfVxuICAgICAgICBzdHlsZVNldD17ZmlsbVN0eWxlU2V0fVxuICAgICAgPlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L0Jhc2ljRmlsbT5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cblN1Z2dlc3RlZEFjdGlvbnMuZGVmYXVsdFByb3BzID0ge1xuICBjbGFzc05hbWU6ICcnXG59O1xuXG5TdWdnZXN0ZWRBY3Rpb25zLnByb3BUeXBlcyA9IHtcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzdWdnZXN0ZWRBY3Rpb25zOiBQcm9wVHlwZXMuYXJyYXlPZihcbiAgICBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgZGlzcGxheVRleHQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICBpbWFnZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIGltYWdlQWx0VGV4dDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIHRleHQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICB0aXRsZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgIHZhbHVlOiBQcm9wVHlwZXMuYW55XG4gICAgfSlcbiAgKS5pc1JlcXVpcmVkXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0U3VnZ2VzdGVkQWN0aW9ucygpKFN1Z2dlc3RlZEFjdGlvbnMpO1xuXG5leHBvcnQgeyBjb25uZWN0U3VnZ2VzdGVkQWN0aW9ucyB9O1xuIl19