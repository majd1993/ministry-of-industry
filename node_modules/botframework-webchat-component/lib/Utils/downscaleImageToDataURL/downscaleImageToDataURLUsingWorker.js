"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = downscaleImageToDataURLUsingWorker;
exports.checkSupport = checkSupport;

var _blobToArrayBuffer = _interopRequireDefault(require("./blobToArrayBuffer"));

var _downscaleImageToDataURLUsingWorker = _interopRequireDefault(require("./downscaleImageToDataURLUsingWorker.worker"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function createWorker(fn) {
  var blob = new Blob(["(".concat(fn, ")()")], {
    type: 'text/javascript'
  });
  var url = window.URL.createObjectURL(blob);
  return new Promise(function (resolve, reject) {
    var worker = new Worker(url);

    worker.onerror = function (_ref) {
      var error = _ref.error,
          message = _ref.message;
      return reject(error || new Error(message));
    };

    worker.onmessage = function (_ref2) {
      var data = _ref2.data;
      return data === 'ready' && resolve(worker);
    };
  }).finally(function () {
    window.URL.revokeObjectURL(url);
  });
}

var workerPromise;

function getWorker() {
  return _getWorker.apply(this, arguments);
} // We are using a lazy-check because:
// 1. OffscreenCanvas.getContext has a toll
// 2. Developers could bring polyfills


function _getWorker() {
  _getWorker = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
    var worker;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (!workerPromise) {
              _context3.next = 6;
              break;
            }

            _context3.next = 3;
            return workerPromise;

          case 3:
            worker = _context3.sent;
            _context3.next = 11;
            break;

          case 6:
            workerPromise = createWorker(_downscaleImageToDataURLUsingWorker.default);
            _context3.next = 9;
            return workerPromise;

          case 9:
            worker = _context3.sent;
            worker.addEventListener('error', function () {
              // Current worker errored out, will create a new worker next time.
              workerPromise = null;
              worker.terminate();
            });

          case 11:
            return _context3.abrupt("return", worker);

          case 12:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _getWorker.apply(this, arguments);
}

var checkSupportOffscreenCanvas = function checkSupportOffscreenCanvas() {
  var hasOffscreenCanvas = typeof window.OffscreenCanvas !== 'undefined' && (typeof window.OffscreenCanvas.prototype.convertToBlob !== 'undefined' || typeof window.OffscreenCanvas.prototype.toBlob !== 'undefined');
  var isOffscreenCanvasSupportGetContext2D;

  if (hasOffscreenCanvas) {
    try {
      new OffscreenCanvas(1, 1).getContext('2d');
      isOffscreenCanvasSupportGetContext2D = true;
    } catch (err) {
      isOffscreenCanvasSupportGetContext2D = false;
    }
  }

  return typeof window.createImageBitmap !== 'undefined' && hasOffscreenCanvas && isOffscreenCanvasSupportGetContext2D;
};

var checkSupportWebWorkerPromise;

function checkSupportWebWorker() {
  return checkSupportWebWorkerPromise || (checkSupportWebWorkerPromise = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var worker;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(typeof window.MessageChannel === 'undefined' || typeof window.Worker === 'undefined')) {
              _context.next = 2;
              break;
            }

            return _context.abrupt("return", false);

          case 2:
            _context.prev = 2;
            _context.next = 5;
            return createWorker('function(){postMessage("ready")}');

          case 5:
            worker = _context.sent;
            _context.next = 11;
            break;

          case 8:
            _context.prev = 8;
            _context.t0 = _context["catch"](2);
            return _context.abrupt("return", false);

          case 11:
            worker.terminate();
            return _context.abrupt("return", true);

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[2, 8]]);
  }))());
}

var checkSupportPromise;

function checkSupport() {
  return checkSupportPromise || (checkSupportPromise = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
    var results;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            _context2.next = 3;
            return Promise.all([checkSupportOffscreenCanvas(), checkSupportWebWorker()]);

          case 3:
            results = _context2.sent;
            return _context2.abrupt("return", results.every(function (result) {
              return result;
            }));

          case 7:
            _context2.prev = 7;
            _context2.t0 = _context2["catch"](0);
            return _context2.abrupt("return", false);

          case 10:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[0, 7]]);
  }))());
}

function downscaleImageToDataURLUsingWorker(blob, maxWidth, maxHeight, type, quality) {
  return new Promise(function (resolve, reject) {
    var _MessageChannel = new MessageChannel(),
        port1 = _MessageChannel.port1,
        port2 = _MessageChannel.port2;

    port1.onmessage = function (_ref5) {
      var _ref5$data = _ref5.data,
          error = _ref5$data.error,
          result = _ref5$data.result;

      if (error) {
        var err = new Error(error.message);
        err.stack = error.stack;
        reject(err);
      } else {
        resolve(result);
      }

      port1.close();
      port2.close();
    };

    Promise.all([(0, _blobToArrayBuffer.default)(blob), getWorker()]).then(function (_ref6) {
      var _ref7 = _slicedToArray(_ref6, 2),
          arrayBuffer = _ref7[0],
          worker = _ref7[1];

      return worker.postMessage({
        arrayBuffer: arrayBuffer,
        maxHeight: maxHeight,
        maxWidth: maxWidth,
        quality: quality,
        type: type
      }, [arrayBuffer, port2]);
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,