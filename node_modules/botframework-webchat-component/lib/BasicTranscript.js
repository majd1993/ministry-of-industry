"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _botframeworkWebchatApi = require("botframework-webchat-api");

var _reactScrollToBottom = require("react-scroll-to-bottom");

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _BasicTypingIndicator = _interopRequireDefault(require("./BasicTypingIndicator"));

var _Fade = _interopRequireDefault(require("./Utils/Fade"));

var _firstTabbableDescendant = _interopRequireDefault(require("./Utils/firstTabbableDescendant"));

var _getActivityUniqueId = _interopRequireDefault(require("./Utils/getActivityUniqueId"));

var _intersectionOf = _interopRequireDefault(require("./Utils/intersectionOf"));

var _isZeroOrPositive = _interopRequireDefault(require("./Utils/isZeroOrPositive"));

var _removeInline = _interopRequireDefault(require("./Utils/removeInline"));

var _ScreenReaderActivity = _interopRequireDefault(require("./ScreenReaderActivity"));

var _ScrollToEndButton = _interopRequireDefault(require("./Activity/ScrollToEndButton"));

var _Speak = _interopRequireDefault(require("./Activity/Speak"));

var _useFocus = _interopRequireDefault(require("./hooks/useFocus"));

var _useMemoize = _interopRequireDefault(require("./hooks/internal/useMemoize"));

var _useStyleSet5 = _interopRequireDefault(require("./hooks/useStyleSet"));

var _useStyleToEmotionObject = _interopRequireDefault(require("./hooks/internal/useStyleToEmotionObject"));

var _useTranscriptActivityElementsRef = _interopRequireDefault(require("./hooks/internal/useTranscriptActivityElementsRef"));

var _useTranscriptRootElementRef = _interopRequireDefault(require("./hooks/internal/useTranscriptRootElementRef"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useActivities = _botframeworkWebchatApi.hooks.useActivities,
    useCreateActivityRenderer = _botframeworkWebchatApi.hooks.useCreateActivityRenderer,
    useCreateActivityStatusRenderer = _botframeworkWebchatApi.hooks.useCreateActivityStatusRenderer,
    useCreateAvatarRenderer = _botframeworkWebchatApi.hooks.useCreateAvatarRenderer,
    useDirection = _botframeworkWebchatApi.hooks.useDirection,
    useGroupActivities = _botframeworkWebchatApi.hooks.useGroupActivities,
    useLocalizer = _botframeworkWebchatApi.hooks.useLocalizer,
    useStyleOptions = _botframeworkWebchatApi.hooks.useStyleOptions;
var ROOT_STYLE = {
  '&.webchat__basic-transcript': {
    display: 'flex',
    flexDirection: 'column',
    overflow: 'hidden',
    // Make sure to set "position: relative" here to form another stacking context for the scroll-to-end button.
    // Stacking context help isolating elements that use "z-index" from global pollution.
    // https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context
    position: 'relative',
    '& .webchat__basic-transcript__filler': {
      flex: 1
    },
    '& .webchat__basic-transcript__scrollable': {
      display: 'flex',
      flexDirection: 'column',
      overflowX: 'hidden',
      WebkitOverflowScrolling: 'touch'
    },
    '& .webchat__basic-transcript__transcript': {
      listStyleType: 'none'
    }
  }
};

function nextSiblingAll(element) {
  var children = element.parentNode.children;
  var elementIndex = [].indexOf.call(children, element);
  return [].slice.call(children, elementIndex + 1);
}

function validateAllActivitiesTagged(activities, bins) {
  return activities.every(function (activity) {
    return bins.some(function (bin) {
      return bin.includes(activity);
    });
  });
}

var BasicTranscript = function BasicTranscript(_ref) {
  var className = _ref.className;

  var _useStyleSet = (0, _useStyleSet5.default)(),
      _useStyleSet2 = _slicedToArray(_useStyleSet, 1),
      activityStyleSet = _useStyleSet2[0].activity;

  var _useStyleOptions = useStyleOptions(),
      _useStyleOptions2 = _slicedToArray(_useStyleOptions, 1),
      _useStyleOptions2$ = _useStyleOptions2[0],
      bubbleFromUserNubOffset = _useStyleOptions2$.bubbleFromUserNubOffset,
      bubbleNubOffset = _useStyleOptions2$.bubbleNubOffset,
      groupTimestamp = _useStyleOptions2$.groupTimestamp,
      internalLiveRegionFadeAfter = _useStyleOptions2$.internalLiveRegionFadeAfter,
      showAvatarInGroup = _useStyleOptions2$.showAvatarInGroup;

  var _useActivities = useActivities(),
      _useActivities2 = _slicedToArray(_useActivities, 1),
      activities = _useActivities2[0];

  var _useTranscriptActivit = (0, _useTranscriptActivityElementsRef.default)(),
      _useTranscriptActivit2 = _slicedToArray(_useTranscriptActivit, 1),
      activityElementsRef = _useTranscriptActivit2[0];

  var _useDirection = useDirection(),
      _useDirection2 = _slicedToArray(_useDirection, 1),
      direction = _useDirection2[0];

  var _useTranscriptRootEle = (0, _useTranscriptRootElementRef.default)(),
      _useTranscriptRootEle2 = _slicedToArray(_useTranscriptRootEle, 1),
      rootElementRef = _useTranscriptRootEle2[0];

  var rootClassName = (0, _useStyleToEmotionObject.default)()(ROOT_STYLE) + '';
  var createActivityRenderer = useCreateActivityRenderer();
  var createActivityStatusRenderer = useCreateActivityStatusRenderer();
  var createAvatarRenderer = useCreateAvatarRenderer();
  var groupActivities = useGroupActivities();
  var hideAllTimestamps = groupTimestamp === false;
  var localize = useLocalizer();
  var activityAriaLabel = localize('ACTIVITY_ARIA_LABEL_ALT');
  var transcriptRoleDescription = localize('TRANSCRIPT_ARIA_ROLE_ALT'); // Gets renderer for every activity.
  // Activities that are not visible will return a falsy renderer.
  // Converted from createActivityRenderer({ activity, nextVisibleActivity }) to createActivityRenderer(activity, nextVisibleActivity).
  // This is for the memoization function to cache the arguments. Memoizer can only cache literal arguments.

  var createActivityRendererWithLiteralArgs = (0, _react.useCallback)(function (activity, nextVisibleActivity) {
    return createActivityRenderer({
      activity: activity,
      nextVisibleActivity: nextVisibleActivity
    });
  }, [createActivityRenderer]); // Create a memoized context of the createActivityRenderer function.

  var activitiesWithRenderer = (0, _useMemoize.default)(createActivityRendererWithLiteralArgs, function (createActivityRendererWithLiteralArgsMemoized) {
    // All calls to createActivityRendererWithLiteralArgsMemoized() in this function will be memoized (LRU = 1).
    // In the next render cycle, calls to createActivityRendererWithLiteralArgsMemoized() might return the memoized result instead.
    // This is an improvement to React useMemo(), because it only allows 1 memoization.
    // useMemoize() allows any number of memoization.
    var activitiesWithRenderer = [];
    var nextVisibleActivity;

    for (var index = activities.length - 1; index >= 0; index--) {
      var activity = activities[index];
      var renderActivity = createActivityRendererWithLiteralArgsMemoized(activity, nextVisibleActivity);

      if (renderActivity) {
        activitiesWithRenderer.splice(0, 0, {
          activity: activity,
          renderActivity: renderActivity
        });
        nextVisibleActivity = activity;
      }
    }

    return activitiesWithRenderer;
  }, [activities]);
  var visibleActivities = (0, _react.useMemo)(function () {
    return activitiesWithRenderer.map(function (_ref2) {
      var activity = _ref2.activity;
      return activity;
    });
  }, [activitiesWithRenderer]); // Tag activities based on types.
  // The default implementation tag into 2 types: sender and status.

  var _useMemo = (0, _react.useMemo)(function () {
    var _groupActivities = groupActivities({
      activities: visibleActivities
    }),
        activitiesGroupBySender = _groupActivities.sender,
        activitiesGroupByStatus = _groupActivities.status;

    if (!validateAllActivitiesTagged(visibleActivities, activitiesGroupBySender)) {
      console.warn('botframework-webchat: Not every activities are grouped in the "sender" property. Please fix "groupActivitiesMiddleware" and group every activities.');
    }

    if (!validateAllActivitiesTagged(visibleActivities, activitiesGroupByStatus)) {
      console.warn('botframework-webchat: Not every activities are grouped in the "status" property. Please fix "groupActivitiesMiddleware" and group every activities.');
    }

    return {
      activitiesGroupBySender: activitiesGroupBySender,
      activitiesGroupByStatus: activitiesGroupByStatus
    };
  }, [groupActivities, visibleActivities]),
      activitiesGroupBySender = _useMemo.activitiesGroupBySender,
      activitiesGroupByStatus = _useMemo.activitiesGroupByStatus; // Create a tree of activities with 2 dimensions: sender, followed by status.


  var activityTree = (0, _react.useMemo)(function () {
    var visibleActivitiesPendingGrouping = _toConsumableArray(visibleActivities);

    var activityTree = [];

    var _loop = function _loop() {
      var _visibleActivitiesPen = _slicedToArray(visibleActivitiesPendingGrouping, 1),
          activity = _visibleActivitiesPen[0];

      var senderTree = [];
      var activitiesWithSameSender = activitiesGroupBySender.find(function (activities) {
        return activities.includes(activity);
      });
      activityTree.push(senderTree);
      activitiesWithSameSender.forEach(function (activity) {
        var activitiesWithSameStatus = activitiesGroupByStatus.find(function (activities) {
          return activities.includes(activity);
        });
        var activitiesWithSameSenderAndStatus = (0, _intersectionOf.default)(visibleActivitiesPendingGrouping, activitiesWithSameSender, activitiesWithSameStatus);

        if (activitiesWithSameSenderAndStatus.length) {
          senderTree.push(activitiesWithSameSenderAndStatus);

          _removeInline.default.apply(void 0, [visibleActivitiesPendingGrouping].concat(_toConsumableArray(activitiesWithSameSenderAndStatus)));
        }
      });
    };

    while (visibleActivitiesPendingGrouping.length) {
      _loop();
    } // Assertion: All activities in visibleActivities, must be assigned to the activityTree


    if (!visibleActivities.every(function (activity) {
      return activityTree.some(function (activitiesWithSameSender) {
        return activitiesWithSameSender.some(function (activitiesWithSameSenderAndStatus) {
          return activitiesWithSameSenderAndStatus.includes(activity);
        });
      });
    })) {
      console.warn('botframework-webchat internal: Not all visible activities are grouped in the activityTree.', {
        visibleActivities: visibleActivities,
        activityTree: activityTree
      });
    }

    return activityTree;
  }, [activitiesGroupBySender, activitiesGroupByStatus, visibleActivities]); // Flatten the tree back into an array with information related to rendering.

  var renderingElements = (0, _react.useMemo)(function () {
    var renderingElements = [];
    var topSideBotNub = (0, _isZeroOrPositive.default)(bubbleNubOffset);
    var topSideUserNub = (0, _isZeroOrPositive.default)(bubbleFromUserNubOffset);
    activityTree.forEach(function (activitiesWithSameSender) {
      var _activitiesWithSameSe = _slicedToArray(activitiesWithSameSender, 1),
          _activitiesWithSameSe2 = _slicedToArray(_activitiesWithSameSe[0], 1),
          firstActivity = _activitiesWithSameSe2[0];

      var renderAvatar = createAvatarRenderer({
        activity: firstActivity
      });
      activitiesWithSameSender.forEach(function (activitiesWithSameSenderAndStatus, indexWithinSenderGroup) {
        var firstInSenderGroup = !indexWithinSenderGroup;
        var lastInSenderGroup = indexWithinSenderGroup === activitiesWithSameSender.length - 1;
        activitiesWithSameSenderAndStatus.forEach(function (activity, indexWithinSenderAndStatusGroup) {
          // We only show the timestamp at the end of the sender group. But we always show the "Send failed, retry" prompt.
          var renderActivityStatus = createActivityStatusRenderer({
            activity: activity
          });
          var firstInSenderAndStatusGroup = !indexWithinSenderAndStatusGroup;
          var lastInSenderAndStatusGroup = indexWithinSenderAndStatusGroup === activitiesWithSameSenderAndStatus.length - 1;

          var _activitiesWithRender = activitiesWithRenderer.find(function (entry) {
            return entry.activity === activity;
          }),
              renderActivity = _activitiesWithRender.renderActivity;

          var key = (0, _getActivityUniqueId.default)(activity) || renderingElements.length;
          var _activity$channelData = activity.channelData;
          _activity$channelData = _activity$channelData === void 0 ? {} : _activity$channelData;
          var _activity$channelData2 = _activity$channelData.messageBack;
          _activity$channelData2 = _activity$channelData2 === void 0 ? {} : _activity$channelData2;
          var messageBackDisplayText = _activity$channelData2.displayText,
              role = activity.from.role,
              text = activity.text;
          var topSideNub = role === 'user' ? topSideUserNub : topSideBotNub;
          var showCallout; // Depends on different "showAvatarInGroup" setting, we will show the avatar in different positions.

          if (showAvatarInGroup === 'sender') {
            if (topSideNub) {
              showCallout = firstInSenderGroup && firstInSenderAndStatusGroup;
            } else {
              showCallout = lastInSenderGroup && lastInSenderAndStatusGroup;
            }
          } else if (showAvatarInGroup === 'status') {
            if (topSideNub) {
              showCallout = firstInSenderAndStatusGroup;
            } else {
              showCallout = lastInSenderAndStatusGroup;
            }
          } else {
            showCallout = true;
          }

          renderingElements.push({
            activity: activity,
            // After the element is mounted, set it to activityElementsRef.
            callbackRef: function callbackRef(activityElement) {
              var entry = activityElementsRef.current.find(function (_ref3) {
                var activityID = _ref3.activityID;
                return activityID === activity.id;
              });

              if (entry) {
                entry.element = activityElement;
              }
            },
            // "hideTimestamp" is a render-time parameter for renderActivityStatus().
            // If true, it will hide the timestamp, but it will continue to show the
            // retry prompt. And show the screen reader version of the timestamp.
            hideTimestamp: hideAllTimestamps || indexWithinSenderAndStatusGroup !== activitiesWithSameSenderAndStatus.length - 1,
            key: key,
            // When "liveRegionKey" changes, it will show up in the live region momentarily.
            liveRegionKey: key + '|' + (messageBackDisplayText || text),
            renderActivity: renderActivity,
            renderActivityStatus: renderActivityStatus,
            renderAvatar: renderAvatar,
            // TODO: [P2] #2858 We should use core/definitions/speakingActivity for this predicate instead
            shouldSpeak: activity.channelData && activity.channelData.speak,
            showCallout: showCallout
          });
        });
      });
    });
    var activityElements = activityElementsRef.current; // Update activityElementRef with new sets of activity, while retaining the existing referencing element if exists.

    activityElementsRef.current = renderingElements.map(function (_ref4) {
      var id = _ref4.activity.id,
          key = _ref4.key;
      var existingEntry = activityElements.find(function (entry) {
        return entry.key === key;
      });
      return {
        activityID: id,
        element: existingEntry && existingEntry.element,
        key: key
      };
    });
    return renderingElements;
  }, [activitiesWithRenderer, activityElementsRef, activityTree, bubbleFromUserNubOffset, bubbleNubOffset, createActivityStatusRenderer, createAvatarRenderer, hideAllTimestamps, showAvatarInGroup]);
  var renderingActivities = (0, _react.useMemo)(function () {
    return renderingElements.map(function (_ref5) {
      var activity = _ref5.activity;
      return activity;
    });
  }, [renderingElements]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('webchat__basic-transcript', rootClassName, (className || '') + ''),
    dir: direction,
    ref: rootElementRef
  }, /*#__PURE__*/_react.default.createElement("section", {
    "aria-atomic": false,
    "aria-live": "polite",
    "aria-relevant": "additions",
    "aria-roledescription": transcriptRoleDescription,
    role: "log"
  }, renderingElements.map(function (_ref6) {
    var activity = _ref6.activity,
        liveRegionKey = _ref6.liveRegionKey;
    return /*#__PURE__*/_react.default.createElement(_Fade.default, {
      fadeAfter: internalLiveRegionFadeAfter,
      key: liveRegionKey
    }, function () {
      return /*#__PURE__*/_react.default.createElement(_ScreenReaderActivity.default, {
        activity: activity
      });
    });
  })), /*#__PURE__*/_react.default.createElement(InternalTranscriptScrollable, {
    activities: renderingActivities
  }, renderingElements.map(function (_ref7) {
    var activity = _ref7.activity,
        callbackRef = _ref7.callbackRef,
        key = _ref7.key,
        hideTimestamp = _ref7.hideTimestamp,
        renderActivity = _ref7.renderActivity,
        renderActivityStatus = _ref7.renderActivityStatus,
        renderAvatar = _ref7.renderAvatar,
        shouldSpeak = _ref7.shouldSpeak,
        showCallout = _ref7.showCallout;
    return /*#__PURE__*/_react.default.createElement("li", {
      "aria-label": activityAriaLabel // This will be read when pressing CAPSLOCK + arrow with screen reader
      ,
      className: (0, _classnames.default)(activityStyleSet + '', 'webchat__basic-transcript__activity'),
      key: key,
      ref: callbackRef
    }, renderActivity({
      hideTimestamp: hideTimestamp,
      renderActivityStatus: renderActivityStatus,
      renderAvatar: renderAvatar,
      showCallout: showCallout
    }), shouldSpeak && /*#__PURE__*/_react.default.createElement(_Speak.default, {
      activity: activity
    }));
  })));
};

BasicTranscript.defaultProps = {
  className: ''
};
BasicTranscript.propTypes = {
  className: _propTypes.default.string
};

var InternalScreenReaderTranscript = function InternalScreenReaderTranscript(_ref8) {
  var renderingElements = _ref8.renderingElements;
  var localize = useLocalizer();

  var _useStyleOptions3 = useStyleOptions(),
      _useStyleOptions4 = _slicedToArray(_useStyleOptions3, 1),
      internalLiveRegionFadeAfter = _useStyleOptions4[0];

  var transcriptRoleDescription = localize('TRANSCRIPT_ARIA_ROLE_ALT');
  return /*#__PURE__*/_react.default.createElement("section", {
    "aria-atomic": false,
    "aria-live": "polite",
    "aria-relevant": "additions",
    "aria-roledescription": transcriptRoleDescription,
    role: "log"
  }, renderingElements.map(function (_ref9) {
    var activity = _ref9.activity,
        liveRegionKey = _ref9.liveRegionKey;
    return /*#__PURE__*/_react.default.createElement(_Fade.default, {
      fadeAfter: internalLiveRegionFadeAfter,
      key: liveRegionKey
    }, function () {
      return /*#__PURE__*/_react.default.createElement(_ScreenReaderActivity.default, {
        activity: activity
      });
    });
  }));
};

InternalScreenReaderTranscript.propTypes = {
  renderingElements: _propTypes.default.arrayOf(_propTypes.default.shape({
    activity: _propTypes.default.any,
    liveRegionKey: _propTypes.default.string
  })).isRequired
}; // Separating high-frequency hooks to improve performance.

var InternalTranscriptScrollable = function InternalTranscriptScrollable(_ref10) {
  var activities = _ref10.activities,
      children = _ref10.children;

  var _useStyleSet3 = (0, _useStyleSet5.default)(),
      _useStyleSet4 = _slicedToArray(_useStyleSet3, 1),
      activitiesStyleSet = _useStyleSet4[0].activities;

  var _useStyleOptions5 = useStyleOptions(),
      _useStyleOptions6 = _slicedToArray(_useStyleOptions5, 1),
      hideScrollToEndButton = _useStyleOptions6[0].hideScrollToEndButton;

  var _useAnimatingToEnd = (0, _reactScrollToBottom.useAnimatingToEnd)(),
      _useAnimatingToEnd2 = _slicedToArray(_useAnimatingToEnd, 1),
      animatingToEnd = _useAnimatingToEnd2[0];

  var _useSticky = (0, _reactScrollToBottom.useSticky)(),
      _useSticky2 = _slicedToArray(_useSticky, 1),
      sticky = _useSticky2[0];

  var focus = (0, _useFocus.default)();
  var lastVisibleActivityId = (0, _getActivityUniqueId.default)(activities[activities.length - 1] || {}); // Activity ID of the last visible activity in the list.

  var localize = useLocalizer();
  var scrollToEndButtonRef = (0, _react.useRef)();
  var lastReadActivityIdRef = (0, _react.useRef)(lastVisibleActivityId);
  var transcriptRoleDescription = localize('TRANSCRIPT_ARIA_ROLE_ALT');
  var allActivitiesRead = lastVisibleActivityId === lastReadActivityIdRef.current;
  var handleScrollToEndButtonClick = (0, _react.useCallback)(function () {
    var current = scrollToEndButtonRef.current; // After clicking on the "New messages" button, we should focus on the first unread element.
    // This is for resolving the bug https://github.com/microsoft/BotFramework-WebChat/issues/3135.

    if (current) {
      var nextSiblings = nextSiblingAll(current);
      var firstUnreadTabbable = nextSiblings.reduce(function (result, unreadActivityElement) {
        return result || (0, _firstTabbableDescendant.default)(unreadActivityElement);
      }, 0);
      firstUnreadTabbable ? firstUnreadTabbable.focus() : focus('sendBoxWithoutKeyboard');
    }
  }, [focus, scrollToEndButtonRef]);

  if (sticky) {
    // If it is sticky, the user is at the bottom of the transcript, everything is read.
    // So mark the activity ID as read.
    lastReadActivityIdRef.current = lastVisibleActivityId;
  } // Finds where we should render the "New messages" button, in index. Returns -1 to hide the button.


  var renderSeparatorAfterIndex = (0, _react.useMemo)(function () {
    // Don't show the button if:
    // - All activities have been read
    // - Currently animating towards bottom
    //   - "New messages" button must not flash when: 1. Type "help", 2. Scroll to top, 3. Type "help" again, 4. Expect the "New messages" button not flashy
    // - Hidden by style options
    // - It is already at the bottom (sticky)
    // Any changes to this logic, verify:
    // - "New messages" button should persist while programmatically scrolling to mid-point of the transcript:
    //   1. Type "help"
    //   2. Type "proactive", then immediately scroll to top
    //      Expect: the "New messages" button should appear
    //   3. Run hook "useScrollTo({ scrollTop: 500 })"
    //      Expect: when the scroll is animating to 500px, the "New messages" button should kept on the screen
    // - "New messages" button must not flashy:
    //   1. Type "help"
    //   2. Scroll to top
    //      Expect: no "New messages" button is shown
    //   3. Type "help" again
    //      Expect: "New messages" button must not flash-appear
    if (allActivitiesRead || animatingToEnd || hideScrollToEndButton || sticky) {
      return -1;
    }

    return activities.findIndex(function (activity) {
      return (0, _getActivityUniqueId.default)(activity) === lastReadActivityIdRef.current;
    });
  }, [activities, allActivitiesRead, animatingToEnd, hideScrollToEndButton, lastReadActivityIdRef, sticky]);
  return /*#__PURE__*/_react.default.createElement(_reactScrollToBottom.Panel, {
    className: "webchat__basic-transcript__scrollable"
  }, /*#__PURE__*/_react.default.createElement("div", {
    "aria-hidden": true,
    className: "webchat__basic-transcript__filler"
  }), /*#__PURE__*/_react.default.createElement("ul", {
    "aria-roledescription": transcriptRoleDescription,
    className: (0, _classnames.default)(activitiesStyleSet + '', 'webchat__basic-transcript__transcript'),
    role: "list"
  }, _react.default.Children.map(children, function (child, index) {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, child, index === renderSeparatorAfterIndex && /*#__PURE__*/_react.default.createElement(_ScrollToEndButton.default, {
      "aria-valuemax": activities.length,
      "aria-valuenow": index + 1,
      onClick: handleScrollToEndButtonClick,
      ref: scrollToEndButtonRef
    }));
  })), /*#__PURE__*/_react.default.createElement(_BasicTypingIndicator.default, null));
};

InternalTranscriptScrollable.propTypes = {
  activities: _propTypes.default.array.isRequired,
  children: _propTypes.default.arrayOf(_propTypes.default.element).isRequired
};
var _default = BasicTranscript;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,