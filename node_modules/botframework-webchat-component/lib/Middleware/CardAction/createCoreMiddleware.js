"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createDefaultCardActionMiddleware;

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

// This code is adopted from sanitize-html/naughtyScheme.
// sanitize-html is a dependency of Web Chat but the naughtScheme function is neither exposed nor reusable.
// https://github.com/apostrophecms/sanitize-html/blob/master/src/index.js#L526
function getScheme(href) {
  // Browsers ignore character codes of 32 (space) and below in a surprising
  // number of situations. Start reading here:
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet#Embedded_tab

  /* eslint-disable-next-line no-control-regex */
  href = href.replace(/[\0- ]+/g, ''); // Clobber any comments in URLs, which the browser might
  // interpret inside an XML data island, allowing
  // a javascript: URL to be snuck through

  href = href.replace(/<!\x2D\x2D(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*?\x2D\x2D>/g, ''); // Case insensitive so we don't get faked out by JAVASCRIPT #1

  var matches = href.match(/^([A-Za-z]+):/);

  if (!matches) {
    // Protocol-relative URL or no scheme
    return;
  }

  return matches[1].toLowerCase();
}

var ALLOWED_SCHEMES = ['data', 'http', 'https', 'ftp', 'mailto', 'sip', 'tel'];

function createDefaultCardActionMiddleware() {
  return [function () {
    return function (next) {
      return function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        var _args$ = args[0],
            _args$$cardAction = _args$.cardAction,
            type = _args$$cardAction.type,
            value = _args$$cardAction.value,
            getSignInUrl = _args$.getSignInUrl;

        switch (type) {
          case 'call':
          case 'downloadFile':
          case 'openUrl':
          case 'playAudio':
          case 'playVideo':
          case 'showImage':
            if (ALLOWED_SCHEMES.includes(getScheme(value))) {
              window.open(value, '_blank', 'noopener noreferrer');
            } else {
              console.warn('botframework-webchat: Cannot open URL with disallowed schemes.', value);
            }

            break;

          case 'signin':
            {
              // TODO: [P3] We should prime the URL into the OAuthCard directly, instead of calling getSessionId on-demand
              //       This is to eliminate the delay between window.open() and location.href call
              _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                var popup, url;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        popup = window.open();
                        _context.next = 3;
                        return getSignInUrl();

                      case 3:
                        url = _context.sent;
                        popup.location.href = url;

                      case 5:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }))();

              break;
            }

          default:
            return next.apply(void 0, args);
        }
      };
    };
  }];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9NaWRkbGV3YXJlL0NhcmRBY3Rpb24vY3JlYXRlQ29yZU1pZGRsZXdhcmUuanMiXSwibmFtZXMiOlsiZ2V0U2NoZW1lIiwiaHJlZiIsInJlcGxhY2UiLCJtYXRjaGVzIiwibWF0Y2giLCJ0b0xvd2VyQ2FzZSIsIkFMTE9XRURfU0NIRU1FUyIsImNyZWF0ZURlZmF1bHRDYXJkQWN0aW9uTWlkZGxld2FyZSIsIm5leHQiLCJhcmdzIiwiY2FyZEFjdGlvbiIsInR5cGUiLCJ2YWx1ZSIsImdldFNpZ25JblVybCIsImluY2x1ZGVzIiwid2luZG93Iiwib3BlbiIsImNvbnNvbGUiLCJ3YXJuIiwicG9wdXAiLCJ1cmwiLCJsb2NhdGlvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQSxTQUFULENBQW1CQyxJQUFuQixFQUF5QjtBQUN2QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQUEsRUFBQUEsSUFBSSxHQUFHQSxJQUFJLENBQUNDLE9BQUwsQ0FBYSxVQUFiLEVBQStCLEVBQS9CLENBQVAsQ0FOdUIsQ0FRdkI7QUFDQTtBQUNBOztBQUNBRCxFQUFBQSxJQUFJLEdBQUdBLElBQUksQ0FBQ0MsT0FBTCxDQUFhLHNMQUFiLEVBQTZCLEVBQTdCLENBQVAsQ0FYdUIsQ0FhdkI7O0FBQ0EsTUFBTUMsT0FBTyxHQUFHRixJQUFJLENBQUNHLEtBQUwsQ0FBVyxlQUFYLENBQWhCOztBQUVBLE1BQUksQ0FBQ0QsT0FBTCxFQUFjO0FBQ1o7QUFDQTtBQUNEOztBQUVELFNBQU9BLE9BQU8sQ0FBQyxDQUFELENBQVAsQ0FBV0UsV0FBWCxFQUFQO0FBQ0Q7O0FBRUQsSUFBTUMsZUFBZSxHQUFHLENBQUMsTUFBRCxFQUFTLE1BQVQsRUFBaUIsT0FBakIsRUFBMEIsS0FBMUIsRUFBaUMsUUFBakMsRUFBMkMsS0FBM0MsRUFBa0QsS0FBbEQsQ0FBeEI7O0FBRWUsU0FBU0MsaUNBQVQsR0FBNkM7QUFDMUQsU0FBTyxDQUNMO0FBQUEsV0FBTSxVQUFBQyxJQUFJO0FBQUEsYUFBSSxZQUFhO0FBQUEsMENBQVRDLElBQVM7QUFBVEEsVUFBQUEsSUFBUztBQUFBOztBQUFBLHFCQU1yQkEsSUFOcUI7QUFBQSx1Q0FHckJDLFVBSHFCO0FBQUEsWUFHUEMsSUFITyxxQkFHUEEsSUFITztBQUFBLFlBR0RDLEtBSEMscUJBR0RBLEtBSEM7QUFBQSxZQUlyQkMsWUFKcUIsVUFJckJBLFlBSnFCOztBQVF6QixnQkFBUUYsSUFBUjtBQUNFLGVBQUssTUFBTDtBQUNBLGVBQUssY0FBTDtBQUNBLGVBQUssU0FBTDtBQUNBLGVBQUssV0FBTDtBQUNBLGVBQUssV0FBTDtBQUNBLGVBQUssV0FBTDtBQUNFLGdCQUFJTCxlQUFlLENBQUNRLFFBQWhCLENBQXlCZCxTQUFTLENBQUNZLEtBQUQsQ0FBbEMsQ0FBSixFQUFnRDtBQUM5Q0csY0FBQUEsTUFBTSxDQUFDQyxJQUFQLENBQVlKLEtBQVosRUFBbUIsUUFBbkIsRUFBNkIscUJBQTdCO0FBQ0QsYUFGRCxNQUVPO0FBQ0xLLGNBQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUFhLGdFQUFiLEVBQStFTixLQUEvRTtBQUNEOztBQUVEOztBQUVGLGVBQUssUUFBTDtBQUFlO0FBQ2I7QUFDQTtBQUVBLHNFQUFDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNPTyx3QkFBQUEsS0FEUCxHQUNlSixNQUFNLENBQUNDLElBQVAsRUFEZjtBQUFBO0FBQUEsK0JBRW1CSCxZQUFZLEVBRi9COztBQUFBO0FBRU9PLHdCQUFBQSxHQUZQO0FBSUNELHdCQUFBQSxLQUFLLENBQUNFLFFBQU4sQ0FBZXBCLElBQWYsR0FBc0JtQixHQUF0Qjs7QUFKRDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxlQUFEOztBQU9BO0FBQ0Q7O0FBRUQ7QUFDRSxtQkFBT1osSUFBSSxNQUFKLFNBQVFDLElBQVIsQ0FBUDtBQTlCSjtBQWdDRCxPQXhDUztBQUFBLEtBQVY7QUFBQSxHQURLLENBQVA7QUEyQ0QiLCJzb3VyY2VSb290IjoiY29tcG9uZW50Oi8vLyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgY29kZSBpcyBhZG9wdGVkIGZyb20gc2FuaXRpemUtaHRtbC9uYXVnaHR5U2NoZW1lLlxuLy8gc2FuaXRpemUtaHRtbCBpcyBhIGRlcGVuZGVuY3kgb2YgV2ViIENoYXQgYnV0IHRoZSBuYXVnaHRTY2hlbWUgZnVuY3Rpb24gaXMgbmVpdGhlciBleHBvc2VkIG5vciByZXVzYWJsZS5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hcG9zdHJvcGhlY21zL3Nhbml0aXplLWh0bWwvYmxvYi9tYXN0ZXIvc3JjL2luZGV4LmpzI0w1MjZcbmZ1bmN0aW9uIGdldFNjaGVtZShocmVmKSB7XG4gIC8vIEJyb3dzZXJzIGlnbm9yZSBjaGFyYWN0ZXIgY29kZXMgb2YgMzIgKHNwYWNlKSBhbmQgYmVsb3cgaW4gYSBzdXJwcmlzaW5nXG4gIC8vIG51bWJlciBvZiBzaXR1YXRpb25zLiBTdGFydCByZWFkaW5nIGhlcmU6XG4gIC8vIGh0dHBzOi8vd3d3Lm93YXNwLm9yZy9pbmRleC5waHAvWFNTX0ZpbHRlcl9FdmFzaW9uX0NoZWF0X1NoZWV0I0VtYmVkZGVkX3RhYlxuXG4gIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250cm9sLXJlZ2V4ICovXG4gIGhyZWYgPSBocmVmLnJlcGxhY2UoL1tcXHgwMC1cXHgyMF0rL2d1LCAnJyk7XG5cbiAgLy8gQ2xvYmJlciBhbnkgY29tbWVudHMgaW4gVVJMcywgd2hpY2ggdGhlIGJyb3dzZXIgbWlnaHRcbiAgLy8gaW50ZXJwcmV0IGluc2lkZSBhbiBYTUwgZGF0YSBpc2xhbmQsIGFsbG93aW5nXG4gIC8vIGEgamF2YXNjcmlwdDogVVJMIHRvIGJlIHNudWNrIHRocm91Z2hcbiAgaHJlZiA9IGhyZWYucmVwbGFjZSgvPCEtLS4qPy0tPi9ndSwgJycpO1xuXG4gIC8vIENhc2UgaW5zZW5zaXRpdmUgc28gd2UgZG9uJ3QgZ2V0IGZha2VkIG91dCBieSBKQVZBU0NSSVBUICMxXG4gIGNvbnN0IG1hdGNoZXMgPSBocmVmLm1hdGNoKC9eKFthLXpBLVpdKyk6L3UpO1xuXG4gIGlmICghbWF0Y2hlcykge1xuICAgIC8vIFByb3RvY29sLXJlbGF0aXZlIFVSTCBvciBubyBzY2hlbWVcbiAgICByZXR1cm47XG4gIH1cblxuICByZXR1cm4gbWF0Y2hlc1sxXS50b0xvd2VyQ2FzZSgpO1xufVxuXG5jb25zdCBBTExPV0VEX1NDSEVNRVMgPSBbJ2RhdGEnLCAnaHR0cCcsICdodHRwcycsICdmdHAnLCAnbWFpbHRvJywgJ3NpcCcsICd0ZWwnXTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlRGVmYXVsdENhcmRBY3Rpb25NaWRkbGV3YXJlKCkge1xuICByZXR1cm4gW1xuICAgICgpID0+IG5leHQgPT4gKC4uLmFyZ3MpID0+IHtcbiAgICAgIGNvbnN0IFtcbiAgICAgICAge1xuICAgICAgICAgIGNhcmRBY3Rpb246IHsgdHlwZSwgdmFsdWUgfSxcbiAgICAgICAgICBnZXRTaWduSW5VcmxcbiAgICAgICAgfVxuICAgICAgXSA9IGFyZ3M7XG5cbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlICdjYWxsJzpcbiAgICAgICAgY2FzZSAnZG93bmxvYWRGaWxlJzpcbiAgICAgICAgY2FzZSAnb3BlblVybCc6XG4gICAgICAgIGNhc2UgJ3BsYXlBdWRpbyc6XG4gICAgICAgIGNhc2UgJ3BsYXlWaWRlbyc6XG4gICAgICAgIGNhc2UgJ3Nob3dJbWFnZSc6XG4gICAgICAgICAgaWYgKEFMTE9XRURfU0NIRU1FUy5pbmNsdWRlcyhnZXRTY2hlbWUodmFsdWUpKSkge1xuICAgICAgICAgICAgd2luZG93Lm9wZW4odmFsdWUsICdfYmxhbmsnLCAnbm9vcGVuZXIgbm9yZWZlcnJlcicpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ2JvdGZyYW1ld29yay13ZWJjaGF0OiBDYW5ub3Qgb3BlbiBVUkwgd2l0aCBkaXNhbGxvd2VkIHNjaGVtZXMuJywgdmFsdWUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3NpZ25pbic6IHtcbiAgICAgICAgICAvLyBUT0RPOiBbUDNdIFdlIHNob3VsZCBwcmltZSB0aGUgVVJMIGludG8gdGhlIE9BdXRoQ2FyZCBkaXJlY3RseSwgaW5zdGVhZCBvZiBjYWxsaW5nIGdldFNlc3Npb25JZCBvbi1kZW1hbmRcbiAgICAgICAgICAvLyAgICAgICBUaGlzIGlzIHRvIGVsaW1pbmF0ZSB0aGUgZGVsYXkgYmV0d2VlbiB3aW5kb3cub3BlbigpIGFuZCBsb2NhdGlvbi5ocmVmIGNhbGxcblxuICAgICAgICAgIChhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb25zdCBwb3B1cCA9IHdpbmRvdy5vcGVuKCk7XG4gICAgICAgICAgICBjb25zdCB1cmwgPSBhd2FpdCBnZXRTaWduSW5VcmwoKTtcblxuICAgICAgICAgICAgcG9wdXAubG9jYXRpb24uaHJlZiA9IHVybDtcbiAgICAgICAgICB9KSgpO1xuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBuZXh0KC4uLmFyZ3MpO1xuICAgICAgfVxuICAgIH1cbiAgXTtcbn1cbiJdfQ==