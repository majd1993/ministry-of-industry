"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = queueIncomingActivitySaga;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _effects = require("redux-saga/effects");

var _queueIncomingActivity = require("../actions/queueIncomingActivity");

var _activities = _interopRequireWildcard(require("../selectors/activities"));

var _activityFromBot = _interopRequireDefault(require("../definitions/activityFromBot"));

var _incomingActivity = _interopRequireWildcard(require("../actions/incomingActivity"));

var _setSuggestedActions = _interopRequireDefault(require("../actions/setSuggestedActions"));

var _sleep = _interopRequireDefault(require("../utils/sleep"));

var _whileConnected = _interopRequireDefault(require("./effects/whileConnected"));

var _marked = /*#__PURE__*/_regenerator["default"].mark(takeEveryAndSelect),
    _marked2 = /*#__PURE__*/_regenerator["default"].mark(waitForActivityId),
    _marked3 = /*#__PURE__*/_regenerator["default"].mark(queueIncomingActivity),
    _marked4 = /*#__PURE__*/_regenerator["default"].mark(queueIncomingActivitySaga);

// We will hold up the replying activity if the originating activity did not arrive, up to 5 seconds.
var REPLY_TIMEOUT = 5000;

function takeEveryAndSelect(actionType, selector, fn) {
  var action, state;
  return _regenerator["default"].wrap(function takeEveryAndSelect$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return (0, _effects.cancelled)();

        case 2:
          if (_context.sent) {
            _context.next = 13;
            break;
          }

          _context.next = 5;
          return (0, _effects.take)(actionType);

        case 5:
          action = _context.sent;
          _context.next = 8;
          return (0, _effects.select)(selector);

        case 8:
          state = _context.sent;
          _context.next = 11;
          return (0, _effects.fork)(fn, action, state);

        case 11:
          _context.next = 0;
          break;

        case 13:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
} // Wait for specific activity to arrive in the transcript.
// We will use the initial set of activities to close time gaps between select() and take().
// If another activity with the same "replyToId" is already rendered (in the "activities" array),
// we will skip the wait as we already waited long enough for the missing activity to show up.


function waitForActivityId(replyToId, initialActivities) {
  var activities, replied;
  return _regenerator["default"].wrap(function waitForActivityId$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          activities = initialActivities;

        case 1:
          replied = activities.find(function (activity) {
            return activity.id === replyToId || activity.replyToId === replyToId;
          });

          if (!replied) {
            _context2.next = 4;
            break;
          }

          return _context2.abrupt("break", 11);

        case 4:
          _context2.next = 6;
          return (0, _effects.take)(_incomingActivity.INCOMING_ACTIVITY);

        case 6:
          _context2.next = 8;
          return (0, _effects.select)(_activities["default"]);

        case 8:
          activities = _context2.sent;

        case 9:
          _context2.next = 1;
          break;

        case 11:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked2);
}

function queueIncomingActivity(_ref) {
  var userID;
  return _regenerator["default"].wrap(function queueIncomingActivity$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          userID = _ref.userID;
          _context4.next = 3;
          return takeEveryAndSelect(_queueIncomingActivity.QUEUE_INCOMING_ACTIVITY, _activities["default"], /*#__PURE__*/_regenerator["default"].mark(function queueIncomingActivity(_ref2, initialActivities) {
            var activity, replyToId, result, messageActivities, lastMessageActivity, _lastMessageActivity$, actions, to;

            return _regenerator["default"].wrap(function queueIncomingActivity$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    activity = _ref2.payload.activity;
                    // This is for accessibility issue.
                    // If the incoming activity has "replyToId" field, hold on it until the activity replied to is in the transcript, then release this one.
                    replyToId = activity.replyToId; // To speed up the first activity render time, we do not delay the first activity.
                    // Even if it is the first activity from the bot, the bot might be "replying" to the "conversationUpdate" event.
                    // Thus, the "replyToId" will always be there even it is the first activity in the conversation.

                    if (!(replyToId && initialActivities.length)) {
                      _context3.next = 7;
                      break;
                    }

                    _context3.next = 5;
                    return (0, _effects.race)({
                      _: waitForActivityId(replyToId, initialActivities),
                      timeout: (0, _effects.call)(_sleep["default"], REPLY_TIMEOUT)
                    });

                  case 5:
                    result = _context3.sent;

                    if ('timeout' in result) {
                      console.warn("botframework-webchat: Timed out while waiting for activity \"".concat(replyToId, "\" which activity \"").concat(activity.id, "\" is replying to."), {
                        activity: activity,
                        replyToId: replyToId
                      });
                    }

                  case 7:
                    _context3.next = 9;
                    return (0, _effects.put)((0, _incomingActivity["default"])(activity));

                  case 9:
                    _context3.next = 11;
                    return (0, _effects.select)((0, _activities.ofType)('message'));

                  case 11:
                    messageActivities = _context3.sent;
                    lastMessageActivity = messageActivities[messageActivities.length - 1];

                    if (!(0, _activityFromBot["default"])(lastMessageActivity)) {
                      _context3.next = 19;
                      break;
                    }

                    _lastMessageActivity$ = lastMessageActivity.suggestedActions;
                    _lastMessageActivity$ = _lastMessageActivity$ === void 0 ? {} : _lastMessageActivity$;
                    actions = _lastMessageActivity$.actions, to = _lastMessageActivity$.to; // If suggested actions is not destined to anyone, or is destined to the user, show it.
                    // In other words, if suggested actions is destined to someone else, don't show it.

                    _context3.next = 19;
                    return (0, _effects.put)((0, _setSuggestedActions["default"])(to && to.length && !to.includes(userID) ? null : actions));

                  case 19:
                  case "end":
                    return _context3.stop();
                }
              }
            }, queueIncomingActivity);
          }));

        case 3:
        case "end":
          return _context4.stop();
      }
    }
  }, _marked3);
}

function queueIncomingActivitySaga() {
  return _regenerator["default"].wrap(function queueIncomingActivitySaga$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          _context5.next = 2;
          return (0, _whileConnected["default"])(queueIncomingActivity);

        case 2:
        case "end":
          return _context5.stop();
      }
    }
  }, _marked4);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zYWdhcy9xdWV1ZUluY29taW5nQWN0aXZpdHlTYWdhLmpzIl0sIm5hbWVzIjpbInRha2VFdmVyeUFuZFNlbGVjdCIsIndhaXRGb3JBY3Rpdml0eUlkIiwicXVldWVJbmNvbWluZ0FjdGl2aXR5IiwicXVldWVJbmNvbWluZ0FjdGl2aXR5U2FnYSIsIlJFUExZX1RJTUVPVVQiLCJhY3Rpb25UeXBlIiwic2VsZWN0b3IiLCJmbiIsImFjdGlvbiIsInN0YXRlIiwicmVwbHlUb0lkIiwiaW5pdGlhbEFjdGl2aXRpZXMiLCJhY3Rpdml0aWVzIiwicmVwbGllZCIsImZpbmQiLCJhY3Rpdml0eSIsImlkIiwiSU5DT01JTkdfQUNUSVZJVFkiLCJhY3Rpdml0aWVzU2VsZWN0b3IiLCJ1c2VySUQiLCJRVUVVRV9JTkNPTUlOR19BQ1RJVklUWSIsInBheWxvYWQiLCJsZW5ndGgiLCJfIiwidGltZW91dCIsInNsZWVwIiwicmVzdWx0IiwiY29uc29sZSIsIndhcm4iLCJtZXNzYWdlQWN0aXZpdGllcyIsImxhc3RNZXNzYWdlQWN0aXZpdHkiLCJzdWdnZXN0ZWRBY3Rpb25zIiwiYWN0aW9ucyIsInRvIiwiaW5jbHVkZXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7d0RBS1VBLGtCO3lEQWdCQUMsaUI7eURBZ0JBQyxxQjt5REErQ2VDLHlCOztBQWxGekI7QUFDQSxJQUFNQyxhQUFhLEdBQUcsSUFBdEI7O0FBRUEsU0FBVUosa0JBQVYsQ0FBNkJLLFVBQTdCLEVBQXlDQyxRQUF6QyxFQUFtREMsRUFBbkQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFJVyxpQkFBTSx5QkFBTjs7QUFKWDtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBS21CLGlCQUFNLG1CQUFLRixVQUFMLENBQU47O0FBTG5CO0FBS1VHLFVBQUFBLE1BTFY7QUFBQTtBQU1rQixpQkFB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QUUsSUFBSUEsRUFBRSxDQUFDWCxNQUFULElBQW1CLENBQUNXLEVBQUUsQ0FBQ0MsUUFBSCxDQUFZZixNQUFaLENBQXBCLEdBQTBDLElBQTFDLEdBQWlEYSxPQUFyRSxDQUFKLENBQU47O0FBekNrRTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsZUFBVTlCLHFCQUFWO0FBQUEsV0FBOUMsRUFBeEI7O0FBREY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBK0NlLFNBQVVDLHlCQUFWO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNiLGlCQUFNLGdDQUFlRCxxQkFBZixDQUFOOztBQURhO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBIiwic291cmNlUm9vdCI6ImNvcmU6Ly8vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2FsbCwgY2FuY2VsbGVkLCBmb3JrLCBwdXQsIHJhY2UsIHNlbGVjdCwgdGFrZSB9IGZyb20gJ3JlZHV4LXNhZ2EvZWZmZWN0cyc7XG5cbmltcG9ydCB7IFFVRVVFX0lOQ09NSU5HX0FDVElWSVRZIH0gZnJvbSAnLi4vYWN0aW9ucy9xdWV1ZUluY29taW5nQWN0aXZpdHknO1xuaW1wb3J0IGFjdGl2aXRpZXNTZWxlY3RvciwgeyBvZlR5cGUgYXMgYWN0aXZpdGllc09mVHlwZSB9IGZyb20gJy4uL3NlbGVjdG9ycy9hY3Rpdml0aWVzJztcbmltcG9ydCBhY3Rpdml0eUZyb21Cb3QgZnJvbSAnLi4vZGVmaW5pdGlvbnMvYWN0aXZpdHlGcm9tQm90JztcbmltcG9ydCBpbmNvbWluZ0FjdGl2aXR5LCB7IElOQ09NSU5HX0FDVElWSVRZIH0gZnJvbSAnLi4vYWN0aW9ucy9pbmNvbWluZ0FjdGl2aXR5JztcbmltcG9ydCBzZXRTdWdnZXN0ZWRBY3Rpb25zIGZyb20gJy4uL2FjdGlvbnMvc2V0U3VnZ2VzdGVkQWN0aW9ucyc7XG5pbXBvcnQgc2xlZXAgZnJvbSAnLi4vdXRpbHMvc2xlZXAnO1xuaW1wb3J0IHdoaWxlQ29ubmVjdGVkIGZyb20gJy4vZWZmZWN0cy93aGlsZUNvbm5lY3RlZCc7XG5cbi8vIFdlIHdpbGwgaG9sZCB1cCB0aGUgcmVwbHlpbmcgYWN0aXZpdHkgaWYgdGhlIG9yaWdpbmF0aW5nIGFjdGl2aXR5IGRpZCBub3QgYXJyaXZlLCB1cCB0byA1IHNlY29uZHMuXG5jb25zdCBSRVBMWV9USU1FT1VUID0gNTAwMDtcblxuZnVuY3Rpb24qIHRha2VFdmVyeUFuZFNlbGVjdChhY3Rpb25UeXBlLCBzZWxlY3RvciwgZm4pIHtcbiAgLy8gc2VsZWN0KCkgd2lsbCBmcmVlIHVwIHRoZSBjb2RlIGV4ZWN1dGlvbi5cbiAgLy8gSWYgd2UgcGFpciB1cCB3aXRoIHRha2VFdmVyeSgpLCBpdCB3aWxsIGFsbG93IGFjdGlvbnMgdG8gc2xpcCB0aHJvdWdoLlxuICAvLyBUaHVzLCB3ZSBhcmUgd3JpdGluZyBvbmUgdGhhdCBkb24ndCB1c2UgdGFrZUV2ZXJ5KCkuXG4gIHdoaWxlICghKHlpZWxkIGNhbmNlbGxlZCgpKSkge1xuICAgIGNvbnN0IGFjdGlvbiA9IHlpZWxkIHRha2UoYWN0aW9uVHlwZSk7XG4gICAgY29uc3Qgc3RhdGUgPSB5aWVsZCBzZWxlY3Qoc2VsZWN0b3IpO1xuXG4gICAgeWllbGQgZm9yayhmbiwgYWN0aW9uLCBzdGF0ZSk7XG4gIH1cbn1cblxuLy8gV2FpdCBmb3Igc3BlY2lmaWMgYWN0aXZpdHkgdG8gYXJyaXZlIGluIHRoZSB0cmFuc2NyaXB0LlxuLy8gV2Ugd2lsbCB1c2UgdGhlIGluaXRpYWwgc2V0IG9mIGFjdGl2aXRpZXMgdG8gY2xvc2UgdGltZSBnYXBzIGJldHdlZW4gc2VsZWN0KCkgYW5kIHRha2UoKS5cbi8vIElmIGFub3RoZXIgYWN0aXZpdHkgd2l0aCB0aGUgc2FtZSBcInJlcGx5VG9JZFwiIGlzIGFscmVhZHkgcmVuZGVyZWQgKGluIHRoZSBcImFjdGl2aXRpZXNcIiBhcnJheSksXG4vLyB3ZSB3aWxsIHNraXAgdGhlIHdhaXQgYXMgd2UgYWxyZWFkeSB3YWl0ZWQgbG9uZyBlbm91Z2ggZm9yIHRoZSBtaXNzaW5nIGFjdGl2aXR5IHRvIHNob3cgdXAuXG5mdW5jdGlvbiogd2FpdEZvckFjdGl2aXR5SWQocmVwbHlUb0lkLCBpbml0aWFsQWN0aXZpdGllcykge1xuICBsZXQgYWN0aXZpdGllcyA9IGluaXRpYWxBY3Rpdml0aWVzO1xuXG4gIGZvciAoOzspIHtcbiAgICBjb25zdCByZXBsaWVkID0gYWN0aXZpdGllcy5maW5kKGFjdGl2aXR5ID0+IGFjdGl2aXR5LmlkID09PSByZXBseVRvSWQgfHwgYWN0aXZpdHkucmVwbHlUb0lkID09PSByZXBseVRvSWQpO1xuXG4gICAgaWYgKHJlcGxpZWQpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHlpZWxkIHRha2UoSU5DT01JTkdfQUNUSVZJVFkpO1xuXG4gICAgYWN0aXZpdGllcyA9IHlpZWxkIHNlbGVjdChhY3Rpdml0aWVzU2VsZWN0b3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uKiBxdWV1ZUluY29taW5nQWN0aXZpdHkoeyB1c2VySUQgfSkge1xuICB5aWVsZCB0YWtlRXZlcnlBbmRTZWxlY3QoUVVFVUVfSU5DT01JTkdfQUNUSVZJVFksIGFjdGl2aXRpZXNTZWxlY3RvciwgZnVuY3Rpb24qIHF1ZXVlSW5jb21pbmdBY3Rpdml0eShcbiAgICB7IHBheWxvYWQ6IHsgYWN0aXZpdHkgfSB9LFxuICAgIGluaXRpYWxBY3Rpdml0aWVzXG4gICkge1xuICAgIC8vIFRoaXMgaXMgZm9yIGFjY2Vzc2liaWxpdHkgaXNzdWUuXG4gICAgLy8gSWYgdGhlIGluY29taW5nIGFjdGl2aXR5IGhhcyBcInJlcGx5VG9JZFwiIGZpZWxkLCBob2xkIG9uIGl0IHVudGlsIHRoZSBhY3Rpdml0eSByZXBsaWVkIHRvIGlzIGluIHRoZSB0cmFuc2NyaXB0LCB0aGVuIHJlbGVhc2UgdGhpcyBvbmUuXG4gICAgY29uc3QgeyByZXBseVRvSWQgfSA9IGFjdGl2aXR5O1xuXG4gICAgLy8gVG8gc3BlZWQgdXAgdGhlIGZpcnN0IGFjdGl2aXR5IHJlbmRlciB0aW1lLCB3ZSBkbyBub3QgZGVsYXkgdGhlIGZpcnN0IGFjdGl2aXR5LlxuICAgIC8vIEV2ZW4gaWYgaXQgaXMgdGhlIGZpcnN0IGFjdGl2aXR5IGZyb20gdGhlIGJvdCwgdGhlIGJvdCBtaWdodCBiZSBcInJlcGx5aW5nXCIgdG8gdGhlIFwiY29udmVyc2F0aW9uVXBkYXRlXCIgZXZlbnQuXG4gICAgLy8gVGh1cywgdGhlIFwicmVwbHlUb0lkXCIgd2lsbCBhbHdheXMgYmUgdGhlcmUgZXZlbiBpdCBpcyB0aGUgZmlyc3QgYWN0aXZpdHkgaW4gdGhlIGNvbnZlcnNhdGlvbi5cbiAgICBpZiAocmVwbHlUb0lkICYmIGluaXRpYWxBY3Rpdml0aWVzLmxlbmd0aCkge1xuICAgICAgLy8gRWl0aGVyIHRoZSBhY3Rpdml0eSByZXBsaWVkIHRvIGlzIGluIHRoZSB0cmFuc2NyaXB0IG9yIGFmdGVyIHRpbWVvdXQuXG4gICAgICBjb25zdCByZXN1bHQgPSB5aWVsZCByYWNlKHtcbiAgICAgICAgXzogd2FpdEZvckFjdGl2aXR5SWQocmVwbHlUb0lkLCBpbml0aWFsQWN0aXZpdGllcyksXG4gICAgICAgIHRpbWVvdXQ6IGNhbGwoc2xlZXAsIFJFUExZX1RJTUVPVVQpXG4gICAgICB9KTtcblxuICAgICAgaWYgKCd0aW1lb3V0JyBpbiByZXN1bHQpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgIGBib3RmcmFtZXdvcmstd2ViY2hhdDogVGltZWQgb3V0IHdoaWxlIHdhaXRpbmcgZm9yIGFjdGl2aXR5IFwiJHtyZXBseVRvSWR9XCIgd2hpY2ggYWN0aXZpdHkgXCIke2FjdGl2aXR5LmlkfVwiIGlzIHJlcGx5aW5nIHRvLmAsXG4gICAgICAgICAge1xuICAgICAgICAgICAgYWN0aXZpdHksXG4gICAgICAgICAgICByZXBseVRvSWRcbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgeWllbGQgcHV0KGluY29taW5nQWN0aXZpdHkoYWN0aXZpdHkpKTtcblxuICAgIC8vIFVwZGF0ZSBzdWdnZXN0ZWQgYWN0aW9uc1xuICAgIC8vIFRPRE86IFtQM10gV2UgY291bGQgcHV0IHRoaXMgbG9naWMgaW5zaWRlIHJlZHVjZXIgdG8gbWluaW1pemUgbnVtYmVyIG9mIGFjdGlvbnMgZGlzcGF0Y2hlZC5cbiAgICBjb25zdCBtZXNzYWdlQWN0aXZpdGllcyA9IHlpZWxkIHNlbGVjdChhY3Rpdml0aWVzT2ZUeXBlKCdtZXNzYWdlJykpO1xuICAgIGNvbnN0IGxhc3RNZXNzYWdlQWN0aXZpdHkgPSBtZXNzYWdlQWN0aXZpdGllc1ttZXNzYWdlQWN0aXZpdGllcy5sZW5ndGggLSAxXTtcblxuICAgIGlmIChhY3Rpdml0eUZyb21Cb3QobGFzdE1lc3NhZ2VBY3Rpdml0eSkpIHtcbiAgICAgIGNvbnN0IHsgc3VnZ2VzdGVkQWN0aW9uczogeyBhY3Rpb25zLCB0byB9ID0ge30gfSA9IGxhc3RNZXNzYWdlQWN0aXZpdHk7XG5cbiAgICAgIC8vIElmIHN1Z2dlc3RlZCBhY3Rpb25zIGlzIG5vdCBkZXN0aW5lZCB0byBhbnlvbmUsIG9yIGlzIGRlc3RpbmVkIHRvIHRoZSB1c2VyLCBzaG93IGl0LlxuICAgICAgLy8gSW4gb3RoZXIgd29yZHMsIGlmIHN1Z2dlc3RlZCBhY3Rpb25zIGlzIGRlc3RpbmVkIHRvIHNvbWVvbmUgZWxzZSwgZG9uJ3Qgc2hvdyBpdC5cbiAgICAgIHlpZWxkIHB1dChzZXRTdWdnZXN0ZWRBY3Rpb25zKHRvICYmIHRvLmxlbmd0aCAmJiAhdG8uaW5jbHVkZXModXNlcklEKSA/IG51bGwgOiBhY3Rpb25zKSk7XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24qIHF1ZXVlSW5jb21pbmdBY3Rpdml0eVNhZ2EoKSB7XG4gIHlpZWxkIHdoaWxlQ29ubmVjdGVkKHF1ZXVlSW5jb21pbmdBY3Rpdml0eSk7XG59XG4iXX0=