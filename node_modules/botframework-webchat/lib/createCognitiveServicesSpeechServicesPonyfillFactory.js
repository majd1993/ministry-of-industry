"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createCognitiveServicesSpeechServicesPonyfillFactory;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _AudioConfig = require("microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/AudioConfig");

var _MicAudioSource = require("microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/MicAudioSource");

var _SpeechServices = _interopRequireDefault(require("web-speech-cognitive-services/lib/SpeechServices"));

function resolveFunction(fnOrValue) {
  return typeof fnOrValue === 'function' ? fnOrValue() : fnOrValue;
}

function createCognitiveServicesSpeechServicesPonyfillFactory(_ref) {
  var audioConfig = _ref.audioConfig,
      audioContext = _ref.audioContext,
      audioInputDeviceId = _ref.audioInputDeviceId,
      authorizationToken = _ref.authorizationToken,
      credentials = _ref.credentials,
      enableTelemetry = _ref.enableTelemetry,
      region = _ref.region,
      speechRecognitionEndpointId = _ref.speechRecognitionEndpointId,
      speechSynthesisDeploymentId = _ref.speechSynthesisDeploymentId,
      speechSynthesisOutputFormat = _ref.speechSynthesisOutputFormat,
      subscriptionKey = _ref.subscriptionKey,
      textNormalization = _ref.textNormalization;

  if (!window.navigator.mediaDevices && !audioConfig) {
    console.warn('botframework-webchat: Your browser does not support Web Audio or the page is not loaded via HTTPS or localhost. Cognitive Services Speech Services is disabled. However, you may pass a custom AudioConfig to enable speech in this environment.');
    return function () {
      return {};
    };
  }

  if (!credentials && (authorizationToken || region || subscriptionKey)) {
    console.warn('botframework-webchat: "authorizationToken", "region", and "subscriptionKey" are deprecated and will be removed on or after 2020-12-17. Please use "credentials" instead.');

    credentials = /*#__PURE__*/function () {
      var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!authorizationToken) {
                  _context.next = 6;
                  break;
                }

                _context.next = 3;
                return resolveFunction(authorizationToken);

              case 3:
                _context.t0 = _context.sent;
                _context.t1 = region;
                return _context.abrupt("return", {
                  authorizationToken: _context.t0,
                  region: _context.t1
                });

              case 6:
                _context.t2 = region;
                _context.next = 9;
                return resolveFunction(subscriptionKey);

              case 9:
                _context.t3 = _context.sent;
                return _context.abrupt("return", {
                  region: _context.t2,
                  subscriptionKey: _context.t3
                });

              case 11:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function credentials() {
        return _ref2.apply(this, arguments);
      };
    }();
  }

  if (audioConfig && audioInputDeviceId) {
    console.warn('botframework-webchat: "audioConfig" and "audioInputDeviceId" cannot be set at the same time; ignoring "audioInputDeviceId".');
  } // WORKAROUND: We should prevent AudioContext object from being recreated because they may be blessed and UX-wise expensive to recreate.
  //             In Cognitive Services SDK, if they detect the "end" function is falsy, they will not call "end" but "suspend" instead.
  //             And on next recognition, they will re-use the AudioContext object.


  if (!audioConfig) {
    audioConfig = audioInputDeviceId ? _AudioConfig.AudioConfig.fromMicrophoneInput(audioInputDeviceId) : _AudioConfig.AudioConfig.fromDefaultMicrophoneInput();
    var source = audioConfig.privSource; // WORKAROUND: In Speech SDK 1.12.0-1.13.1, it dropped support of macOS/iOS Safari.
    //             This code is adopted from microsoft-cognitiveservices-speech-sdk/src/common.browser/MicAudioSource.ts.
    //             We will not need this code when using Speech SDK 1.14.0 or up.
    // TODO: [P1] #3575 Remove the following lines when bumping to Speech SDK 1.14.0 or higher

    source.createAudioContext = function () {
      if (!!source.privContext) {
        return;
      }

      var AudioContext = window.AudioContext || window.webkitAudioContext;

      if (typeof AudioContext === 'undefined') {
        throw new Error('Browser does not support Web Audio API (AudioContext/webkitAudioContext is not available).');
      }

      if (navigator.mediaDevices.getSupportedConstraints().sampleRate) {
        source.privContext = new AudioContext({
          sampleRate: _MicAudioSource.MicAudioSource.AUDIOFORMAT.samplesPerSec
        });
      } else {
        source.privContext = new AudioContext();
      }
    }; // This piece of code is adopted from microsoft-cognitiveservices-speech-sdk/common.browser/MicAudioSource.ts.
    // Instead of closing the AudioContext, it will just suspend it. And the next time it is needed, it will be resumed (by the original code).


    source.destroyAudioContext = function () {
      if (!source.privContext) {
        return;
      }

      source.privRecorder.releaseMediaResources(source.privContext);
      source.privContext.state === 'running' && source.privContext.suspend();
    };
  }

  return function () {
    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        referenceGrammarID = _ref3.referenceGrammarID;

    var _createPonyfill = (0, _SpeechServices.default)({
      audioConfig: audioConfig,
      audioContext: audioContext,
      credentials: credentials,
      enableTelemetry: enableTelemetry,
      referenceGrammars: referenceGrammarID ? ["luis/".concat(referenceGrammarID, "-PRODUCTION")] : [],
      speechRecognitionEndpointId: speechRecognitionEndpointId,
      speechSynthesisDeploymentId: speechSynthesisDeploymentId,
      speechSynthesisOutputFormat: speechSynthesisOutputFormat,
      textNormalization: textNormalization
    }),
        SpeechGrammarList = _createPonyfill.SpeechGrammarList,
        SpeechRecognition = _createPonyfill.SpeechRecognition,
        speechSynthesis = _createPonyfill.speechSynthesis,
        SpeechSynthesisUtterance = _createPonyfill.SpeechSynthesisUtterance;

    return {
      SpeechGrammarList: SpeechGrammarList,
      SpeechRecognition: SpeechRecognition,
      speechSynthesis: speechSynthesis,
      SpeechSynthesisUtterance: SpeechSynthesisUtterance
    };
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,