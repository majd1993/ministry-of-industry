"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _ReceiptCardContent = _interopRequireDefault(require("./ReceiptCardContent"));

var ReceiptCardAttachment = function ReceiptCardAttachment(_ref) {
  var content = _ref.attachment.content,
      disabled = _ref.disabled;
  return /*#__PURE__*/_react.default.createElement(_ReceiptCardContent.default, {
    content: content,
    disabled: disabled
  });
};

ReceiptCardAttachment.defaultProps = {
  disabled: undefined
};
ReceiptCardAttachment.propTypes = {
  attachment: _propTypes.default.shape({
    content: _propTypes.default.shape({
      buttons: _propTypes.default.array,
      facts: _propTypes.default.arrayOf(_propTypes.default.shape({
        key: _propTypes.default.string,
        value: _propTypes.default.string
      })),
      items: _propTypes.default.arrayOf(_propTypes.default.shape({
        image: _propTypes.default.shape({
          alt: _propTypes.default.string.isRequired,
          tap: _propTypes.default.any,
          url: _propTypes.default.string.isRequired
        }),
        price: _propTypes.default.string.isRequired,
        quantity: _propTypes.default.string,
        subtitle: _propTypes.default.string,
        tap: _propTypes.default.any,
        text: _propTypes.default.string,
        title: _propTypes.default.string.isRequired
      })),
      tap: _propTypes.default.any,
      tax: _propTypes.default.string,
      title: _propTypes.default.string,
      total: _propTypes.default.string,
      vat: _propTypes.default.string
    }).isRequired
  }).isRequired,
  disabled: _propTypes.default.bool
};
var _default = ReceiptCardAttachment;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hZGFwdGl2ZUNhcmRzL0F0dGFjaG1lbnQvUmVjZWlwdENhcmRBdHRhY2htZW50LmpzIl0sIm5hbWVzIjpbIlJlY2VpcHRDYXJkQXR0YWNobWVudCIsImNvbnRlbnQiLCJhdHRhY2htZW50IiwiZGlzYWJsZWQiLCJkZWZhdWx0UHJvcHMiLCJ1bmRlZmluZWQiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJzaGFwZSIsImJ1dHRvbnMiLCJhcnJheSIsImZhY3RzIiwiYXJyYXlPZiIsImtleSIsInN0cmluZyIsInZhbHVlIiwiaXRlbXMiLCJpbWFnZSIsImFsdCIsImlzUmVxdWlyZWQiLCJ0YXAiLCJhbnkiLCJ1cmwiLCJwcmljZSIsInF1YW50aXR5Iiwic3VidGl0bGUiLCJ0ZXh0IiwidGl0bGUiLCJ0YXgiLCJ0b3RhbCIsInZhdCIsImJvb2wiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUVBOztBQUVBLElBQU1BLHFCQUFxQixHQUFHLFNBQXhCQSxxQkFBd0I7QUFBQSxNQUFpQkMsT0FBakIsUUFBR0MsVUFBSCxDQUFpQkQsT0FBakI7QUFBQSxNQUE0QkUsUUFBNUIsUUFBNEJBLFFBQTVCO0FBQUEsc0JBQzVCLDZCQUFDLDJCQUFEO0FBQW9CLElBQUEsT0FBTyxFQUFFRixPQUE3QjtBQUFzQyxJQUFBLFFBQVEsRUFBRUU7QUFBaEQsSUFENEI7QUFBQSxDQUE5Qjs7QUFJQUgscUJBQXFCLENBQUNJLFlBQXRCLEdBQXFDO0FBQ25DRCxFQUFBQSxRQUFRLEVBQUVFO0FBRHlCLENBQXJDO0FBSUFMLHFCQUFxQixDQUFDTSxTQUF0QixHQUFrQztBQUNoQ0osRUFBQUEsVUFBVSxFQUFFSyxtQkFBVUMsS0FBVixDQUFnQjtBQUMxQlAsSUFBQUEsT0FBTyxFQUFFTSxtQkFBVUMsS0FBVixDQUFnQjtBQUN2QkMsTUFBQUEsT0FBTyxFQUFFRixtQkFBVUcsS0FESTtBQUV2QkMsTUFBQUEsS0FBSyxFQUFFSixtQkFBVUssT0FBVixDQUNMTCxtQkFBVUMsS0FBVixDQUFnQjtBQUNkSyxRQUFBQSxHQUFHLEVBQUVOLG1CQUFVTyxNQUREO0FBRWRDLFFBQUFBLEtBQUssRUFBRVIsbUJBQVVPO0FBRkgsT0FBaEIsQ0FESyxDQUZnQjtBQVF2QkUsTUFBQUEsS0FBSyxFQUFFVCxtQkFBVUssT0FBVixDQUNMTCxtQkFBVUMsS0FBVixDQUFnQjtBQUNkUyxRQUFBQSxLQUFLLEVBQUVWLG1CQUFVQyxLQUFWLENBQWdCO0FBQ3JCVSxVQUFBQSxHQUFHLEVBQUVYLG1CQUFVTyxNQUFWLENBQWlCSyxVQUREO0FBRXJCQyxVQUFBQSxHQUFHLEVBQUViLG1CQUFVYyxHQUZNO0FBR3JCQyxVQUFBQSxHQUFHLEVBQUVmLG1CQUFVTyxNQUFWLENBQWlCSztBQUhELFNBQWhCLENBRE87QUFNZEksUUFBQUEsS0FBSyxFQUFFaEIsbUJBQVVPLE1BQVYsQ0FBaUJLLFVBTlY7QUFPZEssUUFBQUEsUUFBUSxFQUFFakIsbUJBQVVPLE1BUE47QUFRZFcsUUFBQUEsUUFBUSxFQUFFbEIsbUJBQVVPLE1BUk47QUFTZE0sUUFBQUEsR0FBRyxFQUFFYixtQkFBVWMsR0FURDtBQVVkSyxRQUFBQSxJQUFJLEVBQUVuQixtQkFBVU8sTUFWRjtBQVdkYSxRQUFBQSxLQUFLLEVBQUVwQixtQkFBVU8sTUFBVixDQUFpQks7QUFYVixPQUFoQixDQURLLENBUmdCO0FBdUJ2QkMsTUFBQUEsR0FBRyxFQUFFYixtQkFBVWMsR0F2QlE7QUF3QnZCTyxNQUFBQSxHQUFHLEVBQUVyQixtQkFBVU8sTUF4QlE7QUF5QnZCYSxNQUFBQSxLQUFLLEVBQUVwQixtQkFBVU8sTUF6Qk07QUEwQnZCZSxNQUFBQSxLQUFLLEVBQUV0QixtQkFBVU8sTUExQk07QUEyQnZCZ0IsTUFBQUEsR0FBRyxFQUFFdkIsbUJBQVVPO0FBM0JRLEtBQWhCLEVBNEJOSztBQTdCdUIsR0FBaEIsRUE4QlRBLFVBL0I2QjtBQWdDaENoQixFQUFBQSxRQUFRLEVBQUVJLG1CQUFVd0I7QUFoQ1ksQ0FBbEM7ZUFtQ2UvQixxQiIsInNvdXJjZVJvb3QiOiJidW5kbGU6Ly8vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBSZWNlaXB0Q2FyZENvbnRlbnQgZnJvbSAnLi9SZWNlaXB0Q2FyZENvbnRlbnQnO1xuXG5jb25zdCBSZWNlaXB0Q2FyZEF0dGFjaG1lbnQgPSAoeyBhdHRhY2htZW50OiB7IGNvbnRlbnQgfSwgZGlzYWJsZWQgfSkgPT4gKFxuICA8UmVjZWlwdENhcmRDb250ZW50IGNvbnRlbnQ9e2NvbnRlbnR9IGRpc2FibGVkPXtkaXNhYmxlZH0gLz5cbik7XG5cblJlY2VpcHRDYXJkQXR0YWNobWVudC5kZWZhdWx0UHJvcHMgPSB7XG4gIGRpc2FibGVkOiB1bmRlZmluZWRcbn07XG5cblJlY2VpcHRDYXJkQXR0YWNobWVudC5wcm9wVHlwZXMgPSB7XG4gIGF0dGFjaG1lbnQ6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY29udGVudDogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGJ1dHRvbnM6IFByb3BUeXBlcy5hcnJheSxcbiAgICAgIGZhY3RzOiBQcm9wVHlwZXMuYXJyYXlPZihcbiAgICAgICAgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgICBrZXk6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgICAgdmFsdWU6IFByb3BUeXBlcy5zdHJpbmdcbiAgICAgICAgfSlcbiAgICAgICksXG4gICAgICBpdGVtczogUHJvcFR5cGVzLmFycmF5T2YoXG4gICAgICAgIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgICAgaW1hZ2U6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgICAgICBhbHQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgICAgICAgIHRhcDogUHJvcFR5cGVzLmFueSxcbiAgICAgICAgICAgIHVybDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkXG4gICAgICAgICAgfSksXG4gICAgICAgICAgcHJpY2U6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgICAgICBxdWFudGl0eTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgICBzdWJ0aXRsZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgICB0YXA6IFByb3BUeXBlcy5hbnksXG4gICAgICAgICAgdGV4dDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgICB0aXRsZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkXG4gICAgICAgIH0pXG4gICAgICApLFxuICAgICAgdGFwOiBQcm9wVHlwZXMuYW55LFxuICAgICAgdGF4OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgdGl0bGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICB0b3RhbDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIHZhdDogUHJvcFR5cGVzLnN0cmluZ1xuICAgIH0pLmlzUmVxdWlyZWRcbiAgfSkuaXNSZXF1aXJlZCxcbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBSZWNlaXB0Q2FyZEF0dGFjaG1lbnQ7XG4iXX0=