"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _AdaptiveCardRenderer = _interopRequireDefault(require("./AdaptiveCardRenderer"));

var _useParseAdaptiveCardJSON = _interopRequireDefault(require("../hooks/internal/useParseAdaptiveCardJSON"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function stripSubmitAction(card) {
  if (!card.actions) {
    return card;
  } // Filter out HTTP action buttons


  var nextActions = card.actions.filter(function (action) {
    return action.type !== 'Action.Submit';
  }).map(function (action) {
    return action.type === 'Action.ShowCard' ? _objectSpread(_objectSpread({}, action), {}, {
      card: stripSubmitAction(action.card)
    }) : action;
  });
  return _objectSpread(_objectSpread({}, card), {}, {
    nextActions: nextActions
  });
}

var AdaptiveCardContent = function AdaptiveCardContent(_ref) {
  var actionPerformedClassName = _ref.actionPerformedClassName,
      content = _ref.content,
      disabled = _ref.disabled;
  var parseAdaptiveCardJSON = (0, _useParseAdaptiveCardJSON.default)();
  var card = (0, _react.useMemo)(function () {
    return parseAdaptiveCardJSON(stripSubmitAction(_objectSpread({
      version: '1.0'
    }, (0, _typeof2.default)(content) === 'object' ? content : {})), {
      ignoreErrors: true
    });
  }, [content, parseAdaptiveCardJSON]);
  return !!card && /*#__PURE__*/_react.default.createElement(_AdaptiveCardRenderer.default, {
    actionPerformedClassName: actionPerformedClassName,
    adaptiveCard: card,
    disabled: disabled
  });
};

AdaptiveCardContent.defaultProps = {
  actionPerformedClassName: '',
  disabled: undefined
};
AdaptiveCardContent.propTypes = {
  actionPerformedClassName: _propTypes.default.string,
  content: _propTypes.default.any.isRequired,
  disabled: _propTypes.default.bool
};
var _default = AdaptiveCardContent;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hZGFwdGl2ZUNhcmRzL0F0dGFjaG1lbnQvQWRhcHRpdmVDYXJkQ29udGVudC5qcyJdLCJuYW1lcyI6WyJzdHJpcFN1Ym1pdEFjdGlvbiIsImNhcmQiLCJhY3Rpb25zIiwibmV4dEFjdGlvbnMiLCJmaWx0ZXIiLCJhY3Rpb24iLCJ0eXBlIiwibWFwIiwiQWRhcHRpdmVDYXJkQ29udGVudCIsImFjdGlvblBlcmZvcm1lZENsYXNzTmFtZSIsImNvbnRlbnQiLCJkaXNhYmxlZCIsInBhcnNlQWRhcHRpdmVDYXJkSlNPTiIsInZlcnNpb24iLCJpZ25vcmVFcnJvcnMiLCJkZWZhdWx0UHJvcHMiLCJ1bmRlZmluZWQiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJzdHJpbmciLCJhbnkiLCJpc1JlcXVpcmVkIiwiYm9vbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUE7O0FBQ0E7Ozs7OztBQUVBLFNBQVNBLGlCQUFULENBQTJCQyxJQUEzQixFQUFpQztBQUMvQixNQUFJLENBQUNBLElBQUksQ0FBQ0MsT0FBVixFQUFtQjtBQUNqQixXQUFPRCxJQUFQO0FBQ0QsR0FIOEIsQ0FLL0I7OztBQUNBLE1BQU1FLFdBQVcsR0FBR0YsSUFBSSxDQUFDQyxPQUFMLENBQ2pCRSxNQURpQixDQUNWLFVBQUFDLE1BQU07QUFBQSxXQUFJQSxNQUFNLENBQUNDLElBQVAsS0FBZ0IsZUFBcEI7QUFBQSxHQURJLEVBRWpCQyxHQUZpQixDQUViLFVBQUFGLE1BQU07QUFBQSxXQUFLQSxNQUFNLENBQUNDLElBQVAsS0FBZ0IsaUJBQWhCLG1DQUF5Q0QsTUFBekM7QUFBaURKLE1BQUFBLElBQUksRUFBRUQsaUJBQWlCLENBQUNLLE1BQU0sQ0FBQ0osSUFBUjtBQUF4RSxTQUEwRkksTUFBL0Y7QUFBQSxHQUZPLENBQXBCO0FBSUEseUNBQVlKLElBQVo7QUFBa0JFLElBQUFBLFdBQVcsRUFBWEE7QUFBbEI7QUFDRDs7QUFFRCxJQUFNSyxtQkFBbUIsR0FBRyxTQUF0QkEsbUJBQXNCLE9BQXFEO0FBQUEsTUFBbERDLHdCQUFrRCxRQUFsREEsd0JBQWtEO0FBQUEsTUFBeEJDLE9BQXdCLFFBQXhCQSxPQUF3QjtBQUFBLE1BQWZDLFFBQWUsUUFBZkEsUUFBZTtBQUMvRSxNQUFNQyxxQkFBcUIsR0FBRyx3Q0FBOUI7QUFFQSxNQUFNWCxJQUFJLEdBQUcsb0JBQ1g7QUFBQSxXQUNFVyxxQkFBcUIsQ0FDbkJaLGlCQUFpQjtBQUNmYSxNQUFBQSxPQUFPLEVBQUU7QUFETSxPQUVYLHNCQUFPSCxPQUFQLE1BQW1CLFFBQW5CLEdBQThCQSxPQUE5QixHQUF3QyxFQUY3QixFQURFLEVBS25CO0FBQUVJLE1BQUFBLFlBQVksRUFBRTtBQUFoQixLQUxtQixDQUR2QjtBQUFBLEdBRFcsRUFTWCxDQUFDSixPQUFELEVBQVVFLHFCQUFWLENBVFcsQ0FBYjtBQVlBLFNBQ0UsQ0FBQyxDQUFDWCxJQUFGLGlCQUNFLDZCQUFDLDZCQUFEO0FBQ0UsSUFBQSx3QkFBd0IsRUFBRVEsd0JBRDVCO0FBRUUsSUFBQSxZQUFZLEVBQUVSLElBRmhCO0FBR0UsSUFBQSxRQUFRLEVBQUVVO0FBSFosSUFGSjtBQVNELENBeEJEOztBQTBCQUgsbUJBQW1CLENBQUNPLFlBQXBCLEdBQW1DO0FBQ2pDTixFQUFBQSx3QkFBd0IsRUFBRSxFQURPO0FBRWpDRSxFQUFBQSxRQUFRLEVBQUVLO0FBRnVCLENBQW5DO0FBS0FSLG1CQUFtQixDQUFDUyxTQUFwQixHQUFnQztBQUM5QlIsRUFBQUEsd0JBQXdCLEVBQUVTLG1CQUFVQyxNQUROO0FBRTlCVCxFQUFBQSxPQUFPLEVBQUVRLG1CQUFVRSxHQUFWLENBQWNDLFVBRk87QUFHOUJWLEVBQUFBLFFBQVEsRUFBRU8sbUJBQVVJO0FBSFUsQ0FBaEM7ZUFNZWQsbUIiLCJzb3VyY2VSb290IjoiYnVuZGxlOi8vLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IEFkYXB0aXZlQ2FyZFJlbmRlcmVyIGZyb20gJy4vQWRhcHRpdmVDYXJkUmVuZGVyZXInO1xuaW1wb3J0IHVzZVBhcnNlQWRhcHRpdmVDYXJkSlNPTiBmcm9tICcuLi9ob29rcy9pbnRlcm5hbC91c2VQYXJzZUFkYXB0aXZlQ2FyZEpTT04nO1xuXG5mdW5jdGlvbiBzdHJpcFN1Ym1pdEFjdGlvbihjYXJkKSB7XG4gIGlmICghY2FyZC5hY3Rpb25zKSB7XG4gICAgcmV0dXJuIGNhcmQ7XG4gIH1cblxuICAvLyBGaWx0ZXIgb3V0IEhUVFAgYWN0aW9uIGJ1dHRvbnNcbiAgY29uc3QgbmV4dEFjdGlvbnMgPSBjYXJkLmFjdGlvbnNcbiAgICAuZmlsdGVyKGFjdGlvbiA9PiBhY3Rpb24udHlwZSAhPT0gJ0FjdGlvbi5TdWJtaXQnKVxuICAgIC5tYXAoYWN0aW9uID0+IChhY3Rpb24udHlwZSA9PT0gJ0FjdGlvbi5TaG93Q2FyZCcgPyB7IC4uLmFjdGlvbiwgY2FyZDogc3RyaXBTdWJtaXRBY3Rpb24oYWN0aW9uLmNhcmQpIH0gOiBhY3Rpb24pKTtcblxuICByZXR1cm4geyAuLi5jYXJkLCBuZXh0QWN0aW9ucyB9O1xufVxuXG5jb25zdCBBZGFwdGl2ZUNhcmRDb250ZW50ID0gKHsgYWN0aW9uUGVyZm9ybWVkQ2xhc3NOYW1lLCBjb250ZW50LCBkaXNhYmxlZCB9KSA9PiB7XG4gIGNvbnN0IHBhcnNlQWRhcHRpdmVDYXJkSlNPTiA9IHVzZVBhcnNlQWRhcHRpdmVDYXJkSlNPTigpO1xuXG4gIGNvbnN0IGNhcmQgPSB1c2VNZW1vKFxuICAgICgpID0+XG4gICAgICBwYXJzZUFkYXB0aXZlQ2FyZEpTT04oXG4gICAgICAgIHN0cmlwU3VibWl0QWN0aW9uKHtcbiAgICAgICAgICB2ZXJzaW9uOiAnMS4wJyxcbiAgICAgICAgICAuLi4odHlwZW9mIGNvbnRlbnQgPT09ICdvYmplY3QnID8gY29udGVudCA6IHt9KVxuICAgICAgICB9KSxcbiAgICAgICAgeyBpZ25vcmVFcnJvcnM6IHRydWUgfVxuICAgICAgKSxcbiAgICBbY29udGVudCwgcGFyc2VBZGFwdGl2ZUNhcmRKU09OXVxuICApO1xuXG4gIHJldHVybiAoXG4gICAgISFjYXJkICYmIChcbiAgICAgIDxBZGFwdGl2ZUNhcmRSZW5kZXJlclxuICAgICAgICBhY3Rpb25QZXJmb3JtZWRDbGFzc05hbWU9e2FjdGlvblBlcmZvcm1lZENsYXNzTmFtZX1cbiAgICAgICAgYWRhcHRpdmVDYXJkPXtjYXJkfVxuICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAvPlxuICAgIClcbiAgKTtcbn07XG5cbkFkYXB0aXZlQ2FyZENvbnRlbnQuZGVmYXVsdFByb3BzID0ge1xuICBhY3Rpb25QZXJmb3JtZWRDbGFzc05hbWU6ICcnLFxuICBkaXNhYmxlZDogdW5kZWZpbmVkXG59O1xuXG5BZGFwdGl2ZUNhcmRDb250ZW50LnByb3BUeXBlcyA9IHtcbiAgYWN0aW9uUGVyZm9ybWVkQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjb250ZW50OiBQcm9wVHlwZXMuYW55LmlzUmVxdWlyZWQsXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbFxufTtcblxuZXhwb3J0IGRlZmF1bHQgQWRhcHRpdmVDYXJkQ29udGVudDtcbiJdfQ==