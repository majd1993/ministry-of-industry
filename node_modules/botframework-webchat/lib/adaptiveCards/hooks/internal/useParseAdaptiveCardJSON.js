"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useParseAdaptiveCardJSON;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _botframeworkWebchatComponent = require("botframework-webchat-component");

var _react = require("react");

var _useAdaptiveCardsPackage = _interopRequireDefault(require("../useAdaptiveCardsPackage"));

var useDirection = _botframeworkWebchatComponent.hooks.useDirection;

function updateRTLInline(element, rtl, adaptiveCardsPackage) {
  if (element instanceof adaptiveCardsPackage.Container) {
    element.rtl = rtl;
  } // Tree traversal to add rtl boolean to child elements


  if (element.getItemAt && element.getItemCount) {
    var count = element.getItemCount();

    for (var index = 0; index < count; index++) {
      var child = element.getItemAt(index);
      updateRTLInline(child, rtl, adaptiveCardsPackage);
    }
  }
}

function useParseAdaptiveCardJSON() {
  var _useAdaptiveCardsPack = (0, _useAdaptiveCardsPackage.default)(),
      _useAdaptiveCardsPack2 = (0, _slicedToArray2.default)(_useAdaptiveCardsPack, 1),
      adaptiveCardsPackage = _useAdaptiveCardsPack2[0];

  var _useDirection = useDirection(),
      _useDirection2 = (0, _slicedToArray2.default)(_useDirection, 1),
      direction = _useDirection2[0];

  var AdaptiveCard = adaptiveCardsPackage.AdaptiveCard;
  return (0, _react.useCallback)(function (content) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$ignoreErrors = _ref.ignoreErrors,
        ignoreErrors = _ref$ignoreErrors === void 0 ? false : _ref$ignoreErrors;

    if (!content) {
      return;
    }

    var card = new AdaptiveCard();
    var errors = []; // TODO: [P3] #3487 Move from "onParseError" to "card.parse(json, errors)"

    AdaptiveCard.onParseError = function (error) {
      return errors.push(error);
    };

    card.parse(content);
    updateRTLInline(card, direction === 'rtl', adaptiveCardsPackage);
    AdaptiveCard.onParseError = null;

    if (!ignoreErrors && errors.length) {
      console.error('botframework-webchat: Failed to parse Adaptive Card', {
        errors: errors
      });
      throw new Error('botframework-webchat: Failed to parse Adaptive Card');
    }

    return card;
  }, [AdaptiveCard, adaptiveCardsPackage, direction]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hZGFwdGl2ZUNhcmRzL2hvb2tzL2ludGVybmFsL3VzZVBhcnNlQWRhcHRpdmVDYXJkSlNPTi5qcyJdLCJuYW1lcyI6WyJ1c2VEaXJlY3Rpb24iLCJob29rcyIsInVwZGF0ZVJUTElubGluZSIsImVsZW1lbnQiLCJydGwiLCJhZGFwdGl2ZUNhcmRzUGFja2FnZSIsIkNvbnRhaW5lciIsImdldEl0ZW1BdCIsImdldEl0ZW1Db3VudCIsImNvdW50IiwiaW5kZXgiLCJjaGlsZCIsInVzZVBhcnNlQWRhcHRpdmVDYXJkSlNPTiIsImRpcmVjdGlvbiIsIkFkYXB0aXZlQ2FyZCIsImNvbnRlbnQiLCJpZ25vcmVFcnJvcnMiLCJjYXJkIiwiZXJyb3JzIiwib25QYXJzZUVycm9yIiwiZXJyb3IiLCJwdXNoIiwicGFyc2UiLCJsZW5ndGgiLCJjb25zb2xlIiwiRXJyb3IiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUE7O0lBRVFBLFksR0FBaUJDLG1DLENBQWpCRCxZOztBQUVSLFNBQVNFLGVBQVQsQ0FBeUJDLE9BQXpCLEVBQWtDQyxHQUFsQyxFQUF1Q0Msb0JBQXZDLEVBQTZEO0FBQzNELE1BQUlGLE9BQU8sWUFBWUUsb0JBQW9CLENBQUNDLFNBQTVDLEVBQXVEO0FBQ3JESCxJQUFBQSxPQUFPLENBQUNDLEdBQVIsR0FBY0EsR0FBZDtBQUNELEdBSDBELENBSzNEOzs7QUFDQSxNQUFJRCxPQUFPLENBQUNJLFNBQVIsSUFBcUJKLE9BQU8sQ0FBQ0ssWUFBakMsRUFBK0M7QUFDN0MsUUFBTUMsS0FBSyxHQUFHTixPQUFPLENBQUNLLFlBQVIsRUFBZDs7QUFFQSxTQUFLLElBQUlFLEtBQUssR0FBRyxDQUFqQixFQUFvQkEsS0FBSyxHQUFHRCxLQUE1QixFQUFtQ0MsS0FBSyxFQUF4QyxFQUE0QztBQUMxQyxVQUFNQyxLQUFLLEdBQUdSLE9BQU8sQ0FBQ0ksU0FBUixDQUFrQkcsS0FBbEIsQ0FBZDtBQUVBUixNQUFBQSxlQUFlLENBQUNTLEtBQUQsRUFBUVAsR0FBUixFQUFhQyxvQkFBYixDQUFmO0FBQ0Q7QUFDRjtBQUNGOztBQUVjLFNBQVNPLHdCQUFULEdBQW9DO0FBQUEsOEJBQ2xCLHVDQURrQjtBQUFBO0FBQUEsTUFDMUNQLG9CQUQwQzs7QUFBQSxzQkFFN0JMLFlBQVksRUFGaUI7QUFBQTtBQUFBLE1BRTFDYSxTQUYwQzs7QUFBQSxNQUl6Q0MsWUFKeUMsR0FJeEJULG9CQUp3QixDQUl6Q1MsWUFKeUM7QUFNakQsU0FBTyx3QkFDTCxVQUFDQyxPQUFELEVBQTRDO0FBQUEsbUZBQVAsRUFBTztBQUFBLGlDQUFoQ0MsWUFBZ0M7QUFBQSxRQUFoQ0EsWUFBZ0Msa0NBQWpCLEtBQWlCOztBQUMxQyxRQUFJLENBQUNELE9BQUwsRUFBYztBQUNaO0FBQ0Q7O0FBRUQsUUFBTUUsSUFBSSxHQUFHLElBQUlILFlBQUosRUFBYjtBQUNBLFFBQU1JLE1BQU0sR0FBRyxFQUFmLENBTjBDLENBUTFDOztBQUNBSixJQUFBQSxZQUFZLENBQUNLLFlBQWIsR0FBNEIsVUFBQUMsS0FBSztBQUFBLGFBQUlGLE1BQU0sQ0FBQ0csSUFBUCxDQUFZRCxLQUFaLENBQUo7QUFBQSxLQUFqQzs7QUFFQUgsSUFBQUEsSUFBSSxDQUFDSyxLQUFMLENBQVdQLE9BQVg7QUFFQWIsSUFBQUEsZUFBZSxDQUFDZSxJQUFELEVBQU9KLFNBQVMsS0FBSyxLQUFyQixFQUE0QlIsb0JBQTVCLENBQWY7QUFFQVMsSUFBQUEsWUFBWSxDQUFDSyxZQUFiLEdBQTRCLElBQTVCOztBQUVBLFFBQUksQ0FBQ0gsWUFBRCxJQUFpQkUsTUFBTSxDQUFDSyxNQUE1QixFQUFvQztBQUNsQ0MsTUFBQUEsT0FBTyxDQUFDSixLQUFSLENBQWMscURBQWQsRUFBcUU7QUFBRUYsUUFBQUEsTUFBTSxFQUFOQTtBQUFGLE9BQXJFO0FBRUEsWUFBTSxJQUFJTyxLQUFKLENBQVUscURBQVYsQ0FBTjtBQUNEOztBQUVELFdBQU9SLElBQVA7QUFDRCxHQXpCSSxFQTBCTCxDQUFDSCxZQUFELEVBQWVULG9CQUFmLEVBQXFDUSxTQUFyQyxDQTFCSyxDQUFQO0FBNEJEIiwic291cmNlUm9vdCI6ImJ1bmRsZTovLy8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBob29rcyB9IGZyb20gJ2JvdGZyYW1ld29yay13ZWJjaGF0LWNvbXBvbmVudCc7XG5pbXBvcnQgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHVzZUFkYXB0aXZlQ2FyZHNQYWNrYWdlIGZyb20gJy4uL3VzZUFkYXB0aXZlQ2FyZHNQYWNrYWdlJztcblxuY29uc3QgeyB1c2VEaXJlY3Rpb24gfSA9IGhvb2tzO1xuXG5mdW5jdGlvbiB1cGRhdGVSVExJbmxpbmUoZWxlbWVudCwgcnRsLCBhZGFwdGl2ZUNhcmRzUGFja2FnZSkge1xuICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIGFkYXB0aXZlQ2FyZHNQYWNrYWdlLkNvbnRhaW5lcikge1xuICAgIGVsZW1lbnQucnRsID0gcnRsO1xuICB9XG5cbiAgLy8gVHJlZSB0cmF2ZXJzYWwgdG8gYWRkIHJ0bCBib29sZWFuIHRvIGNoaWxkIGVsZW1lbnRzXG4gIGlmIChlbGVtZW50LmdldEl0ZW1BdCAmJiBlbGVtZW50LmdldEl0ZW1Db3VudCkge1xuICAgIGNvbnN0IGNvdW50ID0gZWxlbWVudC5nZXRJdGVtQ291bnQoKTtcblxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBjb3VudDsgaW5kZXgrKykge1xuICAgICAgY29uc3QgY2hpbGQgPSBlbGVtZW50LmdldEl0ZW1BdChpbmRleCk7XG5cbiAgICAgIHVwZGF0ZVJUTElubGluZShjaGlsZCwgcnRsLCBhZGFwdGl2ZUNhcmRzUGFja2FnZSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVBhcnNlQWRhcHRpdmVDYXJkSlNPTigpIHtcbiAgY29uc3QgW2FkYXB0aXZlQ2FyZHNQYWNrYWdlXSA9IHVzZUFkYXB0aXZlQ2FyZHNQYWNrYWdlKCk7XG4gIGNvbnN0IFtkaXJlY3Rpb25dID0gdXNlRGlyZWN0aW9uKCk7XG5cbiAgY29uc3QgeyBBZGFwdGl2ZUNhcmQgfSA9IGFkYXB0aXZlQ2FyZHNQYWNrYWdlO1xuXG4gIHJldHVybiB1c2VDYWxsYmFjayhcbiAgICAoY29udGVudCwgeyBpZ25vcmVFcnJvcnMgPSBmYWxzZSB9ID0ge30pID0+IHtcbiAgICAgIGlmICghY29udGVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGNhcmQgPSBuZXcgQWRhcHRpdmVDYXJkKCk7XG4gICAgICBjb25zdCBlcnJvcnMgPSBbXTtcblxuICAgICAgLy8gVE9ETzogW1AzXSAjMzQ4NyBNb3ZlIGZyb20gXCJvblBhcnNlRXJyb3JcIiB0byBcImNhcmQucGFyc2UoanNvbiwgZXJyb3JzKVwiXG4gICAgICBBZGFwdGl2ZUNhcmQub25QYXJzZUVycm9yID0gZXJyb3IgPT4gZXJyb3JzLnB1c2goZXJyb3IpO1xuXG4gICAgICBjYXJkLnBhcnNlKGNvbnRlbnQpO1xuXG4gICAgICB1cGRhdGVSVExJbmxpbmUoY2FyZCwgZGlyZWN0aW9uID09PSAncnRsJywgYWRhcHRpdmVDYXJkc1BhY2thZ2UpO1xuXG4gICAgICBBZGFwdGl2ZUNhcmQub25QYXJzZUVycm9yID0gbnVsbDtcblxuICAgICAgaWYgKCFpZ25vcmVFcnJvcnMgJiYgZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdib3RmcmFtZXdvcmstd2ViY2hhdDogRmFpbGVkIHRvIHBhcnNlIEFkYXB0aXZlIENhcmQnLCB7IGVycm9ycyB9KTtcblxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2JvdGZyYW1ld29yay13ZWJjaGF0OiBGYWlsZWQgdG8gcGFyc2UgQWRhcHRpdmUgQ2FyZCcpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2FyZDtcbiAgICB9LFxuICAgIFtBZGFwdGl2ZUNhcmQsIGFkYXB0aXZlQ2FyZHNQYWNrYWdlLCBkaXJlY3Rpb25dXG4gICk7XG59XG4iXX0=