"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = create;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _AudioConfig = require("microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/AudioConfig");

var _microsoftCognitiveservicesSpeechSdk = require("microsoft-cognitiveservices-speech-sdk");

var _MicAudioSource = require("microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/MicAudioSource");

var _createWebSpeechPonyfillFactory = _interopRequireDefault(require("./createWebSpeechPonyfillFactory"));

var _DirectLineSpeech = _interopRequireDefault(require("./DirectLineSpeech"));

var _patchDialogServiceConnectorInline = _interopRequireDefault(require("./patchDialogServiceConnectorInline"));

var _refreshDirectLineToken = _interopRequireDefault(require("./utils/refreshDirectLineToken"));

var _resolveFunctionOrReturnValue = _interopRequireDefault(require("./resolveFunctionOrReturnValue"));

/* eslint complexity: ["error", 33] */
var DIRECT_LINE_TOKEN_RENEWAL_INTERVAL = 900000; // 15 minutes

var TOKEN_RENEWAL_INTERVAL = 120000;

function create(_x) {
  return _create.apply(this, arguments);
}

function _create() {
  _create = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(_ref) {
    var audioConfig, audioContext, audioInputDeviceId, enableInternalHTTPSupport, enableTelemetry, fetchCredentials, speechRecognitionEndpointId, _ref$speechRecognitio, speechRecognitionLanguage, speechSynthesisDeploymentId, speechSynthesisOutputFormat, textNormalization, userID, username, _yield$resolveFunctio, authorizationToken, directLineToken, region, subscriptionKey, _audioConfig, source, config, dialogServiceConnector, interval, _interval, directLine, webSpeechPonyfillFactory;

    return _regenerator.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            audioConfig = _ref.audioConfig, audioContext = _ref.audioContext, audioInputDeviceId = _ref.audioInputDeviceId, enableInternalHTTPSupport = _ref.enableInternalHTTPSupport, enableTelemetry = _ref.enableTelemetry, fetchCredentials = _ref.fetchCredentials, speechRecognitionEndpointId = _ref.speechRecognitionEndpointId, _ref$speechRecognitio = _ref.speechRecognitionLanguage, speechRecognitionLanguage = _ref$speechRecognitio === void 0 ? typeof window !== 'undefined' && typeof window.navigator !== 'undefined' && window.navigator.language || 'en-US' : _ref$speechRecognitio, speechSynthesisDeploymentId = _ref.speechSynthesisDeploymentId, speechSynthesisOutputFormat = _ref.speechSynthesisOutputFormat, textNormalization = _ref.textNormalization, userID = _ref.userID, username = _ref.username;

            if (fetchCredentials) {
              _context3.next = 3;
              break;
            }

            throw new Error('"fetchCredentials" must be specified.');

          case 3:
            _context3.next = 5;
            return (0, _resolveFunctionOrReturnValue.default)(fetchCredentials);

          case 5:
            _yield$resolveFunctio = _context3.sent;
            authorizationToken = _yield$resolveFunctio.authorizationToken;
            directLineToken = _yield$resolveFunctio.directLineToken;
            region = _yield$resolveFunctio.region;
            subscriptionKey = _yield$resolveFunctio.subscriptionKey;

            if (!(!authorizationToken && !subscriptionKey || authorizationToken && subscriptionKey || authorizationToken && typeof authorizationToken !== 'string' || subscriptionKey && typeof subscriptionKey !== 'string' || enableInternalHTTPSupport && !directLineToken)) {
              _context3.next = 12;
              break;
            }

            throw new Error('"fetchCredentials" must return either "authorizationToken" or "subscriptionKey" as a non-empty string only. If enableInternalHTTPSupport is set to true, then it should also return a non-empty "directLineToken"');

          case 12:
            if (typeof enableTelemetry !== 'undefined') {
              console.warn('botframework-directlinespeech: Telemetry options are not yet supported. Please refer to Cognitive Services documentation for details.');
            }

            if (!(!region || typeof region !== 'string')) {
              _context3.next = 15;
              break;
            }

            throw new Error('"fetchCredentials" must return "region" as a non-empty string.');

          case 15:
            if (audioConfig && audioInputDeviceId) {
              console.warn('botframework-directlinespeech-sdk: Only "audioConfig" or "audioInputDeviceId" can be specified, but not both; ignoring "audioInputDeviceId".');
            } else if (!audioConfig) {
              if (audioInputDeviceId) {
                audioConfig = _AudioConfig.AudioConfig.fromMicrophoneInput(audioInputDeviceId);
              } else {
                audioConfig = _AudioConfig.AudioConfig.fromDefaultMicrophoneInput();
              } // WORKAROUND: In Speech SDK 1.12.0-1.13.1, it dropped support of macOS/iOS Safari.
              //             This code is adopted from microsoft-cognitiveservices-speech-sdk/src/common.browser/MicAudioSource.ts.
              //             We will not need this code when using Speech SDK 1.14.0 or up.
              // TODO: [P1] #3575 Remove the following lines when bumping to Speech SDK 1.14.0 or higher


              _audioConfig = audioConfig, source = _audioConfig.privSource;

              source.createAudioContext = function () {
                if (!!source.privContext) {
                  return;
                }

                var AudioContext = window.AudioContext || window.webkitAudioContext;

                if (typeof AudioContext === 'undefined') {
                  throw new Error('Browser does not support Web Audio API (AudioContext/webkitAudioContext is not available).');
                }

                if (navigator.mediaDevices.getSupportedConstraints().sampleRate) {
                  source.privContext = new AudioContext({
                    sampleRate: _MicAudioSource.MicAudioSource.AUDIOFORMAT.samplesPerSec
                  });
                } else {
                  source.privContext = new AudioContext();
                }
              };
            }

            if (speechRecognitionEndpointId) {
              console.warn('botframework-directlinespeech: Custom Speech is currently not supported; ignoring "speechRecognitionEndpointId".');
            }

            if (speechSynthesisDeploymentId) {
              console.warn('botframework-directlinespeech: Custom Voice is currently not supported; ignoring "speechSynthesisDeploymentId".');
            }

            if (speechSynthesisOutputFormat) {
              console.warn('botframework-directlinespeech: Synthesis output format is currently not supported; ignoring "speechSynthesisOutputFormat".');
            }

            if (textNormalization) {
              console.warn('botframework-directlinespeech: Text normalization is currently not supported; ignoring "textNormalization".');
            }

            if (userID || username) {
              console.warn('botframework-directlinespeech: Custom "userId" and "username" are currently not supported and are ignored.');
            }

            if (authorizationToken) {
              config = _microsoftCognitiveservicesSpeechSdk.BotFrameworkConfig.fromAuthorizationToken(authorizationToken, region);
            } else {
              config = _microsoftCognitiveservicesSpeechSdk.BotFrameworkConfig.fromSubscription(subscriptionKey, region);
            } // If internal HTTP support is enabled, switch the endpoint to Direct Line on Direct Line Speech service.


            if (enableInternalHTTPSupport) {
              config.setProperty(_microsoftCognitiveservicesSpeechSdk.PropertyId.SpeechServiceConnection_Endpoint, "wss://".concat(encodeURI(region), ".convai.speech.microsoft.com/directline/api/v1"));
              config.setProperty(_microsoftCognitiveservicesSpeechSdk.PropertyId.Conversation_ApplicationId, directLineToken);
            } // Supported options can be found in DialogConnectorFactory.js.
            // Set the language used for recognition.


            config.setProperty(_microsoftCognitiveservicesSpeechSdk.PropertyId.SpeechServiceConnection_RecoLanguage, speechRecognitionLanguage); // The following code sets the output format.
            // As advised by the Speech team, this API may be subject to future changes.
            // We are not enabling output format option because it does not send detailed output format to the bot, rendering this option useless.
            // config.setProperty(PropertyId.SpeechServiceResponse_OutputFormatOption, OutputFormat[OutputFormat.Detailed]);
            // Set the user ID for starting the conversation.

            userID && config.setProperty(_microsoftCognitiveservicesSpeechSdk.PropertyId.Conversation_From_Id, userID); // Set Custom Speech and Custom Voice.
            // The following code is copied from C#, and it is not working yet.
            // https://github.com/Azure-Samples/Cognitive-Services-Direct-Line-Speech-Client/blob/master/DLSpeechClient/MainWindow.xaml.cs
            // speechRecognitionEndpointId && config.setServiceProperty('cid', speechRecognitionEndpointId, ServicePropertyChannel.UriQueryParameter);
            // speechSynthesisDeploymentId && config.setProperty(PropertyId.conversation_Custom_Voice_Deployment_Ids, speechSynthesisDeploymentId);

            dialogServiceConnector = (0, _patchDialogServiceConnectorInline.default)(new _microsoftCognitiveservicesSpeechSdk.DialogServiceConnector(config, audioConfig));
            dialogServiceConnector.connect(); // Renew token per interval.

            if (authorizationToken) {
              interval = setInterval( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
                var _yield$resolveFunctio2, authorizationToken, nextRegion;

                return _regenerator.default.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        // #2660 If the connector has been disposed, we should stop renewing the token.
                        // TODO: We should use a public implementation if Speech SDK has one related to "privIsDisposed".
                        if (dialogServiceConnector.privIsDisposed) {
                          clearInterval(interval);
                        }

                        _context.next = 3;
                        return (0, _resolveFunctionOrReturnValue.default)(fetchCredentials);

                      case 3:
                        _yield$resolveFunctio2 = _context.sent;
                        authorizationToken = _yield$resolveFunctio2.authorizationToken;
                        nextRegion = _yield$resolveFunctio2.region;

                        if (authorizationToken) {
                          _context.next = 8;
                          break;
                        }

                        return _context.abrupt("return", console.warn('botframework-directlinespeech-sdk: Renew token failed because "fetchCredentials" call returned no authorization token.'));

                      case 8:
                        if (!(region !== nextRegion)) {
                          _context.next = 10;
                          break;
                        }

                        return _context.abrupt("return", console.warn('botframework-directlinespeech-sdk: Region change is not supported for renewed token. Authorization token is not renewed.'));

                      case 10:
                        dialogServiceConnector.authorizationToken = authorizationToken; // eslint-disable-line require-atomic-updates

                      case 11:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              })), TOKEN_RENEWAL_INTERVAL);
            } // Renew token per interval.


            if (enableInternalHTTPSupport) {
              _interval = setInterval( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
                var refreshedDirectLineToken;
                return _regenerator.default.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        // #2660 If the connector has been disposed, we should stop renewing the token.
                        // TODO: We should use a public implementation if Speech SDK has one related to "privIsDisposed".
                        if (dialogServiceConnector.privIsDisposed) {
                          clearInterval(_interval);
                        }

                        _context2.next = 3;
                        return (0, _refreshDirectLineToken.default)(directLineToken);

                      case 3:
                        refreshedDirectLineToken = _context2.sent;

                        if (refreshedDirectLineToken) {
                          _context2.next = 6;
                          break;
                        }

                        return _context2.abrupt("return", console.warn('botframework-directlinespeech-sdk: Renew token failed because call to refresh token Direct Line API did not return a new token.'));

                      case 6:
                        config.setProperty(_microsoftCognitiveservicesSpeechSdk.PropertyId.Conversation_ApplicationId, refreshedDirectLineToken);
                        dialogServiceConnector.properties.setProperty(_microsoftCognitiveservicesSpeechSdk.PropertyId.Conversation_ApplicationId, refreshedDirectLineToken);
                        dialogServiceConnector.connect();

                      case 9:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2);
              })), DIRECT_LINE_TOKEN_RENEWAL_INTERVAL);
            }

            directLine = new _DirectLineSpeech.default({
              dialogServiceConnector: dialogServiceConnector
            });
            webSpeechPonyfillFactory = (0, _createWebSpeechPonyfillFactory.default)({
              audioContext: audioContext,
              enableTelemetry: enableTelemetry,
              recognizer: dialogServiceConnector,
              textNormalization: textNormalization
            });
            return _context3.abrupt("return", {
              directLine: directLine,
              webSpeechPonyfillFactory: webSpeechPonyfillFactory
            });

          case 32:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _create.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,