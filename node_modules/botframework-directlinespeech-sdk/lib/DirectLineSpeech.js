"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _observable = _interopRequireDefault(require("core-js/features/observable"));

var _mathRandom = _interopRequireDefault(require("math-random"));

var _shareObservable = _interopRequireDefault(require("./shareObservable"));

var _SpeechSynthesisAudioStreamUtterance = _interopRequireDefault(require("./SpeechSynthesisAudioStreamUtterance"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function randomActivityId() {
  return (0, _mathRandom.default)().toString(36).substr(2);
}

var DirectLineSpeech = /*#__PURE__*/function () {
  function DirectLineSpeech(_ref) {
    var _this = this;

    var dialogServiceConnector = _ref.dialogServiceConnector;
    (0, _classCallCheck2.default)(this, DirectLineSpeech);
    var connectionStatusObserver;
    this.dialogServiceConnector = dialogServiceConnector;
    this.activity$ = (0, _shareObservable.default)(new _observable.default(function (observer) {
      _this._activityObserver = observer;
      connectionStatusObserver.next(0);
      connectionStatusObserver.next(1);
      connectionStatusObserver.next(2);
    }));
    this.connectionStatus$ = (0, _shareObservable.default)(new _observable.default(function (observer) {
      connectionStatusObserver = observer;
    }));

    dialogServiceConnector.activityReceived = function (_, _ref2) {
      var activity = _ref2.activity,
          audioStream = _ref2.audioStream;

      try {
        _this._activityObserver && _this._activityObserver.next(_objectSpread(_objectSpread({}, activity), {}, {
          channelData: _objectSpread(_objectSpread({}, activity.channelData), {}, {
            speechSynthesisUtterance: new _SpeechSynthesisAudioStreamUtterance.default(audioStream)
          }),
          from: _objectSpread(_objectSpread({}, activity.from), {}, {
            // Since DLSpeech service never ACK our outgoing activity, this activity must be from bot.
            role: 'bot'
          }),
          // Direct Line Speech server currently do not timestamp outgoing activities.
          // Thus, it will be easier to just re-timestamp every incoming/outgoing activities using local time.
          timestamp: new Date().toISOString()
        }));
      } catch (error) {
        console.error(error);
      }
    };
  }

  (0, _createClass2.default)(DirectLineSpeech, [{
    key: "end",
    value: function end() {
      try {
        this.dialogServiceConnector.close();
      } catch (err) {
        if (!~err.message.indexOf('already disposed')) {
          throw err;
        }
      }
    }
  }, {
    key: "postActivity",
    value: function postActivity(activity) {
      // Currently, Web Chat set user ID on all outgoing activities.
      // As Direct Line Speech maintains its own user ID, Web Chat should not set the user ID.
      // TODO: [P2] We should move user ID into options of DirectLineJS, instead of Web Chat.
      activity = _objectSpread(_objectSpread({}, activity), {}, {
        from: {
          role: 'user'
        }
      });

      try {
        // TODO: [P1] Direct Line Speech server currently do not ack the outgoing activities with any activity ID or timestamp.
        var pseudoActivityId = randomActivityId();
        var isSpeech = !!(activity.channelData && activity.channelData.speech); // Do not send the activity if it was from speech.

        if (!isSpeech) {
          // Starting from Speech SDK 1.13.0, they accept JSON text instead of JavaScript object.
          // https://github.com/microsoft/cognitive-services-speech-sdk-js/commit/2f3a35446692b6d492a6c68e3237a48de67e293f
          this.dialogServiceConnector.sendActivityAsync(JSON.stringify(activity));
        }

        this._activityObserver && this._activityObserver.next(_objectSpread(_objectSpread({}, activity), {}, {
          id: pseudoActivityId,
          timestamp: new Date().toISOString()
        }));
        return _observable.default.of(pseudoActivityId);
      } catch (err) {
        return new _observable.default(function (observer) {
          return observer.error(err);
        });
      }
    }
  }]);
  return DirectLineSpeech;
}(); // Interfaces not yet implemented in Web Chat:
// referenceGrammarId?: string,
// getSessionId? : () => Observable<string>


exports.default = DirectLineSpeech;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,