{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Contracts_1 = require(\"../../sdk/Contracts\");\n\nvar Exports_1 = require(\"../../sdk/Exports\");\n\nvar ConversationConnectionConfig_1 = require(\"./ConversationConnectionConfig\");\n\nvar ConversationUtils_1 = require(\"./ConversationUtils\");\n\nvar ConversationManager =\n/** @class */\nfunction () {\n  function ConversationManager() {\n    //\n    this.privRequestParams = ConversationConnectionConfig_1.ConversationConnectionConfig.configParams;\n    this.privErrors = ConversationConnectionConfig_1.ConversationConnectionConfig.restErrors;\n    this.privHost = ConversationConnectionConfig_1.ConversationConnectionConfig.host;\n    this.privApiVersion = ConversationConnectionConfig_1.ConversationConnectionConfig.apiVersion;\n    this.privRestPath = ConversationConnectionConfig_1.ConversationConnectionConfig.restPath;\n  }\n  /**\n   * Make a POST request to the Conversation Manager service endpoint to create or join a conversation.\n   * @param args\n   * @param conversationCode\n   * @param callback\n   * @param errorCallback\n   */\n\n\n  ConversationManager.prototype.createOrJoin = function (args, conversationCode, cb, err) {\n    var _this = this;\n\n    try {\n      Contracts_1.Contracts.throwIfNullOrUndefined(args, \"args\");\n      var languageCode = args.getProperty(Exports_1.PropertyId.SpeechServiceConnection_RecoLanguage, ConversationConnectionConfig_1.ConversationConnectionConfig.defaultLanguageCode);\n      var nickname = args.getProperty(Exports_1.PropertyId.ConversationTranslator_Name);\n      var endpointHost = args.getProperty(Exports_1.PropertyId.ConversationTranslator_Host, this.privHost);\n      var correlationId = args.getProperty(Exports_1.PropertyId.ConversationTranslator_CorrelationId);\n      var subscriptionKey = args.getProperty(Exports_1.PropertyId.SpeechServiceConnection_Key);\n      var subscriptionRegion = args.getProperty(Exports_1.PropertyId.SpeechServiceConnection_Region);\n      var authToken = args.getProperty(Exports_1.PropertyId.SpeechServiceAuthorization_Token);\n      Contracts_1.Contracts.throwIfNullOrWhitespace(languageCode, \"languageCode\");\n      Contracts_1.Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\n      Contracts_1.Contracts.throwIfNullOrWhitespace(endpointHost, \"endpointHost\");\n      var queryParams = {};\n      queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\n      queryParams[this.privRequestParams.languageCode] = languageCode;\n      queryParams[this.privRequestParams.nickname] = nickname;\n      var headers = {};\n\n      if (correlationId) {\n        headers[this.privRequestParams.correlationId] = correlationId;\n      }\n\n      headers[this.privRequestParams.clientAppId] = ConversationConnectionConfig_1.ConversationConnectionConfig.clientAppId;\n\n      if (conversationCode !== undefined) {\n        queryParams[this.privRequestParams.roomId] = conversationCode;\n      } else {\n        Contracts_1.Contracts.throwIfNullOrUndefined(subscriptionRegion, this.privErrors.authInvalidSubscriptionRegion);\n        headers[this.privRequestParams.subscriptionRegion] = subscriptionRegion;\n\n        if (subscriptionKey) {\n          headers[this.privRequestParams.subscriptionKey] = subscriptionKey;\n        } else if (authToken) {\n          headers[this.privRequestParams.authorization] = \"Bearer \" + authToken;\n        } else {\n          Contracts_1.Contracts.throwIfNullOrUndefined(subscriptionKey, this.privErrors.authInvalidSubscriptionKey);\n        }\n      }\n\n      var config = {};\n      config.headers = headers;\n      var endpoint = \"https://\" + endpointHost + this.privRestPath; // TODO: support a proxy and certificate validation\n\n      ConversationUtils_1.request(\"post\", endpoint, queryParams, null, config, function (response) {\n        var requestId = ConversationUtils_1.extractHeaderValue(_this.privRequestParams.requestId, response.headers);\n\n        if (!response.ok) {\n          if (!!err) {\n            // get the error\n            var errorMessage = _this.privErrors.invalidCreateJoinConversationResponse.replace(\"{status}\", response.status.toString());\n\n            var errMessageRaw = void 0;\n\n            try {\n              errMessageRaw = JSON.parse(response.data);\n              errorMessage += \" [\" + errMessageRaw.error.code + \": \" + errMessageRaw.error.message + \"]\";\n            } catch (e) {\n              errorMessage += \" [\" + response.data + \"]\";\n            }\n\n            if (requestId) {\n              errorMessage += \" \" + requestId;\n            }\n\n            err(errorMessage);\n          }\n\n          return;\n        }\n\n        var conversation = JSON.parse(response.data);\n\n        if (conversation) {\n          conversation.requestId = requestId;\n        }\n\n        if (!!cb) {\n          try {\n            cb(conversation);\n          } catch (e) {\n            if (!!err) {\n              err(e);\n            }\n          }\n\n          cb = undefined;\n        }\n      });\n    } catch (error) {\n      if (!!err) {\n        if (error instanceof Error) {\n          var typedError = error;\n          err(typedError.name + \": \" + typedError.message);\n        } else {\n          err(error);\n        }\n      }\n    }\n  };\n  /**\n   * Make a DELETE request to the Conversation Manager service endpoint to leave the conversation.\n   * @param args\n   * @param sessionToken\n   * @param callback\n   */\n\n\n  ConversationManager.prototype.leave = function (args, sessionToken, cb, err) {\n    try {\n      Contracts_1.Contracts.throwIfNullOrUndefined(args, this.privErrors.invalidArgs.replace(\"{arg}\", \"config\"));\n      Contracts_1.Contracts.throwIfNullOrWhitespace(sessionToken, this.privErrors.invalidArgs.replace(\"{arg}\", \"token\"));\n      var endpointHost = args.getProperty(Exports_1.PropertyId.ConversationTranslator_Host, this.privHost);\n      var correlationId = args.getProperty(Exports_1.PropertyId.ConversationTranslator_CorrelationId);\n      var queryParams = {};\n      queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\n      queryParams[this.privRequestParams.sessionToken] = sessionToken;\n      var headers = {};\n\n      if (correlationId) {\n        headers[this.privRequestParams.correlationId] = correlationId;\n      }\n\n      var config = {};\n      config.headers = headers;\n      var endpoint = \"https://\" + endpointHost + this.privRestPath; // TODO: support a proxy and certificate validation\n\n      ConversationUtils_1.request(\"delete\", endpoint, queryParams, null, config, function (response) {\n        if (!response.ok) {// ignore errors on delete\n        }\n\n        if (!!cb) {\n          try {\n            cb();\n          } catch (e) {\n            if (!!err) {\n              err(e);\n            }\n          }\n\n          cb = undefined;\n        }\n      });\n    } catch (error) {\n      if (!!err) {\n        if (error instanceof Error) {\n          var typedError = error;\n          err(typedError.name + \": \" + typedError.message);\n        } else {\n          err(error);\n        }\n      }\n    }\n  };\n\n  return ConversationManager;\n}();\n\nexports.ConversationManager = ConversationManager;","map":{"version":3,"sources":["src/common.speech/Transcription/ConversationManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IRequestOptions,\r\n    IRestParams,\r\n} from \"../../common.browser/RestConfigBase\";\r\nimport { IErrorMessages, IStringDictionary } from \"../../common/Exports\";\r\nimport { Contracts } from \"../../sdk/Contracts\";\r\nimport { PropertyCollection, PropertyId } from \"../../sdk/Exports\";\r\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig\";\r\nimport { IConversationResponseError, IInternalConversation, IResponse } from \"./ConversationTranslatorInterfaces\";\r\nimport { extractHeaderValue, request } from \"./ConversationUtils\";\r\n\r\nexport class ConversationManager {\r\n\r\n    private privRequestParams: IRestParams;\r\n    private privErrors: IErrorMessages;\r\n    private privHost: string;\r\n    private privApiVersion: string;\r\n    private privRestPath: string;\r\n\r\n    public constructor() {\r\n        //\r\n        this.privRequestParams = ConversationConnectionConfig.configParams;\r\n        this.privErrors = ConversationConnectionConfig.restErrors;\r\n        this.privHost = ConversationConnectionConfig.host;\r\n        this.privApiVersion = ConversationConnectionConfig.apiVersion;\r\n        this.privRestPath = ConversationConnectionConfig.restPath;\r\n    }\r\n\r\n    /**\r\n     * Make a POST request to the Conversation Manager service endpoint to create or join a conversation.\r\n     * @param args\r\n     * @param conversationCode\r\n     * @param callback\r\n     * @param errorCallback\r\n     */\r\n    public createOrJoin(args: PropertyCollection, conversationCode: string, cb?: any, err?: any): void {\r\n\r\n        try {\r\n\r\n            Contracts.throwIfNullOrUndefined(args, \"args\");\r\n\r\n            const languageCode: string = args.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, ConversationConnectionConfig.defaultLanguageCode);\r\n            const nickname: string = args.getProperty(PropertyId.ConversationTranslator_Name);\r\n            const endpointHost: string = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\r\n            const correlationId: string = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\r\n            const subscriptionKey: string = args.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n            const subscriptionRegion: string = args.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n            const authToken: string = args.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n\r\n            Contracts.throwIfNullOrWhitespace(languageCode, \"languageCode\");\r\n            Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\r\n            Contracts.throwIfNullOrWhitespace(endpointHost, \"endpointHost\");\r\n\r\n            const queryParams: IStringDictionary<string> = {};\r\n            queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\r\n            queryParams[this.privRequestParams.languageCode] = languageCode;\r\n            queryParams[this.privRequestParams.nickname] = nickname;\r\n\r\n            const headers: IStringDictionary<string> = {};\r\n            if (correlationId) {\r\n                headers[this.privRequestParams.correlationId] = correlationId;\r\n            }\r\n            headers[this.privRequestParams.clientAppId] = ConversationConnectionConfig.clientAppId;\r\n\r\n            if (conversationCode !== undefined) {\r\n                queryParams[this.privRequestParams.roomId] = conversationCode;\r\n            } else {\r\n                Contracts.throwIfNullOrUndefined(subscriptionRegion, this.privErrors.authInvalidSubscriptionRegion);\r\n                headers[this.privRequestParams.subscriptionRegion] = subscriptionRegion;\r\n                if (subscriptionKey) {\r\n                    headers[this.privRequestParams.subscriptionKey] = subscriptionKey;\r\n                } else if (authToken) {\r\n                    headers[this.privRequestParams.authorization] = `Bearer ${authToken}`;\r\n                } else {\r\n                    Contracts.throwIfNullOrUndefined(subscriptionKey, this.privErrors.authInvalidSubscriptionKey);\r\n                }\r\n            }\r\n\r\n            const config: IRequestOptions = {};\r\n            config.headers = headers;\r\n\r\n            const endpoint: string = `https://${endpointHost}${this.privRestPath}`;\r\n\r\n            // TODO: support a proxy and certificate validation\r\n            request(\"post\", endpoint, queryParams, null, config, (response: IResponse) => {\r\n\r\n                const requestId: string = extractHeaderValue(this.privRequestParams.requestId, response.headers);\r\n\r\n                if (!response.ok) {\r\n                    if (!!err) {\r\n                        // get the error\r\n                        let errorMessage: string = this.privErrors.invalidCreateJoinConversationResponse.replace(\"{status}\", response.status.toString());\r\n                        let errMessageRaw: IConversationResponseError;\r\n                        try {\r\n                            errMessageRaw = JSON.parse(response.data) as IConversationResponseError;\r\n                            errorMessage += ` [${errMessageRaw.error.code}: ${errMessageRaw.error.message}]`;\r\n                        } catch (e) {\r\n                            errorMessage += ` [${response.data}]`;\r\n                        }\r\n                        if (requestId) {\r\n                            errorMessage += ` ${requestId}`;\r\n                        }\r\n\r\n                        err(errorMessage);\r\n                    }\r\n                    return;\r\n                }\r\n                const conversation: IInternalConversation = JSON.parse(response.data) as IInternalConversation;\r\n                if (conversation) {\r\n                    conversation.requestId = requestId;\r\n                }\r\n                if (!!cb) {\r\n                    try {\r\n                        cb(conversation);\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(e);\r\n                        }\r\n                    }\r\n                    cb = undefined;\r\n                }\r\n\r\n            });\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Make a DELETE request to the Conversation Manager service endpoint to leave the conversation.\r\n     * @param args\r\n     * @param sessionToken\r\n     * @param callback\r\n     */\r\n    public leave(args: PropertyCollection, sessionToken: string, cb?: any, err?: any): void {\r\n\r\n        try {\r\n\r\n            Contracts.throwIfNullOrUndefined(args, this.privErrors.invalidArgs.replace(\"{arg}\", \"config\"));\r\n            Contracts.throwIfNullOrWhitespace(sessionToken, this.privErrors.invalidArgs.replace(\"{arg}\", \"token\"));\r\n\r\n            const endpointHost: string = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\r\n            const correlationId: string = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\r\n\r\n            const queryParams: IStringDictionary<string> = {};\r\n            queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\r\n            queryParams[this.privRequestParams.sessionToken] = sessionToken;\r\n\r\n            const headers: IStringDictionary<string> = {};\r\n            if (correlationId) {\r\n                headers[this.privRequestParams.correlationId] = correlationId;\r\n            }\r\n\r\n            const config: IRequestOptions = {};\r\n            config.headers = headers;\r\n\r\n            const endpoint: string = `https://${endpointHost}${this.privRestPath}`;\r\n\r\n            // TODO: support a proxy and certificate validation\r\n            request(\"delete\", endpoint, queryParams, null, config, (response: IResponse) => {\r\n\r\n                if (!response.ok) {\r\n                    // ignore errors on delete\r\n                }\r\n\r\n                if (!!cb) {\r\n                    try {\r\n                        cb();\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(e);\r\n                        }\r\n                    }\r\n                    cb = undefined;\r\n                }\r\n            });\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"script"}