{"ast":null,"code":"import _classCallCheck from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { Contracts } from \"../../sdk/Contracts\";\nimport { PropertyId } from \"../../sdk/Exports\";\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig\";\nimport { extractHeaderValue, request } from \"./ConversationUtils\";\nexport var ConversationManager = /*#__PURE__*/function () {\n  function ConversationManager() {\n    _classCallCheck(this, ConversationManager);\n\n    //\n    this.privRequestParams = ConversationConnectionConfig.configParams;\n    this.privErrors = ConversationConnectionConfig.restErrors;\n    this.privHost = ConversationConnectionConfig.host;\n    this.privApiVersion = ConversationConnectionConfig.apiVersion;\n    this.privRestPath = ConversationConnectionConfig.restPath;\n  }\n  /**\n   * Make a POST request to the Conversation Manager service endpoint to create or join a conversation.\n   * @param args\n   * @param conversationCode\n   * @param callback\n   * @param errorCallback\n   */\n\n\n  _createClass(ConversationManager, [{\n    key: \"createOrJoin\",\n    value: function createOrJoin(args, conversationCode, cb, err) {\n      var _this = this;\n\n      try {\n        Contracts.throwIfNullOrUndefined(args, \"args\");\n        var languageCode = args.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, ConversationConnectionConfig.defaultLanguageCode);\n        var nickname = args.getProperty(PropertyId.ConversationTranslator_Name);\n        var endpointHost = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\n        var correlationId = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\n        var subscriptionKey = args.getProperty(PropertyId.SpeechServiceConnection_Key);\n        var subscriptionRegion = args.getProperty(PropertyId.SpeechServiceConnection_Region);\n        var authToken = args.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n        Contracts.throwIfNullOrWhitespace(languageCode, \"languageCode\");\n        Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\n        Contracts.throwIfNullOrWhitespace(endpointHost, \"endpointHost\");\n        var queryParams = {};\n        queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\n        queryParams[this.privRequestParams.languageCode] = languageCode;\n        queryParams[this.privRequestParams.nickname] = nickname;\n        var headers = {};\n\n        if (correlationId) {\n          headers[this.privRequestParams.correlationId] = correlationId;\n        }\n\n        headers[this.privRequestParams.clientAppId] = ConversationConnectionConfig.clientAppId;\n\n        if (conversationCode !== undefined) {\n          queryParams[this.privRequestParams.roomId] = conversationCode;\n        } else {\n          Contracts.throwIfNullOrUndefined(subscriptionRegion, this.privErrors.authInvalidSubscriptionRegion);\n          headers[this.privRequestParams.subscriptionRegion] = subscriptionRegion;\n\n          if (subscriptionKey) {\n            headers[this.privRequestParams.subscriptionKey] = subscriptionKey;\n          } else if (authToken) {\n            headers[this.privRequestParams.authorization] = \"Bearer \".concat(authToken);\n          } else {\n            Contracts.throwIfNullOrUndefined(subscriptionKey, this.privErrors.authInvalidSubscriptionKey);\n          }\n        }\n\n        var config = {};\n        config.headers = headers;\n        var endpoint = \"https://\".concat(endpointHost).concat(this.privRestPath); // TODO: support a proxy and certificate validation\n\n        request(\"post\", endpoint, queryParams, null, config, function (response) {\n          var requestId = extractHeaderValue(_this.privRequestParams.requestId, response.headers);\n\n          if (!response.ok) {\n            if (!!err) {\n              // get the error\n              var errorMessage = _this.privErrors.invalidCreateJoinConversationResponse.replace(\"{status}\", response.status.toString());\n\n              var errMessageRaw;\n\n              try {\n                errMessageRaw = JSON.parse(response.data);\n                errorMessage += \" [\".concat(errMessageRaw.error.code, \": \").concat(errMessageRaw.error.message, \"]\");\n              } catch (e) {\n                errorMessage += \" [\".concat(response.data, \"]\");\n              }\n\n              if (requestId) {\n                errorMessage += \" \".concat(requestId);\n              }\n\n              err(errorMessage);\n            }\n\n            return;\n          }\n\n          var conversation = JSON.parse(response.data);\n\n          if (conversation) {\n            conversation.requestId = requestId;\n          }\n\n          if (!!cb) {\n            try {\n              cb(conversation);\n            } catch (e) {\n              if (!!err) {\n                err(e);\n              }\n            }\n\n            cb = undefined;\n          }\n        });\n      } catch (error) {\n        if (!!err) {\n          if (error instanceof Error) {\n            var typedError = error;\n            err(typedError.name + \": \" + typedError.message);\n          } else {\n            err(error);\n          }\n        }\n      }\n    }\n    /**\n     * Make a DELETE request to the Conversation Manager service endpoint to leave the conversation.\n     * @param args\n     * @param sessionToken\n     * @param callback\n     */\n\n  }, {\n    key: \"leave\",\n    value: function leave(args, sessionToken, cb, err) {\n      try {\n        Contracts.throwIfNullOrUndefined(args, this.privErrors.invalidArgs.replace(\"{arg}\", \"config\"));\n        Contracts.throwIfNullOrWhitespace(sessionToken, this.privErrors.invalidArgs.replace(\"{arg}\", \"token\"));\n        var endpointHost = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\n        var correlationId = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\n        var queryParams = {};\n        queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\n        queryParams[this.privRequestParams.sessionToken] = sessionToken;\n        var headers = {};\n\n        if (correlationId) {\n          headers[this.privRequestParams.correlationId] = correlationId;\n        }\n\n        var config = {};\n        config.headers = headers;\n        var endpoint = \"https://\".concat(endpointHost).concat(this.privRestPath); // TODO: support a proxy and certificate validation\n\n        request(\"delete\", endpoint, queryParams, null, config, function (response) {\n          if (!response.ok) {// ignore errors on delete\n          }\n\n          if (!!cb) {\n            try {\n              cb();\n            } catch (e) {\n              if (!!err) {\n                err(e);\n              }\n            }\n\n            cb = undefined;\n          }\n        });\n      } catch (error) {\n        if (!!err) {\n          if (error instanceof Error) {\n            var typedError = error;\n            err(typedError.name + \": \" + typedError.message);\n          } else {\n            err(error);\n          }\n        }\n      }\n    }\n  }]);\n\n  return ConversationManager;\n}();","map":{"version":3,"sources":["src/common.speech/Transcription/ConversationManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IRequestOptions,\r\n    IRestParams,\r\n} from \"../../common.browser/RestConfigBase\";\r\nimport { IErrorMessages, IStringDictionary } from \"../../common/Exports\";\r\nimport { Contracts } from \"../../sdk/Contracts\";\r\nimport { PropertyCollection, PropertyId } from \"../../sdk/Exports\";\r\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig\";\r\nimport { IConversationResponseError, IInternalConversation, IResponse } from \"./ConversationTranslatorInterfaces\";\r\nimport { extractHeaderValue, request } from \"./ConversationUtils\";\r\n\r\nexport class ConversationManager {\r\n\r\n    private privRequestParams: IRestParams;\r\n    private privErrors: IErrorMessages;\r\n    private privHost: string;\r\n    private privApiVersion: string;\r\n    private privRestPath: string;\r\n\r\n    public constructor() {\r\n        //\r\n        this.privRequestParams = ConversationConnectionConfig.configParams;\r\n        this.privErrors = ConversationConnectionConfig.restErrors;\r\n        this.privHost = ConversationConnectionConfig.host;\r\n        this.privApiVersion = ConversationConnectionConfig.apiVersion;\r\n        this.privRestPath = ConversationConnectionConfig.restPath;\r\n    }\r\n\r\n    /**\r\n     * Make a POST request to the Conversation Manager service endpoint to create or join a conversation.\r\n     * @param args\r\n     * @param conversationCode\r\n     * @param callback\r\n     * @param errorCallback\r\n     */\r\n    public createOrJoin(args: PropertyCollection, conversationCode: string, cb?: any, err?: any): void {\r\n\r\n        try {\r\n\r\n            Contracts.throwIfNullOrUndefined(args, \"args\");\r\n\r\n            const languageCode: string = args.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, ConversationConnectionConfig.defaultLanguageCode);\r\n            const nickname: string = args.getProperty(PropertyId.ConversationTranslator_Name);\r\n            const endpointHost: string = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\r\n            const correlationId: string = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\r\n            const subscriptionKey: string = args.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n            const subscriptionRegion: string = args.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n            const authToken: string = args.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n\r\n            Contracts.throwIfNullOrWhitespace(languageCode, \"languageCode\");\r\n            Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\r\n            Contracts.throwIfNullOrWhitespace(endpointHost, \"endpointHost\");\r\n\r\n            const queryParams: IStringDictionary<string> = {};\r\n            queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\r\n            queryParams[this.privRequestParams.languageCode] = languageCode;\r\n            queryParams[this.privRequestParams.nickname] = nickname;\r\n\r\n            const headers: IStringDictionary<string> = {};\r\n            if (correlationId) {\r\n                headers[this.privRequestParams.correlationId] = correlationId;\r\n            }\r\n            headers[this.privRequestParams.clientAppId] = ConversationConnectionConfig.clientAppId;\r\n\r\n            if (conversationCode !== undefined) {\r\n                queryParams[this.privRequestParams.roomId] = conversationCode;\r\n            } else {\r\n                Contracts.throwIfNullOrUndefined(subscriptionRegion, this.privErrors.authInvalidSubscriptionRegion);\r\n                headers[this.privRequestParams.subscriptionRegion] = subscriptionRegion;\r\n                if (subscriptionKey) {\r\n                    headers[this.privRequestParams.subscriptionKey] = subscriptionKey;\r\n                } else if (authToken) {\r\n                    headers[this.privRequestParams.authorization] = `Bearer ${authToken}`;\r\n                } else {\r\n                    Contracts.throwIfNullOrUndefined(subscriptionKey, this.privErrors.authInvalidSubscriptionKey);\r\n                }\r\n            }\r\n\r\n            const config: IRequestOptions = {};\r\n            config.headers = headers;\r\n\r\n            const endpoint: string = `https://${endpointHost}${this.privRestPath}`;\r\n\r\n            // TODO: support a proxy and certificate validation\r\n            request(\"post\", endpoint, queryParams, null, config, (response: IResponse) => {\r\n\r\n                const requestId: string = extractHeaderValue(this.privRequestParams.requestId, response.headers);\r\n\r\n                if (!response.ok) {\r\n                    if (!!err) {\r\n                        // get the error\r\n                        let errorMessage: string = this.privErrors.invalidCreateJoinConversationResponse.replace(\"{status}\", response.status.toString());\r\n                        let errMessageRaw: IConversationResponseError;\r\n                        try {\r\n                            errMessageRaw = JSON.parse(response.data) as IConversationResponseError;\r\n                            errorMessage += ` [${errMessageRaw.error.code}: ${errMessageRaw.error.message}]`;\r\n                        } catch (e) {\r\n                            errorMessage += ` [${response.data}]`;\r\n                        }\r\n                        if (requestId) {\r\n                            errorMessage += ` ${requestId}`;\r\n                        }\r\n\r\n                        err(errorMessage);\r\n                    }\r\n                    return;\r\n                }\r\n                const conversation: IInternalConversation = JSON.parse(response.data) as IInternalConversation;\r\n                if (conversation) {\r\n                    conversation.requestId = requestId;\r\n                }\r\n                if (!!cb) {\r\n                    try {\r\n                        cb(conversation);\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(e);\r\n                        }\r\n                    }\r\n                    cb = undefined;\r\n                }\r\n\r\n            });\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Make a DELETE request to the Conversation Manager service endpoint to leave the conversation.\r\n     * @param args\r\n     * @param sessionToken\r\n     * @param callback\r\n     */\r\n    public leave(args: PropertyCollection, sessionToken: string, cb?: any, err?: any): void {\r\n\r\n        try {\r\n\r\n            Contracts.throwIfNullOrUndefined(args, this.privErrors.invalidArgs.replace(\"{arg}\", \"config\"));\r\n            Contracts.throwIfNullOrWhitespace(sessionToken, this.privErrors.invalidArgs.replace(\"{arg}\", \"token\"));\r\n\r\n            const endpointHost: string = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\r\n            const correlationId: string = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\r\n\r\n            const queryParams: IStringDictionary<string> = {};\r\n            queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\r\n            queryParams[this.privRequestParams.sessionToken] = sessionToken;\r\n\r\n            const headers: IStringDictionary<string> = {};\r\n            if (correlationId) {\r\n                headers[this.privRequestParams.correlationId] = correlationId;\r\n            }\r\n\r\n            const config: IRequestOptions = {};\r\n            config.headers = headers;\r\n\r\n            const endpoint: string = `https://${endpointHost}${this.privRestPath}`;\r\n\r\n            // TODO: support a proxy and certificate validation\r\n            request(\"delete\", endpoint, queryParams, null, config, (response: IResponse) => {\r\n\r\n                if (!response.ok) {\r\n                    // ignore errors on delete\r\n                }\r\n\r\n                if (!!cb) {\r\n                    try {\r\n                        cb();\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(e);\r\n                        }\r\n                    }\r\n                    cb = undefined;\r\n                }\r\n            });\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}