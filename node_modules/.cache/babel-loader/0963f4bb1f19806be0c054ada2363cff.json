{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Exports_1 = require(\"../../common/Exports\");\n\nvar ConversationConnectionMessage_1 = require(\"./ConversationConnectionMessage\");\n/**\n * Based off WebsocketMessageFormatter. The messages for Conversation Translator have some variations from the Speech messages.\n */\n\n\nvar ConversationWebsocketMessageFormatter =\n/** @class */\nfunction () {\n  function ConversationWebsocketMessageFormatter() {\n    /**\n     * Format incoming messages: text (speech partial/final, IM) or binary (tts)\n     */\n    this.toConnectionMessage = function (message) {\n      var deferral = new Exports_1.Deferred();\n\n      try {\n        if (message.messageType === Exports_1.MessageType.Text) {\n          var incomingMessage = new ConversationConnectionMessage_1.ConversationConnectionMessage(message.messageType, message.textContent, {}, message.id);\n          deferral.resolve(incomingMessage);\n        } else if (message.messageType === Exports_1.MessageType.Binary) {\n          deferral.resolve(new ConversationConnectionMessage_1.ConversationConnectionMessage(message.messageType, message.binaryContent, undefined, message.id));\n        }\n      } catch (e) {\n        deferral.reject(\"Error formatting the message. Error: \" + e);\n      }\n\n      return deferral.promise();\n    };\n    /**\n     * Format outgoing messages: text (commands or IM)\n     */\n\n\n    this.fromConnectionMessage = function (message) {\n      var deferral = new Exports_1.Deferred();\n\n      try {\n        if (message.messageType === Exports_1.MessageType.Text) {\n          var payload = \"\" + (message.textBody ? message.textBody : \"\");\n          deferral.resolve(new Exports_1.RawWebsocketMessage(Exports_1.MessageType.Text, payload, message.id));\n        }\n      } catch (e) {\n        deferral.reject(\"Error formatting the message. \" + e);\n      }\n\n      return deferral.promise();\n    };\n  }\n\n  return ConversationWebsocketMessageFormatter;\n}();\n\nexports.ConversationWebsocketMessageFormatter = ConversationWebsocketMessageFormatter;","map":{"version":3,"sources":["src/common.speech/Transcription/ConversationWebsocketMessageFormatter.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;AAEA,IAAA,SAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AASA,IAAA,+BAAA,GAAA,OAAA,CAAA,iCAAA,CAAA;AAEA;;AAEG;;;AACH,IAAA,qCAAA;AAAA;AAAA,YAAA;AAAA,WAAA,qCAAA,GAAA;AAEI;;AAEG;AACI,SAAA,mBAAA,GAAsB,UAAC,OAAD,EAA6B;AACtD,UAAM,QAAQ,GAAG,IAAI,SAAA,CAAA,QAAJ,EAAjB;;AAEA,UAAI;AACA,YAAI,OAAO,CAAC,WAAR,KAAwB,SAAA,CAAA,WAAA,CAAY,IAAxC,EAA8C;AAC1C,cAAM,eAAe,GAAkC,IAAI,+BAAA,CAAA,6BAAJ,CAAkC,OAAO,CAAC,WAA1C,EAAuD,OAAO,CAAC,WAA/D,EAA4E,EAA5E,EAAgF,OAAO,CAAC,EAAxF,CAAvD;AACA,UAAA,QAAQ,CAAC,OAAT,CAAiB,eAAjB;AACH,SAHD,MAGO,IAAI,OAAO,CAAC,WAAR,KAAwB,SAAA,CAAA,WAAA,CAAY,MAAxC,EAAgD;AACnD,UAAA,QAAQ,CAAC,OAAT,CAAiB,IAAI,+BAAA,CAAA,6BAAJ,CAAkC,OAAO,CAAC,WAA1C,EAAuD,OAAO,CAAC,aAA/D,EAA8E,SAA9E,EAAyF,OAAO,CAAC,EAAjG,CAAjB;AACH;AACJ,OAPD,CAOE,OAAO,CAAP,EAAU;AACR,QAAA,QAAQ,CAAC,MAAT,CAAgB,0CAAwC,CAAxD;AACH;;AAED,aAAO,QAAQ,CAAC,OAAT,EAAP;AACH,KAfM;AAiBP;;AAEG;;;AACI,SAAA,qBAAA,GAAwB,UAAC,OAAD,EAA2B;AAEtD,UAAM,QAAQ,GAAG,IAAI,SAAA,CAAA,QAAJ,EAAjB;;AAEA,UAAI;AACA,YAAI,OAAO,CAAC,WAAR,KAAwB,SAAA,CAAA,WAAA,CAAY,IAAxC,EAA8C;AAC1C,cAAM,OAAO,GAAG,MAAG,OAAO,CAAC,QAAR,GAAmB,OAAO,CAAC,QAA3B,GAAsC,EAAzC,CAAhB;AACA,UAAA,QAAQ,CAAC,OAAT,CAAiB,IAAI,SAAA,CAAA,mBAAJ,CAAwB,SAAA,CAAA,WAAA,CAAY,IAApC,EAA0C,OAA1C,EAAmD,OAAO,CAAC,EAA3D,CAAjB;AACH;AACJ,OALD,CAKE,OAAO,CAAP,EAAU;AACR,QAAA,QAAQ,CAAC,MAAT,CAAgB,mCAAiC,CAAjD;AACH;;AAED,aAAO,QAAQ,CAAC,OAAT,EAAP;AACH,KAdM;AAeV;;AAAD,SAAA,qCAAA;AAAC,CAxCD,EAAA;;AAAa,OAAA,CAAA,qCAAA,GAAA,qCAAA","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionMessage,\r\n    Deferred,\r\n    IStringDictionary,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    Promise,\r\n    RawWebsocketMessage,\r\n} from \"../../common/Exports\";\r\nimport { ConversationConnectionMessage } from \"./ConversationConnectionMessage\";\r\n\r\n/**\r\n * Based off WebsocketMessageFormatter. The messages for Conversation Translator have some variations from the Speech messages.\r\n */\r\nexport class ConversationWebsocketMessageFormatter implements IWebsocketMessageFormatter {\r\n\r\n    /**\r\n     * Format incoming messages: text (speech partial/final, IM) or binary (tts)\r\n     */\r\n    public toConnectionMessage = (message: RawWebsocketMessage): Promise<ConversationConnectionMessage> => {\r\n        const deferral = new Deferred<ConversationConnectionMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const incomingMessage: ConversationConnectionMessage = new ConversationConnectionMessage(message.messageType, message.textContent, {}, message.id);\r\n                deferral.resolve(incomingMessage);\r\n            } else if (message.messageType === MessageType.Binary) {\r\n                deferral.resolve(new ConversationConnectionMessage(message.messageType, message.binaryContent, undefined, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. Error: ${e}`);\r\n        }\r\n\r\n        return deferral.promise();\r\n    }\r\n\r\n    /**\r\n     * Format outgoing messages: text (commands or IM)\r\n     */\r\n    public fromConnectionMessage = (message: ConnectionMessage): Promise<RawWebsocketMessage> => {\r\n\r\n        const deferral = new Deferred<RawWebsocketMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const payload = `${message.textBody ? message.textBody : \"\"}`;\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Text, payload, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. ${e}`);\r\n        }\r\n\r\n        return deferral.promise();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}