{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _callee;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _effects = require(\"redux-saga/effects\");\n\nvar _connect = require(\"../actions/connect\");\n\nvar _createPromiseQueue2 = _interopRequireDefault(require(\"../createPromiseQueue\"));\n\nvar _setNotification = _interopRequireDefault(require(\"../actions/setNotification\"));\n\nvar _marked = /*#__PURE__*/_regenerator[\"default\"].mark(connectionStatusToNotification),\n    _marked2 = /*#__PURE__*/_regenerator[\"default\"].mark(_callee);\n\nvar CONNECTIVITY_STATUS_NOTIFICATION_ID = 'connectivitystatus';\n\nfunction subscribeToPromiseQueue(observable) {\n  var _createPromiseQueue = (0, _createPromiseQueue2[\"default\"])(),\n      push = _createPromiseQueue.push,\n      shift = _createPromiseQueue.shift;\n\n  var subscription = observable.subscribe({\n    next: push\n  });\n  return {\n    shift: shift,\n    unsubscribe: function unsubscribe() {\n      subscription.unsubscribe();\n    }\n  };\n}\n\nfunction connectionStatusToNotification(_ref) {\n  var directLine, _subscribeToPromiseQu, shift, unsubscribe, reconnecting, value;\n\n  return _regenerator[\"default\"].wrap(function connectionStatusToNotification$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          directLine = _ref.payload.directLine;\n          _subscribeToPromiseQu = subscribeToPromiseQueue(directLine.connectionStatus$), shift = _subscribeToPromiseQu.shift, unsubscribe = _subscribeToPromiseQu.unsubscribe;\n          _context.prev = 2;\n\n        case 3:\n          _context.next = 5;\n          return (0, _effects.call)(shift);\n\n        case 5:\n          value = _context.sent;\n          _context.t0 = value;\n          _context.next = _context.t0 === 0 ? 9 : _context.t0 === 1 ? 9 : _context.t0 === 2 ? 12 : _context.t0 === 3 ? 16 : _context.t0 === 4 ? 16 : 20;\n          break;\n\n        case 9:\n          _context.next = 11;\n          return (0, _effects.put)((0, _setNotification[\"default\"])({\n            id: CONNECTIVITY_STATUS_NOTIFICATION_ID,\n            level: 'info',\n            message: reconnecting ? 'reconnecting' : 'connecting'\n          }));\n\n        case 11:\n          return _context.abrupt(\"break\", 21);\n\n        case 12:\n          reconnecting = 1;\n          _context.next = 15;\n          return (0, _effects.put)((0, _setNotification[\"default\"])({\n            id: CONNECTIVITY_STATUS_NOTIFICATION_ID,\n            level: 'success',\n            message: 'connected'\n          }));\n\n        case 15:\n          return _context.abrupt(\"break\", 21);\n\n        case 16:\n          reconnecting = 1;\n          _context.next = 19;\n          return (0, _effects.put)((0, _setNotification[\"default\"])({\n            id: CONNECTIVITY_STATUS_NOTIFICATION_ID,\n            level: 'error',\n            message: 'failedtoconnect'\n          }));\n\n        case 19:\n          return _context.abrupt(\"break\", 21);\n\n        case 20:\n          return _context.abrupt(\"break\", 21);\n\n        case 21:\n          _context.next = 3;\n          break;\n\n        case 23:\n          _context.prev = 23;\n          unsubscribe();\n          return _context.finish(23);\n\n        case 26:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[2,, 23, 26]]);\n}\n\nfunction _callee() {\n  return _regenerator[\"default\"].wrap(function _callee$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return (0, _effects.takeLatest)(_connect.CONNECT, connectionStatusToNotification);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["../../src/sagas/connectionStatusToNotificationSaga.js"],"names":["CONNECTIVITY_STATUS_NOTIFICATION_ID","push","shift","subscription","next","unsubscribe","connectionStatusToNotification","directLine","subscribeToPromiseQueue","value","id","level","message","reconnecting","CONNECT"],"mappings":"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","sourcesContent":["/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 1, 2, 3, 4] }] */\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\n\nimport { CONNECT } from '../actions/connect';\nimport createPromiseQueue from '../createPromiseQueue';\nimport setNotification from '../actions/setNotification';\n\nconst CONNECTIVITY_STATUS_NOTIFICATION_ID = 'connectivitystatus';\n\nfunction subscribeToPromiseQueue(observable) {\n  const { push, shift } = createPromiseQueue();\n  const subscription = observable.subscribe({ next: push });\n\n  return {\n    shift,\n    unsubscribe() {\n      subscription.unsubscribe();\n    }\n  };\n}\n\nfunction* connectionStatusToNotification({ payload: { directLine } }) {\n  const { shift, unsubscribe } = subscribeToPromiseQueue(directLine.connectionStatus$);\n\n  try {\n    let reconnecting;\n\n    for (;;) {\n      const value = yield call(shift);\n\n      switch (value) {\n        case 0:\n        case 1:\n          yield put(\n            setNotification({\n              id: CONNECTIVITY_STATUS_NOTIFICATION_ID,\n              level: 'info',\n              message: reconnecting ? 'reconnecting' : 'connecting'\n            })\n          );\n\n          break;\n\n        case 2:\n          reconnecting = 1;\n\n          yield put(\n            setNotification({\n              id: CONNECTIVITY_STATUS_NOTIFICATION_ID,\n              level: 'success',\n              message: 'connected'\n            })\n          );\n\n          break;\n\n        case 3:\n        case 4:\n          reconnecting = 1;\n\n          yield put(\n            setNotification({\n              id: CONNECTIVITY_STATUS_NOTIFICATION_ID,\n              level: 'error',\n              message: 'failedtoconnect'\n            })\n          );\n\n          break;\n\n        default:\n          break;\n      }\n    }\n  } finally {\n    unsubscribe();\n  }\n}\n\nexport default function*() {\n  yield takeLatest(CONNECT, connectionStatusToNotification);\n}\n"],"sourceRoot":"core:///"},"metadata":{},"sourceType":"script"}