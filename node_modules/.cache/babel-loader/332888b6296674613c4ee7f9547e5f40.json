{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parse = parse;\nexports.default = readDataURIToBlob;\n\nvar _base64Js = require(\"base64-js\");\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar PATTERN = /^data:((?:[\\0-\\+\\x2D-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*?)(;(base64))?,([\\+\\/-9=A-Za-z]+)/;\nvar DEFAULT_CONTENT_TYPE = 'text/plain;charset=US-ASCII';\n\nfunction parse(dataURI) {\n  var match = PATTERN.exec(dataURI);\n\n  if (!match) {\n    return;\n  }\n\n  var _match = _slicedToArray(match, 5),\n      contentType = _match[1],\n      encoding = _match[3],\n      base64 = _match[4];\n\n  if (encoding !== 'base64') {\n    return;\n  }\n\n  return {\n    base64: base64,\n    contentType: contentType || DEFAULT_CONTENT_TYPE,\n    encoding: encoding\n  };\n}\n\nfunction readDataURIToBlob(dataURI) {\n  var parsed = parse(dataURI);\n\n  if (!parsed) {\n    return;\n  }\n\n  return new Blob([(0, _base64Js.toByteArray)(parsed.base64)], {\n    type: parsed.contentType\n  });\n}","map":{"version":3,"sources":["../../src/Utils/readDataURIToBlob.js"],"names":["PATTERN","DEFAULT_CONTENT_TYPE","match","contentType","encoding","base64","parsed","parse","type"],"mappings":";;;;;;;;AAAA,IAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,OAAO,GAAb,sLAAA;AAEA,IAAMC,oBAAoB,GAA1B,6BAAA;;AAEO,SAAA,KAAA,CAAA,OAAA,EAAwB;AAC7B,MAAMC,KAAK,GAAGF,OAAO,CAAPA,IAAAA,CAAd,OAAcA,CAAd;;AAEA,MAAI,CAAJ,KAAA,EAAY;AACV;AACD;;AAL4B,MAAA,MAAA,GAAA,cAAA,CAAA,KAAA,EAAA,CAAA,CAAA;AAAA,MAOpBG,WAPoB,GAAA,MAAA,CAAA,CAAA,CAAA;AAAA,MAOLC,QAPK,GAAA,MAAA,CAAA,CAAA,CAAA;AAAA,MAOKC,MAPL,GAAA,MAAA,CAAA,CAAA,CAAA;;AAS7B,MAAID,QAAQ,KAAZ,QAAA,EAA2B;AACzB;AACD;;AAED,SAAO;AAAEC,IAAAA,MAAM,EAAR,MAAA;AAAUF,IAAAA,WAAW,EAAEA,WAAW,IAAlC,oBAAA;AAA4DC,IAAAA,QAAQ,EAARA;AAA5D,GAAP;AACD;;AAEc,SAAA,iBAAA,CAAA,OAAA,EAAoC;AACjD,MAAME,MAAM,GAAGC,KAAK,CAApB,OAAoB,CAApB;;AAEA,MAAI,CAAJ,MAAA,EAAa;AACX;AACD;;AAED,SAAO,IAAA,IAAA,CAAS,CAAC,CAAA,GAAA,SAAA,CAAA,WAAA,EAAYD,MAAM,CAA5B,MAAU,CAAD,CAAT,EAAuC;AAAEE,IAAAA,IAAI,EAAEF,MAAM,CAACH;AAAf,GAAvC,CAAP;AACD","sourcesContent":["import { toByteArray } from 'base64-js';\n\nconst PATTERN = /^data:([^,]*?)(;(base64)){0,1},([A-Za-z0-9+/=]+)/u;\n\nconst DEFAULT_CONTENT_TYPE = 'text/plain;charset=US-ASCII';\n\nexport function parse(dataURI) {\n  const match = PATTERN.exec(dataURI);\n\n  if (!match) {\n    return;\n  }\n\n  const [, contentType, , encoding, base64] = match;\n\n  if (encoding !== 'base64') {\n    return;\n  }\n\n  return { base64, contentType: contentType || DEFAULT_CONTENT_TYPE, encoding };\n}\n\nexport default function readDataURIToBlob(dataURI) {\n  const parsed = parse(dataURI);\n\n  if (!parsed) {\n    return;\n  }\n\n  return new Blob([toByteArray(parsed.base64)], { type: parsed.contentType });\n}\n"],"sourceRoot":"component:///"},"metadata":{},"sourceType":"script"}