{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _SpeechSynthesisVoice = _interopRequireDefault(require(\"./SpeechSynthesisVoice\"));\n/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 1, -1] }] */\n\n\nfunction fetchCustomVoices(_x) {\n  return _fetchCustomVoices.apply(this, arguments);\n}\n\nfunction _fetchCustomVoices() {\n  _fetchCustomVoices = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(_ref) {\n    var customVoiceHostname, deploymentId, region, subscriptionKey, hostname, res;\n    return _regenerator.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            customVoiceHostname = _ref.customVoiceHostname, deploymentId = _ref.deploymentId, region = _ref.region, subscriptionKey = _ref.subscriptionKey;\n            hostname = customVoiceHostname || \"\".concat(region, \".cris.ai\"); // Although encodeURI on a hostname doesn't work as expected for hostname, at least, it will fail peacefully.\n\n            _context.next = 4;\n            return fetch(\"https://\".concat(encodeURI(hostname), \"/api/texttospeech/v2.0/endpoints/\").concat(encodeURIComponent(deploymentId)), {\n              headers: {\n                accept: 'application/json',\n                'ocp-apim-subscription-key': subscriptionKey\n              }\n            });\n\n          case 4:\n            res = _context.sent;\n\n            if (res.ok) {\n              _context.next = 7;\n              break;\n            }\n\n            throw new Error('Failed to fetch custom voices');\n\n          case 7:\n            return _context.abrupt(\"return\", res.json());\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchCustomVoices.apply(this, arguments);\n}\n\nfunction _default(_x2) {\n  return _ref3.apply(this, arguments);\n}\n\nfunction _ref3() {\n  _ref3 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(_ref2) {\n    var customVoiceHostname, deploymentId, region, subscriptionKey, _yield$fetchCustomVoi, models;\n\n    return _regenerator.default.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            customVoiceHostname = _ref2.customVoiceHostname, deploymentId = _ref2.deploymentId, region = _ref2.region, subscriptionKey = _ref2.subscriptionKey;\n            _context2.next = 3;\n            return fetchCustomVoices({\n              customVoiceHostname: customVoiceHostname,\n              deploymentId: deploymentId,\n              region: region,\n              subscriptionKey: subscriptionKey\n            });\n\n          case 3:\n            _yield$fetchCustomVoi = _context2.sent;\n            models = _yield$fetchCustomVoi.models;\n            return _context2.abrupt(\"return\", models.map(function (_ref4) {\n              var gender = _ref4.properties.Gender,\n                  lang = _ref4.locale,\n                  voiceURI = _ref4.name;\n              return new _SpeechSynthesisVoice.default({\n                gender: gender,\n                lang: lang,\n                voiceURI: voiceURI\n              });\n            }).sort(function (_ref5, _ref6) {\n              var x = _ref5.name;\n              var y = _ref6.name;\n              return x > y ? 1 : x < y ? -1 : 0;\n            }));\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _ref3.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../src/SpeechServices/TextToSpeech/fetchCustomVoices.js"],"names":["fetchCustomVoices","customVoiceHostname","deploymentId","region","subscriptionKey","hostname","res","fetch","encodeURI","encodeURIComponent","headers","accept","models","gender","lang","voiceURI","SpeechSynthesisVoice","x","y"],"mappings":";;;;;;;;;;;;;AAEA,IAAA,qBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,wBAAA,CAAA,CAAA;AAFA;;;SAIeA,iB;;;;;+FAAf,SAAA,OAAA,CAAA,IAAA,EAAA;AAAA,QAAA,mBAAA,EAAA,YAAA,EAAA,MAAA,EAAA,eAAA,EAAA,QAAA,EAAA,GAAA;AAAA,WAAA,YAAA,CAAA,OAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,aAAA,CAAA,EAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,eAAA,CAAA;AAAmCC,YAAAA,mBAAnC,GAAA,IAAA,CAAA,mBAAmCA,EAAqBC,YAAxD,GAAA,IAAA,CAAA,YAAmCD,EAAmCE,MAAtE,GAAA,IAAA,CAAA,MAAmCF,EAA2CG,eAA9E,GAAA,IAAA,CAAA,eAAmCH;AAC3BI,YAAAA,QADR,GACmBJ,mBAAmB,IAAA,GAAA,MAAA,CAAA,MAAA,EADtC,UACsC,CAA9BI,CADR,CAGE;;AAHF,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,mBAIoBE,KAAK,CAAA,WAAA,MAAA,CACTC,SAAS,CADA,QACA,CADA,EAAA,mCAAA,EAAA,MAAA,CACgDC,kBAAkB,CADlE,YACkE,CADlE,CAAA,EAErB;AACEC,cAAAA,OAAO,EAAE;AACPC,gBAAAA,MAAM,EADC,kBAAA;AAEP,6CAA6BP;AAFtB;AADX,aAFqB,CAJzB;;AAAA,eAAA,CAAA;AAIQE,YAAAA,GAJR,GAAA,QAAA,CAAA,IAIQA;;AAJR,gBAcOA,GAAG,CAdV,EAAA,EAAA;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,kBAeU,IAAA,KAAA,CAfV,+BAeU,CAfV;;AAAA,eAAA,CAAA;AAAA,mBAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAkBSA,GAAG,CAlBZ,IAkBSA,EAlBT,CAAA;;AAAA,eAAA,CAAA;AAAA,eAAA,KAAA;AAAA,mBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,KAAA,EAAA,OAAA,CAAA;;;;;;;;;;kFAqBe,SAAA,QAAA,CAAA,KAAA,EAAA;AAAA,QAAA,mBAAA,EAAA,YAAA,EAAA,MAAA,EAAA,eAAA,EAAA,qBAAA,EAAA,MAAA;;AAAA,WAAA,YAAA,CAAA,OAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,aAAA,CAAA,EAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,eAAA,CAAA;AAAiBL,YAAAA,mBAAjB,GAAA,KAAA,CAAA,mBAAiBA,EAAqBC,YAAtC,GAAA,KAAA,CAAA,YAAiBD,EAAmCE,MAApD,GAAA,KAAA,CAAA,MAAiBF,EAA2CG,eAA5D,GAAA,KAAA,CAAA,eAAiBH;AAAjB,YAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,mBACYD,iBAAiB,CAAC;AAAEC,cAAAA,mBAAmB,EAArB,mBAAA;AAAuBC,cAAAA,YAAY,EAAnC,YAAA;AAAqCC,cAAAA,MAAM,EAA3C,MAAA;AAA6CC,cAAAA,eAAe,EAAfA;AAA7C,aAAD,CAD7B;;AAAA,eAAA,CAAA;AAAA,YAAA,qBAAA,GAAA,SAAA,CAAA,IAAA;AACLQ,YAAAA,MADK,GAAA,qBAAA,CAAA,MACLA;AADK,mBAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAGN,MAAM,CAAN,GAAA,CAEH,UAAA,KAAA,EAAA;AAAA,kBAAyBC,MAAzB,GAAA,KAAA,CAAA,UAAA,CAAA,MAAA;AAAA,kBAA2CC,IAA3C,GAAA,KAAA,CAAA,MAAA;AAAA,kBAAuDC,QAAvD,GAAA,KAAA,CAAA,IAAA;AAAA,qBACE,IAAIC,qBAAAA,CAAJ,OAAA,CAAyB;AAAEH,gBAAAA,MAAM,EAAR,MAAA;AAAUC,gBAAAA,IAAI,EAAd,IAAA;AAAgBC,gBAAAA,QAAQ,EAARA;AAAhB,eAAzB,CADF;AAFG,aAAA,EAAA,IAAA,CAKC,UAAA,KAAA,EAAA,KAAA,EAAA;AAAA,kBAASE,CAAT,GAAA,KAAA,CAAA,IAAA;AAAA,kBAAsBC,CAAtB,GAAA,KAAA,CAAA,IAAA;AAAA,qBAA+BD,CAAC,GAADA,CAAAA,GAAAA,CAAAA,GAAYA,CAAC,GAADA,CAAAA,GAAQ,CAARA,CAAAA,GAA3C,CAAA;AARK,aAGN,CAHM,CAAA;;AAAA,eAAA,CAAA;AAAA,eAAA,KAAA;AAAA,mBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,KAAA,EAAA,QAAA,CAAA","sourcesContent":["/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 1, -1] }] */\n\nimport SpeechSynthesisVoice from './SpeechSynthesisVoice';\n\nasync function fetchCustomVoices({ customVoiceHostname, deploymentId, region, subscriptionKey }) {\n  const hostname = customVoiceHostname || `${ region }.cris.ai`;\n\n  // Although encodeURI on a hostname doesn't work as expected for hostname, at least, it will fail peacefully.\n  const res = await fetch(\n    `https://${ encodeURI(hostname) }/api/texttospeech/v2.0/endpoints/${ encodeURIComponent(deploymentId) }`,\n    {\n      headers: {\n        accept: 'application/json',\n        'ocp-apim-subscription-key': subscriptionKey\n      }\n    }\n  );\n\n  if (!res.ok) {\n    throw new Error('Failed to fetch custom voices');\n  }\n\n  return res.json();\n}\n\nexport default async function({ customVoiceHostname, deploymentId, region, subscriptionKey }) {\n  const { models } = await fetchCustomVoices({ customVoiceHostname, deploymentId, region, subscriptionKey });\n\n  return models\n    .map(\n      ({ properties: { Gender: gender }, locale: lang, name: voiceURI }) =>\n        new SpeechSynthesisVoice({ gender, lang, voiceURI })\n    )\n    .sort(({ name: x }, { name: y }) => (x > y ? 1 : x < y ? -1 : 0));\n}\n"]},"metadata":{},"sourceType":"script"}