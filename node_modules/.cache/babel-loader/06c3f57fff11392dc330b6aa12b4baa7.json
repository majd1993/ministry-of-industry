{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Error_1 = require(\"./Error\");\n\nvar List =\n/** @class */\nfunction () {\n  function List(list) {\n    var _this = this;\n\n    this.privSubscriptionIdCounter = 0;\n    this.privAddSubscriptions = {};\n    this.privRemoveSubscriptions = {};\n    this.privDisposedSubscriptions = {};\n    this.privDisposeReason = null;\n\n    this.get = function (itemIndex) {\n      _this.throwIfDisposed();\n\n      return _this.privList[itemIndex];\n    };\n\n    this.first = function () {\n      return _this.get(0);\n    };\n\n    this.last = function () {\n      return _this.get(_this.length() - 1);\n    };\n\n    this.add = function (item) {\n      _this.throwIfDisposed();\n\n      _this.insertAt(_this.privList.length, item);\n    };\n\n    this.insertAt = function (index, item) {\n      _this.throwIfDisposed();\n\n      if (index === 0) {\n        _this.privList.unshift(item);\n      } else if (index === _this.privList.length) {\n        _this.privList.push(item);\n      } else {\n        _this.privList.splice(index, 0, item);\n      }\n\n      _this.triggerSubscriptions(_this.privAddSubscriptions);\n    };\n\n    this.removeFirst = function () {\n      _this.throwIfDisposed();\n\n      return _this.removeAt(0);\n    };\n\n    this.removeLast = function () {\n      _this.throwIfDisposed();\n\n      return _this.removeAt(_this.length() - 1);\n    };\n\n    this.removeAt = function (index) {\n      _this.throwIfDisposed();\n\n      return _this.remove(index, 1)[0];\n    };\n\n    this.remove = function (index, count) {\n      _this.throwIfDisposed();\n\n      var removedElements = _this.privList.splice(index, count);\n\n      _this.triggerSubscriptions(_this.privRemoveSubscriptions);\n\n      return removedElements;\n    };\n\n    this.clear = function () {\n      _this.throwIfDisposed();\n\n      _this.remove(0, _this.length());\n    };\n\n    this.length = function () {\n      _this.throwIfDisposed();\n\n      return _this.privList.length;\n    };\n\n    this.onAdded = function (addedCallback) {\n      _this.throwIfDisposed();\n\n      var subscriptionId = _this.privSubscriptionIdCounter++;\n      _this.privAddSubscriptions[subscriptionId] = addedCallback;\n      return {\n        detach: function detach() {\n          delete _this.privAddSubscriptions[subscriptionId];\n        }\n      };\n    };\n\n    this.onRemoved = function (removedCallback) {\n      _this.throwIfDisposed();\n\n      var subscriptionId = _this.privSubscriptionIdCounter++;\n      _this.privRemoveSubscriptions[subscriptionId] = removedCallback;\n      return {\n        detach: function detach() {\n          delete _this.privRemoveSubscriptions[subscriptionId];\n        }\n      };\n    };\n\n    this.onDisposed = function (disposedCallback) {\n      _this.throwIfDisposed();\n\n      var subscriptionId = _this.privSubscriptionIdCounter++;\n      _this.privDisposedSubscriptions[subscriptionId] = disposedCallback;\n      return {\n        detach: function detach() {\n          delete _this.privDisposedSubscriptions[subscriptionId];\n        }\n      };\n    };\n\n    this.join = function (seperator) {\n      _this.throwIfDisposed();\n\n      return _this.privList.join(seperator);\n    };\n\n    this.toArray = function () {\n      var cloneCopy = Array();\n\n      _this.privList.forEach(function (val) {\n        cloneCopy.push(val);\n      });\n\n      return cloneCopy;\n    };\n\n    this.any = function (callback) {\n      _this.throwIfDisposed();\n\n      if (callback) {\n        return _this.where(callback).length() > 0;\n      } else {\n        return _this.length() > 0;\n      }\n    };\n\n    this.all = function (callback) {\n      _this.throwIfDisposed();\n\n      return _this.where(callback).length() === _this.length();\n    };\n\n    this.forEach = function (callback) {\n      _this.throwIfDisposed();\n\n      for (var i = 0; i < _this.length(); i++) {\n        callback(_this.privList[i], i);\n      }\n    };\n\n    this.select = function (callback) {\n      _this.throwIfDisposed();\n\n      var selectList = [];\n\n      for (var i = 0; i < _this.privList.length; i++) {\n        selectList.push(callback(_this.privList[i], i));\n      }\n\n      return new List(selectList);\n    };\n\n    this.where = function (callback) {\n      _this.throwIfDisposed();\n\n      var filteredList = new List();\n\n      for (var i = 0; i < _this.privList.length; i++) {\n        if (callback(_this.privList[i], i)) {\n          filteredList.add(_this.privList[i]);\n        }\n      }\n\n      return filteredList;\n    };\n\n    this.orderBy = function (compareFn) {\n      _this.throwIfDisposed();\n\n      var clonedArray = _this.toArray();\n\n      var orderedArray = clonedArray.sort(compareFn);\n      return new List(orderedArray);\n    };\n\n    this.orderByDesc = function (compareFn) {\n      _this.throwIfDisposed();\n\n      return _this.orderBy(function (a, b) {\n        return compareFn(b, a);\n      });\n    };\n\n    this.clone = function () {\n      _this.throwIfDisposed();\n\n      return new List(_this.toArray());\n    };\n\n    this.concat = function (list) {\n      _this.throwIfDisposed();\n\n      return new List(_this.privList.concat(list.toArray()));\n    };\n\n    this.concatArray = function (array) {\n      _this.throwIfDisposed();\n\n      return new List(_this.privList.concat(array));\n    };\n\n    this.isDisposed = function () {\n      return _this.privList == null;\n    };\n\n    this.dispose = function (reason) {\n      if (!_this.isDisposed()) {\n        _this.privDisposeReason = reason;\n        _this.privList = null;\n        _this.privAddSubscriptions = null;\n        _this.privRemoveSubscriptions = null;\n\n        _this.triggerSubscriptions(_this.privDisposedSubscriptions);\n      }\n    };\n\n    this.throwIfDisposed = function () {\n      if (_this.isDisposed()) {\n        throw new Error_1.ObjectDisposedError(\"List\", _this.privDisposeReason);\n      }\n    };\n\n    this.triggerSubscriptions = function (subscriptions) {\n      if (subscriptions) {\n        for (var subscriptionId in subscriptions) {\n          if (subscriptionId) {\n            subscriptions[subscriptionId]();\n          }\n        }\n      }\n    };\n\n    this.privList = []; // copy the list rather than taking as is.\n\n    if (list) {\n      for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {\n        var item = list_1[_i];\n        this.privList.push(item);\n      }\n    }\n  }\n\n  return List;\n}();\n\nexports.List = List;","map":{"version":3,"sources":["src/common/List.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ObjectDisposedError } from \"./Error\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { IDisposable } from \"./IDisposable\";\r\n\r\nexport interface IList<TItem> extends IDisposable {\r\n    get(itemIndex: number): TItem;\r\n    first(): TItem;\r\n    last(): TItem;\r\n\r\n    add(item: TItem): void;\r\n    insertAt(index: number, item: TItem): void;\r\n\r\n    removeFirst(): TItem;\r\n    removeLast(): TItem;\r\n    removeAt(index: number): TItem;\r\n    remove(index: number, count: number): TItem[];\r\n    clear(): void;\r\n\r\n    length(): number;\r\n\r\n    onAdded(addedCallback: () => void): IDetachable;\r\n    onRemoved(removedCallback: () => void): IDetachable;\r\n    onDisposed(disposedCallback: () => void): IDetachable;\r\n\r\n    join(seperator?: string): string;\r\n\r\n    toArray(): TItem[];\r\n\r\n    any(callback?: (item: TItem, index: number) => boolean): boolean;\r\n    all(callback: (item: TItem) => boolean): boolean;\r\n    forEach(callback: (item: TItem, index: number) => void): void;\r\n    select<T2>(callback: (item: TItem, index: number) => T2): List<T2>;\r\n    where(callback: (item: TItem, index: number) => boolean): List<TItem>;\r\n    orderBy(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    orderByDesc(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    clone(): List<TItem>;\r\n    concat(list: List<TItem>): List<TItem>;\r\n    concatArray(array: TItem[]): List<TItem>;\r\n}\r\n\r\nexport class List<TItem> implements IList<TItem>  {\r\n    private privList: TItem[];\r\n    private privSubscriptionIdCounter: number = 0;\r\n    private privAddSubscriptions: IStringDictionary<() => void> = {};\r\n    private privRemoveSubscriptions: IStringDictionary<() => void> = {};\r\n    private privDisposedSubscriptions: IStringDictionary<() => void> = {};\r\n    private privDisposeReason: string = null;\r\n\r\n    public constructor(list?: TItem[]) {\r\n        this.privList = [];\r\n        // copy the list rather than taking as is.\r\n        if (list) {\r\n            for (const item of list) {\r\n                this.privList.push(item);\r\n            }\r\n        }\r\n    }\r\n\r\n    public get = (itemIndex: number): TItem => {\r\n        this.throwIfDisposed();\r\n        return this.privList[itemIndex];\r\n    }\r\n\r\n    public first = (): TItem => {\r\n        return this.get(0);\r\n    }\r\n\r\n    public last = (): TItem => {\r\n        return this.get(this.length() - 1);\r\n    }\r\n\r\n    public add = (item: TItem): void => {\r\n        this.throwIfDisposed();\r\n        this.insertAt(this.privList.length, item);\r\n    }\r\n\r\n    public insertAt = (index: number, item: TItem): void => {\r\n        this.throwIfDisposed();\r\n        if (index === 0) {\r\n            this.privList.unshift(item);\r\n        } else if (index === this.privList.length) {\r\n            this.privList.push(item);\r\n        } else {\r\n            this.privList.splice(index, 0, item);\r\n        }\r\n        this.triggerSubscriptions(this.privAddSubscriptions);\r\n    }\r\n\r\n    public removeFirst = (): TItem => {\r\n        this.throwIfDisposed();\r\n        return this.removeAt(0);\r\n    }\r\n\r\n    public removeLast = (): TItem => {\r\n        this.throwIfDisposed();\r\n        return this.removeAt(this.length() - 1);\r\n    }\r\n\r\n    public removeAt = (index: number): TItem => {\r\n        this.throwIfDisposed();\r\n        return this.remove(index, 1)[0];\r\n    }\r\n\r\n    public remove = (index: number, count: number): TItem[] => {\r\n        this.throwIfDisposed();\r\n        const removedElements = this.privList.splice(index, count);\r\n        this.triggerSubscriptions(this.privRemoveSubscriptions);\r\n        return removedElements;\r\n    }\r\n\r\n    public clear = (): void => {\r\n        this.throwIfDisposed();\r\n        this.remove(0, this.length());\r\n    }\r\n\r\n    public length = (): number => {\r\n        this.throwIfDisposed();\r\n        return this.privList.length;\r\n    }\r\n\r\n    public onAdded = (addedCallback: () => void): IDetachable => {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privAddSubscriptions[subscriptionId] = addedCallback;\r\n\r\n        return {\r\n            detach: () => {\r\n                delete this.privAddSubscriptions[subscriptionId];\r\n            },\r\n        };\r\n    }\r\n\r\n    public onRemoved = (removedCallback: () => void): IDetachable => {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privRemoveSubscriptions[subscriptionId] = removedCallback;\r\n\r\n        return {\r\n            detach: () => {\r\n                delete this.privRemoveSubscriptions[subscriptionId];\r\n            },\r\n        };\r\n    }\r\n\r\n    public onDisposed = (disposedCallback: () => void): IDetachable => {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privDisposedSubscriptions[subscriptionId] = disposedCallback;\r\n\r\n        return {\r\n            detach: () => {\r\n                delete this.privDisposedSubscriptions[subscriptionId];\r\n            },\r\n        };\r\n    }\r\n\r\n    public join = (seperator?: string): string => {\r\n        this.throwIfDisposed();\r\n        return this.privList.join(seperator);\r\n    }\r\n\r\n    public toArray = (): TItem[] => {\r\n        const cloneCopy = Array<TItem>();\r\n        this.privList.forEach((val: TItem) => {\r\n            cloneCopy.push(val);\r\n        });\r\n        return cloneCopy;\r\n    }\r\n\r\n    public any = (callback?: (item: TItem, index: number) => boolean): boolean => {\r\n        this.throwIfDisposed();\r\n        if (callback) {\r\n            return this.where(callback).length() > 0;\r\n        } else {\r\n            return this.length() > 0;\r\n        }\r\n    }\r\n\r\n    public all = (callback: (item: TItem) => boolean): boolean => {\r\n        this.throwIfDisposed();\r\n        return this.where(callback).length() === this.length();\r\n    }\r\n\r\n    public forEach = (callback: (item: TItem, index: number) => void): void => {\r\n        this.throwIfDisposed();\r\n        for (let i = 0; i < this.length(); i++) {\r\n            callback(this.privList[i], i);\r\n        }\r\n    }\r\n\r\n    public select = <T2>(callback: (item: TItem, index: number) => T2): List<T2> => {\r\n        this.throwIfDisposed();\r\n        const selectList: T2[] = [];\r\n        for (let i = 0; i < this.privList.length; i++) {\r\n            selectList.push(callback(this.privList[i], i));\r\n        }\r\n\r\n        return new List<T2>(selectList);\r\n    }\r\n\r\n    public where = (callback: (item: TItem, index: number) => boolean): List<TItem> => {\r\n        this.throwIfDisposed();\r\n        const filteredList = new List<TItem>();\r\n        for (let i = 0; i < this.privList.length; i++) {\r\n            if (callback(this.privList[i], i)) {\r\n                filteredList.add(this.privList[i]);\r\n            }\r\n        }\r\n        return filteredList;\r\n    }\r\n\r\n    public orderBy = (compareFn: (a: TItem, b: TItem) => number): List<TItem> => {\r\n        this.throwIfDisposed();\r\n        const clonedArray = this.toArray();\r\n        const orderedArray = clonedArray.sort(compareFn);\r\n        return new List(orderedArray);\r\n    }\r\n\r\n    public orderByDesc = (compareFn: (a: TItem, b: TItem) => number): List<TItem> => {\r\n        this.throwIfDisposed();\r\n        return this.orderBy((a: TItem, b: TItem) => compareFn(b, a));\r\n    }\r\n\r\n    public clone = (): List<TItem> => {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.toArray());\r\n    }\r\n\r\n    public concat = (list: List<TItem>): List<TItem> => {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.privList.concat(list.toArray()));\r\n    }\r\n\r\n    public concatArray = (array: TItem[]): List<TItem> => {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.privList.concat(array));\r\n    }\r\n\r\n    public isDisposed = (): boolean => {\r\n        return this.privList == null;\r\n    }\r\n\r\n    public dispose = (reason?: string): void => {\r\n        if (!this.isDisposed()) {\r\n            this.privDisposeReason = reason;\r\n            this.privList = null;\r\n            this.privAddSubscriptions = null;\r\n            this.privRemoveSubscriptions = null;\r\n            this.triggerSubscriptions(this.privDisposedSubscriptions);\r\n        }\r\n    }\r\n\r\n    private throwIfDisposed = (): void => {\r\n        if (this.isDisposed()) {\r\n            throw new ObjectDisposedError(\"List\", this.privDisposeReason);\r\n        }\r\n    }\r\n\r\n    private triggerSubscriptions = (subscriptions: IStringDictionary<() => void>): void => {\r\n        if (subscriptions) {\r\n            for (const subscriptionId in subscriptions) {\r\n                if (subscriptionId) {\r\n                    subscriptions[subscriptionId]();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}