{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useParseAdaptiveCardJSON;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _botframeworkWebchatComponent = require(\"botframework-webchat-component\");\n\nvar _react = require(\"react\");\n\nvar _useAdaptiveCardsPackage = _interopRequireDefault(require(\"../useAdaptiveCardsPackage\"));\n\nvar useDirection = _botframeworkWebchatComponent.hooks.useDirection;\n\nfunction updateRTLInline(element, rtl, adaptiveCardsPackage) {\n  if (element instanceof adaptiveCardsPackage.Container) {\n    element.rtl = rtl;\n  } // Tree traversal to add rtl boolean to child elements\n\n\n  if (element.getItemAt && element.getItemCount) {\n    var count = element.getItemCount();\n\n    for (var index = 0; index < count; index++) {\n      var child = element.getItemAt(index);\n      updateRTLInline(child, rtl, adaptiveCardsPackage);\n    }\n  }\n}\n\nfunction useParseAdaptiveCardJSON() {\n  var _useAdaptiveCardsPack = (0, _useAdaptiveCardsPackage.default)(),\n      _useAdaptiveCardsPack2 = (0, _slicedToArray2.default)(_useAdaptiveCardsPack, 1),\n      adaptiveCardsPackage = _useAdaptiveCardsPack2[0];\n\n  var _useDirection = useDirection(),\n      _useDirection2 = (0, _slicedToArray2.default)(_useDirection, 1),\n      direction = _useDirection2[0];\n\n  var AdaptiveCard = adaptiveCardsPackage.AdaptiveCard;\n  return (0, _react.useCallback)(function (content) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$ignoreErrors = _ref.ignoreErrors,\n        ignoreErrors = _ref$ignoreErrors === void 0 ? false : _ref$ignoreErrors;\n\n    if (!content) {\n      return;\n    }\n\n    var card = new AdaptiveCard();\n    var errors = []; // TODO: [P3] #3487 Move from \"onParseError\" to \"card.parse(json, errors)\"\n\n    AdaptiveCard.onParseError = function (error) {\n      return errors.push(error);\n    };\n\n    card.parse(content);\n    updateRTLInline(card, direction === 'rtl', adaptiveCardsPackage);\n    AdaptiveCard.onParseError = null;\n\n    if (!ignoreErrors && errors.length) {\n      console.error('botframework-webchat: Failed to parse Adaptive Card', {\n        errors: errors\n      });\n      throw new Error('botframework-webchat: Failed to parse Adaptive Card');\n    }\n\n    return card;\n  }, [AdaptiveCard, adaptiveCardsPackage, direction]);\n}","map":{"version":3,"sources":["../../../../src/adaptiveCards/hooks/internal/useParseAdaptiveCardJSON.js"],"names":["useDirection","hooks","element","adaptiveCardsPackage","count","index","child","updateRTLInline","direction","AdaptiveCard","ignoreErrors","card","errors","console"],"mappings":";;;;;;;;;;;AAAA,IAAA,6BAAA,GAAA,OAAA,CAAA,gCAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAEA,IAAA,wBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,4BAAA,CAAA,CAAA;;IAEQA,Y,GAAiBC,6BAAAA,CAAAA,KAAAA,CAAjBD,Y;;AAER,SAAA,eAAA,CAAA,OAAA,EAAA,GAAA,EAAA,oBAAA,EAA6D;AAC3D,MAAIE,OAAO,YAAYC,oBAAoB,CAA3C,SAAA,EAAuD;AACrDD,IAAAA,OAAO,CAAPA,GAAAA,GAAAA,GAAAA;AAFyD,GAAA,CAK3D;;;AACA,MAAIA,OAAO,CAAPA,SAAAA,IAAqBA,OAAO,CAAhC,YAAA,EAA+C;AAC7C,QAAME,KAAK,GAAGF,OAAO,CAArB,YAAcA,EAAd;;AAEA,SAAK,IAAIG,KAAK,GAAd,CAAA,EAAoBA,KAAK,GAAzB,KAAA,EAAmCA,KAAnC,EAAA,EAA4C;AAC1C,UAAMC,KAAK,GAAGJ,OAAO,CAAPA,SAAAA,CAAd,KAAcA,CAAd;AAEAK,MAAAA,eAAe,CAAA,KAAA,EAAA,GAAA,EAAfA,oBAAe,CAAfA;AACD;AACF;AACF;;AAEc,SAAA,wBAAA,GAAoC;AAAA,MAAA,qBAAA,GAClB,CAAA,GAAA,wBAAA,CADkB,OAClB,GADkB;AAAA,MAAA,sBAAA,GAAA,CAAA,GAAA,eAAA,CAAA,OAAA,EAAA,qBAAA,EAAA,CAAA,CAAA;AAAA,MAC1CJ,oBAD0C,GAAA,sBAAA,CAAA,CAAA,CAAA;;AAAA,MAAA,aAAA,GAE7BH,YAF6B,EAAA;AAAA,MAAA,cAAA,GAAA,CAAA,GAAA,eAAA,CAAA,OAAA,EAAA,aAAA,EAAA,CAAA,CAAA;AAAA,MAE1CQ,SAF0C,GAAA,cAAA,CAAA,CAAA,CAAA;;AAAA,MAIzCC,YAJyC,GAIxBN,oBAJwB,CAAA,YAAA;AAMjD,SAAO,CAAA,GAAA,MAAA,CAAA,WAAA,EACL,UAAA,OAAA,EAA4C;AAAA,QAAA,IAAA,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAP,EAAO;AAAA,QAAA,iBAAA,GAAA,IAAA,CAAhCO,YAAgC;AAAA,QAAhCA,YAAgC,GAAA,iBAAA,KAAA,KAAA,CAAA,GAAjB,KAAiB,GAAA,iBAAA;;AAC1C,QAAI,CAAJ,OAAA,EAAc;AACZ;AACD;;AAED,QAAMC,IAAI,GAAG,IAAb,YAAa,EAAb;AACA,QAAMC,MAAM,GAN8B,EAM1C,CAN0C,CAQ1C;;AACAH,IAAAA,YAAY,CAAZA,YAAAA,GAA4B,UAAA,KAAA,EAAK;AAAA,aAAIG,MAAM,CAANA,IAAAA,CAAJ,KAAIA,CAAJ;AAAjCH,KAAAA;;AAEAE,IAAAA,IAAI,CAAJA,KAAAA,CAAAA,OAAAA;AAEAJ,IAAAA,eAAe,CAAA,IAAA,EAAOC,SAAS,KAAhB,KAAA,EAAfD,oBAAe,CAAfA;AAEAE,IAAAA,YAAY,CAAZA,YAAAA,GAAAA,IAAAA;;AAEA,QAAI,CAAA,YAAA,IAAiBG,MAAM,CAA3B,MAAA,EAAoC;AAClCC,MAAAA,OAAO,CAAPA,KAAAA,CAAAA,qDAAAA,EAAqE;AAAED,QAAAA,MAAM,EAANA;AAAF,OAArEC;AAEA,YAAM,IAAA,KAAA,CAAN,qDAAM,CAAN;AACD;;AAED,WAAA,IAAA;AAxBG,GAAA,EA0BL,CAAA,YAAA,EAAA,oBAAA,EA1BF,SA0BE,CA1BK,CAAP;AA4BD","sourcesContent":["import { hooks } from 'botframework-webchat-component';\nimport { useCallback } from 'react';\n\nimport useAdaptiveCardsPackage from '../useAdaptiveCardsPackage';\n\nconst { useDirection } = hooks;\n\nfunction updateRTLInline(element, rtl, adaptiveCardsPackage) {\n  if (element instanceof adaptiveCardsPackage.Container) {\n    element.rtl = rtl;\n  }\n\n  // Tree traversal to add rtl boolean to child elements\n  if (element.getItemAt && element.getItemCount) {\n    const count = element.getItemCount();\n\n    for (let index = 0; index < count; index++) {\n      const child = element.getItemAt(index);\n\n      updateRTLInline(child, rtl, adaptiveCardsPackage);\n    }\n  }\n}\n\nexport default function useParseAdaptiveCardJSON() {\n  const [adaptiveCardsPackage] = useAdaptiveCardsPackage();\n  const [direction] = useDirection();\n\n  const { AdaptiveCard } = adaptiveCardsPackage;\n\n  return useCallback(\n    (content, { ignoreErrors = false } = {}) => {\n      if (!content) {\n        return;\n      }\n\n      const card = new AdaptiveCard();\n      const errors = [];\n\n      // TODO: [P3] #3487 Move from \"onParseError\" to \"card.parse(json, errors)\"\n      AdaptiveCard.onParseError = error => errors.push(error);\n\n      card.parse(content);\n\n      updateRTLInline(card, direction === 'rtl', adaptiveCardsPackage);\n\n      AdaptiveCard.onParseError = null;\n\n      if (!ignoreErrors && errors.length) {\n        console.error('botframework-webchat: Failed to parse Adaptive Card', { errors });\n\n        throw new Error('botframework-webchat: Failed to parse Adaptive Card');\n      }\n\n      return card;\n    },\n    [AdaptiveCard, adaptiveCardsPackage, direction]\n  );\n}\n"],"sourceRoot":"bundle:///"},"metadata":{},"sourceType":"script"}