{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = notifications;\n\nvar _simpleUpdateIn = _interopRequireDefault(require(\"simple-update-in\"));\n\nvar _dismissNotification = require(\"../actions/dismissNotification\");\n\nvar _sagaError = require(\"../actions/sagaError\");\n\nvar _setNotification = require(\"../actions/setNotification\");\n\nvar DEFAULT_STATE = {};\n\nfunction notifications() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_STATE;\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      payload = _ref.payload,\n      type = _ref.type;\n\n  var now = Date.now();\n\n  if (type === _dismissNotification.DISMISS_NOTIFICATION) {\n    state = (0, _simpleUpdateIn[\"default\"])(state, [payload.id]);\n  } else if (type === _sagaError.SAGA_ERROR) {\n    state = (0, _simpleUpdateIn[\"default\"])(state, ['connectivitystatus', 'message'], function () {\n      return 'javascripterror';\n    });\n  } else if (type === _setNotification.SET_NOTIFICATION) {\n    var alt = payload.alt,\n        data = payload.data,\n        id = payload.id,\n        level = payload.level,\n        message = payload.message;\n    var notification = state[id];\n\n    if (!notification || alt !== notification.alt || !Object.is(data, notification.data) || level !== notification.level || message !== notification.message) {\n      state = (0, _simpleUpdateIn[\"default\"])(state, [id], function () {\n        return {\n          alt: alt,\n          data: data,\n          id: id,\n          level: level,\n          message: message,\n          timestamp: now\n        };\n      });\n    }\n  }\n\n  return state;\n}","map":{"version":3,"sources":["../../src/reducers/notifications.js"],"names":["DEFAULT_STATE","state","payload","type","now","Date","DISMISS_NOTIFICATION","SAGA_ERROR","SET_NOTIFICATION","alt","data","id","level","message","notification","Object","timestamp"],"mappings":";;;;;;;;;AAAA,IAAA,eAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,CAAA;;AAEA,IAAA,oBAAA,GAAA,OAAA,CAAA,gCAAA,CAAA;;AACA,IAAA,UAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AACA,IAAA,gBAAA,GAAA,OAAA,CAAA,4BAAA,CAAA;;AAEA,IAAMA,aAAa,GAAnB,EAAA;;AAEe,SAAA,aAAA,GAAiE;AAAA,MAA1CC,KAA0C,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAlCD,aAAkC;;AAAA,MAAA,IAAA,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA;AAAA,MAAjBE,OAAiB,GAAA,IAAA,CAAjBA,OAAiB;AAAA,MAARC,IAAQ,GAAA,IAAA,CAARA,IAAQ;;AAC9E,MAAMC,GAAG,GAAGC,IAAI,CAAhB,GAAYA,EAAZ;;AAEA,MAAIF,IAAI,KAAKG,oBAAAA,CAAb,oBAAA,EAAmC;AACjCL,IAAAA,KAAK,GAAG,CAAA,GAAA,eAAA,CAAA,SAAA,CAAA,EAAA,KAAA,EAAgB,CAACC,OAAO,CAAhCD,EAAwB,CAAhB,CAARA;AADF,GAAA,MAEO,IAAIE,IAAI,KAAKI,UAAAA,CAAb,UAAA,EAAyB;AAC9BN,IAAAA,KAAK,GAAG,CAAA,GAAA,eAAA,CAAA,SAAA,CAAA,EAAA,KAAA,EAAgB,CAAA,oBAAA,EAAhB,SAAgB,CAAhB,EAAmD,YAAA;AAAA,aAAA,iBAAA;AAA3DA,KAAQ,CAARA;AADK,GAAA,MAEA,IAAIE,IAAI,KAAKK,gBAAAA,CAAb,gBAAA,EAA+B;AAAA,QAC5BC,GAD4B,GACMP,OADN,CAAA,GAAA;AAAA,QACvBQ,IADuB,GACMR,OADN,CAAA,IAAA;AAAA,QACjBS,EADiB,GACMT,OADN,CAAA,EAAA;AAAA,QACbU,KADa,GACMV,OADN,CAAA,KAAA;AAAA,QACNW,OADM,GACMX,OADN,CAAA,OAAA;AAEpC,QAAMY,YAAY,GAAGb,KAAK,CAA1B,EAA0B,CAA1B;;AAEA,QACE,CAAA,YAAA,IACAQ,GAAG,KAAKK,YAAY,CADpB,GAAA,IAEA,CAACC,MAAM,CAANA,EAAAA,CAAAA,IAAAA,EAAgBD,YAAY,CAF7B,IAECC,CAFD,IAGAH,KAAK,KAAKE,YAAY,CAHtB,KAAA,IAIAD,OAAO,KAAKC,YAAY,CAL1B,OAAA,EAME;AACAb,MAAAA,KAAK,GAAG,CAAA,GAAA,eAAA,CAAA,SAAA,CAAA,EAAA,KAAA,EAAgB,CAAhB,EAAgB,CAAhB,EAAsB,YAAA;AAAA,eAAO;AACnCQ,UAAAA,GAAG,EADgC,GAAA;AAEnCC,UAAAA,IAAI,EAF+B,IAAA;AAGnCC,UAAAA,EAAE,EAHiC,EAAA;AAInCC,UAAAA,KAAK,EAJ8B,KAAA;AAKnCC,UAAAA,OAAO,EAL4B,OAAA;AAMnCG,UAAAA,SAAS,EAAEZ;AANwB,SAAP;AAA9BH,OAAQ,CAARA;AAQD;AACF;;AAED,SAAA,KAAA;AACD","sourcesContent":["import updateIn from 'simple-update-in';\n\nimport { DISMISS_NOTIFICATION } from '../actions/dismissNotification';\nimport { SAGA_ERROR } from '../actions/sagaError';\nimport { SET_NOTIFICATION } from '../actions/setNotification';\n\nconst DEFAULT_STATE = {};\n\nexport default function notifications(state = DEFAULT_STATE, { payload, type }) {\n  const now = Date.now();\n\n  if (type === DISMISS_NOTIFICATION) {\n    state = updateIn(state, [payload.id]);\n  } else if (type === SAGA_ERROR) {\n    state = updateIn(state, ['connectivitystatus', 'message'], () => 'javascripterror');\n  } else if (type === SET_NOTIFICATION) {\n    const { alt, data, id, level, message } = payload;\n    const notification = state[id];\n\n    if (\n      !notification ||\n      alt !== notification.alt ||\n      !Object.is(data, notification.data) ||\n      level !== notification.level ||\n      message !== notification.message\n    ) {\n      state = updateIn(state, [id], () => ({\n        alt,\n        data,\n        id,\n        level,\n        message,\n        timestamp: now\n      }));\n    }\n  }\n\n  return state;\n}\n"],"sourceRoot":"core:///"},"metadata":{},"sourceType":"script"}