{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar payloadAssembler_1 = require(\"../assemblers/payloadAssembler\");\n/**\n * Orchestrates and manages streams.\n */\n\n\nvar StreamManager =\n/** @class */\nfunction () {\n  function StreamManager(onCancelStream) {\n    this.activeAssemblers = [];\n    this.onCancelStream = onCancelStream;\n  }\n\n  StreamManager.prototype.getPayloadAssembler = function (id) {\n    if (!this.activeAssemblers[id]) {\n      // A new id has come in, kick off the process of tracking it.\n      var assembler = new payloadAssembler_1.PayloadAssembler(this, {\n        id: id\n      });\n      this.activeAssemblers[id] = assembler;\n      return assembler;\n    } else {\n      return this.activeAssemblers[id];\n    }\n  };\n\n  StreamManager.prototype.getPayloadStream = function (header) {\n    var assembler = this.getPayloadAssembler(header.id);\n    return assembler.getPayloadStream();\n  };\n\n  StreamManager.prototype.onReceive = function (header, contentStream, contentLength) {\n    if (!this.activeAssemblers[header.id]) {\n      return;\n    }\n\n    this.activeAssemblers[header.id].onReceive(header, contentStream, contentLength);\n  };\n\n  StreamManager.prototype.closeStream = function (id) {\n    if (!this.activeAssemblers[id]) {\n      return;\n    } else {\n      var assembler = this.activeAssemblers[id];\n      this.activeAssemblers.splice(this.activeAssemblers.indexOf(id), 1);\n      var targetStream = assembler.getPayloadStream();\n\n      if (assembler.contentLength && targetStream.length < assembler.contentLength || !assembler.end) {\n        this.onCancelStream(assembler);\n      }\n    }\n  };\n\n  return StreamManager;\n}();\n\nexports.StreamManager = StreamManager;","map":{"version":3,"sources":["../../src/payloads/streamManager.ts"],"names":[],"mappings":";;;;;;AASA,IAAA,kBAAA,GAAA,OAAA,CAAA,gCAAA,CAAA;AAEA;;AAEG;;;AACH,IAAA,aAAA;AAAA;AAAA,YAAA;AAII,WAAA,aAAA,CAAmB,cAAnB,EAA2C;AAH1B,SAAA,gBAAA,GAAmB,EAAnB;AAIb,SAAK,cAAL,GAAsB,cAAtB;AACH;;AAEM,EAAA,aAAA,CAAA,SAAA,CAAA,mBAAA,GAAP,UAA2B,EAA3B,EAAqC;AACjC,QAAI,CAAC,KAAK,gBAAL,CAAsB,EAAtB,CAAL,EAAgC;AAC5B;AACA,UAAI,SAAS,GAAG,IAAI,kBAAA,CAAA,gBAAJ,CAAqB,IAArB,EAA2B;AAAC,QAAA,EAAE,EAAE;AAAL,OAA3B,CAAhB;AACA,WAAK,gBAAL,CAAsB,EAAtB,IAA4B,SAA5B;AAEA,aAAO,SAAP;AACH,KAND,MAMO;AAEH,aAAO,KAAK,gBAAL,CAAsB,EAAtB,CAAP;AACH;AACJ,GAXM;;AAaA,EAAA,aAAA,CAAA,SAAA,CAAA,gBAAA,GAAP,UAAwB,MAAxB,EAAuC;AACnC,QAAI,SAAS,GAAG,KAAK,mBAAL,CAAyB,MAAM,CAAC,EAAhC,CAAhB;AAEA,WAAO,SAAS,CAAC,gBAAV,EAAP;AACH,GAJM;;AAMA,EAAA,aAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,MAAjB,EAAkC,aAAlC,EAAqE,aAArE,EAA0F;AACtF,QAAI,CAAC,KAAK,gBAAL,CAAsB,MAAM,CAAC,EAA7B,CAAL,EAAuC;AACnC;AACH;;AACD,SAAK,gBAAL,CAAsB,MAAM,CAAC,EAA7B,EAAiC,SAAjC,CAA2C,MAA3C,EAAmD,aAAnD,EAAkE,aAAlE;AACH,GALM;;AAOA,EAAA,aAAA,CAAA,SAAA,CAAA,WAAA,GAAP,UAAmB,EAAnB,EAA6B;AACzB,QAAI,CAAC,KAAK,gBAAL,CAAsB,EAAtB,CAAL,EAAgC;AAC5B;AACH,KAFD,MAEO;AACH,UAAI,SAAS,GAAqB,KAAK,gBAAL,CAAsB,EAAtB,CAAlC;AACA,WAAK,gBAAL,CAAsB,MAAtB,CAA6B,KAAK,gBAAL,CAAsB,OAAtB,CAA8B,EAA9B,CAA7B,EAAgE,CAAhE;AACA,UAAI,YAAY,GAAG,SAAS,CAAC,gBAAV,EAAnB;;AACA,UAAK,SAAS,CAAC,aAAV,IAA2B,YAAY,CAAC,MAAb,GAAsB,SAAS,CAAC,aAA5D,IAA8E,CAAC,SAAS,CAAC,GAA7F,EAAkG;AAC9F,aAAK,cAAL,CAAoB,SAApB;AACH;AACJ;AACJ,GAXM;;AAYX,SAAA,aAAA;AAAC,CA9CD,EAAA;;AAAa,OAAA,CAAA,aAAA,GAAA,aAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar payloadAssembler_1 = require(\"../assemblers/payloadAssembler\");\n/**\n * Orchestrates and manages streams.\n */\nvar StreamManager = /** @class */ (function () {\n    function StreamManager(onCancelStream) {\n        this.activeAssemblers = [];\n        this.onCancelStream = onCancelStream;\n    }\n    StreamManager.prototype.getPayloadAssembler = function (id) {\n        if (!this.activeAssemblers[id]) {\n            // A new id has come in, kick off the process of tracking it.\n            var assembler = new payloadAssembler_1.PayloadAssembler(this, { id: id });\n            this.activeAssemblers[id] = assembler;\n            return assembler;\n        }\n        else {\n            return this.activeAssemblers[id];\n        }\n    };\n    StreamManager.prototype.getPayloadStream = function (header) {\n        var assembler = this.getPayloadAssembler(header.id);\n        return assembler.getPayloadStream();\n    };\n    StreamManager.prototype.onReceive = function (header, contentStream, contentLength) {\n        if (!this.activeAssemblers[header.id]) {\n            return;\n        }\n        this.activeAssemblers[header.id].onReceive(header, contentStream, contentLength);\n    };\n    StreamManager.prototype.closeStream = function (id) {\n        if (!this.activeAssemblers[id]) {\n            return;\n        }\n        else {\n            var assembler = this.activeAssemblers[id];\n            this.activeAssemblers.splice(this.activeAssemblers.indexOf(id), 1);\n            var targetStream = assembler.getPayloadStream();\n            if ((assembler.contentLength && targetStream.length < assembler.contentLength) || !assembler.end) {\n                this.onCancelStream(assembler);\n            }\n        }\n    };\n    return StreamManager;\n}());\nexports.StreamManager = StreamManager;\n//# sourceMappingURL=streamManager.js.map"]},"metadata":{},"sourceType":"script"}