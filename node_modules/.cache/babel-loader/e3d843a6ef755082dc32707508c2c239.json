{"ast":null,"code":"'use strict';\n\nvar decode = require('parse-entities');\n\nvar whitespace = require('is-whitespace-character');\n\nvar locate = require('../locate/url');\n\nmodule.exports = url;\nurl.locator = locate;\nurl.notInLink = true;\nvar quotationMark = '\"';\nvar apostrophe = \"'\";\nvar leftParenthesis = '(';\nvar rightParenthesis = ')';\nvar comma = ',';\nvar dot = '.';\nvar colon = ':';\nvar semicolon = ';';\nvar lessThan = '<';\nvar atSign = '@';\nvar leftSquareBracket = '[';\nvar rightSquareBracket = ']';\nvar http = 'http://';\nvar https = 'https://';\nvar mailto = 'mailto:';\nvar protocols = [http, https, mailto];\nvar protocolsLength = protocols.length;\n\nfunction url(eat, value, silent) {\n  var self = this;\n  var subvalue;\n  var content;\n  var character;\n  var index;\n  var position;\n  var protocol;\n  var match;\n  var length;\n  var queue;\n  var parenCount;\n  var nextCharacter;\n  var tokenizers;\n  var exit;\n\n  if (!self.options.gfm) {\n    return;\n  }\n\n  subvalue = '';\n  index = -1;\n\n  while (++index < protocolsLength) {\n    protocol = protocols[index];\n    match = value.slice(0, protocol.length);\n\n    if (match.toLowerCase() === protocol) {\n      subvalue = match;\n      break;\n    }\n  }\n\n  if (!subvalue) {\n    return;\n  }\n\n  index = subvalue.length;\n  length = value.length;\n  queue = '';\n  parenCount = 0;\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (whitespace(character) || character === lessThan) {\n      break;\n    }\n\n    if (character === dot || character === comma || character === colon || character === semicolon || character === quotationMark || character === apostrophe || character === rightParenthesis || character === rightSquareBracket) {\n      nextCharacter = value.charAt(index + 1);\n\n      if (!nextCharacter || whitespace(nextCharacter)) {\n        break;\n      }\n    }\n\n    if (character === leftParenthesis || character === leftSquareBracket) {\n      parenCount++;\n    }\n\n    if (character === rightParenthesis || character === rightSquareBracket) {\n      parenCount--;\n\n      if (parenCount < 0) {\n        break;\n      }\n    }\n\n    queue += character;\n    index++;\n  }\n\n  if (!queue) {\n    return;\n  }\n\n  subvalue += queue;\n  content = subvalue;\n\n  if (protocol === mailto) {\n    position = queue.indexOf(atSign);\n\n    if (position === -1 || position === length - 1) {\n      return;\n    }\n\n    content = content.substr(mailto.length);\n  }\n  /* istanbul ignore if - never used (yet) */\n\n\n  if (silent) {\n    return true;\n  }\n\n  exit = self.enterLink(); // Temporarily remove all tokenizers except text in url.\n\n  tokenizers = self.inlineTokenizers;\n  self.inlineTokenizers = {\n    text: tokenizers.text\n  };\n  content = self.tokenizeInline(content, eat.now());\n  self.inlineTokenizers = tokenizers;\n  exit();\n  return eat(subvalue)({\n    type: 'link',\n    title: null,\n    url: decode(subvalue, {\n      nonTerminated: false\n    }),\n    children: content\n  });\n}","map":{"version":3,"sources":["/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/remark-parse/lib/tokenize/url.js"],"names":["decode","require","whitespace","locate","module","exports","url","locator","notInLink","quotationMark","apostrophe","leftParenthesis","rightParenthesis","comma","dot","colon","semicolon","lessThan","atSign","leftSquareBracket","rightSquareBracket","http","https","mailto","protocols","protocolsLength","length","eat","value","silent","self","subvalue","content","character","index","position","protocol","match","queue","parenCount","nextCharacter","tokenizers","exit","options","gfm","slice","toLowerCase","charAt","indexOf","substr","enterLink","inlineTokenizers","text","tokenizeInline","now","type","title","nonTerminated","children"],"mappings":"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","sourcesContent":["'use strict'\n\nvar decode = require('parse-entities')\nvar whitespace = require('is-whitespace-character')\nvar locate = require('../locate/url')\n\nmodule.exports = url\nurl.locator = locate\nurl.notInLink = true\n\nvar quotationMark = '\"'\nvar apostrophe = \"'\"\nvar leftParenthesis = '('\nvar rightParenthesis = ')'\nvar comma = ','\nvar dot = '.'\nvar colon = ':'\nvar semicolon = ';'\nvar lessThan = '<'\nvar atSign = '@'\nvar leftSquareBracket = '['\nvar rightSquareBracket = ']'\n\nvar http = 'http://'\nvar https = 'https://'\nvar mailto = 'mailto:'\n\nvar protocols = [http, https, mailto]\n\nvar protocolsLength = protocols.length\n\nfunction url(eat, value, silent) {\n  var self = this\n  var subvalue\n  var content\n  var character\n  var index\n  var position\n  var protocol\n  var match\n  var length\n  var queue\n  var parenCount\n  var nextCharacter\n  var tokenizers\n  var exit\n\n  if (!self.options.gfm) {\n    return\n  }\n\n  subvalue = ''\n  index = -1\n\n  while (++index < protocolsLength) {\n    protocol = protocols[index]\n    match = value.slice(0, protocol.length)\n\n    if (match.toLowerCase() === protocol) {\n      subvalue = match\n      break\n    }\n  }\n\n  if (!subvalue) {\n    return\n  }\n\n  index = subvalue.length\n  length = value.length\n  queue = ''\n  parenCount = 0\n\n  while (index < length) {\n    character = value.charAt(index)\n\n    if (whitespace(character) || character === lessThan) {\n      break\n    }\n\n    if (\n      character === dot ||\n      character === comma ||\n      character === colon ||\n      character === semicolon ||\n      character === quotationMark ||\n      character === apostrophe ||\n      character === rightParenthesis ||\n      character === rightSquareBracket\n    ) {\n      nextCharacter = value.charAt(index + 1)\n\n      if (!nextCharacter || whitespace(nextCharacter)) {\n        break\n      }\n    }\n\n    if (character === leftParenthesis || character === leftSquareBracket) {\n      parenCount++\n    }\n\n    if (character === rightParenthesis || character === rightSquareBracket) {\n      parenCount--\n\n      if (parenCount < 0) {\n        break\n      }\n    }\n\n    queue += character\n    index++\n  }\n\n  if (!queue) {\n    return\n  }\n\n  subvalue += queue\n  content = subvalue\n\n  if (protocol === mailto) {\n    position = queue.indexOf(atSign)\n\n    if (position === -1 || position === length - 1) {\n      return\n    }\n\n    content = content.substr(mailto.length)\n  }\n\n  /* istanbul ignore if - never used (yet) */\n  if (silent) {\n    return true\n  }\n\n  exit = self.enterLink()\n\n  // Temporarily remove all tokenizers except text in url.\n  tokenizers = self.inlineTokenizers\n  self.inlineTokenizers = {text: tokenizers.text}\n\n  content = self.tokenizeInline(content, eat.now())\n\n  self.inlineTokenizers = tokenizers\n  exit()\n\n  return eat(subvalue)({\n    type: 'link',\n    title: null,\n    url: decode(subvalue, {nonTerminated: false}),\n    children: content\n  })\n}\n"]},"metadata":{},"sourceType":"script"}