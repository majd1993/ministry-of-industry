{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = patchOptions;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _resolveFunctionOrReturnValue = _interopRequireDefault(require(\"./resolveFunctionOrReturnValue\"));\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar shouldWarnOnSubscriptionKey = true;\n\nfunction patchOptions() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var authorizationToken = _ref.authorizationToken,\n      credentials = _ref.credentials,\n      looseEvent = _ref.looseEvent,\n      looseEvents = _ref.looseEvents,\n      _ref$region = _ref.region,\n      region = _ref$region === void 0 ? 'westus' : _ref$region,\n      subscriptionKey = _ref.subscriptionKey,\n      otherOptions = (0, _objectWithoutProperties2.default)(_ref, [\"authorizationToken\", \"credentials\", \"looseEvent\", \"looseEvents\", \"region\", \"subscriptionKey\"]);\n\n  if (typeof looseEvent !== 'undefined') {\n    console.warn('web-speech-cognitive-services: The option \"looseEvent\" should be named as \"looseEvents\".');\n    looseEvents = looseEvent;\n  }\n\n  if (!credentials) {\n    if (!authorizationToken && !subscriptionKey) {\n      throw new Error('web-speech-cognitive-services: Credentials must be specified.');\n    } else {\n      console.warn('web-speech-cognitive-services: We are deprecating authorizationToken, region, and subscriptionKey. Please use credentials instead. The deprecated option will be removed on or after 2020-11-14.');\n\n      credentials = /*#__PURE__*/function () {\n        var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {\n          return _regenerator.default.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (!authorizationToken) {\n                    _context.next = 8;\n                    break;\n                  }\n\n                  _context.next = 3;\n                  return (0, _resolveFunctionOrReturnValue.default)(authorizationToken);\n\n                case 3:\n                  _context.t1 = _context.sent;\n                  _context.t2 = region;\n                  _context.t0 = {\n                    authorizationToken: _context.t1,\n                    region: _context.t2\n                  };\n                  _context.next = 13;\n                  break;\n\n                case 8:\n                  _context.t3 = region;\n                  _context.next = 11;\n                  return (0, _resolveFunctionOrReturnValue.default)(subscriptionKey);\n\n                case 11:\n                  _context.t4 = _context.sent;\n                  _context.t0 = {\n                    region: _context.t3,\n                    subscriptionKey: _context.t4\n                  };\n\n                case 13:\n                  return _context.abrupt(\"return\", _context.t0);\n\n                case 14:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function credentials() {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n    }\n  }\n\n  return _objectSpread(_objectSpread({}, otherOptions), {}, {\n    fetchCredentials: function () {\n      var _fetchCredentials = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {\n        var _yield$resolveFunctio, authorizationToken, customVoiceHostname, region, speechRecognitionHostname, speechSynthesisHostname, subscriptionKey, resolvedCredentials;\n\n        return _regenerator.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return (0, _resolveFunctionOrReturnValue.default)(credentials);\n\n              case 2:\n                _yield$resolveFunctio = _context2.sent;\n                authorizationToken = _yield$resolveFunctio.authorizationToken;\n                customVoiceHostname = _yield$resolveFunctio.customVoiceHostname;\n                region = _yield$resolveFunctio.region;\n                speechRecognitionHostname = _yield$resolveFunctio.speechRecognitionHostname;\n                speechSynthesisHostname = _yield$resolveFunctio.speechSynthesisHostname;\n                subscriptionKey = _yield$resolveFunctio.subscriptionKey;\n\n                if (!(!authorizationToken && !subscriptionKey || authorizationToken && subscriptionKey)) {\n                  _context2.next = 13;\n                  break;\n                }\n\n                throw new Error('web-speech-cognitive-services: Either \"authorizationToken\" or \"subscriptionKey\" must be provided.');\n\n              case 13:\n                if (!(!region && !(speechRecognitionHostname && speechSynthesisHostname))) {\n                  _context2.next = 17;\n                  break;\n                }\n\n                throw new Error('web-speech-cognitive-services: Either \"region\" or \"speechRecognitionHostname\" and \"speechSynthesisHostname\" must be set.');\n\n              case 17:\n                if (!(region && (customVoiceHostname || speechRecognitionHostname || speechSynthesisHostname))) {\n                  _context2.next = 21;\n                  break;\n                }\n\n                throw new Error('web-speech-cognitive-services: Only either \"region\" or \"customVoiceHostname\", \"speechRecognitionHostname\" and \"speechSynthesisHostname\" can be set.');\n\n              case 21:\n                if (!authorizationToken) {\n                  _context2.next = 26;\n                  break;\n                }\n\n                if (!(typeof authorizationToken !== 'string')) {\n                  _context2.next = 24;\n                  break;\n                }\n\n                throw new Error('web-speech-cognitive-services: \"authorizationToken\" must be a string.');\n\n              case 24:\n                _context2.next = 28;\n                break;\n\n              case 26:\n                if (!(typeof subscriptionKey !== 'string')) {\n                  _context2.next = 28;\n                  break;\n                }\n\n                throw new Error('web-speech-cognitive-services: \"subscriptionKey\" must be a string.');\n\n              case 28:\n                if (shouldWarnOnSubscriptionKey && subscriptionKey) {\n                  console.warn('web-speech-cognitive-services: In production environment, subscription key should not be used, authorization token should be used instead.');\n                  shouldWarnOnSubscriptionKey = false;\n                }\n\n                resolvedCredentials = authorizationToken ? {\n                  authorizationToken: authorizationToken\n                } : {\n                  subscriptionKey: subscriptionKey\n                };\n\n                if (region) {\n                  resolvedCredentials.region = region;\n                } else {\n                  resolvedCredentials.customVoiceHostname = customVoiceHostname;\n                  resolvedCredentials.speechRecognitionHostname = speechRecognitionHostname;\n                  resolvedCredentials.speechSynthesisHostname = speechSynthesisHostname;\n                }\n\n                return _context2.abrupt(\"return\", resolvedCredentials);\n\n              case 32:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function fetchCredentials() {\n        return _fetchCredentials.apply(this, arguments);\n      }\n\n      return fetchCredentials;\n    }(),\n    looseEvents: looseEvents\n  });\n}","map":{"version":3,"sources":["../../src/SpeechServices/patchOptions.js"],"names":["shouldWarnOnSubscriptionKey","authorizationToken","credentials","looseEvent","looseEvents","region","subscriptionKey","otherOptions","console","fetchCredentials","customVoiceHostname","speechRecognitionHostname","speechSynthesisHostname","resolvedCredentials"],"mappings":"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","sourcesContent":["import resolveFunctionOrReturnValue from './resolveFunctionOrReturnValue';\n\nlet shouldWarnOnSubscriptionKey = true;\n\nexport default function patchOptions({\n  authorizationToken,\n  credentials,\n  looseEvent,\n  looseEvents,\n  region = 'westus',\n  subscriptionKey,\n  ...otherOptions\n} = {}) {\n  if (typeof looseEvent !== 'undefined') {\n    console.warn('web-speech-cognitive-services: The option \"looseEvent\" should be named as \"looseEvents\".');\n\n    looseEvents = looseEvent;\n  }\n\n  if (!credentials) {\n    if (!authorizationToken && !subscriptionKey) {\n      throw new Error('web-speech-cognitive-services: Credentials must be specified.');\n    } else {\n      console.warn(\n        'web-speech-cognitive-services: We are deprecating authorizationToken, region, and subscriptionKey. Please use credentials instead. The deprecated option will be removed on or after 2020-11-14.'\n      );\n\n      credentials = async () =>\n        authorizationToken\n          ? { authorizationToken: await resolveFunctionOrReturnValue(authorizationToken), region }\n          : { region, subscriptionKey: await resolveFunctionOrReturnValue(subscriptionKey) };\n    }\n  }\n\n  return {\n    ...otherOptions,\n    fetchCredentials: async () => {\n      const {\n        authorizationToken,\n        customVoiceHostname,\n        region,\n        speechRecognitionHostname,\n        speechSynthesisHostname,\n        subscriptionKey\n      } = await resolveFunctionOrReturnValue(credentials);\n\n      if ((!authorizationToken && !subscriptionKey) || (authorizationToken && subscriptionKey)) {\n        throw new Error(\n          'web-speech-cognitive-services: Either \"authorizationToken\" or \"subscriptionKey\" must be provided.'\n        );\n      } else if (!region && !(speechRecognitionHostname && speechSynthesisHostname)) {\n        throw new Error(\n          'web-speech-cognitive-services: Either \"region\" or \"speechRecognitionHostname\" and \"speechSynthesisHostname\" must be set.'\n        );\n      } else if (region && (customVoiceHostname || speechRecognitionHostname || speechSynthesisHostname)) {\n        throw new Error(\n          'web-speech-cognitive-services: Only either \"region\" or \"customVoiceHostname\", \"speechRecognitionHostname\" and \"speechSynthesisHostname\" can be set.'\n        );\n      } else if (authorizationToken) {\n        if (typeof authorizationToken !== 'string') {\n          throw new Error('web-speech-cognitive-services: \"authorizationToken\" must be a string.');\n        }\n      } else if (typeof subscriptionKey !== 'string') {\n        throw new Error('web-speech-cognitive-services: \"subscriptionKey\" must be a string.');\n      }\n\n      if (shouldWarnOnSubscriptionKey && subscriptionKey) {\n        console.warn(\n          'web-speech-cognitive-services: In production environment, subscription key should not be used, authorization token should be used instead.'\n        );\n\n        shouldWarnOnSubscriptionKey = false;\n      }\n\n      const resolvedCredentials = authorizationToken ? { authorizationToken } : { subscriptionKey };\n\n      if (region) {\n        resolvedCredentials.region = region;\n      } else {\n        resolvedCredentials.customVoiceHostname = customVoiceHostname;\n        resolvedCredentials.speechRecognitionHostname = speechRecognitionHostname;\n        resolvedCredentials.speechSynthesisHostname = speechSynthesisHostname;\n      }\n\n      return resolvedCredentials;\n    },\n    looseEvents\n  };\n}\n"]},"metadata":{},"sourceType":"script"}