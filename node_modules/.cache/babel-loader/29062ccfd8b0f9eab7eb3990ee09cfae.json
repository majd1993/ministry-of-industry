{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _arrayToMap = _interopRequireDefault(require(\"../../Util/arrayToMap\"));\n\nvar _SpeechSDK = _interopRequireDefault(require(\"../SpeechSDK\"));\n\nvar _SpeechSDK$ResultReas = _SpeechSDK.default.ResultReason,\n    RecognizingSpeech = _SpeechSDK$ResultReas.RecognizingSpeech,\n    RecognizedSpeech = _SpeechSDK$ResultReas.RecognizedSpeech;\n\nfunction _default(result) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$maxAlternatives = _ref.maxAlternatives,\n      maxAlternatives = _ref$maxAlternatives === void 0 ? Infinity : _ref$maxAlternatives,\n      _ref$textNormalizatio = _ref.textNormalization,\n      textNormalization = _ref$textNormalizatio === void 0 ? 'display' : _ref$textNormalizatio;\n\n  if (result.reason === RecognizingSpeech || result.reason === RecognizedSpeech && !result.json.NBest) {\n    var resultList = [{\n      confidence: 0.5,\n      transcript: result.text\n    }];\n\n    if (result.reason === RecognizedSpeech) {\n      resultList.isFinal = true;\n    }\n\n    return resultList;\n  } else if (result.reason === RecognizedSpeech) {\n    var _resultList = (0, _arrayToMap.default)((result.json.NBest || []).slice(0, maxAlternatives).map(function (_ref2) {\n      var confidence = _ref2.Confidence,\n          display = _ref2.Display,\n          itn = _ref2.ITN,\n          lexical = _ref2.Lexical,\n          maskedITN = _ref2.MaskedITN;\n      return {\n        confidence: confidence,\n        transcript: textNormalization === 'itn' ? itn : textNormalization === 'lexical' ? lexical : textNormalization === 'maskeditn' ? maskedITN : display\n      };\n    }), {\n      isFinal: true\n    });\n\n    return _resultList;\n  }\n\n  return [];\n}","map":{"version":3,"sources":["../../../src/SpeechServices/SpeechToText/cognitiveServiceEventResultToWebSpeechRecognitionResultList.js"],"names":["ResultReason","RecognizingSpeech","RecognizedSpeech","SpeechSDK","maxAlternatives","Infinity","textNormalization","result","resultList","confidence","transcript","text","display","itn","lexical","maskedITN","isFinal"],"mappings":";;;;;;;;;AAAA,IAAA,WAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,uBAAA,CAAA,CAAA;;AACA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;;4BAIIG,UAAAA,CAAAA,OAAAA,CADFH,Y;IAAgBC,iB,yBAAAA,iB;IAAmBC,gB,yBAAAA,gB;;AAGtB,SAAA,QAAA,CAAA,MAAA,EAAqF;AAAA,MAAA,IAAA,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;AAAA,MAAA,oBAAA,GAAA,IAAA,CAAlEE,eAAkE;AAAA,MAAlEA,eAAkE,GAAA,oBAAA,KAAA,KAAA,CAAA,GAAhDC,QAAgD,GAAA,oBAAA;AAAA,MAAA,qBAAA,GAAA,IAAA,CAAtCC,iBAAsC;AAAA,MAAtCA,iBAAsC,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAlB,SAAkB,GAAA,qBAAA;;AAClG,MAAIC,MAAM,CAANA,MAAAA,KAAAA,iBAAAA,IAAwCA,MAAM,CAANA,MAAAA,KAAAA,gBAAAA,IAAsC,CAACA,MAAM,CAANA,IAAAA,CAAnF,KAAA,EAAuG;AACrG,QAAMC,UAAU,GAAG,CACjB;AACEC,MAAAA,UAAU,EADZ,GAAA;AAEEC,MAAAA,UAAU,EAAEH,MAAM,CAACI;AAFrB,KADiB,CAAnB;;AAOA,QAAIJ,MAAM,CAANA,MAAAA,KAAJ,gBAAA,EAAwC;AACtCC,MAAAA,UAAU,CAAVA,OAAAA,GAAAA,IAAAA;AACD;;AAED,WAAA,UAAA;AAZF,GAAA,MAaO,IAAID,MAAM,CAANA,MAAAA,KAAJ,gBAAA,EAAwC;AAC7C,QAAMC,WAAU,GAAG,CAAA,GAAA,WAAA,CAAA,OAAA,EACjB,CAACD,MAAM,CAANA,IAAAA,CAAAA,KAAAA,IAAD,EAAA,EAAA,KAAA,CAAA,CAAA,EAAA,eAAA,EAAA,GAAA,CAEO,UAAA,KAAA,EAAA;AAAA,UAAeE,UAAf,GAAA,KAAA,CAAA,UAAA;AAAA,UAAoCG,OAApC,GAAA,KAAA,CAAA,OAAA;AAAA,UAAkDC,GAAlD,GAAA,KAAA,CAAA,GAAA;AAAA,UAAgEC,OAAhE,GAAA,KAAA,CAAA,OAAA;AAAA,UAAoFC,SAApF,GAAA,KAAA,CAAA,SAAA;AAAA,aAAqG;AACxGN,QAAAA,UAAU,EAD8F,UAAA;AAExGC,QAAAA,UAAU,EACRJ,iBAAiB,KAAjBA,KAAAA,GAAAA,GAAAA,GAEIA,iBAAiB,KAAjBA,SAAAA,GAAAA,OAAAA,GAEAA,iBAAiB,KAAjBA,WAAAA,GAAAA,SAAAA,GAEAM;AATkG,OAArG;AAHU,KACjB,CADiB,EAcjB;AAAEI,MAAAA,OAAO,EAAE;AAAX,KAdiB,CAAnB;;AAiBA,WAAA,WAAA;AACD;;AAED,SAAA,EAAA;AACD","sourcesContent":["import arrayToMap from '../../Util/arrayToMap';\nimport SpeechSDK from '../SpeechSDK';\n\nconst {\n  ResultReason: { RecognizingSpeech, RecognizedSpeech }\n} = SpeechSDK;\n\nexport default function(result, { maxAlternatives = Infinity, textNormalization = 'display' } = {}) {\n  if (result.reason === RecognizingSpeech || (result.reason === RecognizedSpeech && !result.json.NBest)) {\n    const resultList = [\n      {\n        confidence: 0.5,\n        transcript: result.text\n      }\n    ];\n\n    if (result.reason === RecognizedSpeech) {\n      resultList.isFinal = true;\n    }\n\n    return resultList;\n  } else if (result.reason === RecognizedSpeech) {\n    const resultList = arrayToMap(\n      (result.json.NBest || [])\n        .slice(0, maxAlternatives)\n        .map(({ Confidence: confidence, Display: display, ITN: itn, Lexical: lexical, MaskedITN: maskedITN }) => ({\n          confidence,\n          transcript:\n            textNormalization === 'itn'\n              ? itn\n              : textNormalization === 'lexical'\n              ? lexical\n              : textNormalization === 'maskeditn'\n              ? maskedITN\n              : display\n        })),\n      { isFinal: true }\n    );\n\n    return resultList;\n  }\n\n  return [];\n}\n"]},"metadata":{},"sourceType":"script"}