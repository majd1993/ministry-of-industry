{"ast":null,"code":"import _classCallCheck from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { EventType } from \"../common/Exports\";\nexport var ConsoleLoggingListener = function ConsoleLoggingListener() {\n  var _this = this;\n\n  var logLevelFilter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : EventType.Warning;\n\n  _classCallCheck(this, ConsoleLoggingListener);\n\n  this.onEvent = function (event) {\n    if (event.eventType >= _this.privLogLevelFilter) {\n      var log = _this.toString(event);\n\n      switch (event.eventType) {\n        case EventType.Debug:\n          // tslint:disable-next-line:no-console\n          console.debug(log);\n          break;\n\n        case EventType.Info:\n          // tslint:disable-next-line:no-console\n          console.info(log);\n          break;\n\n        case EventType.Warning:\n          // tslint:disable-next-line:no-console\n          console.warn(log);\n          break;\n\n        case EventType.Error:\n          // tslint:disable-next-line:no-console\n          console.error(log);\n          break;\n\n        default:\n          // tslint:disable-next-line:no-console\n          console.log(log);\n          break;\n      }\n    }\n  };\n\n  this.toString = function (event) {\n    var logFragments = [\"\".concat(event.EventTime), \"\".concat(event.Name)];\n\n    for (var prop in event) {\n      if (prop && event.hasOwnProperty(prop) && prop !== \"eventTime\" && prop !== \"eventType\" && prop !== \"eventId\" && prop !== \"name\" && prop !== \"constructor\") {\n        var value = event[prop];\n        var valueToLog = \"<NULL>\";\n\n        if (value !== undefined && value !== null) {\n          if (typeof value === \"number\" || typeof value === \"string\") {\n            valueToLog = value.toString();\n          } else {\n            valueToLog = JSON.stringify(value);\n          }\n        }\n\n        logFragments.push(\"\".concat(prop, \": \").concat(valueToLog));\n      }\n    }\n\n    return logFragments.join(\" | \");\n  };\n\n  this.privLogLevelFilter = logLevelFilter;\n};","map":{"version":3,"sources":["src/common.browser/ConsoleLoggingListener.ts"],"names":[],"mappings":";AAAA;AACA;AAEA,SAAS,SAAT,QAAyD,mBAAzD;AAEA,WAAa,sBAAb,GAGI,kCAAgE;AAAA;;AAAA,MAA7C,cAA6C,uEAAjB,SAAS,CAAC,OAAO;;AAAA;;AAIzD,OAAA,OAAA,GAAU,UAAC,KAAD,EAA+B;AAC5C,QAAI,KAAK,CAAC,SAAN,IAAmB,KAAI,CAAC,kBAA5B,EAAgD;AAC5C,UAAM,GAAG,GAAG,KAAI,CAAC,QAAL,CAAc,KAAd,CAAZ;;AAEA,cAAQ,KAAK,CAAC,SAAd;AACI,aAAK,SAAS,CAAC,KAAf;AACI;AACA,UAAA,OAAO,CAAC,KAAR,CAAc,GAAd;AACA;;AACJ,aAAK,SAAS,CAAC,IAAf;AACI;AACA,UAAA,OAAO,CAAC,IAAR,CAAa,GAAb;AACA;;AACJ,aAAK,SAAS,CAAC,OAAf;AACI;AACA,UAAA,OAAO,CAAC,IAAR,CAAa,GAAb;AACA;;AACJ,aAAK,SAAS,CAAC,KAAf;AACI;AACA,UAAA,OAAO,CAAC,KAAR,CAAc,GAAd;AACA;;AACJ;AACI;AACA,UAAA,OAAO,CAAC,GAAR,CAAY,GAAZ;AACA;AApBR;AAsBH;AACJ,GA3BM;;AA6BC,OAAA,QAAA,GAAW,UAAC,KAAD,EAAuB;AACtC,QAAM,YAAY,GAAG,WACd,KAAK,CAAC,SADQ,aAEd,KAAK,CAAC,IAFQ,EAArB;;AAKA,SAAK,IAAM,IAAX,IAAmB,KAAnB,EAA0B;AACtB,UAAI,IAAI,IAAI,KAAK,CAAC,cAAN,CAAqB,IAArB,CAAR,IACA,IAAI,KAAK,WADT,IACwB,IAAI,KAAK,WADjC,IAEA,IAAI,KAAK,SAFT,IAEsB,IAAI,KAAK,MAF/B,IAGA,IAAI,KAAK,aAHb,EAG4B;AACxB,YAAM,KAAK,GAAG,KAAK,CAAC,IAAD,CAAnB;AACA,YAAI,UAAU,GAAG,QAAjB;;AACA,YAAI,KAAK,KAAK,SAAV,IAAuB,KAAK,KAAK,IAArC,EAA2C;AACvC,cAAI,OAAQ,KAAR,KAAmB,QAAnB,IAA+B,OAAQ,KAAR,KAAmB,QAAtD,EAAgE;AAC5D,YAAA,UAAU,GAAG,KAAK,CAAC,QAAN,EAAb;AACH,WAFD,MAEO;AACH,YAAA,UAAU,GAAG,IAAI,CAAC,SAAL,CAAe,KAAf,CAAb;AACH;AACJ;;AAED,QAAA,YAAY,CAAC,IAAb,WAAqB,IAArB,eAA8B,UAA9B;AACH;AAEJ;;AAED,WAAO,YAAY,CAAC,IAAb,CAAkB,KAAlB,CAAP;AACH,GA3BO;;AAhCJ,OAAK,kBAAL,GAA0B,cAA1B;AACH,CALL","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { EventType, IEventListener, PlatformEvent } from \"../common/Exports\";\r\n\r\nexport class ConsoleLoggingListener implements IEventListener<PlatformEvent> {\r\n    private privLogLevelFilter: EventType;\r\n\r\n    public constructor(logLevelFilter: EventType = EventType.Warning) {\r\n        this.privLogLevelFilter = logLevelFilter;\r\n    }\r\n\r\n    public onEvent = (event: PlatformEvent): void => {\r\n        if (event.eventType >= this.privLogLevelFilter) {\r\n            const log = this.toString(event);\r\n\r\n            switch (event.eventType) {\r\n                case EventType.Debug:\r\n                    // tslint:disable-next-line:no-console\r\n                    console.debug(log);\r\n                    break;\r\n                case EventType.Info:\r\n                    // tslint:disable-next-line:no-console\r\n                    console.info(log);\r\n                    break;\r\n                case EventType.Warning:\r\n                    // tslint:disable-next-line:no-console\r\n                    console.warn(log);\r\n                    break;\r\n                case EventType.Error:\r\n                    // tslint:disable-next-line:no-console\r\n                    console.error(log);\r\n                    break;\r\n                default:\r\n                    // tslint:disable-next-line:no-console\r\n                    console.log(log);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private toString = (event: any): string => {\r\n        const logFragments = [\r\n            `${event.EventTime}`,\r\n            `${event.Name}`,\r\n        ];\r\n\r\n        for (const prop in event) {\r\n            if (prop && event.hasOwnProperty(prop) &&\r\n                prop !== \"eventTime\" && prop !== \"eventType\" &&\r\n                prop !== \"eventId\" && prop !== \"name\" &&\r\n                prop !== \"constructor\") {\r\n                const value = event[prop];\r\n                let valueToLog = \"<NULL>\";\r\n                if (value !== undefined && value !== null) {\r\n                    if (typeof (value) === \"number\" || typeof (value) === \"string\") {\r\n                        valueToLog = value.toString();\r\n                    } else {\r\n                        valueToLog = JSON.stringify(value);\r\n                    }\r\n                }\r\n\r\n                logFragments.push(`${prop}: ${valueToLog}`);\r\n            }\r\n\r\n        }\r\n\r\n        return logFragments.join(\" | \");\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}