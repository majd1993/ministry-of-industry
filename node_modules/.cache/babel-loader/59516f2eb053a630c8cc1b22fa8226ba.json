{"ast":null,"code":"import _inherits from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n * Represents audio stream format used for custom audio input configurations.\n * @class AudioStreamFormat\n */\nexport var AudioStreamFormat = /*#__PURE__*/function () {\n  function AudioStreamFormat() {\n    _classCallCheck(this, AudioStreamFormat);\n  }\n\n  _createClass(AudioStreamFormat, null, [{\n    key: \"getDefaultInputFormat\",\n    value:\n    /**\n     * Creates an audio stream format object representing the default audio stream\n     * format (16KHz 16bit mono PCM).\n     * @member AudioStreamFormat.getDefaultInputFormat\n     * @function\n     * @public\n     * @returns {AudioStreamFormat} The audio stream format being created.\n     */\n    function getDefaultInputFormat() {\n      return AudioStreamFormatImpl.getDefaultInputFormat();\n    }\n    /**\n     * Creates an audio stream format object with the specified pcm waveformat characteristics.\n     * @member AudioStreamFormat.getWaveFormatPCM\n     * @function\n     * @public\n     * @param {number} samplesPerSecond - Sample rate, in samples per second (Hertz).\n     * @param {number} bitsPerSample - Bits per sample, typically 16.\n     * @param {number} channels - Number of channels in the waveform-audio data. Monaural data\n     *        uses one channel and stereo data uses two channels.\n     * @returns {AudioStreamFormat} The audio stream format being created.\n     */\n\n  }, {\n    key: \"getWaveFormatPCM\",\n    value: function getWaveFormatPCM(samplesPerSecond, bitsPerSample, channels) {\n      return new AudioStreamFormatImpl(samplesPerSecond, bitsPerSample, channels);\n    }\n  }]);\n\n  return AudioStreamFormat;\n}();\n/**\n * @private\n * @class AudioStreamFormatImpl\n */\n// tslint:disable-next-line:max-classes-per-file\n\nexport var AudioStreamFormatImpl = /*#__PURE__*/function (_AudioStreamFormat) {\n  _inherits(AudioStreamFormatImpl, _AudioStreamFormat);\n\n  var _super = _createSuper(AudioStreamFormatImpl);\n\n  /**\n   * Creates an instance with the given values.\n   * @constructor\n   * @param {number} samplesPerSec - Samples per second.\n   * @param {number} bitsPerSample - Bits per sample.\n   * @param {number} channels - Number of channels.\n   */\n  function AudioStreamFormatImpl() {\n    var _this;\n\n    var samplesPerSec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 16000;\n    var bitsPerSample = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;\n    var channels = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n    _classCallCheck(this, AudioStreamFormatImpl);\n\n    _this = _super.call(this);\n\n    _this.setString = function (view, offset, str) {\n      for (var i = 0; i < str.length; i++) {\n        view.setUint8(offset + i, str.charCodeAt(i));\n      }\n    };\n\n    _this.formatTag = 1;\n    _this.bitsPerSample = bitsPerSample;\n    _this.samplesPerSec = samplesPerSec;\n    _this.channels = channels;\n    _this.avgBytesPerSec = _this.samplesPerSec * _this.channels * (_this.bitsPerSample / 8);\n    _this.blockAlign = _this.channels * Math.max(_this.bitsPerSample, 8);\n    _this.privHeader = new ArrayBuffer(44); // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n    var view = new DataView(_this.privHeader);\n    /* RIFF identifier */\n\n    _this.setString(view, 0, \"RIFF\");\n    /* file length */\n\n\n    view.setUint32(4, 0, true);\n    /* RIFF type & Format */\n\n    _this.setString(view, 8, \"WAVEfmt \");\n    /* format chunk length */\n\n\n    view.setUint32(16, 16, true);\n    /* sample format (raw) */\n\n    view.setUint16(20, 1, true);\n    /* channel count */\n\n    view.setUint16(22, _this.channels, true);\n    /* sample rate */\n\n    view.setUint32(24, _this.samplesPerSec, true);\n    /* byte rate (sample rate * block align) */\n\n    view.setUint32(28, _this.avgBytesPerSec, true);\n    /* block align (channel count * bytes per sample) */\n\n    view.setUint16(32, _this.channels * (_this.bitsPerSample / 8), true);\n    /* bits per sample */\n\n    view.setUint16(34, _this.bitsPerSample, true);\n    /* data chunk identifier */\n\n    _this.setString(view, 36, \"data\");\n    /* data chunk length */\n\n\n    view.setUint32(40, 0, true);\n    return _this;\n  }\n  /**\n   * Retrieves the default input format.\n   * @member AudioStreamFormatImpl.getDefaultInputFormat\n   * @function\n   * @public\n   * @returns {AudioStreamFormatImpl} The default input format.\n   */\n\n\n  _createClass(AudioStreamFormatImpl, [{\n    key: \"close\",\n    value:\n    /**\n     * Closes the configuration object.\n     * @member AudioStreamFormatImpl.prototype.close\n     * @function\n     * @public\n     */\n    function close() {\n      return;\n    }\n  }, {\n    key: \"header\",\n    get: function get() {\n      return this.privHeader;\n    }\n  }], [{\n    key: \"getDefaultInputFormat\",\n    value: function getDefaultInputFormat() {\n      return new AudioStreamFormatImpl();\n    }\n  }]);\n\n  return AudioStreamFormatImpl;\n}(AudioStreamFormat);","map":{"version":3,"sources":["src/sdk/Audio/AudioStreamFormat.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Represents audio stream format used for custom audio input configurations.\r\n * @class AudioStreamFormat\r\n */\r\nexport abstract class AudioStreamFormat {\r\n    /**\r\n     * Creates an audio stream format object representing the default audio stream\r\n     * format (16KHz 16bit mono PCM).\r\n     * @member AudioStreamFormat.getDefaultInputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getDefaultInputFormat(): AudioStreamFormat {\r\n        return AudioStreamFormatImpl.getDefaultInputFormat();\r\n    }\r\n\r\n    /**\r\n     * Creates an audio stream format object with the specified pcm waveformat characteristics.\r\n     * @member AudioStreamFormat.getWaveFormatPCM\r\n     * @function\r\n     * @public\r\n     * @param {number} samplesPerSecond - Sample rate, in samples per second (Hertz).\r\n     * @param {number} bitsPerSample - Bits per sample, typically 16.\r\n     * @param {number} channels - Number of channels in the waveform-audio data. Monaural data\r\n     *        uses one channel and stereo data uses two channels.\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getWaveFormatPCM(samplesPerSecond: number, bitsPerSample: number, channels: number): AudioStreamFormat {\r\n        return new AudioStreamFormatImpl(samplesPerSecond, bitsPerSample, channels);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioStreamFormat.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * @private\r\n * @class AudioStreamFormatImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioStreamFormatImpl extends AudioStreamFormat {\r\n    protected privHeader: ArrayBuffer;\r\n\r\n    /**\r\n     * Creates an instance with the given values.\r\n     * @constructor\r\n     * @param {number} samplesPerSec - Samples per second.\r\n     * @param {number} bitsPerSample - Bits per sample.\r\n     * @param {number} channels - Number of channels.\r\n     */\r\n    public constructor(samplesPerSec: number = 16000, bitsPerSample: number = 16, channels: number = 1) {\r\n        super();\r\n        this.formatTag = 1;\r\n        this.bitsPerSample = bitsPerSample;\r\n        this.samplesPerSec = samplesPerSec;\r\n        this.channels = channels;\r\n        this.avgBytesPerSec = this.samplesPerSec * this.channels * (this.bitsPerSample / 8);\r\n        this.blockAlign = this.channels * Math.max(this.bitsPerSample, 8);\r\n\r\n        this.privHeader = new ArrayBuffer(44);\r\n\r\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\r\n        const view = new DataView(this.privHeader);\r\n\r\n        /* RIFF identifier */\r\n        this.setString(view, 0, \"RIFF\");\r\n        /* file length */\r\n        view.setUint32(4, 0, true);\r\n        /* RIFF type & Format */\r\n        this.setString(view, 8, \"WAVEfmt \");\r\n        /* format chunk length */\r\n        view.setUint32(16, 16, true);\r\n        /* sample format (raw) */\r\n        view.setUint16(20, 1, true);\r\n        /* channel count */\r\n        view.setUint16(22, this.channels, true);\r\n        /* sample rate */\r\n        view.setUint32(24, this.samplesPerSec, true);\r\n        /* byte rate (sample rate * block align) */\r\n        view.setUint32(28, this.avgBytesPerSec, true);\r\n        /* block align (channel count * bytes per sample) */\r\n        view.setUint16(32, this.channels * (this.bitsPerSample / 8), true);\r\n        /* bits per sample */\r\n        view.setUint16(34, this.bitsPerSample, true);\r\n        /* data chunk identifier */\r\n        this.setString(view, 36, \"data\");\r\n        /* data chunk length */\r\n        view.setUint32(40, 0, true);\r\n    }\r\n\r\n    /**\r\n     * Retrieves the default input format.\r\n     * @member AudioStreamFormatImpl.getDefaultInputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {AudioStreamFormatImpl} The default input format.\r\n     */\r\n    public static getDefaultInputFormat(): AudioStreamFormatImpl {\r\n        return new AudioStreamFormatImpl();\r\n    }\r\n\r\n    /**\r\n     * Closes the configuration object.\r\n     * @member AudioStreamFormatImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void { return; }\r\n\r\n    /**\r\n     * The format of the audio, valid values: 1 (PCM)\r\n     * @member AudioStreamFormatImpl.prototype.formatTag\r\n     * @function\r\n     * @public\r\n     */\r\n    public formatTag: number;\r\n\r\n    /**\r\n     * The number of channels, valid values: 1 (Mono).\r\n     * @member AudioStreamFormatImpl.prototype.channels\r\n     * @function\r\n     * @public\r\n     */\r\n    public channels: number;\r\n\r\n    /**\r\n     * The sample rate, valid values: 16000.\r\n     * @member AudioStreamFormatImpl.prototype.samplesPerSec\r\n     * @function\r\n     * @public\r\n     */\r\n    public samplesPerSec: number;\r\n\r\n    /**\r\n     * The bits per sample, valid values: 16\r\n     * @member AudioStreamFormatImpl.prototype.b\r\n     * @function\r\n     * @public\r\n     */\r\n    public bitsPerSample: number;\r\n\r\n    /**\r\n     * Average bytes per second, usually calculated as nSamplesPerSec * nChannels * ceil(wBitsPerSample, 8).\r\n     * @member AudioStreamFormatImpl.prototype.avgBytesPerSec\r\n     * @function\r\n     * @public\r\n     */\r\n    public avgBytesPerSec: number;\r\n\r\n    /**\r\n     * The size of a single frame, valid values: nChannels * ceil(wBitsPerSample, 8).\r\n     * @member AudioStreamFormatImpl.prototype.blockAlign\r\n     * @function\r\n     * @public\r\n     */\r\n    public blockAlign: number;\r\n\r\n    public get header(): ArrayBuffer {\r\n        return this.privHeader;\r\n    }\r\n\r\n    protected setString = (view: DataView, offset: number, str: string): void => {\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(offset + i, str.charCodeAt(i));\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}