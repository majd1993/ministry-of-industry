{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) {\n    if (b.hasOwnProperty(p)) d[p] = b[p];\n  }\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Observable_1 = require('./Observable');\n\nvar Subscriber_1 = require('./Subscriber');\n\nvar Subscription_1 = require('./Subscription');\n\nvar ObjectUnsubscribedError_1 = require('./util/ObjectUnsubscribedError');\n\nvar SubjectSubscription_1 = require('./SubjectSubscription');\n\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\n/**\n * @class SubjectSubscriber<T>\n */\n\n\nvar SubjectSubscriber = function (_super) {\n  __extends(SubjectSubscriber, _super);\n\n  function SubjectSubscriber(destination) {\n    _super.call(this, destination);\n\n    this.destination = destination;\n  }\n\n  return SubjectSubscriber;\n}(Subscriber_1.Subscriber);\n\nexports.SubjectSubscriber = SubjectSubscriber;\n/**\n * @class Subject<T>\n */\n\nvar Subject = function (_super) {\n  __extends(Subject, _super);\n\n  function Subject() {\n    _super.call(this);\n\n    this.observers = [];\n    this.closed = false;\n    this.isStopped = false;\n    this.hasError = false;\n    this.thrownError = null;\n  }\n\n  Subject.prototype[rxSubscriber_1.rxSubscriber] = function () {\n    return new SubjectSubscriber(this);\n  };\n\n  Subject.prototype.lift = function (operator) {\n    var subject = new AnonymousSubject(this, this);\n    subject.operator = operator;\n    return subject;\n  };\n\n  Subject.prototype.next = function (value) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n    }\n\n    if (!this.isStopped) {\n      var observers = this.observers;\n      var len = observers.length;\n      var copy = observers.slice();\n\n      for (var i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  };\n\n  Subject.prototype.error = function (err) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n    }\n\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    var observers = this.observers;\n    var len = observers.length;\n    var copy = observers.slice();\n\n    for (var i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n\n    this.observers.length = 0;\n  };\n\n  Subject.prototype.complete = function () {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n    }\n\n    this.isStopped = true;\n    var observers = this.observers;\n    var len = observers.length;\n    var copy = observers.slice();\n\n    for (var i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n\n    this.observers.length = 0;\n  };\n\n  Subject.prototype.unsubscribe = function () {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  };\n\n  Subject.prototype._trySubscribe = function (subscriber) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n    } else {\n      return _super.prototype._trySubscribe.call(this, subscriber);\n    }\n  };\n  /** @deprecated internal use only */\n\n\n  Subject.prototype._subscribe = function (subscriber) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription_1.Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription_1.Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription_1.SubjectSubscription(this, subscriber);\n    }\n  };\n\n  Subject.prototype.asObservable = function () {\n    var observable = new Observable_1.Observable();\n    observable.source = this;\n    return observable;\n  };\n\n  Subject.create = function (destination, source) {\n    return new AnonymousSubject(destination, source);\n  };\n\n  return Subject;\n}(Observable_1.Observable);\n\nexports.Subject = Subject;\n/**\n * @class AnonymousSubject<T>\n */\n\nvar AnonymousSubject = function (_super) {\n  __extends(AnonymousSubject, _super);\n\n  function AnonymousSubject(destination, source) {\n    _super.call(this);\n\n    this.destination = destination;\n    this.source = source;\n  }\n\n  AnonymousSubject.prototype.next = function (value) {\n    var destination = this.destination;\n\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  };\n\n  AnonymousSubject.prototype.error = function (err) {\n    var destination = this.destination;\n\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  };\n\n  AnonymousSubject.prototype.complete = function () {\n    var destination = this.destination;\n\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  };\n  /** @deprecated internal use only */\n\n\n  AnonymousSubject.prototype._subscribe = function (subscriber) {\n    var source = this.source;\n\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription_1.Subscription.EMPTY;\n    }\n  };\n\n  return AnonymousSubject;\n}(Subject);\n\nexports.AnonymousSubject = AnonymousSubject;","map":{"version":3,"sources":["../src/Subject.ts"],"names":[],"mappings":"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","sourcesContent":["import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription, TeardownLogic } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}