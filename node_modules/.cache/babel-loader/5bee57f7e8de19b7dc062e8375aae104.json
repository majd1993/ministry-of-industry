{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _botframeworkWebchatApi = require(\"botframework-webchat-api\");\n\nvar _reactScrollToBottom = require(\"react-scroll-to-bottom\");\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _BasicTypingIndicator = _interopRequireDefault(require(\"./BasicTypingIndicator\"));\n\nvar _Fade = _interopRequireDefault(require(\"./Utils/Fade\"));\n\nvar _firstTabbableDescendant = _interopRequireDefault(require(\"./Utils/firstTabbableDescendant\"));\n\nvar _getActivityUniqueId = _interopRequireDefault(require(\"./Utils/getActivityUniqueId\"));\n\nvar _intersectionOf = _interopRequireDefault(require(\"./Utils/intersectionOf\"));\n\nvar _isZeroOrPositive = _interopRequireDefault(require(\"./Utils/isZeroOrPositive\"));\n\nvar _removeInline = _interopRequireDefault(require(\"./Utils/removeInline\"));\n\nvar _ScreenReaderActivity = _interopRequireDefault(require(\"./ScreenReaderActivity\"));\n\nvar _ScrollToEndButton = _interopRequireDefault(require(\"./Activity/ScrollToEndButton\"));\n\nvar _Speak = _interopRequireDefault(require(\"./Activity/Speak\"));\n\nvar _useFocus = _interopRequireDefault(require(\"./hooks/useFocus\"));\n\nvar _useMemoize = _interopRequireDefault(require(\"./hooks/internal/useMemoize\"));\n\nvar _useStyleSet5 = _interopRequireDefault(require(\"./hooks/useStyleSet\"));\n\nvar _useStyleToEmotionObject = _interopRequireDefault(require(\"./hooks/internal/useStyleToEmotionObject\"));\n\nvar _useTranscriptActivityElementsRef = _interopRequireDefault(require(\"./hooks/internal/useTranscriptActivityElementsRef\"));\n\nvar _useTranscriptRootElementRef = _interopRequireDefault(require(\"./hooks/internal/useTranscriptRootElementRef\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar useActivities = _botframeworkWebchatApi.hooks.useActivities,\n    useCreateActivityRenderer = _botframeworkWebchatApi.hooks.useCreateActivityRenderer,\n    useCreateActivityStatusRenderer = _botframeworkWebchatApi.hooks.useCreateActivityStatusRenderer,\n    useCreateAvatarRenderer = _botframeworkWebchatApi.hooks.useCreateAvatarRenderer,\n    useDirection = _botframeworkWebchatApi.hooks.useDirection,\n    useGroupActivities = _botframeworkWebchatApi.hooks.useGroupActivities,\n    useLocalizer = _botframeworkWebchatApi.hooks.useLocalizer,\n    useStyleOptions = _botframeworkWebchatApi.hooks.useStyleOptions;\nvar ROOT_STYLE = {\n  '&.webchat__basic-transcript': {\n    display: 'flex',\n    flexDirection: 'column',\n    overflow: 'hidden',\n    // Make sure to set \"position: relative\" here to form another stacking context for the scroll-to-end button.\n    // Stacking context help isolating elements that use \"z-index\" from global pollution.\n    // https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context\n    position: 'relative',\n    '& .webchat__basic-transcript__filler': {\n      flex: 1\n    },\n    '& .webchat__basic-transcript__scrollable': {\n      display: 'flex',\n      flexDirection: 'column',\n      overflowX: 'hidden',\n      WebkitOverflowScrolling: 'touch'\n    },\n    '& .webchat__basic-transcript__transcript': {\n      listStyleType: 'none'\n    }\n  }\n};\n\nfunction nextSiblingAll(element) {\n  var children = element.parentNode.children;\n  var elementIndex = [].indexOf.call(children, element);\n  return [].slice.call(children, elementIndex + 1);\n}\n\nfunction validateAllActivitiesTagged(activities, bins) {\n  return activities.every(function (activity) {\n    return bins.some(function (bin) {\n      return bin.includes(activity);\n    });\n  });\n}\n\nvar BasicTranscript = function BasicTranscript(_ref) {\n  var className = _ref.className;\n\n  var _useStyleSet = (0, _useStyleSet5.default)(),\n      _useStyleSet2 = _slicedToArray(_useStyleSet, 1),\n      activityStyleSet = _useStyleSet2[0].activity;\n\n  var _useStyleOptions = useStyleOptions(),\n      _useStyleOptions2 = _slicedToArray(_useStyleOptions, 1),\n      _useStyleOptions2$ = _useStyleOptions2[0],\n      bubbleFromUserNubOffset = _useStyleOptions2$.bubbleFromUserNubOffset,\n      bubbleNubOffset = _useStyleOptions2$.bubbleNubOffset,\n      groupTimestamp = _useStyleOptions2$.groupTimestamp,\n      internalLiveRegionFadeAfter = _useStyleOptions2$.internalLiveRegionFadeAfter,\n      showAvatarInGroup = _useStyleOptions2$.showAvatarInGroup;\n\n  var _useActivities = useActivities(),\n      _useActivities2 = _slicedToArray(_useActivities, 1),\n      activities = _useActivities2[0];\n\n  var _useTranscriptActivit = (0, _useTranscriptActivityElementsRef.default)(),\n      _useTranscriptActivit2 = _slicedToArray(_useTranscriptActivit, 1),\n      activityElementsRef = _useTranscriptActivit2[0];\n\n  var _useDirection = useDirection(),\n      _useDirection2 = _slicedToArray(_useDirection, 1),\n      direction = _useDirection2[0];\n\n  var _useTranscriptRootEle = (0, _useTranscriptRootElementRef.default)(),\n      _useTranscriptRootEle2 = _slicedToArray(_useTranscriptRootEle, 1),\n      rootElementRef = _useTranscriptRootEle2[0];\n\n  var rootClassName = (0, _useStyleToEmotionObject.default)()(ROOT_STYLE) + '';\n  var createActivityRenderer = useCreateActivityRenderer();\n  var createActivityStatusRenderer = useCreateActivityStatusRenderer();\n  var createAvatarRenderer = useCreateAvatarRenderer();\n  var groupActivities = useGroupActivities();\n  var hideAllTimestamps = groupTimestamp === false;\n  var localize = useLocalizer();\n  var activityAriaLabel = localize('ACTIVITY_ARIA_LABEL_ALT');\n  var transcriptRoleDescription = localize('TRANSCRIPT_ARIA_ROLE_ALT'); // Gets renderer for every activity.\n  // Activities that are not visible will return a falsy renderer.\n  // Converted from createActivityRenderer({ activity, nextVisibleActivity }) to createActivityRenderer(activity, nextVisibleActivity).\n  // This is for the memoization function to cache the arguments. Memoizer can only cache literal arguments.\n\n  var createActivityRendererWithLiteralArgs = (0, _react.useCallback)(function (activity, nextVisibleActivity) {\n    return createActivityRenderer({\n      activity: activity,\n      nextVisibleActivity: nextVisibleActivity\n    });\n  }, [createActivityRenderer]); // Create a memoized context of the createActivityRenderer function.\n\n  var activitiesWithRenderer = (0, _useMemoize.default)(createActivityRendererWithLiteralArgs, function (createActivityRendererWithLiteralArgsMemoized) {\n    // All calls to createActivityRendererWithLiteralArgsMemoized() in this function will be memoized (LRU = 1).\n    // In the next render cycle, calls to createActivityRendererWithLiteralArgsMemoized() might return the memoized result instead.\n    // This is an improvement to React useMemo(), because it only allows 1 memoization.\n    // useMemoize() allows any number of memoization.\n    var activitiesWithRenderer = [];\n    var nextVisibleActivity;\n\n    for (var index = activities.length - 1; index >= 0; index--) {\n      var activity = activities[index];\n      var renderActivity = createActivityRendererWithLiteralArgsMemoized(activity, nextVisibleActivity);\n\n      if (renderActivity) {\n        activitiesWithRenderer.splice(0, 0, {\n          activity: activity,\n          renderActivity: renderActivity\n        });\n        nextVisibleActivity = activity;\n      }\n    }\n\n    return activitiesWithRenderer;\n  }, [activities]);\n  var visibleActivities = (0, _react.useMemo)(function () {\n    return activitiesWithRenderer.map(function (_ref2) {\n      var activity = _ref2.activity;\n      return activity;\n    });\n  }, [activitiesWithRenderer]); // Tag activities based on types.\n  // The default implementation tag into 2 types: sender and status.\n\n  var _useMemo = (0, _react.useMemo)(function () {\n    var _groupActivities = groupActivities({\n      activities: visibleActivities\n    }),\n        activitiesGroupBySender = _groupActivities.sender,\n        activitiesGroupByStatus = _groupActivities.status;\n\n    if (!validateAllActivitiesTagged(visibleActivities, activitiesGroupBySender)) {\n      console.warn('botframework-webchat: Not every activities are grouped in the \"sender\" property. Please fix \"groupActivitiesMiddleware\" and group every activities.');\n    }\n\n    if (!validateAllActivitiesTagged(visibleActivities, activitiesGroupByStatus)) {\n      console.warn('botframework-webchat: Not every activities are grouped in the \"status\" property. Please fix \"groupActivitiesMiddleware\" and group every activities.');\n    }\n\n    return {\n      activitiesGroupBySender: activitiesGroupBySender,\n      activitiesGroupByStatus: activitiesGroupByStatus\n    };\n  }, [groupActivities, visibleActivities]),\n      activitiesGroupBySender = _useMemo.activitiesGroupBySender,\n      activitiesGroupByStatus = _useMemo.activitiesGroupByStatus; // Create a tree of activities with 2 dimensions: sender, followed by status.\n\n\n  var activityTree = (0, _react.useMemo)(function () {\n    var visibleActivitiesPendingGrouping = _toConsumableArray(visibleActivities);\n\n    var activityTree = [];\n\n    var _loop = function _loop() {\n      var _visibleActivitiesPen = _slicedToArray(visibleActivitiesPendingGrouping, 1),\n          activity = _visibleActivitiesPen[0];\n\n      var senderTree = [];\n      var activitiesWithSameSender = activitiesGroupBySender.find(function (activities) {\n        return activities.includes(activity);\n      });\n      activityTree.push(senderTree);\n      activitiesWithSameSender.forEach(function (activity) {\n        var activitiesWithSameStatus = activitiesGroupByStatus.find(function (activities) {\n          return activities.includes(activity);\n        });\n        var activitiesWithSameSenderAndStatus = (0, _intersectionOf.default)(visibleActivitiesPendingGrouping, activitiesWithSameSender, activitiesWithSameStatus);\n\n        if (activitiesWithSameSenderAndStatus.length) {\n          senderTree.push(activitiesWithSameSenderAndStatus);\n\n          _removeInline.default.apply(void 0, [visibleActivitiesPendingGrouping].concat(_toConsumableArray(activitiesWithSameSenderAndStatus)));\n        }\n      });\n    };\n\n    while (visibleActivitiesPendingGrouping.length) {\n      _loop();\n    } // Assertion: All activities in visibleActivities, must be assigned to the activityTree\n\n\n    if (!visibleActivities.every(function (activity) {\n      return activityTree.some(function (activitiesWithSameSender) {\n        return activitiesWithSameSender.some(function (activitiesWithSameSenderAndStatus) {\n          return activitiesWithSameSenderAndStatus.includes(activity);\n        });\n      });\n    })) {\n      console.warn('botframework-webchat internal: Not all visible activities are grouped in the activityTree.', {\n        visibleActivities: visibleActivities,\n        activityTree: activityTree\n      });\n    }\n\n    return activityTree;\n  }, [activitiesGroupBySender, activitiesGroupByStatus, visibleActivities]); // Flatten the tree back into an array with information related to rendering.\n\n  var renderingElements = (0, _react.useMemo)(function () {\n    var renderingElements = [];\n    var topSideBotNub = (0, _isZeroOrPositive.default)(bubbleNubOffset);\n    var topSideUserNub = (0, _isZeroOrPositive.default)(bubbleFromUserNubOffset);\n    activityTree.forEach(function (activitiesWithSameSender) {\n      var _activitiesWithSameSe = _slicedToArray(activitiesWithSameSender, 1),\n          _activitiesWithSameSe2 = _slicedToArray(_activitiesWithSameSe[0], 1),\n          firstActivity = _activitiesWithSameSe2[0];\n\n      var renderAvatar = createAvatarRenderer({\n        activity: firstActivity\n      });\n      activitiesWithSameSender.forEach(function (activitiesWithSameSenderAndStatus, indexWithinSenderGroup) {\n        var firstInSenderGroup = !indexWithinSenderGroup;\n        var lastInSenderGroup = indexWithinSenderGroup === activitiesWithSameSender.length - 1;\n        activitiesWithSameSenderAndStatus.forEach(function (activity, indexWithinSenderAndStatusGroup) {\n          // We only show the timestamp at the end of the sender group. But we always show the \"Send failed, retry\" prompt.\n          var renderActivityStatus = createActivityStatusRenderer({\n            activity: activity\n          });\n          var firstInSenderAndStatusGroup = !indexWithinSenderAndStatusGroup;\n          var lastInSenderAndStatusGroup = indexWithinSenderAndStatusGroup === activitiesWithSameSenderAndStatus.length - 1;\n\n          var _activitiesWithRender = activitiesWithRenderer.find(function (entry) {\n            return entry.activity === activity;\n          }),\n              renderActivity = _activitiesWithRender.renderActivity;\n\n          var key = (0, _getActivityUniqueId.default)(activity) || renderingElements.length;\n          var _activity$channelData = activity.channelData;\n          _activity$channelData = _activity$channelData === void 0 ? {} : _activity$channelData;\n          var _activity$channelData2 = _activity$channelData.messageBack;\n          _activity$channelData2 = _activity$channelData2 === void 0 ? {} : _activity$channelData2;\n          var messageBackDisplayText = _activity$channelData2.displayText,\n              role = activity.from.role,\n              text = activity.text;\n          var topSideNub = role === 'user' ? topSideUserNub : topSideBotNub;\n          var showCallout; // Depends on different \"showAvatarInGroup\" setting, we will show the avatar in different positions.\n\n          if (showAvatarInGroup === 'sender') {\n            if (topSideNub) {\n              showCallout = firstInSenderGroup && firstInSenderAndStatusGroup;\n            } else {\n              showCallout = lastInSenderGroup && lastInSenderAndStatusGroup;\n            }\n          } else if (showAvatarInGroup === 'status') {\n            if (topSideNub) {\n              showCallout = firstInSenderAndStatusGroup;\n            } else {\n              showCallout = lastInSenderAndStatusGroup;\n            }\n          } else {\n            showCallout = true;\n          }\n\n          renderingElements.push({\n            activity: activity,\n            // After the element is mounted, set it to activityElementsRef.\n            callbackRef: function callbackRef(activityElement) {\n              var entry = activityElementsRef.current.find(function (_ref3) {\n                var activityID = _ref3.activityID;\n                return activityID === activity.id;\n              });\n\n              if (entry) {\n                entry.element = activityElement;\n              }\n            },\n            // \"hideTimestamp\" is a render-time parameter for renderActivityStatus().\n            // If true, it will hide the timestamp, but it will continue to show the\n            // retry prompt. And show the screen reader version of the timestamp.\n            hideTimestamp: hideAllTimestamps || indexWithinSenderAndStatusGroup !== activitiesWithSameSenderAndStatus.length - 1,\n            key: key,\n            // When \"liveRegionKey\" changes, it will show up in the live region momentarily.\n            liveRegionKey: key + '|' + (messageBackDisplayText || text),\n            renderActivity: renderActivity,\n            renderActivityStatus: renderActivityStatus,\n            renderAvatar: renderAvatar,\n            // TODO: [P2] #2858 We should use core/definitions/speakingActivity for this predicate instead\n            shouldSpeak: activity.channelData && activity.channelData.speak,\n            showCallout: showCallout\n          });\n        });\n      });\n    });\n    var activityElements = activityElementsRef.current; // Update activityElementRef with new sets of activity, while retaining the existing referencing element if exists.\n\n    activityElementsRef.current = renderingElements.map(function (_ref4) {\n      var id = _ref4.activity.id,\n          key = _ref4.key;\n      var existingEntry = activityElements.find(function (entry) {\n        return entry.key === key;\n      });\n      return {\n        activityID: id,\n        element: existingEntry && existingEntry.element,\n        key: key\n      };\n    });\n    return renderingElements;\n  }, [activitiesWithRenderer, activityElementsRef, activityTree, bubbleFromUserNubOffset, bubbleNubOffset, createActivityStatusRenderer, createAvatarRenderer, hideAllTimestamps, showAvatarInGroup]);\n  var renderingActivities = (0, _react.useMemo)(function () {\n    return renderingElements.map(function (_ref5) {\n      var activity = _ref5.activity;\n      return activity;\n    });\n  }, [renderingElements]);\n  return /*#__PURE__*/_react.default.createElement(\"div\", {\n    className: (0, _classnames.default)('webchat__basic-transcript', rootClassName, (className || '') + ''),\n    dir: direction,\n    ref: rootElementRef\n  }, /*#__PURE__*/_react.default.createElement(\"section\", {\n    \"aria-atomic\": false,\n    \"aria-live\": \"polite\",\n    \"aria-relevant\": \"additions\",\n    \"aria-roledescription\": transcriptRoleDescription,\n    role: \"log\"\n  }, renderingElements.map(function (_ref6) {\n    var activity = _ref6.activity,\n        liveRegionKey = _ref6.liveRegionKey;\n    return /*#__PURE__*/_react.default.createElement(_Fade.default, {\n      fadeAfter: internalLiveRegionFadeAfter,\n      key: liveRegionKey\n    }, function () {\n      return /*#__PURE__*/_react.default.createElement(_ScreenReaderActivity.default, {\n        activity: activity\n      });\n    });\n  })), /*#__PURE__*/_react.default.createElement(InternalTranscriptScrollable, {\n    activities: renderingActivities\n  }, renderingElements.map(function (_ref7) {\n    var activity = _ref7.activity,\n        callbackRef = _ref7.callbackRef,\n        key = _ref7.key,\n        hideTimestamp = _ref7.hideTimestamp,\n        renderActivity = _ref7.renderActivity,\n        renderActivityStatus = _ref7.renderActivityStatus,\n        renderAvatar = _ref7.renderAvatar,\n        shouldSpeak = _ref7.shouldSpeak,\n        showCallout = _ref7.showCallout;\n    return /*#__PURE__*/_react.default.createElement(\"li\", {\n      \"aria-label\": activityAriaLabel // This will be read when pressing CAPSLOCK + arrow with screen reader\n      ,\n      className: (0, _classnames.default)(activityStyleSet + '', 'webchat__basic-transcript__activity'),\n      key: key,\n      ref: callbackRef\n    }, renderActivity({\n      hideTimestamp: hideTimestamp,\n      renderActivityStatus: renderActivityStatus,\n      renderAvatar: renderAvatar,\n      showCallout: showCallout\n    }), shouldSpeak && /*#__PURE__*/_react.default.createElement(_Speak.default, {\n      activity: activity\n    }));\n  })));\n};\n\nBasicTranscript.defaultProps = {\n  className: ''\n};\nBasicTranscript.propTypes = {\n  className: _propTypes.default.string\n};\n\nvar InternalScreenReaderTranscript = function InternalScreenReaderTranscript(_ref8) {\n  var renderingElements = _ref8.renderingElements;\n  var localize = useLocalizer();\n\n  var _useStyleOptions3 = useStyleOptions(),\n      _useStyleOptions4 = _slicedToArray(_useStyleOptions3, 1),\n      internalLiveRegionFadeAfter = _useStyleOptions4[0];\n\n  var transcriptRoleDescription = localize('TRANSCRIPT_ARIA_ROLE_ALT');\n  return /*#__PURE__*/_react.default.createElement(\"section\", {\n    \"aria-atomic\": false,\n    \"aria-live\": \"polite\",\n    \"aria-relevant\": \"additions\",\n    \"aria-roledescription\": transcriptRoleDescription,\n    role: \"log\"\n  }, renderingElements.map(function (_ref9) {\n    var activity = _ref9.activity,\n        liveRegionKey = _ref9.liveRegionKey;\n    return /*#__PURE__*/_react.default.createElement(_Fade.default, {\n      fadeAfter: internalLiveRegionFadeAfter,\n      key: liveRegionKey\n    }, function () {\n      return /*#__PURE__*/_react.default.createElement(_ScreenReaderActivity.default, {\n        activity: activity\n      });\n    });\n  }));\n};\n\nInternalScreenReaderTranscript.propTypes = {\n  renderingElements: _propTypes.default.arrayOf(_propTypes.default.shape({\n    activity: _propTypes.default.any,\n    liveRegionKey: _propTypes.default.string\n  })).isRequired\n}; // Separating high-frequency hooks to improve performance.\n\nvar InternalTranscriptScrollable = function InternalTranscriptScrollable(_ref10) {\n  var activities = _ref10.activities,\n      children = _ref10.children;\n\n  var _useStyleSet3 = (0, _useStyleSet5.default)(),\n      _useStyleSet4 = _slicedToArray(_useStyleSet3, 1),\n      activitiesStyleSet = _useStyleSet4[0].activities;\n\n  var _useStyleOptions5 = useStyleOptions(),\n      _useStyleOptions6 = _slicedToArray(_useStyleOptions5, 1),\n      hideScrollToEndButton = _useStyleOptions6[0].hideScrollToEndButton;\n\n  var _useAnimatingToEnd = (0, _reactScrollToBottom.useAnimatingToEnd)(),\n      _useAnimatingToEnd2 = _slicedToArray(_useAnimatingToEnd, 1),\n      animatingToEnd = _useAnimatingToEnd2[0];\n\n  var _useSticky = (0, _reactScrollToBottom.useSticky)(),\n      _useSticky2 = _slicedToArray(_useSticky, 1),\n      sticky = _useSticky2[0];\n\n  var focus = (0, _useFocus.default)();\n  var lastVisibleActivityId = (0, _getActivityUniqueId.default)(activities[activities.length - 1] || {}); // Activity ID of the last visible activity in the list.\n\n  var localize = useLocalizer();\n  var scrollToEndButtonRef = (0, _react.useRef)();\n  var lastReadActivityIdRef = (0, _react.useRef)(lastVisibleActivityId);\n  var transcriptRoleDescription = localize('TRANSCRIPT_ARIA_ROLE_ALT');\n  var allActivitiesRead = lastVisibleActivityId === lastReadActivityIdRef.current;\n  var handleScrollToEndButtonClick = (0, _react.useCallback)(function () {\n    var current = scrollToEndButtonRef.current; // After clicking on the \"New messages\" button, we should focus on the first unread element.\n    // This is for resolving the bug https://github.com/microsoft/BotFramework-WebChat/issues/3135.\n\n    if (current) {\n      var nextSiblings = nextSiblingAll(current);\n      var firstUnreadTabbable = nextSiblings.reduce(function (result, unreadActivityElement) {\n        return result || (0, _firstTabbableDescendant.default)(unreadActivityElement);\n      }, 0);\n      firstUnreadTabbable ? firstUnreadTabbable.focus() : focus('sendBoxWithoutKeyboard');\n    }\n  }, [focus, scrollToEndButtonRef]);\n\n  if (sticky) {\n    // If it is sticky, the user is at the bottom of the transcript, everything is read.\n    // So mark the activity ID as read.\n    lastReadActivityIdRef.current = lastVisibleActivityId;\n  } // Finds where we should render the \"New messages\" button, in index. Returns -1 to hide the button.\n\n\n  var renderSeparatorAfterIndex = (0, _react.useMemo)(function () {\n    // Don't show the button if:\n    // - All activities have been read\n    // - Currently animating towards bottom\n    //   - \"New messages\" button must not flash when: 1. Type \"help\", 2. Scroll to top, 3. Type \"help\" again, 4. Expect the \"New messages\" button not flashy\n    // - Hidden by style options\n    // - It is already at the bottom (sticky)\n    // Any changes to this logic, verify:\n    // - \"New messages\" button should persist while programmatically scrolling to mid-point of the transcript:\n    //   1. Type \"help\"\n    //   2. Type \"proactive\", then immediately scroll to top\n    //      Expect: the \"New messages\" button should appear\n    //   3. Run hook \"useScrollTo({ scrollTop: 500 })\"\n    //      Expect: when the scroll is animating to 500px, the \"New messages\" button should kept on the screen\n    // - \"New messages\" button must not flashy:\n    //   1. Type \"help\"\n    //   2. Scroll to top\n    //      Expect: no \"New messages\" button is shown\n    //   3. Type \"help\" again\n    //      Expect: \"New messages\" button must not flash-appear\n    if (allActivitiesRead || animatingToEnd || hideScrollToEndButton || sticky) {\n      return -1;\n    }\n\n    return activities.findIndex(function (activity) {\n      return (0, _getActivityUniqueId.default)(activity) === lastReadActivityIdRef.current;\n    });\n  }, [activities, allActivitiesRead, animatingToEnd, hideScrollToEndButton, lastReadActivityIdRef, sticky]);\n  return /*#__PURE__*/_react.default.createElement(_reactScrollToBottom.Panel, {\n    className: \"webchat__basic-transcript__scrollable\"\n  }, /*#__PURE__*/_react.default.createElement(\"div\", {\n    \"aria-hidden\": true,\n    className: \"webchat__basic-transcript__filler\"\n  }), /*#__PURE__*/_react.default.createElement(\"ul\", {\n    \"aria-roledescription\": transcriptRoleDescription,\n    className: (0, _classnames.default)(activitiesStyleSet + '', 'webchat__basic-transcript__transcript'),\n    role: \"list\"\n  }, _react.default.Children.map(children, function (child, index) {\n    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, child, index === renderSeparatorAfterIndex && /*#__PURE__*/_react.default.createElement(_ScrollToEndButton.default, {\n      \"aria-valuemax\": activities.length,\n      \"aria-valuenow\": index + 1,\n      onClick: handleScrollToEndButtonClick,\n      ref: scrollToEndButtonRef\n    }));\n  })), /*#__PURE__*/_react.default.createElement(_BasicTypingIndicator.default, null));\n};\n\nInternalTranscriptScrollable.propTypes = {\n  activities: _propTypes.default.array.isRequired,\n  children: _propTypes.default.arrayOf(_propTypes.default.element).isRequired\n};\nvar _default = BasicTranscript;\nexports.default = _default;","map":{"version":3,"sources":["../src/BasicTranscript.js"],"names":["useActivities","useCreateActivityRenderer","useCreateActivityStatusRenderer","useCreateAvatarRenderer","useDirection","useGroupActivities","useLocalizer","useStyleOptions","hooks","ROOT_STYLE","display","flexDirection","overflow","position","flex","overflowX","WebkitOverflowScrolling","listStyleType","children","element","elementIndex","bin","BasicTranscript","className","activityStyleSet","bubbleFromUserNubOffset","bubbleNubOffset","groupTimestamp","internalLiveRegionFadeAfter","showAvatarInGroup","activities","activityElementsRef","direction","rootElementRef","rootClassName","createActivityRenderer","createActivityStatusRenderer","createAvatarRenderer","groupActivities","hideAllTimestamps","localize","activityAriaLabel","transcriptRoleDescription","createActivityRendererWithLiteralArgs","activity","nextVisibleActivity","activitiesWithRenderer","index","renderActivity","createActivityRendererWithLiteralArgsMemoized","visibleActivities","activitiesGroupBySender","activitiesGroupByStatus","validateAllActivitiesTagged","console","activityTree","visibleActivitiesPendingGrouping","senderTree","activitiesWithSameSender","activitiesWithSameStatus","activitiesWithSameSenderAndStatus","removeInline","renderingElements","topSideBotNub","topSideUserNub","firstActivity","renderAvatar","firstInSenderGroup","lastInSenderGroup","indexWithinSenderGroup","renderActivityStatus","firstInSenderAndStatusGroup","lastInSenderAndStatusGroup","indexWithinSenderAndStatusGroup","entry","key","messageBackDisplayText","role","text","topSideNub","showCallout","callbackRef","activityID","hideTimestamp","liveRegionKey","shouldSpeak","activityElements","id","existingEntry","renderingActivities","PropTypes","string","InternalScreenReaderTranscript","isRequired","InternalTranscriptScrollable","activitiesStyleSet","hideScrollToEndButton","animatingToEnd","sticky","focus","lastVisibleActivityId","scrollToEndButtonRef","lastReadActivityIdRef","allActivitiesRead","handleScrollToEndButtonClick","current","nextSiblings","nextSiblingAll","firstUnreadTabbable","result","renderSeparatorAfterIndex"],"mappings":"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","sourcesContent":["/* eslint no-magic-numbers: [\"error\", { \"ignore\": [-1, 0, 1] }] */\n\nimport { hooks } from 'botframework-webchat-api';\nimport { Panel as ScrollToBottomPanel, useAnimatingToEnd, useSticky } from 'react-scroll-to-bottom';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { useCallback, useMemo, useRef } from 'react';\n\nimport BasicTypingIndicator from './BasicTypingIndicator';\nimport Fade from './Utils/Fade';\nimport firstTabbableDescendant from './Utils/firstTabbableDescendant';\nimport getActivityUniqueId from './Utils/getActivityUniqueId';\nimport intersectionOf from './Utils/intersectionOf';\nimport isZeroOrPositive from './Utils/isZeroOrPositive';\nimport removeInline from './Utils/removeInline';\nimport ScreenReaderActivity from './ScreenReaderActivity';\nimport ScrollToEndButton from './Activity/ScrollToEndButton';\nimport SpeakActivity from './Activity/Speak';\nimport useFocus from './hooks/useFocus';\nimport useMemoize from './hooks/internal/useMemoize';\nimport useStyleSet from './hooks/useStyleSet';\nimport useStyleToEmotionObject from './hooks/internal/useStyleToEmotionObject';\nimport useTranscriptActivityElementsRef from './hooks/internal/useTranscriptActivityElementsRef';\nimport useTranscriptRootElementRef from './hooks/internal/useTranscriptRootElementRef';\n\nconst {\n  useActivities,\n  useCreateActivityRenderer,\n  useCreateActivityStatusRenderer,\n  useCreateAvatarRenderer,\n  useDirection,\n  useGroupActivities,\n  useLocalizer,\n  useStyleOptions\n} = hooks;\n\nconst ROOT_STYLE = {\n  '&.webchat__basic-transcript': {\n    display: 'flex',\n    flexDirection: 'column',\n    overflow: 'hidden',\n    // Make sure to set \"position: relative\" here to form another stacking context for the scroll-to-end button.\n    // Stacking context help isolating elements that use \"z-index\" from global pollution.\n    // https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context\n    position: 'relative',\n\n    '& .webchat__basic-transcript__filler': {\n      flex: 1\n    },\n\n    '& .webchat__basic-transcript__scrollable': {\n      display: 'flex',\n      flexDirection: 'column',\n      overflowX: 'hidden',\n      WebkitOverflowScrolling: 'touch'\n    },\n\n    '& .webchat__basic-transcript__transcript': {\n      listStyleType: 'none'\n    }\n  }\n};\n\nfunction nextSiblingAll(element) {\n  const {\n    parentNode: { children }\n  } = element;\n\n  const elementIndex = [].indexOf.call(children, element);\n\n  return [].slice.call(children, elementIndex + 1);\n}\n\nfunction validateAllActivitiesTagged(activities, bins) {\n  return activities.every(activity => bins.some(bin => bin.includes(activity)));\n}\n\nconst BasicTranscript = ({ className }) => {\n  const [{ activity: activityStyleSet }] = useStyleSet();\n  const [\n    { bubbleFromUserNubOffset, bubbleNubOffset, groupTimestamp, internalLiveRegionFadeAfter, showAvatarInGroup }\n  ] = useStyleOptions();\n  const [activities] = useActivities();\n  const [activityElementsRef] = useTranscriptActivityElementsRef();\n  const [direction] = useDirection();\n  const [rootElementRef] = useTranscriptRootElementRef();\n  const rootClassName = useStyleToEmotionObject()(ROOT_STYLE) + '';\n\n  const createActivityRenderer = useCreateActivityRenderer();\n  const createActivityStatusRenderer = useCreateActivityStatusRenderer();\n  const createAvatarRenderer = useCreateAvatarRenderer();\n  const groupActivities = useGroupActivities();\n  const hideAllTimestamps = groupTimestamp === false;\n  const localize = useLocalizer();\n\n  const activityAriaLabel = localize('ACTIVITY_ARIA_LABEL_ALT');\n  const transcriptRoleDescription = localize('TRANSCRIPT_ARIA_ROLE_ALT');\n\n  // Gets renderer for every activity.\n  // Activities that are not visible will return a falsy renderer.\n\n  // Converted from createActivityRenderer({ activity, nextVisibleActivity }) to createActivityRenderer(activity, nextVisibleActivity).\n  // This is for the memoization function to cache the arguments. Memoizer can only cache literal arguments.\n  const createActivityRendererWithLiteralArgs = useCallback(\n    (activity, nextVisibleActivity) => createActivityRenderer({ activity, nextVisibleActivity }),\n    [createActivityRenderer]\n  );\n\n  // Create a memoized context of the createActivityRenderer function.\n  const activitiesWithRenderer = useMemoize(\n    createActivityRendererWithLiteralArgs,\n    createActivityRendererWithLiteralArgsMemoized => {\n      // All calls to createActivityRendererWithLiteralArgsMemoized() in this function will be memoized (LRU = 1).\n      // In the next render cycle, calls to createActivityRendererWithLiteralArgsMemoized() might return the memoized result instead.\n      // This is an improvement to React useMemo(), because it only allows 1 memoization.\n      // useMemoize() allows any number of memoization.\n\n      const activitiesWithRenderer = [];\n      let nextVisibleActivity;\n\n      for (let index = activities.length - 1; index >= 0; index--) {\n        const activity = activities[index];\n        const renderActivity = createActivityRendererWithLiteralArgsMemoized(activity, nextVisibleActivity);\n\n        if (renderActivity) {\n          activitiesWithRenderer.splice(0, 0, {\n            activity,\n            renderActivity\n          });\n\n          nextVisibleActivity = activity;\n        }\n      }\n\n      return activitiesWithRenderer;\n    },\n    [activities]\n  );\n\n  const visibleActivities = useMemo(() => activitiesWithRenderer.map(({ activity }) => activity), [\n    activitiesWithRenderer\n  ]);\n\n  // Tag activities based on types.\n  // The default implementation tag into 2 types: sender and status.\n\n  const { activitiesGroupBySender, activitiesGroupByStatus } = useMemo(() => {\n    const { sender: activitiesGroupBySender, status: activitiesGroupByStatus } = groupActivities({\n      activities: visibleActivities\n    });\n\n    if (!validateAllActivitiesTagged(visibleActivities, activitiesGroupBySender)) {\n      console.warn(\n        'botframework-webchat: Not every activities are grouped in the \"sender\" property. Please fix \"groupActivitiesMiddleware\" and group every activities.'\n      );\n    }\n\n    if (!validateAllActivitiesTagged(visibleActivities, activitiesGroupByStatus)) {\n      console.warn(\n        'botframework-webchat: Not every activities are grouped in the \"status\" property. Please fix \"groupActivitiesMiddleware\" and group every activities.'\n      );\n    }\n\n    return {\n      activitiesGroupBySender,\n      activitiesGroupByStatus\n    };\n  }, [groupActivities, visibleActivities]);\n\n  // Create a tree of activities with 2 dimensions: sender, followed by status.\n\n  const activityTree = useMemo(() => {\n    const visibleActivitiesPendingGrouping = [...visibleActivities];\n    const activityTree = [];\n\n    while (visibleActivitiesPendingGrouping.length) {\n      const [activity] = visibleActivitiesPendingGrouping;\n      const senderTree = [];\n      const activitiesWithSameSender = activitiesGroupBySender.find(activities => activities.includes(activity));\n\n      activityTree.push(senderTree);\n\n      activitiesWithSameSender.forEach(activity => {\n        const activitiesWithSameStatus = activitiesGroupByStatus.find(activities => activities.includes(activity));\n\n        const activitiesWithSameSenderAndStatus = intersectionOf(\n          visibleActivitiesPendingGrouping,\n          activitiesWithSameSender,\n          activitiesWithSameStatus\n        );\n\n        if (activitiesWithSameSenderAndStatus.length) {\n          senderTree.push(activitiesWithSameSenderAndStatus);\n          removeInline(visibleActivitiesPendingGrouping, ...activitiesWithSameSenderAndStatus);\n        }\n      });\n    }\n\n    // Assertion: All activities in visibleActivities, must be assigned to the activityTree\n    if (\n      !visibleActivities.every(activity =>\n        activityTree.some(activitiesWithSameSender =>\n          activitiesWithSameSender.some(activitiesWithSameSenderAndStatus =>\n            activitiesWithSameSenderAndStatus.includes(activity)\n          )\n        )\n      )\n    ) {\n      console.warn('botframework-webchat internal: Not all visible activities are grouped in the activityTree.', {\n        visibleActivities,\n        activityTree\n      });\n    }\n\n    return activityTree;\n  }, [activitiesGroupBySender, activitiesGroupByStatus, visibleActivities]);\n\n  // Flatten the tree back into an array with information related to rendering.\n\n  const renderingElements = useMemo(() => {\n    const renderingElements = [];\n    const topSideBotNub = isZeroOrPositive(bubbleNubOffset);\n    const topSideUserNub = isZeroOrPositive(bubbleFromUserNubOffset);\n\n    activityTree.forEach(activitiesWithSameSender => {\n      const [[firstActivity]] = activitiesWithSameSender;\n      const renderAvatar = createAvatarRenderer({ activity: firstActivity });\n\n      activitiesWithSameSender.forEach((activitiesWithSameSenderAndStatus, indexWithinSenderGroup) => {\n        const firstInSenderGroup = !indexWithinSenderGroup;\n        const lastInSenderGroup = indexWithinSenderGroup === activitiesWithSameSender.length - 1;\n\n        activitiesWithSameSenderAndStatus.forEach((activity, indexWithinSenderAndStatusGroup) => {\n          // We only show the timestamp at the end of the sender group. But we always show the \"Send failed, retry\" prompt.\n          const renderActivityStatus = createActivityStatusRenderer({\n            activity\n          });\n\n          const firstInSenderAndStatusGroup = !indexWithinSenderAndStatusGroup;\n          const lastInSenderAndStatusGroup =\n            indexWithinSenderAndStatusGroup === activitiesWithSameSenderAndStatus.length - 1;\n\n          const { renderActivity } = activitiesWithRenderer.find(entry => entry.activity === activity);\n          const key = getActivityUniqueId(activity) || renderingElements.length;\n          const {\n            channelData: { messageBack: { displayText: messageBackDisplayText } = {} } = {},\n            from: { role },\n            text\n          } = activity;\n\n          const topSideNub = role === 'user' ? topSideUserNub : topSideBotNub;\n\n          let showCallout;\n\n          // Depends on different \"showAvatarInGroup\" setting, we will show the avatar in different positions.\n          if (showAvatarInGroup === 'sender') {\n            if (topSideNub) {\n              showCallout = firstInSenderGroup && firstInSenderAndStatusGroup;\n            } else {\n              showCallout = lastInSenderGroup && lastInSenderAndStatusGroup;\n            }\n          } else if (showAvatarInGroup === 'status') {\n            if (topSideNub) {\n              showCallout = firstInSenderAndStatusGroup;\n            } else {\n              showCallout = lastInSenderAndStatusGroup;\n            }\n          } else {\n            showCallout = true;\n          }\n\n          renderingElements.push({\n            activity,\n\n            // After the element is mounted, set it to activityElementsRef.\n            callbackRef: activityElement => {\n              const entry = activityElementsRef.current.find(({ activityID }) => activityID === activity.id);\n\n              if (entry) {\n                entry.element = activityElement;\n              }\n            },\n\n            // \"hideTimestamp\" is a render-time parameter for renderActivityStatus().\n            // If true, it will hide the timestamp, but it will continue to show the\n            // retry prompt. And show the screen reader version of the timestamp.\n            hideTimestamp:\n              hideAllTimestamps || indexWithinSenderAndStatusGroup !== activitiesWithSameSenderAndStatus.length - 1,\n            key,\n\n            // When \"liveRegionKey\" changes, it will show up in the live region momentarily.\n            liveRegionKey: key + '|' + (messageBackDisplayText || text),\n            renderActivity,\n            renderActivityStatus,\n            renderAvatar,\n\n            // TODO: [P2] #2858 We should use core/definitions/speakingActivity for this predicate instead\n            shouldSpeak: activity.channelData && activity.channelData.speak,\n            showCallout\n          });\n        });\n      });\n    });\n\n    const { current: activityElements } = activityElementsRef;\n\n    // Update activityElementRef with new sets of activity, while retaining the existing referencing element if exists.\n\n    activityElementsRef.current = renderingElements.map(({ activity: { id }, key }) => {\n      const existingEntry = activityElements.find(entry => entry.key === key);\n\n      return {\n        activityID: id,\n        element: existingEntry && existingEntry.element,\n        key\n      };\n    });\n\n    return renderingElements;\n  }, [\n    activitiesWithRenderer,\n    activityElementsRef,\n    activityTree,\n    bubbleFromUserNubOffset,\n    bubbleNubOffset,\n    createActivityStatusRenderer,\n    createAvatarRenderer,\n    hideAllTimestamps,\n    showAvatarInGroup\n  ]);\n\n  const renderingActivities = useMemo(() => renderingElements.map(({ activity }) => activity), [renderingElements]);\n\n  return (\n    <div\n      className={classNames('webchat__basic-transcript', rootClassName, (className || '') + '')}\n      dir={direction}\n      ref={rootElementRef}\n    >\n      {/* This <section> is for live region only. Content is made invisible through CSS. */}\n      <section\n        aria-atomic={false}\n        aria-live=\"polite\"\n        aria-relevant=\"additions\"\n        aria-roledescription={transcriptRoleDescription}\n        role=\"log\"\n      >\n        {renderingElements.map(({ activity, liveRegionKey }) => (\n          <Fade fadeAfter={internalLiveRegionFadeAfter} key={liveRegionKey}>\n            {() => <ScreenReaderActivity activity={activity} />}\n          </Fade>\n        ))}\n      </section>\n      <InternalTranscriptScrollable activities={renderingActivities}>\n        {renderingElements.map(\n          ({\n            activity,\n            callbackRef,\n            key,\n            hideTimestamp,\n            renderActivity,\n            renderActivityStatus,\n            renderAvatar,\n            shouldSpeak,\n            showCallout\n          }) => (\n            <li\n              aria-label={activityAriaLabel} // This will be read when pressing CAPSLOCK + arrow with screen reader\n              className={classNames(activityStyleSet + '', 'webchat__basic-transcript__activity')}\n              key={key}\n              ref={callbackRef}\n            >\n              {renderActivity({\n                hideTimestamp,\n                renderActivityStatus,\n                renderAvatar,\n                showCallout\n              })}\n              {shouldSpeak && <SpeakActivity activity={activity} />}\n            </li>\n          )\n        )}\n      </InternalTranscriptScrollable>\n    </div>\n  );\n};\n\nBasicTranscript.defaultProps = {\n  className: ''\n};\n\nBasicTranscript.propTypes = {\n  className: PropTypes.string\n};\n\nconst InternalScreenReaderTranscript = ({ renderingElements }) => {\n  const localize = useLocalizer();\n  const [internalLiveRegionFadeAfter] = useStyleOptions();\n\n  const transcriptRoleDescription = localize('TRANSCRIPT_ARIA_ROLE_ALT');\n\n  return (\n    <section\n      aria-atomic={false}\n      aria-live=\"polite\"\n      aria-relevant=\"additions\"\n      aria-roledescription={transcriptRoleDescription}\n      role=\"log\"\n    >\n      {renderingElements.map(({ activity, liveRegionKey }) => (\n        <Fade fadeAfter={internalLiveRegionFadeAfter} key={liveRegionKey}>\n          {() => <ScreenReaderActivity activity={activity} />}\n        </Fade>\n      ))}\n    </section>\n  );\n};\n\nInternalScreenReaderTranscript.propTypes = {\n  renderingElements: PropTypes.arrayOf(\n    PropTypes.shape({\n      activity: PropTypes.any,\n      liveRegionKey: PropTypes.string\n    })\n  ).isRequired\n};\n\n// Separating high-frequency hooks to improve performance.\nconst InternalTranscriptScrollable = ({ activities, children }) => {\n  const [{ activities: activitiesStyleSet }] = useStyleSet();\n  const [{ hideScrollToEndButton }] = useStyleOptions();\n  const [animatingToEnd] = useAnimatingToEnd();\n  const [sticky] = useSticky();\n  const focus = useFocus();\n  const lastVisibleActivityId = getActivityUniqueId(activities[activities.length - 1] || {}); // Activity ID of the last visible activity in the list.\n  const localize = useLocalizer();\n  const scrollToEndButtonRef = useRef();\n\n  const lastReadActivityIdRef = useRef(lastVisibleActivityId);\n  const transcriptRoleDescription = localize('TRANSCRIPT_ARIA_ROLE_ALT');\n\n  const allActivitiesRead = lastVisibleActivityId === lastReadActivityIdRef.current;\n\n  const handleScrollToEndButtonClick = useCallback(() => {\n    const { current } = scrollToEndButtonRef;\n\n    // After clicking on the \"New messages\" button, we should focus on the first unread element.\n    // This is for resolving the bug https://github.com/microsoft/BotFramework-WebChat/issues/3135.\n    if (current) {\n      const nextSiblings = nextSiblingAll(current);\n\n      const firstUnreadTabbable = nextSiblings.reduce(\n        (result, unreadActivityElement) => result || firstTabbableDescendant(unreadActivityElement),\n        0\n      );\n\n      firstUnreadTabbable ? firstUnreadTabbable.focus() : focus('sendBoxWithoutKeyboard');\n    }\n  }, [focus, scrollToEndButtonRef]);\n\n  if (sticky) {\n    // If it is sticky, the user is at the bottom of the transcript, everything is read.\n    // So mark the activity ID as read.\n    lastReadActivityIdRef.current = lastVisibleActivityId;\n  }\n\n  // Finds where we should render the \"New messages\" button, in index. Returns -1 to hide the button.\n  const renderSeparatorAfterIndex = useMemo(() => {\n    // Don't show the button if:\n    // - All activities have been read\n    // - Currently animating towards bottom\n    //   - \"New messages\" button must not flash when: 1. Type \"help\", 2. Scroll to top, 3. Type \"help\" again, 4. Expect the \"New messages\" button not flashy\n    // - Hidden by style options\n    // - It is already at the bottom (sticky)\n\n    // Any changes to this logic, verify:\n    // - \"New messages\" button should persist while programmatically scrolling to mid-point of the transcript:\n    //   1. Type \"help\"\n    //   2. Type \"proactive\", then immediately scroll to top\n    //      Expect: the \"New messages\" button should appear\n    //   3. Run hook \"useScrollTo({ scrollTop: 500 })\"\n    //      Expect: when the scroll is animating to 500px, the \"New messages\" button should kept on the screen\n    // - \"New messages\" button must not flashy:\n    //   1. Type \"help\"\n    //   2. Scroll to top\n    //      Expect: no \"New messages\" button is shown\n    //   3. Type \"help\" again\n    //      Expect: \"New messages\" button must not flash-appear\n\n    if (allActivitiesRead || animatingToEnd || hideScrollToEndButton || sticky) {\n      return -1;\n    }\n\n    return activities.findIndex(activity => getActivityUniqueId(activity) === lastReadActivityIdRef.current);\n  }, [activities, allActivitiesRead, animatingToEnd, hideScrollToEndButton, lastReadActivityIdRef, sticky]);\n\n  return (\n    <ScrollToBottomPanel className=\"webchat__basic-transcript__scrollable\">\n      <div aria-hidden={true} className=\"webchat__basic-transcript__filler\" />\n      <ul\n        aria-roledescription={transcriptRoleDescription}\n        className={classNames(activitiesStyleSet + '', 'webchat__basic-transcript__transcript')}\n        role=\"list\"\n      >\n        {React.Children.map(children, (child, index) => (\n          <React.Fragment>\n            {child}\n            {/* We insert the \"New messages\" button here for tab ordering. Users should be able to TAB into the button. */}\n            {index === renderSeparatorAfterIndex && (\n              <ScrollToEndButton\n                aria-valuemax={activities.length}\n                aria-valuenow={index + 1}\n                onClick={handleScrollToEndButtonClick}\n                ref={scrollToEndButtonRef}\n              />\n            )}\n          </React.Fragment>\n        ))}\n      </ul>\n      <BasicTypingIndicator />\n    </ScrollToBottomPanel>\n  );\n};\n\nInternalTranscriptScrollable.propTypes = {\n  activities: PropTypes.array.isRequired,\n  children: PropTypes.arrayOf(PropTypes.element).isRequired\n};\n\nexport default BasicTranscript;\n"],"sourceRoot":"component:///"},"metadata":{},"sourceType":"script"}