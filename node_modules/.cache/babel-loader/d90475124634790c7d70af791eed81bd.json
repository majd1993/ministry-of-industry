{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _HTMLVideoContent = _interopRequireDefault(require(\"./HTMLVideoContent\"));\n\nvar _VimeoContent = _interopRequireDefault(require(\"./VimeoContent\"));\n\nvar _YouTubeContent = _interopRequireDefault(require(\"./YouTubeContent\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar YOUTUBE_DOMAIN = 'youtube.com';\nvar YOUTUBE_WWW_DOMAIN = 'www.youtube.com';\nvar YOUTUBE_SHORT_DOMAIN = 'youtu.be';\nvar YOUTUBE_WWW_SHORT_DOMAIN = 'www.youtu.be';\nvar VIMEO_DOMAIN = 'vimeo.com';\nvar VIMEO_WWW_DOMAIN = 'www.vimeo.com'; // This is a workaround\n// - Today, there is no good URL polyfill for older browser\n// - Instead of writing a URL parser, for older browser, we will use this <a href> trick to parse the URL\n\nfunction parseURL(url) {\n  var urlLike;\n\n  if (typeof URL === 'function') {\n    urlLike = new URL(url);\n  } else {\n    urlLike = document.createElement('a');\n    urlLike.setAttribute('href', url);\n  }\n\n  var _urlLike = urlLike,\n      hostname = _urlLike.hostname,\n      pathname = _urlLike.pathname,\n      search = _urlLike.search;\n  return {\n    hostname: hostname,\n    pathname: pathname,\n    search: search\n  };\n}\n\nvar VideoContent = function VideoContent(_ref) {\n  var alt = _ref.alt,\n      autoPlay = _ref.autoPlay,\n      loop = _ref.loop,\n      poster = _ref.poster,\n      src = _ref.src;\n\n  var _parseURL = parseURL(src),\n      hostname = _parseURL.hostname,\n      pathname = _parseURL.pathname,\n      search = _parseURL.search;\n\n  var lastSegment = pathname.split('/').pop();\n  var searchParams = new URLSearchParams(search);\n\n  switch (hostname) {\n    case VIMEO_DOMAIN:\n    case VIMEO_WWW_DOMAIN:\n      return /*#__PURE__*/_react.default.createElement(_VimeoContent.default, {\n        alt: alt,\n        autoPlay: autoPlay,\n        embedID: lastSegment,\n        loop: loop\n      });\n\n    case YOUTUBE_DOMAIN:\n    case YOUTUBE_WWW_DOMAIN:\n      return /*#__PURE__*/_react.default.createElement(_YouTubeContent.default, {\n        alt: alt,\n        autoPlay: autoPlay,\n        embedID: searchParams.get('v'),\n        loop: loop\n      });\n\n    case YOUTUBE_SHORT_DOMAIN:\n    case YOUTUBE_WWW_SHORT_DOMAIN:\n      return /*#__PURE__*/_react.default.createElement(_YouTubeContent.default, {\n        alt: alt,\n        autoPlay: autoPlay,\n        embedID: lastSegment,\n        loop: loop\n      });\n\n    default:\n      return /*#__PURE__*/_react.default.createElement(_HTMLVideoContent.default, {\n        alt: alt,\n        autoPlay: autoPlay,\n        loop: loop,\n        poster: poster,\n        src: src\n      });\n  }\n};\n\nVideoContent.defaultProps = {\n  alt: '',\n  autoPlay: false,\n  loop: false,\n  poster: ''\n};\nVideoContent.propTypes = {\n  alt: _propTypes.default.string,\n  autoPlay: _propTypes.default.bool,\n  loop: _propTypes.default.bool,\n  poster: _propTypes.default.string,\n  src: _propTypes.default.string.isRequired\n};\nvar _default = VideoContent;\nexports.default = _default;","map":{"version":3,"sources":["../../src/Attachment/VideoContent.js"],"names":["YOUTUBE_DOMAIN","YOUTUBE_WWW_DOMAIN","YOUTUBE_SHORT_DOMAIN","YOUTUBE_WWW_SHORT_DOMAIN","VIMEO_DOMAIN","VIMEO_WWW_DOMAIN","urlLike","document","hostname","pathname","search","VideoContent","alt","autoPlay","loop","poster","src","parseURL","lastSegment","searchParams","PropTypes","isRequired"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport HTMLVideoContent from './HTMLVideoContent';\nimport VimeoContent from './VimeoContent';\nimport YouTubeContent from './YouTubeContent';\n\nconst YOUTUBE_DOMAIN = 'youtube.com';\nconst YOUTUBE_WWW_DOMAIN = 'www.youtube.com';\nconst YOUTUBE_SHORT_DOMAIN = 'youtu.be';\nconst YOUTUBE_WWW_SHORT_DOMAIN = 'www.youtu.be';\nconst VIMEO_DOMAIN = 'vimeo.com';\nconst VIMEO_WWW_DOMAIN = 'www.vimeo.com';\n\n// This is a workaround\n// - Today, there is no good URL polyfill for older browser\n// - Instead of writing a URL parser, for older browser, we will use this <a href> trick to parse the URL\nfunction parseURL(url) {\n  let urlLike;\n\n  if (typeof URL === 'function') {\n    urlLike = new URL(url);\n  } else {\n    urlLike = document.createElement('a');\n    urlLike.setAttribute('href', url);\n  }\n\n  const { hostname, pathname, search } = urlLike;\n\n  return { hostname, pathname, search };\n}\n\nconst VideoContent = ({ alt, autoPlay, loop, poster, src }) => {\n  const { hostname, pathname, search } = parseURL(src);\n  const lastSegment = pathname.split('/').pop();\n  const searchParams = new URLSearchParams(search);\n\n  switch (hostname) {\n    case VIMEO_DOMAIN:\n    case VIMEO_WWW_DOMAIN:\n      return <VimeoContent alt={alt} autoPlay={autoPlay} embedID={lastSegment} loop={loop} />;\n\n    case YOUTUBE_DOMAIN:\n    case YOUTUBE_WWW_DOMAIN:\n      return <YouTubeContent alt={alt} autoPlay={autoPlay} embedID={searchParams.get('v')} loop={loop} />;\n\n    case YOUTUBE_SHORT_DOMAIN:\n    case YOUTUBE_WWW_SHORT_DOMAIN:\n      return <YouTubeContent alt={alt} autoPlay={autoPlay} embedID={lastSegment} loop={loop} />;\n\n    default:\n      return <HTMLVideoContent alt={alt} autoPlay={autoPlay} loop={loop} poster={poster} src={src} />;\n  }\n};\n\nVideoContent.defaultProps = {\n  alt: '',\n  autoPlay: false,\n  loop: false,\n  poster: ''\n};\n\nVideoContent.propTypes = {\n  alt: PropTypes.string,\n  autoPlay: PropTypes.bool,\n  loop: PropTypes.bool,\n  poster: PropTypes.string,\n  src: PropTypes.string.isRequired\n};\n\nexport default VideoContent;\n"],"sourceRoot":"component:///"},"metadata":{},"sourceType":"script"}