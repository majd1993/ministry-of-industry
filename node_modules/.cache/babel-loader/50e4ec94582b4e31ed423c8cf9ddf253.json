{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Exports_1 = require(\"../common/Exports\");\n\nvar RecognitionEvents_1 = require(\"./RecognitionEvents\");\n\nvar ServiceTelemetryListener_Internal_1 = require(\"./ServiceTelemetryListener.Internal\");\n\nvar RequestSession =\n/** @class */\nfunction () {\n  function RequestSession(audioSourceId) {\n    var _this = this;\n\n    this.privIsDisposed = false;\n    this.privDetachables = new Array();\n    this.privIsAudioNodeDetached = false;\n    this.privIsRecognizing = false;\n    this.privIsSpeechEnded = false;\n    this.privTurnStartAudioOffset = 0;\n    this.privLastRecoOffset = 0;\n    this.privHypothesisReceived = false;\n    this.privBytesSent = 0;\n    this.privRecogNumber = 0;\n\n    this.onAudioSourceAttachCompleted = function (audioNode, isError, error) {\n      _this.privAudioNode = audioNode;\n      _this.privIsAudioNodeDetached = false;\n\n      if (isError) {\n        _this.onComplete();\n      } else {\n        _this.onEvent(new RecognitionEvents_1.ListeningStartedEvent(_this.privRequestId, _this.privSessionId, _this.privAudioSourceId, _this.privAudioNodeId));\n      }\n    };\n\n    this.onPreConnectionStart = function (authFetchEventId, connectionId) {\n      _this.privAuthFetchEventId = authFetchEventId;\n      _this.privSessionId = connectionId;\n\n      _this.onEvent(new RecognitionEvents_1.ConnectingToServiceEvent(_this.privRequestId, _this.privAuthFetchEventId, _this.privSessionId));\n    };\n\n    this.onAuthCompleted = function (isError, error) {\n      if (isError) {\n        _this.onComplete();\n      }\n    };\n\n    this.onConnectionEstablishCompleted = function (statusCode, reason) {\n      if (statusCode === 200) {\n        _this.onEvent(new RecognitionEvents_1.RecognitionStartedEvent(_this.requestId, _this.privAudioSourceId, _this.privAudioNodeId, _this.privAuthFetchEventId, _this.privSessionId));\n\n        if (!!_this.privAudioNode) {\n          _this.privAudioNode.replay();\n        }\n\n        _this.privTurnStartAudioOffset = _this.privLastRecoOffset;\n        _this.privBytesSent = 0;\n        return;\n      } else if (statusCode === 403) {\n        _this.onComplete();\n      }\n    };\n\n    this.onServiceTurnEndResponse = function (continuousRecognition) {\n      _this.privTurnDeferral.resolve(true);\n\n      if (!continuousRecognition || _this.isSpeechEnded) {\n        _this.onComplete();\n      } else {\n        // Start a new request set.\n        _this.privTurnStartAudioOffset = _this.privLastRecoOffset;\n        _this.privRequestId = Exports_1.createNoDashGuid();\n\n        _this.privAudioNode.replay();\n      }\n    };\n\n    this.onServiceTurnStartResponse = function () {\n      if (_this.privTurnDeferral.state() === Exports_1.PromiseState.None) {\n        // What? How are we starting a turn with another not done?\n        _this.privTurnDeferral.reject(\"Another turn started before current completed.\");\n      }\n\n      _this.privTurnDeferral = new Exports_1.Deferred();\n    };\n\n    this.dispose = function (error) {\n      if (!_this.privIsDisposed) {\n        // we should have completed by now. If we did not its an unknown error.\n        _this.privIsDisposed = true;\n\n        for (var _i = 0, _a = _this.privDetachables; _i < _a.length; _i++) {\n          var detachable = _a[_i];\n          detachable.detach();\n        }\n\n        _this.privServiceTelemetryListener.dispose();\n      }\n    };\n\n    this.getTelemetry = function () {\n      if (_this.privServiceTelemetryListener.hasTelemetry) {\n        return _this.privServiceTelemetryListener.getTelemetry();\n      } else {\n        return null;\n      }\n    };\n\n    this.onEvent = function (event) {\n      if (!!_this.privServiceTelemetryListener) {\n        _this.privServiceTelemetryListener.onEvent(event);\n      }\n\n      Exports_1.Events.instance.onEvent(event);\n    };\n\n    this.onComplete = function () {\n      if (!!_this.privIsRecognizing) {\n        _this.privIsRecognizing = false;\n\n        _this.detachAudioNode();\n      }\n    };\n\n    this.detachAudioNode = function () {\n      if (!_this.privIsAudioNodeDetached) {\n        _this.privIsAudioNodeDetached = true;\n\n        if (_this.privAudioNode) {\n          _this.privAudioNode.detach();\n        }\n      }\n    };\n\n    this.privAudioSourceId = audioSourceId;\n    this.privRequestId = Exports_1.createNoDashGuid();\n    this.privAudioNodeId = Exports_1.createNoDashGuid();\n    this.privTurnDeferral = new Exports_1.Deferred(); // We're not in a turn, so resolve.\n\n    this.privTurnDeferral.resolve(true);\n  }\n\n  Object.defineProperty(RequestSession.prototype, \"sessionId\", {\n    get: function get() {\n      return this.privSessionId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RequestSession.prototype, \"requestId\", {\n    get: function get() {\n      return this.privRequestId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RequestSession.prototype, \"audioNodeId\", {\n    get: function get() {\n      return this.privAudioNodeId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RequestSession.prototype, \"turnCompletionPromise\", {\n    get: function get() {\n      return this.privTurnDeferral.promise();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RequestSession.prototype, \"isSpeechEnded\", {\n    get: function get() {\n      return this.privIsSpeechEnded;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RequestSession.prototype, \"isRecognizing\", {\n    get: function get() {\n      return this.privIsRecognizing;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RequestSession.prototype, \"currentTurnAudioOffset\", {\n    get: function get() {\n      return this.privTurnStartAudioOffset;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RequestSession.prototype, \"recogNumber\", {\n    get: function get() {\n      return this.privRecogNumber;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RequestSession.prototype, \"bytesSent\", {\n    // The number of bytes sent for the current connection.\n    // Counter is reset to 0 each time a connection is established.\n    get: function get() {\n      return this.privBytesSent;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  RequestSession.prototype.listenForServiceTelemetry = function (eventSource) {\n    if (!!this.privServiceTelemetryListener) {\n      this.privDetachables.push(eventSource.attachListener(this.privServiceTelemetryListener));\n    }\n  };\n\n  RequestSession.prototype.startNewRecognition = function () {\n    this.privIsSpeechEnded = false;\n    this.privIsRecognizing = true;\n    this.privTurnStartAudioOffset = 0;\n    this.privLastRecoOffset = 0;\n    this.privRequestId = Exports_1.createNoDashGuid();\n    this.privRecogNumber++;\n    this.privServiceTelemetryListener = new ServiceTelemetryListener_Internal_1.ServiceTelemetryListener(this.privRequestId, this.privAudioSourceId, this.privAudioNodeId);\n    this.onEvent(new RecognitionEvents_1.RecognitionTriggeredEvent(this.requestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));\n  };\n\n  RequestSession.prototype.onHypothesis = function (offset) {\n    if (!this.privHypothesisReceived) {\n      this.privHypothesisReceived = true;\n      this.privServiceTelemetryListener.hypothesisReceived(this.privAudioNode.findTimeAtOffset(offset));\n    }\n  };\n\n  RequestSession.prototype.onPhraseRecognized = function (offset) {\n    this.privServiceTelemetryListener.phraseReceived(this.privAudioNode.findTimeAtOffset(offset));\n    this.onServiceRecognized(offset);\n  };\n\n  RequestSession.prototype.onServiceRecognized = function (offset) {\n    this.privLastRecoOffset = offset;\n    this.privHypothesisReceived = false;\n    this.privAudioNode.shrinkBuffers(offset);\n  };\n\n  RequestSession.prototype.onAudioSent = function (bytesSent) {\n    this.privBytesSent += bytesSent;\n  };\n\n  RequestSession.prototype.onStopRecognizing = function () {\n    this.onComplete();\n  }; // Should be called with the audioNode for this session has indicated that it is out of speech.\n\n\n  RequestSession.prototype.onSpeechEnded = function () {\n    this.privIsSpeechEnded = true;\n  };\n\n  return RequestSession;\n}();\n\nexports.RequestSession = RequestSession;","map":{"version":3,"sources":["src/common.speech/RequestSession.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    IDetachable,\r\n    IEventSource,\r\n    PlatformEvent,\r\n    Promise,\r\n    PromiseState\r\n} from \"../common/Exports\";\r\nimport {\r\n    ConnectingToServiceEvent,\r\n    ListeningStartedEvent,\r\n    RecognitionStartedEvent,\r\n    RecognitionTriggeredEvent,\r\n    SpeechRecognitionEvent,\r\n} from \"./RecognitionEvents\";\r\nimport { ServiceTelemetryListener } from \"./ServiceTelemetryListener.Internal\";\r\n\r\nexport class RequestSession {\r\n    private privIsDisposed: boolean = false;\r\n    private privServiceTelemetryListener: ServiceTelemetryListener;\r\n    private privDetachables: IDetachable[] = new Array<IDetachable>();\r\n    private privRequestId: string;\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n    private privAudioNode: ReplayableAudioNode;\r\n    private privAuthFetchEventId: string;\r\n    private privIsAudioNodeDetached: boolean = false;\r\n    private privIsRecognizing: boolean = false;\r\n    private privIsSpeechEnded: boolean = false;\r\n    private privTurnStartAudioOffset: number = 0;\r\n    private privLastRecoOffset: number = 0;\r\n    private privHypothesisReceived: boolean = false;\r\n    private privBytesSent: number = 0;\r\n    private privRecogNumber: number = 0;\r\n    private privSessionId: string;\r\n    private privTurnDeferral: Deferred<boolean>;\r\n\r\n    constructor(audioSourceId: string) {\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privAudioNodeId = createNoDashGuid();\r\n        this.privTurnDeferral = new Deferred<boolean>();\r\n\r\n        // We're not in a turn, so resolve.\r\n        this.privTurnDeferral.resolve(true);\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n\r\n    public get turnCompletionPromise(): Promise<boolean> {\r\n        return this.privTurnDeferral.promise();\r\n    }\r\n\r\n    public get isSpeechEnded(): boolean {\r\n        return this.privIsSpeechEnded;\r\n    }\r\n\r\n    public get isRecognizing(): boolean {\r\n        return this.privIsRecognizing;\r\n    }\r\n\r\n    public get currentTurnAudioOffset(): number {\r\n        return this.privTurnStartAudioOffset;\r\n    }\r\n\r\n    public get recogNumber(): number {\r\n        return this.privRecogNumber;\r\n    }\r\n\r\n    // The number of bytes sent for the current connection.\r\n    // Counter is reset to 0 each time a connection is established.\r\n    public get bytesSent(): number {\r\n        return this.privBytesSent;\r\n    }\r\n    public listenForServiceTelemetry(eventSource: IEventSource<PlatformEvent>): void {\r\n        if (!!this.privServiceTelemetryListener) {\r\n            this.privDetachables.push(eventSource.attachListener(this.privServiceTelemetryListener));\r\n        }\r\n    }\r\n\r\n    public startNewRecognition(): void {\r\n        this.privIsSpeechEnded = false;\r\n        this.privIsRecognizing = true;\r\n        this.privTurnStartAudioOffset = 0;\r\n        this.privLastRecoOffset = 0;\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privRecogNumber++;\r\n        this.privServiceTelemetryListener = new ServiceTelemetryListener(this.privRequestId, this.privAudioSourceId, this.privAudioNodeId);\r\n        this.onEvent(new RecognitionTriggeredEvent(this.requestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));\r\n    }\r\n\r\n    public onAudioSourceAttachCompleted = (audioNode: ReplayableAudioNode, isError: boolean, error?: string): void => {\r\n        this.privAudioNode = audioNode;\r\n        this.privIsAudioNodeDetached = false;\r\n\r\n        if (isError) {\r\n            this.onComplete();\r\n        } else {\r\n            this.onEvent(new ListeningStartedEvent(this.privRequestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));\r\n        }\r\n    }\r\n\r\n    public onPreConnectionStart = (authFetchEventId: string, connectionId: string): void => {\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n        this.privSessionId = connectionId;\r\n        this.onEvent(new ConnectingToServiceEvent(this.privRequestId, this.privAuthFetchEventId, this.privSessionId));\r\n    }\r\n\r\n    public onAuthCompleted = (isError: boolean, error?: string): void => {\r\n        if (isError) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onConnectionEstablishCompleted = (statusCode: number, reason?: string): void => {\r\n        if (statusCode === 200) {\r\n            this.onEvent(new RecognitionStartedEvent(this.requestId, this.privAudioSourceId, this.privAudioNodeId, this.privAuthFetchEventId, this.privSessionId));\r\n            if (!!this.privAudioNode) {\r\n                this.privAudioNode.replay();\r\n            }\r\n            this.privTurnStartAudioOffset = this.privLastRecoOffset;\r\n            this.privBytesSent = 0;\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onServiceTurnEndResponse = (continuousRecognition: boolean): void => {\r\n        this.privTurnDeferral.resolve(true);\r\n\r\n        if (!continuousRecognition || this.isSpeechEnded) {\r\n            this.onComplete();\r\n        } else {\r\n            // Start a new request set.\r\n            this.privTurnStartAudioOffset = this.privLastRecoOffset;\r\n            this.privRequestId = createNoDashGuid();\r\n            this.privAudioNode.replay();\r\n        }\r\n    }\r\n\r\n    public onServiceTurnStartResponse = (): void => {\r\n        if (this.privTurnDeferral.state() === PromiseState.None) {\r\n            // What? How are we starting a turn with another not done?\r\n            this.privTurnDeferral.reject(\"Another turn started before current completed.\");\r\n        }\r\n\r\n        this.privTurnDeferral = new Deferred<boolean>();\r\n    }\r\n\r\n    public onHypothesis(offset: number): void {\r\n        if (!this.privHypothesisReceived) {\r\n            this.privHypothesisReceived = true;\r\n            this.privServiceTelemetryListener.hypothesisReceived(this.privAudioNode.findTimeAtOffset(offset));\r\n        }\r\n    }\r\n\r\n    public onPhraseRecognized(offset: number): void {\r\n        this.privServiceTelemetryListener.phraseReceived(this.privAudioNode.findTimeAtOffset(offset));\r\n        this.onServiceRecognized(offset);\r\n    }\r\n\r\n    public onServiceRecognized(offset: number): void {\r\n        this.privLastRecoOffset = offset;\r\n        this.privHypothesisReceived = false;\r\n        this.privAudioNode.shrinkBuffers(offset);\r\n    }\r\n\r\n    public onAudioSent(bytesSent: number): void {\r\n        this.privBytesSent += bytesSent;\r\n    }\r\n\r\n    public dispose = (error?: string): void => {\r\n        if (!this.privIsDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.privIsDisposed = true;\r\n            for (const detachable of this.privDetachables) {\r\n                detachable.detach();\r\n            }\r\n\r\n            this.privServiceTelemetryListener.dispose();\r\n        }\r\n    }\r\n\r\n    public getTelemetry = (): string => {\r\n        if (this.privServiceTelemetryListener.hasTelemetry) {\r\n            return this.privServiceTelemetryListener.getTelemetry();\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public onStopRecognizing(): void {\r\n        this.onComplete();\r\n    }\r\n\r\n    // Should be called with the audioNode for this session has indicated that it is out of speech.\r\n    public onSpeechEnded(): void {\r\n        this.privIsSpeechEnded = true;\r\n    }\r\n\r\n    protected onEvent = (event: SpeechRecognitionEvent): void => {\r\n        if (!!this.privServiceTelemetryListener) {\r\n            this.privServiceTelemetryListener.onEvent(event);\r\n        }\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private onComplete = (): void => {\r\n        if (!!this.privIsRecognizing) {\r\n            this.privIsRecognizing = false;\r\n            this.detachAudioNode();\r\n        }\r\n    }\r\n\r\n    private detachAudioNode = (): void => {\r\n        if (!this.privIsAudioNodeDetached) {\r\n            this.privIsAudioNodeDetached = true;\r\n            if (this.privAudioNode) {\r\n                this.privAudioNode.detach();\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}