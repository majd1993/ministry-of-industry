{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Exports_1 = require(\"../../common.speech/Exports\");\n\nvar Exports_2 = require(\"../../common/Exports\");\n\nvar Guid_1 = require(\"../../common/Guid\");\n\nvar Exports_3 = require(\"../Exports\");\n\nvar AudioStreamFormat_1 = require(\"./AudioStreamFormat\");\n/**\n * Represents audio input stream used for custom audio input configurations.\n * @class AudioInputStream\n */\n\n\nvar AudioInputStream =\n/** @class */\nfunction () {\n  /**\n   * Creates and initializes an instance.\n   * @constructor\n   */\n  function AudioInputStream() {}\n  /**\n   * Creates a memory backed PushAudioInputStream with the specified audio format.\n   * @member AudioInputStream.createPushStream\n   * @function\n   * @public\n   * @param {AudioStreamFormat} format - The audio data format in which audio will be\n   *        written to the push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\n   * @returns {PushAudioInputStream} The audio input stream being created.\n   */\n\n\n  AudioInputStream.createPushStream = function (format) {\n    return PushAudioInputStream.create(format);\n  };\n  /**\n   * Creates a PullAudioInputStream that delegates to the specified callback interface for read()\n   * and close() methods.\n   * @member AudioInputStream.createPullStream\n   * @function\n   * @public\n   * @param {PullAudioInputStreamCallback} callback - The custom audio input object, derived from\n   *        PullAudioInputStreamCallback\n   * @param {AudioStreamFormat} format - The audio data format in which audio will be returned from\n   *        the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\n   * @returns {PullAudioInputStream} The audio input stream being created.\n   */\n\n\n  AudioInputStream.createPullStream = function (callback, format) {\n    return PullAudioInputStream.create(callback, format); // throw new Error(\"Oops\");\n  };\n\n  return AudioInputStream;\n}();\n\nexports.AudioInputStream = AudioInputStream;\n/**\n * Represents memory backed push audio input stream used for custom audio input configurations.\n * @class PushAudioInputStream\n */\n// tslint:disable-next-line:max-classes-per-file\n\nvar PushAudioInputStream =\n/** @class */\nfunction (_super) {\n  __extends(PushAudioInputStream, _super);\n\n  function PushAudioInputStream() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Creates a memory backed PushAudioInputStream with the specified audio format.\n   * @member PushAudioInputStream.create\n   * @function\n   * @public\n   * @param {AudioStreamFormat} format - The audio data format in which audio will be written to the\n   *        push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\n   * @returns {PushAudioInputStream} The push audio input stream being created.\n   */\n\n\n  PushAudioInputStream.create = function (format) {\n    return new PushAudioInputStreamImpl(format);\n  };\n\n  return PushAudioInputStream;\n}(AudioInputStream);\n\nexports.PushAudioInputStream = PushAudioInputStream;\n/**\n * Represents memory backed push audio input stream used for custom audio input configurations.\n * @private\n * @class PushAudioInputStreamImpl\n */\n// tslint:disable-next-line:max-classes-per-file\n\nvar PushAudioInputStreamImpl =\n/** @class */\nfunction (_super) {\n  __extends(PushAudioInputStreamImpl, _super);\n  /**\n   * Creates and initalizes an instance with the given values.\n   * @constructor\n   * @param {AudioStreamFormat} format - The audio stream format.\n   */\n\n\n  function PushAudioInputStreamImpl(format) {\n    var _this = _super.call(this) || this;\n\n    _this.onEvent = function (event) {\n      _this.privEvents.onEvent(event);\n\n      Exports_2.Events.instance.onEvent(event);\n    };\n\n    if (format === undefined) {\n      _this.privFormat = AudioStreamFormat_1.AudioStreamFormatImpl.getDefaultInputFormat();\n    } else {\n      _this.privFormat = format;\n    }\n\n    _this.privEvents = new Exports_2.EventSource();\n    _this.privId = Guid_1.createNoDashGuid();\n    _this.privStream = new Exports_2.ChunkedArrayBufferStream(_this.privFormat.avgBytesPerSec / 10);\n    return _this;\n  }\n\n  Object.defineProperty(PushAudioInputStreamImpl.prototype, \"format\", {\n    /**\n     * Format information for the audio\n     */\n    get: function get() {\n      return Exports_2.PromiseHelper.fromResult(this.privFormat);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Writes the audio data specified by making an internal copy of the data.\n   * @member PushAudioInputStreamImpl.prototype.write\n   * @function\n   * @public\n   * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\n   */\n\n  PushAudioInputStreamImpl.prototype.write = function (dataBuffer) {\n    this.privStream.writeStreamChunk({\n      buffer: dataBuffer,\n      isEnd: false,\n      timeReceived: Date.now()\n    });\n  };\n  /**\n   * Closes the stream.\n   * @member PushAudioInputStreamImpl.prototype.close\n   * @function\n   * @public\n   */\n\n\n  PushAudioInputStreamImpl.prototype.close = function () {\n    this.privStream.close();\n  };\n\n  PushAudioInputStreamImpl.prototype.id = function () {\n    return this.privId;\n  };\n\n  Object.defineProperty(PushAudioInputStreamImpl.prototype, \"blob\", {\n    get: function get() {\n      var _this = this;\n\n      return this.attach(\"id\").onSuccessContinueWithPromise(function (audioNode) {\n        var data = [];\n        var bufferData = Buffer.from(\"\");\n\n        var readCycle = function readCycle() {\n          return audioNode.read().onSuccessContinueWithPromise(function (audioStreamChunk) {\n            if (!audioStreamChunk || audioStreamChunk.isEnd) {\n              if (typeof XMLHttpRequest !== \"undefined\") {\n                return Exports_2.PromiseHelper.fromResult(new Blob(data));\n              } else {\n                return Exports_2.PromiseHelper.fromResult(Buffer.from(bufferData));\n              }\n            } else {\n              if (typeof Blob !== \"undefined\") {\n                data.push(audioStreamChunk.buffer);\n              } else {\n                bufferData = Buffer.concat([bufferData, _this.toBuffer(audioStreamChunk.buffer)]);\n              }\n\n              return readCycle();\n            }\n          });\n        };\n\n        return readCycle();\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PushAudioInputStreamImpl.prototype.turnOn = function () {\n    this.onEvent(new Exports_2.AudioSourceInitializingEvent(this.privId)); // no stream id\n\n    this.onEvent(new Exports_2.AudioSourceReadyEvent(this.privId));\n    return Exports_2.PromiseHelper.fromResult(true);\n  };\n\n  PushAudioInputStreamImpl.prototype.attach = function (audioNodeId) {\n    var _this = this;\n\n    this.onEvent(new Exports_2.AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\n    return this.turnOn().onSuccessContinueWith(function (_) {\n      // For now we support a single parallel reader of the pushed stream.\n      // So we can simiply hand the stream to the recognizer and let it recognize.\n      return _this.privStream;\n    }).onSuccessContinueWith(function (stream) {\n      _this.onEvent(new Exports_2.AudioStreamNodeAttachedEvent(_this.privId, audioNodeId));\n\n      return {\n        detach: function detach() {\n          stream.readEnded();\n\n          _this.onEvent(new Exports_2.AudioStreamNodeDetachedEvent(_this.privId, audioNodeId));\n\n          _this.turnOff();\n        },\n        id: function id() {\n          return audioNodeId;\n        },\n        read: function read() {\n          return stream.read();\n        }\n      };\n    });\n  };\n\n  PushAudioInputStreamImpl.prototype.detach = function (audioNodeId) {\n    this.onEvent(new Exports_2.AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n  };\n\n  PushAudioInputStreamImpl.prototype.turnOff = function () {\n    return Exports_2.PromiseHelper.fromResult(false);\n  };\n\n  Object.defineProperty(PushAudioInputStreamImpl.prototype, \"events\", {\n    get: function get() {\n      return this.privEvents;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PushAudioInputStreamImpl.prototype, \"deviceInfo\", {\n    get: function get() {\n      return Exports_2.PromiseHelper.fromResult({\n        bitspersample: this.privFormat.bitsPerSample,\n        channelcount: this.privFormat.channels,\n        connectivity: Exports_1.connectivity.Unknown,\n        manufacturer: \"Speech SDK\",\n        model: \"PushStream\",\n        samplerate: this.privFormat.samplesPerSec,\n        type: Exports_1.type.Stream\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PushAudioInputStreamImpl.prototype.toBuffer = function (arrayBuffer) {\n    var buf = Buffer.alloc(arrayBuffer.byteLength);\n    var view = new Uint8Array(arrayBuffer);\n\n    for (var i = 0; i < buf.length; ++i) {\n      buf[i] = view[i];\n    }\n\n    return buf;\n  };\n\n  return PushAudioInputStreamImpl;\n}(PushAudioInputStream);\n\nexports.PushAudioInputStreamImpl = PushAudioInputStreamImpl;\n/*\n * Represents audio input stream used for custom audio input configurations.\n * @class PullAudioInputStream\n */\n// tslint:disable-next-line:max-classes-per-file\n\nvar PullAudioInputStream =\n/** @class */\nfunction (_super) {\n  __extends(PullAudioInputStream, _super);\n  /**\n   * Creates and initializes and instance.\n   * @constructor\n   */\n\n\n  function PullAudioInputStream() {\n    return _super.call(this) || this;\n  }\n  /**\n   * Creates a PullAudioInputStream that delegates to the specified callback interface for\n   * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\n   * @member PullAudioInputStream.create\n   * @function\n   * @public\n   * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\n   *        derived from PullAudioInputStreamCustomCallback\n   * @param {AudioStreamFormat} format - The audio data format in which audio will be\n   *        returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\n   * @returns {PullAudioInputStream} The push audio input stream being created.\n   */\n\n\n  PullAudioInputStream.create = function (callback, format) {\n    return new PullAudioInputStreamImpl(callback, format);\n  };\n\n  return PullAudioInputStream;\n}(AudioInputStream);\n\nexports.PullAudioInputStream = PullAudioInputStream;\n/**\n * Represents audio input stream used for custom audio input configurations.\n * @private\n * @class PullAudioInputStreamImpl\n */\n// tslint:disable-next-line:max-classes-per-file\n\nvar PullAudioInputStreamImpl =\n/** @class */\nfunction (_super) {\n  __extends(PullAudioInputStreamImpl, _super);\n  /**\n   * Creates a PullAudioInputStream that delegates to the specified callback interface for\n   * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\n   * @constructor\n   * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\n   *        derived from PullAudioInputStreamCustomCallback\n   * @param {AudioStreamFormat} format - The audio data format in which audio will be\n   *        returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\n   */\n\n\n  function PullAudioInputStreamImpl(callback, format) {\n    var _this = _super.call(this) || this;\n\n    _this.onEvent = function (event) {\n      _this.privEvents.onEvent(event);\n\n      Exports_2.Events.instance.onEvent(event);\n    };\n\n    if (undefined === format) {\n      _this.privFormat = Exports_3.AudioStreamFormat.getDefaultInputFormat();\n    } else {\n      _this.privFormat = format;\n    }\n\n    _this.privEvents = new Exports_2.EventSource();\n    _this.privId = Guid_1.createNoDashGuid();\n    _this.privCallback = callback;\n    _this.privIsClosed = false;\n    _this.privBufferSize = _this.privFormat.avgBytesPerSec / 10;\n    return _this;\n  }\n\n  Object.defineProperty(PullAudioInputStreamImpl.prototype, \"format\", {\n    /**\n     * Format information for the audio\n     */\n    get: function get() {\n      return Exports_2.PromiseHelper.fromResult(this.privFormat);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Closes the stream.\n   * @member PullAudioInputStreamImpl.prototype.close\n   * @function\n   * @public\n   */\n\n  PullAudioInputStreamImpl.prototype.close = function () {\n    this.privIsClosed = true;\n    this.privCallback.close();\n  };\n\n  PullAudioInputStreamImpl.prototype.id = function () {\n    return this.privId;\n  };\n\n  Object.defineProperty(PullAudioInputStreamImpl.prototype, \"blob\", {\n    get: function get() {\n      return Exports_2.PromiseHelper.fromError(\"Not implemented\");\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PullAudioInputStreamImpl.prototype.turnOn = function () {\n    this.onEvent(new Exports_2.AudioSourceInitializingEvent(this.privId)); // no stream id\n\n    this.onEvent(new Exports_2.AudioSourceReadyEvent(this.privId));\n    return Exports_2.PromiseHelper.fromResult(true);\n  };\n\n  PullAudioInputStreamImpl.prototype.attach = function (audioNodeId) {\n    var _this = this;\n\n    this.onEvent(new Exports_2.AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\n    return this.turnOn().onSuccessContinueWith(function (result) {\n      _this.onEvent(new Exports_2.AudioStreamNodeAttachedEvent(_this.privId, audioNodeId));\n\n      return {\n        detach: function detach() {\n          _this.privCallback.close();\n\n          _this.onEvent(new Exports_2.AudioStreamNodeDetachedEvent(_this.privId, audioNodeId));\n\n          _this.turnOff();\n        },\n        id: function id() {\n          return audioNodeId;\n        },\n        read: function read() {\n          var totalBytes = 0;\n          var transmitBuff; // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\n\n          while (totalBytes < _this.privBufferSize) {\n            // Sizing the read buffer to the delta between the perfect size and what's left means we won't ever get too much\n            // data back.\n            var readBuff = new ArrayBuffer(_this.privBufferSize - totalBytes);\n\n            var pulledBytes = _this.privCallback.read(readBuff); // If there is no return buffer yet defined, set the return buffer to the that was just populated.\n            // This was, if we have enough data there's no copy penalty, but if we don't we have a buffer that's the\n            // preferred size allocated.\n\n\n            if (undefined === transmitBuff) {\n              transmitBuff = readBuff;\n            } else {\n              // Not the first bite at the apple, so fill the return buffer with the data we got back.\n              var intView = new Int8Array(transmitBuff);\n              intView.set(new Int8Array(readBuff), totalBytes);\n            } // If there are no bytes to read, just break out and be done.\n\n\n            if (0 === pulledBytes) {\n              break;\n            }\n\n            totalBytes += pulledBytes;\n          }\n\n          return Exports_2.PromiseHelper.fromResult({\n            buffer: transmitBuff.slice(0, totalBytes),\n            isEnd: _this.privIsClosed || totalBytes === 0,\n            timeReceived: Date.now()\n          });\n        }\n      };\n    });\n  };\n\n  PullAudioInputStreamImpl.prototype.detach = function (audioNodeId) {\n    this.onEvent(new Exports_2.AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n  };\n\n  PullAudioInputStreamImpl.prototype.turnOff = function () {\n    return Exports_2.PromiseHelper.fromResult(false);\n  };\n\n  Object.defineProperty(PullAudioInputStreamImpl.prototype, \"events\", {\n    get: function get() {\n      return this.privEvents;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PullAudioInputStreamImpl.prototype, \"deviceInfo\", {\n    get: function get() {\n      return Exports_2.PromiseHelper.fromResult({\n        bitspersample: this.privFormat.bitsPerSample,\n        channelcount: this.privFormat.channels,\n        connectivity: Exports_1.connectivity.Unknown,\n        manufacturer: \"Speech SDK\",\n        model: \"PullStream\",\n        samplerate: this.privFormat.samplesPerSec,\n        type: Exports_1.type.Stream\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PullAudioInputStreamImpl;\n}(PullAudioInputStream);\n\nexports.PullAudioInputStreamImpl = PullAudioInputStreamImpl;","map":{"version":3,"sources":["src/sdk/Audio/AudioInputStream.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type,\r\n} from \"../../common.speech/Exports\";\r\nimport {\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    ChunkedArrayBufferStream,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n    Promise,\r\n    PromiseHelper,\r\n    PromiseResult,\r\n    Stream,\r\n} from \"../../common/Exports\";\r\nimport { createNoDashGuid } from \"../../common/Guid\";\r\nimport { AudioStreamFormat, PullAudioInputStreamCallback } from \"../Exports\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class AudioInputStream\r\n */\r\nexport abstract class AudioInputStream {\r\n\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() { }\r\n\r\n    /**\r\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n     * @member AudioInputStream.createPushStream\r\n     * @function\r\n     * @public\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     *        written to the push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PushAudioInputStream} The audio input stream being created.\r\n     */\r\n    public static createPushStream(format?: AudioStreamFormat): PushAudioInputStream {\r\n        return PushAudioInputStream.create(format);\r\n    }\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for read()\r\n     * and close() methods.\r\n     * @member AudioInputStream.createPullStream\r\n     * @function\r\n     * @public\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object, derived from\r\n     *        PullAudioInputStreamCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be returned from\r\n     *        the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PullAudioInputStream} The audio input stream being created.\r\n     */\r\n    public static createPullStream(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\r\n        return PullAudioInputStream.create(callback, format);\r\n        // throw new Error(\"Oops\");\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @class PushAudioInputStream\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport abstract class PushAudioInputStream extends AudioInputStream {\r\n\r\n    /**\r\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n     * @member PushAudioInputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be written to the\r\n     *        push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PushAudioInputStream} The push audio input stream being created.\r\n     */\r\n    public static create(format?: AudioStreamFormat): PushAudioInputStream {\r\n        return new PushAudioInputStreamImpl(format);\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PushAudioInputStream.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public abstract write(dataBuffer: ArrayBuffer): void;\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PushAudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PushAudioInputStreamImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class PushAudioInputStreamImpl extends PushAudioInputStream implements IAudioSource {\r\n\r\n    private privFormat: AudioStreamFormatImpl;\r\n    private privId: string;\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n    private privStream: Stream<ArrayBuffer>;\r\n\r\n    /**\r\n     * Creates and initalizes an instance with the given values.\r\n     * @constructor\r\n     * @param {AudioStreamFormat} format - The audio stream format.\r\n     */\r\n    public constructor(format?: AudioStreamFormat) {\r\n        super();\r\n        if (format === undefined) {\r\n            this.privFormat = AudioStreamFormatImpl.getDefaultInputFormat();\r\n        } else {\r\n            this.privFormat = format as AudioStreamFormatImpl;\r\n        }\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privId = createNoDashGuid();\r\n        this.privStream = new ChunkedArrayBufferStream(this.privFormat.avgBytesPerSec / 10);\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return PromiseHelper.fromResult(this.privFormat);\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PushAudioInputStreamImpl.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public write(dataBuffer: ArrayBuffer): void {\r\n        this.privStream.writeStreamChunk({\r\n            buffer: dataBuffer,\r\n            isEnd: false,\r\n            timeReceived: Date.now()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PushAudioInputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privStream.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public get blob(): Promise<Blob | Buffer> {\r\n        return this.attach(\"id\").onSuccessContinueWithPromise<Blob | Buffer>((audioNode: IAudioStreamNode) => {\r\n            const data: ArrayBuffer[] = [];\r\n            let bufferData = Buffer.from(\"\");\r\n            const readCycle = (): Promise<Blob | Buffer> => {\r\n                return audioNode.read().onSuccessContinueWithPromise<Blob | Buffer>((audioStreamChunk: IStreamChunk<ArrayBuffer>) => {\r\n                    if (!audioStreamChunk || audioStreamChunk.isEnd) {\r\n                        if (typeof (XMLHttpRequest) !== \"undefined\") {\r\n                            return PromiseHelper.fromResult(new Blob(data));\r\n                        } else {\r\n                            return PromiseHelper.fromResult(Buffer.from(bufferData));\r\n                        }\r\n                    } else {\r\n                        if (typeof (Blob) !== \"undefined\") {\r\n                            data.push(audioStreamChunk.buffer);\r\n                        } else {\r\n                            bufferData = Buffer.concat([bufferData, this.toBuffer(audioStreamChunk.buffer)]);\r\n                        }\r\n                        return readCycle();\r\n                    }\r\n                });\r\n            };\r\n            return readCycle();\r\n        });\r\n    }\r\n\r\n    public turnOn(): Promise<boolean> {\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return PromiseHelper.fromResult(true);\r\n    }\r\n\r\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        return this.turnOn()\r\n            .onSuccessContinueWith<Stream<ArrayBuffer>>((_: boolean) => {\r\n                // For now we support a single parallel reader of the pushed stream.\r\n                // So we can simiply hand the stream to the recognizer and let it recognize.\r\n\r\n                return this.privStream;\r\n            })\r\n            .onSuccessContinueWith((stream: Stream<ArrayBuffer>) => {\r\n                this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n\r\n                return {\r\n                    detach: () => {\r\n                        stream.readEnded();\r\n                        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                        this.turnOff();\r\n                    },\r\n                    id: () => {\r\n                        return audioNodeId;\r\n                    },\r\n                    read: () => {\r\n                        return stream.read();\r\n                    },\r\n                };\r\n            });\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n    }\r\n\r\n    public turnOff(): Promise<boolean> {\r\n        return PromiseHelper.fromResult(false);\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return PromiseHelper.fromResult({\r\n            bitspersample: this.privFormat.bitsPerSample,\r\n            channelcount: this.privFormat.channels,\r\n            connectivity: connectivity.Unknown,\r\n            manufacturer: \"Speech SDK\",\r\n            model: \"PushStream\",\r\n            samplerate: this.privFormat.samplesPerSec,\r\n            type: type.Stream,\r\n        });\r\n    }\r\n\r\n    private onEvent = (event: AudioSourceEvent): void => {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private toBuffer(arrayBuffer: ArrayBuffer): Buffer {\r\n        const buf: Buffer = Buffer.alloc(arrayBuffer.byteLength);\r\n        const view: Uint8Array = new Uint8Array(arrayBuffer);\r\n        for (let i = 0; i < buf.length; ++i) {\r\n            buf[i] = view[i];\r\n        }\r\n        return buf;\r\n    }\r\n}\r\n\r\n/*\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class PullAudioInputStream\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport abstract class PullAudioInputStream extends AudioInputStream {\r\n    /**\r\n     * Creates and initializes and instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() { super(); }\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\r\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n     * @member PullAudioInputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\r\n     *        derived from PullAudioInputStreamCustomCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     *        returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PullAudioInputStream} The push audio input stream being created.\r\n     */\r\n    public static create(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\r\n        return new PullAudioInputStreamImpl(callback, format as AudioStreamFormatImpl);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member PullAudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PullAudioInputStreamImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class PullAudioInputStreamImpl extends PullAudioInputStream implements IAudioSource {\r\n\r\n    private privCallback: PullAudioInputStreamCallback;\r\n    private privFormat: AudioStreamFormatImpl;\r\n    private privId: string;\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n    private privIsClosed: boolean;\r\n    private privBufferSize: number;\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\r\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n     * @constructor\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\r\n     *        derived from PullAudioInputStreamCustomCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     *        returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     */\r\n    public constructor(callback: PullAudioInputStreamCallback, format?: AudioStreamFormatImpl) {\r\n        super();\r\n        if (undefined === format) {\r\n            this.privFormat = AudioStreamFormat.getDefaultInputFormat() as AudioStreamFormatImpl;\r\n        } else {\r\n            this.privFormat = format;\r\n        }\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privId = createNoDashGuid();\r\n        this.privCallback = callback;\r\n        this.privIsClosed = false;\r\n        this.privBufferSize = this.privFormat.avgBytesPerSec / 10;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return PromiseHelper.fromResult(this.privFormat);\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioInputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privIsClosed = true;\r\n        this.privCallback.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public get blob(): Promise<Blob | Buffer> {\r\n        return PromiseHelper.fromError(\"Not implemented\");\r\n    }\r\n\r\n    public turnOn(): Promise<boolean> {\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return PromiseHelper.fromResult(true);\r\n    }\r\n\r\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        return this.turnOn()\r\n            .onSuccessContinueWith((result: boolean) => {\r\n                this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n\r\n                return {\r\n                    detach: () => {\r\n                        this.privCallback.close();\r\n                        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                        this.turnOff();\r\n                    },\r\n                    id: () => {\r\n                        return audioNodeId;\r\n                    },\r\n                    read: (): Promise<IStreamChunk<ArrayBuffer>> => {\r\n                        let totalBytes: number = 0;\r\n                        let transmitBuff: ArrayBuffer;\r\n\r\n                        // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\r\n                        while (totalBytes < this.privBufferSize) {\r\n                            // Sizing the read buffer to the delta between the perfect size and what's left means we won't ever get too much\r\n                            // data back.\r\n                            const readBuff: ArrayBuffer = new ArrayBuffer(this.privBufferSize - totalBytes);\r\n                            const pulledBytes: number = this.privCallback.read(readBuff);\r\n\r\n                            // If there is no return buffer yet defined, set the return buffer to the that was just populated.\r\n                            // This was, if we have enough data there's no copy penalty, but if we don't we have a buffer that's the\r\n                            // preferred size allocated.\r\n                            if (undefined === transmitBuff) {\r\n                                transmitBuff = readBuff;\r\n                            } else {\r\n                                // Not the first bite at the apple, so fill the return buffer with the data we got back.\r\n                                const intView: Int8Array = new Int8Array(transmitBuff);\r\n                                intView.set(new Int8Array(readBuff), totalBytes);\r\n                            }\r\n\r\n                            // If there are no bytes to read, just break out and be done.\r\n                            if (0 === pulledBytes) {\r\n                                break;\r\n                            }\r\n\r\n                            totalBytes += pulledBytes;\r\n                        }\r\n\r\n                        return PromiseHelper.fromResult<IStreamChunk<ArrayBuffer>>({\r\n                            buffer: transmitBuff.slice(0, totalBytes),\r\n                            isEnd: this.privIsClosed || totalBytes === 0,\r\n                            timeReceived: Date.now(),\r\n                        });\r\n                    },\r\n                };\r\n            });\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n    }\r\n\r\n    public turnOff(): Promise<boolean> {\r\n        return PromiseHelper.fromResult(false);\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return PromiseHelper.fromResult({\r\n            bitspersample: this.privFormat.bitsPerSample,\r\n            channelcount: this.privFormat.channels,\r\n            connectivity: connectivity.Unknown,\r\n            manufacturer: \"Speech SDK\",\r\n            model: \"PullStream\",\r\n            samplerate: this.privFormat.samplesPerSec,\r\n            type: type.Stream,\r\n        });\r\n    }\r\n\r\n    private onEvent = (event: AudioSourceEvent): void => {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}