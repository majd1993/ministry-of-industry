{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _useStyleToEmotionObject = _interopRequireDefault(require(\"./hooks/internal/useStyleToEmotionObject\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/* eslint react/forbid-dom-props: [\"off\"] */\n\n\nvar ROOT_STYLE = {\n  // .sr-only - This component is intended to be invisible to the visual Web Chat user, but read by the AT when using a screen reader\n  color: 'transparent',\n  height: 1,\n  overflow: 'hidden',\n  position: 'absolute',\n  // We need to set top: 0, otherwise, it will repro:\n  // - Run NVDA\n  // - Make the transcript long enough to show the scrollbar\n  // - Press SHIFT-TAB, focus on upload button\n  // - Press up arrow multiple times\n  top: 0,\n  whiteSpace: 'nowrap',\n  width: 1\n};\n\nvar ScreenReaderText = function ScreenReaderText(_ref) {\n  var id = _ref.id,\n      text = _ref.text;\n  var rootClassName = (0, _useStyleToEmotionObject.default)()(ROOT_STYLE) + '';\n  return /*#__PURE__*/_react.default.createElement(\"div\", {\n    className: rootClassName,\n    id: id\n  }, text);\n};\n\nScreenReaderText.defaultProps = {\n  id: undefined\n};\nScreenReaderText.propTypes = {\n  id: _propTypes.default.string,\n  text: _propTypes.default.string.isRequired\n};\nvar _default = ScreenReaderText;\nexports.default = _default;","map":{"version":3,"sources":["../src/ScreenReaderText.js"],"names":["ROOT_STYLE","color","height","overflow","position","top","whiteSpace","width","ScreenReaderText","id","text","rootClassName","undefined","PropTypes","isRequired"],"mappings":";;;;;;;AAEA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;AACA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAEA,IAAA,wBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,0CAAA,CAAA,CAAA;;;;;;;AALA;;;AAOA,IAAMA,UAAU,GAAG;AACjB;AACAC,EAAAA,KAAK,EAFY,aAAA;AAGjBC,EAAAA,MAAM,EAHW,CAAA;AAIjBC,EAAAA,QAAQ,EAJS,QAAA;AAKjBC,EAAAA,QAAQ,EALS,UAAA;AAMjB;AACA;AACA;AACA;AACA;AACAC,EAAAA,GAAG,EAXc,CAAA;AAYjBC,EAAAA,UAAU,EAZO,QAAA;AAajBC,EAAAA,KAAK,EAAE;AAbU,CAAnB;;AAgBA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,IAAA,EAAkB;AAAA,MAAfC,EAAe,GAAA,IAAA,CAAfA,EAAe;AAAA,MAAXC,IAAW,GAAA,IAAA,CAAXA,IAAW;AACzC,MAAMC,aAAa,GAAG,CAAA,GAAA,wBAAA,CAAA,OAAA,IAAA,UAAA,IAAtB,EAAA;AAEA,SAAA,aACE,MAAA,CAAA,OAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAd,aAAA;AAA+B,IAAA,EAAE,EAAEF;AAAnC,GAAA,EADF,IACE,CADF;AAHF,CAAA;;AAUAD,gBAAgB,CAAhBA,YAAAA,GAAgC;AAC9BC,EAAAA,EAAE,EAAEG;AAD0B,CAAhCJ;AAIAA,gBAAgB,CAAhBA,SAAAA,GAA6B;AAC3BC,EAAAA,EAAE,EAAEI,UAAAA,CAAAA,OAAAA,CADuB,MAAA;AAE3BH,EAAAA,IAAI,EAAEG,UAAAA,CAAAA,OAAAA,CAAAA,MAAAA,CAAiBC;AAFI,CAA7BN;eAKeA,gB","sourcesContent":["/* eslint react/forbid-dom-props: [\"off\"] */\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport useStyleToEmotionObject from './hooks/internal/useStyleToEmotionObject';\n\nconst ROOT_STYLE = {\n  // .sr-only - This component is intended to be invisible to the visual Web Chat user, but read by the AT when using a screen reader\n  color: 'transparent',\n  height: 1,\n  overflow: 'hidden',\n  position: 'absolute',\n  // We need to set top: 0, otherwise, it will repro:\n  // - Run NVDA\n  // - Make the transcript long enough to show the scrollbar\n  // - Press SHIFT-TAB, focus on upload button\n  // - Press up arrow multiple times\n  top: 0,\n  whiteSpace: 'nowrap',\n  width: 1\n};\n\nconst ScreenReaderText = ({ id, text }) => {\n  const rootClassName = useStyleToEmotionObject()(ROOT_STYLE) + '';\n\n  return (\n    <div className={rootClassName} id={id}>\n      {text}\n    </div>\n  );\n};\n\nScreenReaderText.defaultProps = {\n  id: undefined\n};\n\nScreenReaderText.propTypes = {\n  id: PropTypes.string,\n  text: PropTypes.string.isRequired\n};\n\nexport default ScreenReaderText;\n"],"sourceRoot":"component:///"},"metadata":{},"sourceType":"script"}