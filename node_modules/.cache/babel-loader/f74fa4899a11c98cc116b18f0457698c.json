{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tls = __importStar(require(\"tls\"));\n\nvar url = __importStar(require(\"url\"));\n\nvar ocsp = __importStar(require(\"../../external/ocsp/ocsp\"));\n\nvar Exports_1 = require(\"../common/Exports\");\n\nvar agent_base_1 = __importDefault(require(\"agent-base\")); // @ts-ignore\n\n\nvar async_disk_cache_1 = __importDefault(require(\"async-disk-cache\"));\n\nvar https_proxy_agent_1 = __importDefault(require(\"https-proxy-agent\"));\n\nvar OCSPEvents_1 = require(\"../common/OCSPEvents\");\n\nvar CertCheckAgent =\n/** @class */\nfunction () {\n  function CertCheckAgent(proxyInfo) {\n    if (!!proxyInfo) {\n      this.privProxyInfo = proxyInfo;\n    } // Initialize this here to allow tests to set the env variable before the cache is constructed.\n\n\n    if (!CertCheckAgent.privDiskCache) {\n      CertCheckAgent.privDiskCache = new async_disk_cache_1.default(\"microsoft-cognitiveservices-speech-sdk-cache\", {\n        supportBuffer: true,\n        location: typeof process !== \"undefined\" && !!process.env.SPEECH_OCSP_CACHE_ROOT ? process.env.SPEECH_OCSP_CACHE_ROOT : undefined\n      });\n    }\n  } // Test hook to force the disk cache to be recreated.\n\n\n  CertCheckAgent.forceReinitDiskCache = function () {\n    CertCheckAgent.privDiskCache = undefined;\n    CertCheckAgent.privMemCache = {};\n  };\n\n  CertCheckAgent.prototype.GetAgent = function (disableStapling) {\n    var agent = new agent_base_1.default.Agent(this.CreateConnection);\n\n    if (this.privProxyInfo !== undefined && this.privProxyInfo.HostName !== undefined && this.privProxyInfo.Port > 0) {\n      var proxyName = \"privProxyInfo\";\n      agent[proxyName] = this.privProxyInfo;\n    }\n\n    return agent;\n  };\n\n  CertCheckAgent.GetProxyAgent = function (proxyInfo) {\n    var httpProxyOptions = {\n      host: proxyInfo.HostName,\n      port: proxyInfo.Port\n    };\n\n    if (!!proxyInfo.UserName) {\n      httpProxyOptions.headers = {\n        \"Proxy-Authentication\": \"Basic \" + new Buffer(proxyInfo.UserName + \":\" + (proxyInfo.Password === undefined) ? \"\" : proxyInfo.Password).toString(\"base64\")\n      };\n    } else {\n      httpProxyOptions.headers = {};\n    }\n\n    httpProxyOptions.headers.requestOCSP = \"true\";\n    var httpProxyAgent = new https_proxy_agent_1.default(httpProxyOptions);\n    return httpProxyAgent;\n  };\n\n  CertCheckAgent.OCSPCheck = function (socketPromise, proxyInfo) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ocspRequest, stapling, resolved, socket, tlsSocket;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            resolved = false;\n            return [4\n            /*yield*/\n            , socketPromise];\n\n          case 1:\n            socket = _a.sent();\n            socket.cork();\n            tlsSocket = socket;\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              socket.on(\"OCSPResponse\", function (data) {\n                if (!!data) {\n                  _this.onEvent(new Exports_1.OCSPStapleReceivedEvent());\n\n                  stapling = data;\n                }\n              });\n              socket.on(\"error\", function (error) {\n                if (!resolved) {\n                  resolved = true;\n                  socket.destroy();\n                  reject(error);\n                }\n              });\n              tlsSocket.on(\"secure\", function () {\n                return __awaiter(_this, void 0, void 0, function () {\n                  var peer, issuer, sig, cacheEntry, e_1;\n                  return __generator(this, function (_a) {\n                    switch (_a.label) {\n                      case 0:\n                        peer = tlsSocket.getPeerCertificate(true);\n                        _a.label = 1;\n\n                      case 1:\n                        _a.trys.push([1, 6,, 7]);\n\n                        return [4\n                        /*yield*/\n                        , this.GetIssuer(peer)];\n\n                      case 2:\n                        issuer = _a.sent(); // We always need a request to verify the response.\n\n                        ocspRequest = ocsp.request.generate(peer.raw, issuer.raw);\n                        sig = ocspRequest.id.toString(\"hex\");\n                        if (!!stapling) return [3\n                        /*break*/\n                        , 4];\n                        return [4\n                        /*yield*/\n                        , CertCheckAgent.GetResponseFromCache(sig, ocspRequest, proxyInfo)];\n\n                      case 3:\n                        cacheEntry = _a.sent();\n                        stapling = cacheEntry;\n                        _a.label = 4;\n\n                      case 4:\n                        return [4\n                        /*yield*/\n                        , this.VerifyOCSPResponse(stapling, ocspRequest, proxyInfo)];\n\n                      case 5:\n                        _a.sent();\n\n                        socket.uncork();\n                        resolved = true;\n                        resolve(socket);\n                        return [3\n                        /*break*/\n                        , 7];\n\n                      case 6:\n                        e_1 = _a.sent();\n                        socket.destroy();\n                        resolved = true;\n                        reject(e_1);\n                        return [3\n                        /*break*/\n                        , 7];\n\n                      case 7:\n                        return [2\n                        /*return*/\n                        ];\n                    }\n                  });\n                });\n              });\n            })];\n        }\n      });\n    });\n  };\n\n  CertCheckAgent.GetIssuer = function (peer) {\n    if (peer.issuerCertificate) {\n      return Promise.resolve(peer.issuerCertificate);\n    }\n\n    return new Promise(function (resolve, reject) {\n      var ocspAgent = new ocsp.Agent({});\n      ocspAgent.fetchIssuer(peer, null, function (error, value) {\n        if (!!error) {\n          reject(error);\n          return;\n        }\n\n        resolve(value);\n      });\n    });\n  };\n\n  CertCheckAgent.GetResponseFromCache = function (signature, ocspRequest, proxyInfo) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedResponse, diskCacheResponse, error_1, cachedOcspResponse, tbsData, cachedStartTime, cachedNextTime, minUpdate;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            cachedResponse = CertCheckAgent.privMemCache[signature];\n\n            if (!!cachedResponse) {\n              this.onEvent(new Exports_1.OCSPMemoryCacheHitEvent(signature));\n            }\n\n            if (!!cachedResponse) return [3\n            /*break*/\n            , 4];\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , CertCheckAgent.privDiskCache.get(signature)];\n\n          case 2:\n            diskCacheResponse = _a.sent();\n\n            if (!!diskCacheResponse.isCached) {\n              CertCheckAgent.onEvent(new Exports_1.OCSPDiskCacheHitEvent(signature));\n              CertCheckAgent.StoreMemoryCacheEntry(signature, diskCacheResponse.value);\n              cachedResponse = diskCacheResponse.value;\n            }\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            error_1 = _a.sent();\n            cachedResponse = null;\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            if (!cachedResponse) {\n              return [2\n              /*return*/\n              , cachedResponse];\n            }\n\n            try {\n              cachedOcspResponse = ocsp.utils.parseResponse(cachedResponse);\n              tbsData = cachedOcspResponse.value.tbsResponseData;\n\n              if (tbsData.responses.length < 1) {\n                this.onEvent(new Exports_1.OCSPCacheFetchErrorEvent(signature, \"Not enough data in cached response\"));\n                return [2\n                /*return*/\n                ];\n              }\n\n              cachedStartTime = tbsData.responses[0].thisUpdate;\n              cachedNextTime = tbsData.responses[0].nextUpdate;\n\n              if (cachedNextTime < Date.now() + this.testTimeOffset - 60000) {\n                // Cached entry has expired.\n                this.onEvent(new Exports_1.OCSPCacheEntryExpiredEvent(signature, cachedNextTime));\n                cachedResponse = null;\n              } else {\n                minUpdate = Math.min(24 * 60 * 60 * 1000, (cachedNextTime - cachedStartTime) / 2);\n\n                if (cachedNextTime - (Date.now() + this.testTimeOffset) < minUpdate) {\n                  this.onEvent(new Exports_1.OCSPCacheEntryNeedsRefreshEvent(signature, cachedStartTime, cachedNextTime));\n                  this.UpdateCache(ocspRequest, proxyInfo).catch(function (error) {\n                    // Well, not much we can do here.\n                    _this.onEvent(new OCSPEvents_1.OCSPCacheUpdateErrorEvent(signature, error.toString()));\n                  });\n                } else {\n                  this.onEvent(new Exports_1.OCSPCacheHitEvent(signature, cachedStartTime, cachedNextTime));\n                }\n              }\n            } catch (error) {\n              this.onEvent(new Exports_1.OCSPCacheFetchErrorEvent(signature, error));\n              cachedResponse = null;\n            }\n\n            if (!cachedResponse) {\n              this.onEvent(new Exports_1.OCSPCacheMissEvent(signature));\n            }\n\n            return [2\n            /*return*/\n            , cachedResponse];\n        }\n      });\n    });\n  };\n\n  CertCheckAgent.VerifyOCSPResponse = function (cacheValue, ocspRequest, proxyInfo) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ocspResponse, sig;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ocspResponse = cacheValue;\n            sig = ocspRequest.certID.toString(\"hex\");\n            if (!!ocspResponse) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , CertCheckAgent.GetOCSPResponse(ocspRequest, proxyInfo)];\n\n          case 1:\n            ocspResponse = _a.sent();\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              ocsp.verify({\n                request: ocspRequest,\n                response: ocspResponse\n              }, function (error, result) {\n                if (!!error) {\n                  CertCheckAgent.onEvent(new Exports_1.OCSPVerificationFailedEvent(ocspRequest.id.toString(\"hex\"), error)); // Bad Cached Value? One more try without the cache.\n\n                  if (!!cacheValue) {\n                    _this.VerifyOCSPResponse(null, ocspRequest, proxyInfo).then(function () {\n                      resolve();\n                    }, function (error) {\n                      reject(error);\n                    });\n                  } else {\n                    reject(error);\n                  }\n                } else {\n                  if (!cacheValue) {\n                    CertCheckAgent.StoreCacheEntry(ocspRequest.id.toString(\"hex\"), ocspResponse);\n                  }\n\n                  resolve();\n                }\n              });\n            })];\n        }\n      });\n    });\n  };\n\n  CertCheckAgent.UpdateCache = function (req, proxyInfo) {\n    return __awaiter(this, void 0, void 0, function () {\n      var signature, rawResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            signature = req.id.toString(\"hex\");\n            this.onEvent(new Exports_1.OCSPCacheUpdateNeededEvent(signature));\n            return [4\n            /*yield*/\n            , this.GetOCSPResponse(req, proxyInfo)];\n\n          case 1:\n            rawResponse = _a.sent();\n            this.StoreCacheEntry(signature, rawResponse);\n            this.onEvent(new Exports_1.OCSPCacheUpdatehCompleteEvent(req.id.toString(\"hex\")));\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  CertCheckAgent.StoreCacheEntry = function (sig, rawResponse) {\n    this.StoreMemoryCacheEntry(sig, rawResponse);\n    this.StoreDiskCacheEntry(sig, rawResponse);\n  };\n\n  CertCheckAgent.StoreMemoryCacheEntry = function (sig, rawResponse) {\n    this.privMemCache[sig] = rawResponse;\n    this.onEvent(new Exports_1.OCSPMemoryCacheStoreEvent(sig));\n  };\n\n  CertCheckAgent.StoreDiskCacheEntry = function (sig, rawResponse) {\n    var _this = this;\n\n    this.privDiskCache.set(sig, rawResponse).then(function () {\n      _this.onEvent(new Exports_1.OCSPDiskCacheStoreEvent(sig));\n    });\n  };\n\n  CertCheckAgent.GetOCSPResponse = function (req, proxyInfo) {\n    var _this = this;\n\n    var ocspMethod = \"1.3.6.1.5.5.7.48.1\";\n    var options = {};\n\n    if (!!proxyInfo) {\n      var agent = CertCheckAgent.GetProxyAgent(proxyInfo);\n      options.agent = agent;\n    }\n\n    return new Promise(function (resolve, reject) {\n      ocsp.utils.getAuthorityInfo(req.cert, ocspMethod, function (error, uri) {\n        if (error) {\n          reject(error);\n          return;\n        }\n\n        var parsedUri = url.parse(uri);\n        options = __assign(__assign({}, options), parsedUri);\n        ocsp.utils.getResponse(options, req.data, function (error, raw) {\n          if (error) {\n            reject(error);\n            return;\n          }\n\n          _this.onEvent(new Exports_1.OCSPResponseRetrievedEvent(req.certID.toString(\"hex\")));\n\n          resolve(raw);\n        });\n      });\n    });\n  };\n\n  CertCheckAgent.prototype.CreateConnection = function (request, options) {\n    var enableOCSP = typeof process !== \"undefined\" && process.env.NODE_TLS_REJECT_UNAUTHORIZED !== \"0\" && process.env.SPEECH_CONDUCT_OCSP_CHECK !== \"0\" && options.secureEndpoint;\n    var socketPromise;\n    options = __assign(__assign({}, options), {\n      requestOCSP: !CertCheckAgent.forceDisableOCSPStapling,\n      servername: options.host\n    });\n\n    if (!!this.privProxyInfo) {\n      var httpProxyAgent = CertCheckAgent.GetProxyAgent(this.privProxyInfo);\n      var baseAgent_1 = httpProxyAgent;\n      socketPromise = new Promise(function (resolve, reject) {\n        baseAgent_1.callback(request, options, function (error, socket) {\n          if (!!error) {\n            reject(error);\n          } else {\n            resolve(socket);\n          }\n        });\n      });\n    } else {\n      socketPromise = Promise.resolve(tls.connect(options));\n    }\n\n    if (!!enableOCSP) {\n      return CertCheckAgent.OCSPCheck(socketPromise, this.privProxyInfo);\n    } else {\n      return socketPromise;\n    }\n  }; // Test hook to enable forcing expiration / refresh to happen.\n\n\n  CertCheckAgent.testTimeOffset = 0; // Test hook to disable stapling for cache testing.\n\n  CertCheckAgent.forceDisableOCSPStapling = false; // An in memory cache for recived responses.\n\n  CertCheckAgent.privMemCache = {};\n\n  CertCheckAgent.onEvent = function (event) {\n    Exports_1.Events.instance.onEvent(event);\n  };\n\n  return CertCheckAgent;\n}();\n\nexports.CertCheckAgent = CertCheckAgent;","map":{"version":3,"sources":["src/common.browser/CertChecks.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,IAAA,GAAA,GAAA,YAAA,CAAA,OAAA,CAAA,KAAA,CAAA,CAAA;;AACA,IAAA,GAAA,GAAA,YAAA,CAAA,OAAA,CAAA,KAAA,CAAA,CAAA;;AACA,IAAA,IAAA,GAAA,YAAA,CAAA,OAAA,CAAA,0BAAA,CAAA,CAAA;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAsBA,IAAA,YAAA,GAAA,eAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA,C,CAEA;;;AACA,IAAA,kBAAA,GAAA,eAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,CAAA;;AACA,IAAA,mBAAA,GAAA,eAAA,CAAA,OAAA,CAAA,mBAAA,CAAA,CAAA;;AAEA,IAAA,YAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AAEA,IAAA,cAAA;AAAA;AAAA,YAAA;AAgBI,WAAA,cAAA,CAAY,SAAZ,EAAiC;AAC7B,QAAI,CAAC,CAAC,SAAN,EAAiB;AACb,WAAK,aAAL,GAAqB,SAArB;AACH,KAH4B,CAK7B;;;AACA,QAAI,CAAC,cAAc,CAAC,aAApB,EAAmC;AAC/B,MAAA,cAAc,CAAC,aAAf,GAA+B,IAAI,kBAAA,CAAA,OAAJ,CAAU,8CAAV,EAA0D;AAAE,QAAA,aAAa,EAAE,IAAjB;AAAuB,QAAA,QAAQ,EAAG,OAAO,OAAP,KAAmB,WAAnB,IAAkC,CAAC,CAAC,OAAO,CAAC,GAAR,CAAY,sBAAjD,GAA2E,OAAO,CAAC,GAAR,CAAY,sBAAvF,GAAgH;AAAjJ,OAA1D,CAA/B;AACH;AACJ,GAzBL,CA2BI;;;AACc,EAAA,cAAA,CAAA,oBAAA,GAAd,YAAA;AACI,IAAA,cAAc,CAAC,aAAf,GAA+B,SAA/B;AACA,IAAA,cAAc,CAAC,YAAf,GAA8B,EAA9B;AACH,GAHa;;AAKP,EAAA,cAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UAAgB,eAAhB,EAAyC;AACrC,QAAM,KAAK,GAAQ,IAAI,YAAA,CAAA,OAAA,CAAM,KAAV,CAAgB,KAAK,gBAArB,CAAnB;;AAEA,QAAI,KAAK,aAAL,KAAuB,SAAvB,IACA,KAAK,aAAL,CAAmB,QAAnB,KAAgC,SADhC,IAEA,KAAK,aAAL,CAAmB,IAAnB,GAA0B,CAF9B,EAEiC;AAC7B,UAAM,SAAS,GAAW,eAA1B;AACA,MAAA,KAAK,CAAC,SAAD,CAAL,GAAmB,KAAK,aAAxB;AACH;;AAED,WAAO,KAAP;AACH,GAXM;;AAaQ,EAAA,cAAA,CAAA,aAAA,GAAf,UAA6B,SAA7B,EAAiD;AAC7C,QAAM,gBAAgB,GAA2C;AAC7D,MAAA,IAAI,EAAE,SAAS,CAAC,QAD6C;AAE7D,MAAA,IAAI,EAAE,SAAS,CAAC;AAF6C,KAAjE;;AAKA,QAAI,CAAC,CAAC,SAAS,CAAC,QAAhB,EAA0B;AACtB,MAAA,gBAAgB,CAAC,OAAjB,GAA2B;AACvB,gCAAwB,WAAW,IAAI,MAAJ,CAAW,SAAS,CAAC,QAAV,GAAqB,GAArB,IAA4B,SAAS,CAAC,QAAV,KAAuB,SAAnD,IAAgE,EAAhE,GAAqE,SAAS,CAAC,QAA1F,EAAoG,QAApG,CAA6G,QAA7G;AADZ,OAA3B;AAGH,KAJD,MAIO;AACH,MAAA,gBAAgB,CAAC,OAAjB,GAA2B,EAA3B;AACH;;AAED,IAAA,gBAAgB,CAAC,OAAjB,CAAyB,WAAzB,GAAuC,MAAvC;AAEA,QAAM,cAAc,GAAoB,IAAI,mBAAA,CAAA,OAAJ,CAAoB,gBAApB,CAAxC;AACA,WAAO,cAAP;AACH,GAlBc;;AAoBM,EAAA,cAAA,CAAA,SAAA,GAArB,UAA+B,aAA/B,EAAmE,SAAnE,EAAuF;;;;;;;;;AAG/E,YAAA,QAAQ,GAAY,KAApB;AAEuB,mBAAA,CAAA;AAAA;AAAA,cAAM,aAAN,CAAA;;;AAArB,YAAA,MAAM,GAAe,EAAA,CAAA,IAAA,EAArB;AACN,YAAA,MAAM,CAAC,IAAP;AAEM,YAAA,SAAS,GAAkB,MAA3B;AAEN,mBAAA,CAAA;AAAA;AAAA,cAAO,IAAI,OAAJ,CAAwB,UAAC,OAAD,EAAuC,MAAvC,EAA8E;AACzG,cAAA,MAAM,CAAC,EAAP,CAAU,cAAV,EAA0B,UAAC,IAAD,EAAa;AACnC,oBAAI,CAAC,CAAC,IAAN,EAAY;AACR,kBAAA,KAAI,CAAC,OAAL,CAAa,IAAI,SAAA,CAAA,uBAAJ,EAAb;;AACA,kBAAA,QAAQ,GAAG,IAAX;AACH;AACJ,eALD;AAOA,cAAA,MAAM,CAAC,EAAP,CAAU,OAAV,EAAmB,UAAC,KAAD,EAAa;AAC5B,oBAAI,CAAC,QAAL,EAAe;AACX,kBAAA,QAAQ,GAAG,IAAX;AACA,kBAAA,MAAM,CAAC,OAAP;AACA,kBAAA,MAAM,CAAC,KAAD,CAAN;AACH;AACJ,eAND;AAQA,cAAA,SAAS,CAAC,EAAV,CAAa,QAAb,EAAuB,YAAA;AAAA,uBAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;AACb,wBAAA,IAAI,GAAgC,SAAS,CAAC,kBAAV,CAA6B,IAA7B,CAApC;;;;;;AAE0C,+BAAA,CAAA;AAAA;AAAA,0BAAM,KAAK,SAAL,CAAe,IAAf,CAAN,CAAA;;;AAAtC,wBAAA,MAAM,GAAgC,EAAA,CAAA,IAAA,EAAtC,C,CAEN;;AACA,wBAAA,WAAW,GAAG,IAAI,CAAC,OAAL,CAAa,QAAb,CAAsB,IAAI,CAAC,GAA3B,EAAgC,MAAM,CAAC,GAAvC,CAAd;AAGM,wBAAA,GAAG,GAAW,WAAW,CAAC,EAAZ,CAAe,QAAf,CAAwB,KAAxB,CAAd;6BAGF,CAAC,Q,EAAD,OAAA,CAAA;AAAA;AAAA,0BAAA,CAAA,CAAA;AAC2B,+BAAA,CAAA;AAAA;AAAA,0BAAM,cAAc,CAAC,oBAAf,CAAoC,GAApC,EAAyC,WAAzC,EAAsD,SAAtD,CAAN,CAAA;;;AAArB,wBAAA,UAAU,GAAW,EAAA,CAAA,IAAA,EAArB;AACN,wBAAA,QAAQ,GAAG,UAAX;;;;AAGJ,+BAAA,CAAA;AAAA;AAAA,0BAAM,KAAK,kBAAL,CAAwB,QAAxB,EAAkC,WAAlC,EAA+C,SAA/C,CAAN,CAAA;;;AAAA,wBAAA,EAAA,CAAA,IAAA;;AAEA,wBAAA,MAAM,CAAC,MAAP;AACA,wBAAA,QAAQ,GAAG,IAAX;AACA,wBAAA,OAAO,CAAC,MAAD,CAAP;;;;;;;AAEA,wBAAA,MAAM,CAAC,OAAP;AACA,wBAAA,QAAQ,GAAG,IAAX;AACA,wBAAA,MAAM,CAAC,GAAD,CAAN;;;;;;;;;;;iBAzBe,CAAA;AA2BtB,eA3BD;AA4BH,aA5CM,CAAP,CAAA;;;;AA6CH,GAvDoB;;AAyDN,EAAA,cAAA,CAAA,SAAA,GAAf,UAAyB,IAAzB,EAA0D;AACtD,QAAI,IAAI,CAAC,iBAAT,EAA4B;AACxB,aAAO,OAAO,CAAC,OAAR,CAAgB,IAAI,CAAC,iBAArB,CAAP;AACH;;AAED,WAAO,IAAI,OAAJ,CAAyC,UAAC,OAAD,EAAwD,MAAxD,EAAwF;AACpI,UAAM,SAAS,GAAe,IAAI,IAAI,CAAC,KAAT,CAAe,EAAf,CAA9B;AACA,MAAA,SAAS,CAAC,WAAV,CAAsB,IAAtB,EAA4B,IAA5B,EAAkC,UAAC,KAAD,EAAgB,KAAhB,EAAkD;AAChF,YAAI,CAAC,CAAC,KAAN,EAAa;AACT,UAAA,MAAM,CAAC,KAAD,CAAN;AACA;AACH;;AAED,QAAA,OAAO,CAAC,KAAD,CAAP;AACH,OAPD;AAQH,KAVM,CAAP;AAWH,GAhBc;;AAkBM,EAAA,cAAA,CAAA,oBAAA,GAArB,UAA0C,SAA1C,EAA6D,WAA7D,EAAwF,SAAxF,EAA4G;;;;;;;;;AACpG,YAAA,cAAc,GAAW,cAAc,CAAC,YAAf,CAA4B,SAA5B,CAAzB;;AAEJ,gBAAI,CAAC,CAAC,cAAN,EAAsB;AAClB,mBAAK,OAAL,CAAa,IAAI,SAAA,CAAA,uBAAJ,CAA4B,SAA5B,CAAb;AACH;;iBAGG,CAAC,c,EAAD,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;;;;;;AAEmC,mBAAA,CAAA;AAAA;AAAA,cAAM,cAAc,CAAC,aAAf,CAA6B,GAA7B,CAAiC,SAAjC,CAAN,CAAA;;;AAAzB,YAAA,iBAAiB,GAAQ,EAAA,CAAA,IAAA,EAAzB;;AACN,gBAAI,CAAC,CAAC,iBAAiB,CAAC,QAAxB,EAAkC;AAC9B,cAAA,cAAc,CAAC,OAAf,CAAuB,IAAI,SAAA,CAAA,qBAAJ,CAA0B,SAA1B,CAAvB;AACA,cAAA,cAAc,CAAC,qBAAf,CAAqC,SAArC,EAAgD,iBAAiB,CAAC,KAAlE;AACA,cAAA,cAAc,GAAG,iBAAiB,CAAC,KAAnC;AACH;;;;;;;;AAED,YAAA,cAAc,GAAG,IAAjB;;;;;;AAIR,gBAAI,CAAC,cAAL,EAAqB;AACjB,qBAAA,CAAA;AAAA;AAAA,gBAAO,cAAP,CAAA;AACH;;AAED,gBAAI;AACM,cAAA,kBAAkB,GAAkB,IAAI,CAAC,KAAL,CAAW,aAAX,CAAyB,cAAzB,CAApC;AACA,cAAA,OAAO,GAAG,kBAAkB,CAAC,KAAnB,CAAyB,eAAnC;;AACN,kBAAI,OAAO,CAAC,SAAR,CAAkB,MAAlB,GAA2B,CAA/B,EAAkC;AAC9B,qBAAK,OAAL,CAAa,IAAI,SAAA,CAAA,wBAAJ,CAA6B,SAA7B,EAAwC,oCAAxC,CAAb;AACA,uBAAA,CAAA;AAAA;AAAA,iBAAA;AACH;;AAEK,cAAA,eAAe,GAAW,OAAO,CAAC,SAAR,CAAkB,CAAlB,EAAqB,UAA/C;AACA,cAAA,cAAc,GAAW,OAAO,CAAC,SAAR,CAAkB,CAAlB,EAAqB,UAA9C;;AAEN,kBAAI,cAAc,GAAI,IAAI,CAAC,GAAL,KAAa,KAAK,cAAlB,GAAmC,KAAzD,EAAiE;AAC7D;AACA,qBAAK,OAAL,CAAa,IAAI,SAAA,CAAA,0BAAJ,CAA+B,SAA/B,EAA0C,cAA1C,CAAb;AACA,gBAAA,cAAc,GAAG,IAAjB;AACH,eAJD,MAIO;AAIG,gBAAA,SAAS,GAAW,IAAI,CAAC,GAAL,CAAS,KAAK,EAAL,GAAU,EAAV,GAAe,IAAxB,EAA8B,CAAC,cAAc,GAAG,eAAlB,IAAqC,CAAnE,CAApB;;AAEN,oBAAK,cAAc,IAAI,IAAI,CAAC,GAAL,KAAa,KAAK,cAAtB,CAAf,GAAwD,SAA5D,EAAuE;AACnE,uBAAK,OAAL,CAAa,IAAI,SAAA,CAAA,+BAAJ,CAAoC,SAApC,EAA+C,eAA/C,EAAgE,cAAhE,CAAb;AACA,uBAAK,WAAL,CAAiB,WAAjB,EAA8B,SAA9B,EAAyC,KAAzC,CAA+C,UAAC,KAAD,EAAc;AACzD;AACA,oBAAA,KAAI,CAAC,OAAL,CAAa,IAAI,YAAA,CAAA,yBAAJ,CAA8B,SAA9B,EAAyC,KAAK,CAAC,QAAN,EAAzC,CAAb;AACH,mBAHD;AAIH,iBAND,MAMO;AACH,uBAAK,OAAL,CAAa,IAAI,SAAA,CAAA,iBAAJ,CAAsB,SAAtB,EAAiC,eAAjC,EAAkD,cAAlD,CAAb;AACH;AACJ;AACJ,aA/BD,CA+BE,OAAO,KAAP,EAAc;AACZ,mBAAK,OAAL,CAAa,IAAI,SAAA,CAAA,wBAAJ,CAA6B,SAA7B,EAAwC,KAAxC,CAAb;AACA,cAAA,cAAc,GAAG,IAAjB;AACH;;AACD,gBAAI,CAAC,cAAL,EAAqB;AACjB,mBAAK,OAAL,CAAa,IAAI,SAAA,CAAA,kBAAJ,CAAuB,SAAvB,CAAb;AACH;;AACD,mBAAA,CAAA;AAAA;AAAA,cAAO,cAAP,CAAA;;;;AACH,GAhEoB;;AAkEA,EAAA,cAAA,CAAA,kBAAA,GAArB,UAAwC,UAAxC,EAA4D,WAA5D,EAAuF,SAAvF,EAA2G;;;;;;;;;AACnG,YAAA,YAAY,GAAW,UAAvB;AACE,YAAA,GAAG,GAAW,WAAW,CAAC,MAAZ,CAAmB,QAAnB,CAA4B,KAA5B,CAAd;iBAGF,CAAC,Y,EAAD,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACe,mBAAA,CAAA;AAAA;AAAA,cAAM,cAAc,CAAC,eAAf,CAA+B,WAA/B,EAA4C,SAA5C,CAAN,CAAA;;;AAAf,YAAA,YAAY,GAAG,EAAA,CAAA,IAAA,EAAf;;;;AAGJ,mBAAA,CAAA;AAAA;AAAA,cAAO,IAAI,OAAJ,CAAkB,UAAC,OAAD,EAAsB,MAAtB,EAA6D;AAClF,cAAA,IAAI,CAAC,MAAL,CAAY;AAAE,gBAAA,OAAO,EAAE,WAAX;AAAwB,gBAAA,QAAQ,EAAE;AAAlC,eAAZ,EAA8D,UAAC,KAAD,EAAgB,MAAhB,EAA2B;AACrF,oBAAI,CAAC,CAAC,KAAN,EAAa;AACT,kBAAA,cAAc,CAAC,OAAf,CAAuB,IAAI,SAAA,CAAA,2BAAJ,CAAgC,WAAW,CAAC,EAAZ,CAAe,QAAf,CAAwB,KAAxB,CAAhC,EAAgE,KAAhE,CAAvB,EADS,CAGT;;AACA,sBAAI,CAAC,CAAC,UAAN,EAAkB;AACd,oBAAA,KAAI,CAAC,kBAAL,CAAwB,IAAxB,EAA8B,WAA9B,EAA2C,SAA3C,EAAsD,IAAtD,CAA2D,YAAA;AACvD,sBAAA,OAAO;AACV,qBAFD,EAEG,UAAC,KAAD,EAAa;AACZ,sBAAA,MAAM,CAAC,KAAD,CAAN;AACH,qBAJD;AAKH,mBAND,MAMO;AACH,oBAAA,MAAM,CAAC,KAAD,CAAN;AACH;AACJ,iBAbD,MAaO;AACH,sBAAI,CAAC,UAAL,EAAiB;AACb,oBAAA,cAAc,CAAC,eAAf,CAA+B,WAAW,CAAC,EAAZ,CAAe,QAAf,CAAwB,KAAxB,CAA/B,EAA+D,YAA/D;AACH;;AACD,kBAAA,OAAO;AACV;AACJ,eApBD;AAqBH,aAtBM,CAAP,CAAA;;;;AAuBH,GAhCoB;;AAkCA,EAAA,cAAA,CAAA,WAAA,GAArB,UAAiC,GAAjC,EAAoD,SAApD,EAAwE;;;;;;AAC9D,YAAA,SAAS,GAAW,GAAG,CAAC,EAAJ,CAAO,QAAP,CAAgB,KAAhB,CAApB;AACN,iBAAK,OAAL,CAAa,IAAI,SAAA,CAAA,0BAAJ,CAA+B,SAA/B,CAAb;AAE4B,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,eAAL,CAAqB,GAArB,EAA0B,SAA1B,CAAN,CAAA;;;AAAtB,YAAA,WAAW,GAAW,EAAA,CAAA,IAAA,EAAtB;AACN,iBAAK,eAAL,CAAqB,SAArB,EAAgC,WAAhC;AACA,iBAAK,OAAL,CAAa,IAAI,SAAA,CAAA,6BAAJ,CAAkC,GAAG,CAAC,EAAJ,CAAO,QAAP,CAAgB,KAAhB,CAAlC,CAAb;;;;;;;AAEH,GARoB;;AAUN,EAAA,cAAA,CAAA,eAAA,GAAf,UAA+B,GAA/B,EAA4C,WAA5C,EAA+D;AAC3D,SAAK,qBAAL,CAA2B,GAA3B,EAAgC,WAAhC;AACA,SAAK,mBAAL,CAAyB,GAAzB,EAA8B,WAA9B;AACH,GAHc;;AAKA,EAAA,cAAA,CAAA,qBAAA,GAAf,UAAqC,GAArC,EAAkD,WAAlD,EAAqE;AACjE,SAAK,YAAL,CAAkB,GAAlB,IAAyB,WAAzB;AACA,SAAK,OAAL,CAAa,IAAI,SAAA,CAAA,yBAAJ,CAA8B,GAA9B,CAAb;AACH,GAHc;;AAKA,EAAA,cAAA,CAAA,mBAAA,GAAf,UAAmC,GAAnC,EAAgD,WAAhD,EAAmE;AAAnE,QAAA,KAAA,GAAA,IAAA;;AACI,SAAK,aAAL,CAAmB,GAAnB,CAAuB,GAAvB,EAA4B,WAA5B,EAAyC,IAAzC,CAA8C,YAAA;AAC1C,MAAA,KAAI,CAAC,OAAL,CAAa,IAAI,SAAA,CAAA,uBAAJ,CAA4B,GAA5B,CAAb;AACH,KAFD;AAGH,GAJc;;AAMA,EAAA,cAAA,CAAA,eAAA,GAAf,UAA+B,GAA/B,EAAkD,SAAlD,EAAsE;AAAtE,QAAA,KAAA,GAAA,IAAA;;AAEI,QAAM,UAAU,GAAW,oBAA3B;AACA,QAAI,OAAO,GAAwB,EAAnC;;AAEA,QAAI,CAAC,CAAC,SAAN,EAAiB;AACb,UAAM,KAAK,GAAoB,cAAc,CAAC,aAAf,CAA6B,SAA7B,CAA/B;AACA,MAAA,OAAO,CAAC,KAAR,GAAgB,KAAhB;AACH;;AAED,WAAO,IAAI,OAAJ,CAAoB,UAAC,OAAD,EAAmC,MAAnC,EAA0E;AACjG,MAAA,IAAI,CAAC,KAAL,CAAW,gBAAX,CAA4B,GAAG,CAAC,IAAhC,EAAsC,UAAtC,EAAkD,UAAC,KAAD,EAAgB,GAAhB,EAA2B;AACzE,YAAI,KAAJ,EAAW;AACP,UAAA,MAAM,CAAC,KAAD,CAAN;AACA;AACH;;AAED,YAAM,SAAS,GAAG,GAAG,CAAC,KAAJ,CAAU,GAAV,CAAlB;AACA,QAAA,OAAO,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAQ,OAAR,CAAA,EAAoB,SAApB,CAAP;AAEA,QAAA,IAAI,CAAC,KAAL,CAAW,WAAX,CAAuB,OAAvB,EAAgC,GAAG,CAAC,IAApC,EAA0C,UAAC,KAAD,EAAgB,GAAhB,EAA2B;AACjE,cAAI,KAAJ,EAAW;AACP,YAAA,MAAM,CAAC,KAAD,CAAN;AACA;AACH;;AAED,UAAA,KAAI,CAAC,OAAL,CAAa,IAAI,SAAA,CAAA,0BAAJ,CAA+B,GAAG,CAAC,MAAJ,CAAW,QAAX,CAAoB,KAApB,CAA/B,CAAb;;AACA,UAAA,OAAO,CAAC,GAAD,CAAP;AACH,SARD;AASH,OAlBD;AAmBH,KApBM,CAAP;AAqBH,GA/Bc;;AAqCP,EAAA,cAAA,CAAA,SAAA,CAAA,gBAAA,GAAR,UAAyB,OAAzB,EAAuD,OAAvD,EAAoF;AAChF,QAAM,UAAU,GAAa,OAAO,OAAP,KAAmB,WAAnB,IAAkC,OAAO,CAAC,GAAR,CAAY,4BAAZ,KAA6C,GAA/E,IAAsF,OAAO,CAAC,GAAR,CAAY,yBAAZ,KAA0C,GAAjI,IAAyI,OAAO,CAAC,cAA7K;AACA,QAAI,aAAJ;AAEA,IAAA,OAAO,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACA,OADA,CAAA,EAEA;AACC,MAAA,WAAW,EAAE,CAAC,cAAc,CAAC,wBAD9B;AAEC,MAAA,UAAU,EAAE,OAAO,CAAC;AAFrB,KAFA,CAAP;;AAQA,QAAI,CAAC,CAAC,KAAK,aAAX,EAA0B;AACtB,UAAM,cAAc,GAAoB,cAAc,CAAC,aAAf,CAA6B,KAAK,aAAlC,CAAxC;AACA,UAAM,WAAS,GAAgB,cAA/B;AAEA,MAAA,aAAa,GAAG,IAAI,OAAJ,CAAwB,UAAC,OAAD,EAAuC,MAAvC,EAA8E;AAClH,QAAA,WAAS,CAAC,QAAV,CAAmB,OAAnB,EAA4B,OAA5B,EAAqC,UAAC,KAAD,EAAe,MAAf,EAAiC;AAClE,cAAI,CAAC,CAAC,KAAN,EAAa;AACT,YAAA,MAAM,CAAC,KAAD,CAAN;AACH,WAFD,MAEO;AACH,YAAA,OAAO,CAAC,MAAD,CAAP;AACH;AACJ,SAND;AAOH,OARe,CAAhB;AASH,KAbD,MAaO;AACH,MAAA,aAAa,GAAG,OAAO,CAAC,OAAR,CAAgB,GAAG,CAAC,OAAJ,CAAY,OAAZ,CAAhB,CAAhB;AACH;;AAED,QAAI,CAAC,CAAC,UAAN,EAAkB;AACd,aAAO,cAAc,CAAC,SAAf,CAAyB,aAAzB,EAAwC,KAAK,aAA7C,CAAP;AACH,KAFD,MAEO;AACH,aAAO,aAAP;AACH;AACJ,GAlCO,CAhTZ,CAEI;;;AACc,EAAA,cAAA,CAAA,cAAA,GAAyB,CAAzB,CAHlB,CAKI;;AACc,EAAA,cAAA,CAAA,wBAAA,GAAoC,KAApC,CANlB,CAQI;;AACe,EAAA,cAAA,CAAA,YAAA,GAA0C,EAA1C;;AAmSA,EAAA,cAAA,CAAA,OAAA,GAAU,UAAC,KAAD,EAAiB;AACtC,IAAA,SAAA,CAAA,MAAA,CAAO,QAAP,CAAgB,OAAhB,CAAwB,KAAxB;AACH,GAFc;;AAuCnB,SAAA,cAAA;AAAC,CAnVD,EAAA;;AAAa,OAAA,CAAA,cAAA,GAAA,cAAA","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport * as http from \"http\";\r\nimport * as tls from \"tls\";\r\nimport * as url from \"url\";\r\nimport * as ocsp from \"../../external/ocsp/ocsp\";\r\nimport {\r\n    Events,\r\n    OCSPCacheEntryExpiredEvent,\r\n    OCSPCacheEntryNeedsRefreshEvent,\r\n    OCSPCacheFetchErrorEvent,\r\n    OCSPCacheHitEvent,\r\n    OCSPCacheMissEvent,\r\n    OCSPCacheUpdatehCompleteEvent,\r\n    OCSPCacheUpdateNeededEvent,\r\n    OCSPDiskCacheHitEvent,\r\n    OCSPDiskCacheStoreEvent,\r\n    OCSPEvent,\r\n    OCSPMemoryCacheHitEvent,\r\n    OCSPMemoryCacheStoreEvent,\r\n    OCSPResponseRetrievedEvent,\r\n    OCSPStapleReceivedEvent,\r\n    OCSPVerificationFailedEvent,\r\n    OCSPWSUpgradeStartedEvent\r\n} from \"../common/Exports\";\r\nimport { IStringDictionary } from \"../common/IDictionary\";\r\nimport { ProxyInfo } from \"./ProxyInfo\";\r\n\r\nimport Agent from \"agent-base\";\r\n\r\n// @ts-ignore\r\nimport Cache from \"async-disk-cache\";\r\nimport HttpsProxyAgent from \"https-proxy-agent\";\r\nimport * as net from \"net\";\r\nimport { OCSPCacheUpdateErrorEvent } from \"../common/OCSPEvents\";\r\n\r\nexport class CertCheckAgent {\r\n\r\n    // Test hook to enable forcing expiration / refresh to happen.\r\n    public static testTimeOffset: number = 0;\r\n\r\n    // Test hook to disable stapling for cache testing.\r\n    public static forceDisableOCSPStapling: boolean = false;\r\n\r\n    // An in memory cache for recived responses.\r\n    private static privMemCache: IStringDictionary<Buffer> = {};\r\n\r\n    // The on disk cache.\r\n    private static privDiskCache: Cache;\r\n\r\n    private privProxyInfo: ProxyInfo;\r\n\r\n    constructor(proxyInfo?: ProxyInfo) {\r\n        if (!!proxyInfo) {\r\n            this.privProxyInfo = proxyInfo;\r\n        }\r\n\r\n        // Initialize this here to allow tests to set the env variable before the cache is constructed.\r\n        if (!CertCheckAgent.privDiskCache) {\r\n            CertCheckAgent.privDiskCache = new Cache(\"microsoft-cognitiveservices-speech-sdk-cache\", { supportBuffer: true, location: (typeof process !== \"undefined\" && !!process.env.SPEECH_OCSP_CACHE_ROOT) ? process.env.SPEECH_OCSP_CACHE_ROOT : undefined });\r\n        }\r\n    }\r\n\r\n    // Test hook to force the disk cache to be recreated.\r\n    public static forceReinitDiskCache(): void {\r\n        CertCheckAgent.privDiskCache = undefined;\r\n        CertCheckAgent.privMemCache = {};\r\n    }\r\n\r\n    public GetAgent(disableStapling?: boolean): http.Agent {\r\n        const agent: any = new Agent.Agent(this.CreateConnection);\r\n\r\n        if (this.privProxyInfo !== undefined &&\r\n            this.privProxyInfo.HostName !== undefined &&\r\n            this.privProxyInfo.Port > 0) {\r\n            const proxyName: string = \"privProxyInfo\";\r\n            agent[proxyName] = this.privProxyInfo;\r\n        }\r\n\r\n        return agent;\r\n    }\r\n\r\n    private static GetProxyAgent(proxyInfo: ProxyInfo): HttpsProxyAgent {\r\n        const httpProxyOptions: HttpsProxyAgent.HttpsProxyAgentOptions = {\r\n            host: proxyInfo.HostName,\r\n            port: proxyInfo.Port,\r\n        };\r\n\r\n        if (!!proxyInfo.UserName) {\r\n            httpProxyOptions.headers = {\r\n                \"Proxy-Authentication\": \"Basic \" + new Buffer(proxyInfo.UserName + \":\" + (proxyInfo.Password === undefined) ? \"\" : proxyInfo.Password).toString(\"base64\"),\r\n            };\r\n        } else {\r\n            httpProxyOptions.headers = {};\r\n        }\r\n\r\n        httpProxyOptions.headers.requestOCSP = \"true\";\r\n\r\n        const httpProxyAgent: HttpsProxyAgent = new HttpsProxyAgent(httpProxyOptions);\r\n        return httpProxyAgent;\r\n    }\r\n\r\n    private static async OCSPCheck(socketPromise: Promise<net.Socket>, proxyInfo: ProxyInfo): Promise<net.Socket> {\r\n        let ocspRequest: ocsp.Request;\r\n        let stapling: Buffer;\r\n        let resolved: boolean = false;\r\n\r\n        const socket: net.Socket = await socketPromise;\r\n        socket.cork();\r\n\r\n        const tlsSocket: tls.TLSSocket = socket as tls.TLSSocket;\r\n\r\n        return new Promise<net.Socket>((resolve: (value: net.Socket) => void, reject: (error: string | Error) => void) => {\r\n            socket.on(\"OCSPResponse\", (data: Buffer): void => {\r\n                if (!!data) {\r\n                    this.onEvent(new OCSPStapleReceivedEvent());\r\n                    stapling = data;\r\n                }\r\n            });\r\n\r\n            socket.on(\"error\", (error: Error) => {\r\n                if (!resolved) {\r\n                    resolved = true;\r\n                    socket.destroy();\r\n                    reject(error);\r\n                }\r\n            });\r\n\r\n            tlsSocket.on(\"secure\", async () => {\r\n                const peer: tls.DetailedPeerCertificate = tlsSocket.getPeerCertificate(true);\r\n                try {\r\n                    const issuer: tls.DetailedPeerCertificate = await this.GetIssuer(peer);\r\n\r\n                    // We always need a request to verify the response.\r\n                    ocspRequest = ocsp.request.generate(peer.raw, issuer.raw);\r\n\r\n                    // Do we have a result for this certificate in our memory cache?\r\n                    const sig: string = ocspRequest.id.toString(\"hex\");\r\n\r\n                    // Stapled response trumps cached response.\r\n                    if (!stapling) {\r\n                        const cacheEntry: Buffer = await CertCheckAgent.GetResponseFromCache(sig, ocspRequest, proxyInfo);\r\n                        stapling = cacheEntry;\r\n                    }\r\n\r\n                    await this.VerifyOCSPResponse(stapling, ocspRequest, proxyInfo);\r\n\r\n                    socket.uncork();\r\n                    resolved = true;\r\n                    resolve(socket);\r\n                } catch (e) {\r\n                    socket.destroy();\r\n                    resolved = true;\r\n                    reject(e);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    private static GetIssuer(peer: tls.DetailedPeerCertificate): Promise<tls.DetailedPeerCertificate> {\r\n        if (peer.issuerCertificate) {\r\n            return Promise.resolve(peer.issuerCertificate);\r\n        }\r\n\r\n        return new Promise<tls.DetailedPeerCertificate>((resolve: (value: tls.DetailedPeerCertificate) => void, reject: (reason: string) => void) => {\r\n            const ocspAgent: ocsp.Agent = new ocsp.Agent({});\r\n            ocspAgent.fetchIssuer(peer, null, (error: string, value: tls.DetailedPeerCertificate): void => {\r\n                if (!!error) {\r\n                    reject(error);\r\n                    return;\r\n                }\r\n\r\n                resolve(value);\r\n            });\r\n        });\r\n    }\r\n\r\n    private static async GetResponseFromCache(signature: string, ocspRequest: ocsp.Request, proxyInfo: ProxyInfo): Promise<Buffer> {\r\n        let cachedResponse: Buffer = CertCheckAgent.privMemCache[signature];\r\n\r\n        if (!!cachedResponse) {\r\n            this.onEvent(new OCSPMemoryCacheHitEvent(signature));\r\n        }\r\n\r\n        // Do we have a result for this certificate on disk in %TMP%?\r\n        if (!cachedResponse) {\r\n            try {\r\n                const diskCacheResponse: any = await CertCheckAgent.privDiskCache.get(signature);\r\n                if (!!diskCacheResponse.isCached) {\r\n                    CertCheckAgent.onEvent(new OCSPDiskCacheHitEvent(signature));\r\n                    CertCheckAgent.StoreMemoryCacheEntry(signature, diskCacheResponse.value);\r\n                    cachedResponse = diskCacheResponse.value;\r\n                }\r\n            } catch (error) {\r\n                cachedResponse = null;\r\n            }\r\n        }\r\n\r\n        if (!cachedResponse) {\r\n            return cachedResponse;\r\n        }\r\n\r\n        try {\r\n            const cachedOcspResponse: ocsp.Response = ocsp.utils.parseResponse(cachedResponse);\r\n            const tbsData = cachedOcspResponse.value.tbsResponseData;\r\n            if (tbsData.responses.length < 1) {\r\n                this.onEvent(new OCSPCacheFetchErrorEvent(signature, \"Not enough data in cached response\"));\r\n                return;\r\n            }\r\n\r\n            const cachedStartTime: number = tbsData.responses[0].thisUpdate;\r\n            const cachedNextTime: number = tbsData.responses[0].nextUpdate;\r\n\r\n            if (cachedNextTime < (Date.now() + this.testTimeOffset - 60000)) {\r\n                // Cached entry has expired.\r\n                this.onEvent(new OCSPCacheEntryExpiredEvent(signature, cachedNextTime));\r\n                cachedResponse = null;\r\n            } else {\r\n                // If we're within one day of the next update, or 50% of the way through the validity period,\r\n                // background an update to the cache.\r\n\r\n                const minUpdate: number = Math.min(24 * 60 * 60 * 1000, (cachedNextTime - cachedStartTime) / 2);\r\n\r\n                if ((cachedNextTime - (Date.now() + this.testTimeOffset)) < minUpdate) {\r\n                    this.onEvent(new OCSPCacheEntryNeedsRefreshEvent(signature, cachedStartTime, cachedNextTime));\r\n                    this.UpdateCache(ocspRequest, proxyInfo).catch((error: string) => {\r\n                        // Well, not much we can do here.\r\n                        this.onEvent(new OCSPCacheUpdateErrorEvent(signature, error.toString()));\r\n                    });\r\n                } else {\r\n                    this.onEvent(new OCSPCacheHitEvent(signature, cachedStartTime, cachedNextTime));\r\n                }\r\n            }\r\n        } catch (error) {\r\n            this.onEvent(new OCSPCacheFetchErrorEvent(signature, error));\r\n            cachedResponse = null;\r\n        }\r\n        if (!cachedResponse) {\r\n            this.onEvent(new OCSPCacheMissEvent(signature));\r\n        }\r\n        return cachedResponse;\r\n    }\r\n\r\n    private static async VerifyOCSPResponse(cacheValue: Buffer, ocspRequest: ocsp.Request, proxyInfo: ProxyInfo): Promise<void> {\r\n        let ocspResponse: Buffer = cacheValue;\r\n        const sig: string = ocspRequest.certID.toString(\"hex\");\r\n\r\n        // Do we have a valid response?\r\n        if (!ocspResponse) {\r\n            ocspResponse = await CertCheckAgent.GetOCSPResponse(ocspRequest, proxyInfo);\r\n        }\r\n\r\n        return new Promise<void>((resolve: () => void, reject: (error: string | Error) => void) => {\r\n            ocsp.verify({ request: ocspRequest, response: ocspResponse }, (error: string, result: any): void => {\r\n                if (!!error) {\r\n                    CertCheckAgent.onEvent(new OCSPVerificationFailedEvent(ocspRequest.id.toString(\"hex\"), error));\r\n\r\n                    // Bad Cached Value? One more try without the cache.\r\n                    if (!!cacheValue) {\r\n                        this.VerifyOCSPResponse(null, ocspRequest, proxyInfo).then(() => {\r\n                            resolve();\r\n                        }, (error: Error) => {\r\n                            reject(error);\r\n                        });\r\n                    } else {\r\n                        reject(error);\r\n                    }\r\n                } else {\r\n                    if (!cacheValue) {\r\n                        CertCheckAgent.StoreCacheEntry(ocspRequest.id.toString(\"hex\"), ocspResponse);\r\n                    }\r\n                    resolve();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    private static async UpdateCache(req: ocsp.Request, proxyInfo: ProxyInfo): Promise<void> {\r\n        const signature: string = req.id.toString(\"hex\");\r\n        this.onEvent(new OCSPCacheUpdateNeededEvent(signature));\r\n\r\n        const rawResponse: Buffer = await this.GetOCSPResponse(req, proxyInfo);\r\n        this.StoreCacheEntry(signature, rawResponse);\r\n        this.onEvent(new OCSPCacheUpdatehCompleteEvent(req.id.toString(\"hex\")));\r\n\r\n    }\r\n\r\n    private static StoreCacheEntry(sig: string, rawResponse: Buffer): void {\r\n        this.StoreMemoryCacheEntry(sig, rawResponse);\r\n        this.StoreDiskCacheEntry(sig, rawResponse);\r\n    }\r\n\r\n    private static StoreMemoryCacheEntry(sig: string, rawResponse: Buffer): void {\r\n        this.privMemCache[sig] = rawResponse;\r\n        this.onEvent(new OCSPMemoryCacheStoreEvent(sig));\r\n    }\r\n\r\n    private static StoreDiskCacheEntry(sig: string, rawResponse: Buffer): void {\r\n        this.privDiskCache.set(sig, rawResponse).then(() => {\r\n            this.onEvent(new OCSPDiskCacheStoreEvent(sig));\r\n        });\r\n    }\r\n\r\n    private static GetOCSPResponse(req: ocsp.Request, proxyInfo: ProxyInfo): Promise<Buffer> {\r\n\r\n        const ocspMethod: string = \"1.3.6.1.5.5.7.48.1\";\r\n        let options: http.RequestOptions = {};\r\n\r\n        if (!!proxyInfo) {\r\n            const agent: HttpsProxyAgent = CertCheckAgent.GetProxyAgent(proxyInfo);\r\n            options.agent = agent;\r\n        }\r\n\r\n        return new Promise<Buffer>((resolve: (value: Buffer) => void, reject: (error: string | Error) => void) => {\r\n            ocsp.utils.getAuthorityInfo(req.cert, ocspMethod, (error: string, uri: string): void => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                }\r\n\r\n                const parsedUri = url.parse(uri);\r\n                options = { ...options, ...parsedUri };\r\n\r\n                ocsp.utils.getResponse(options, req.data, (error: string, raw: Buffer): void => {\r\n                    if (error) {\r\n                        reject(error);\r\n                        return;\r\n                    }\r\n\r\n                    this.onEvent(new OCSPResponseRetrievedEvent(req.certID.toString(\"hex\")));\r\n                    resolve(raw);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    private static onEvent = (event: OCSPEvent): void => {\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private CreateConnection(request: Agent.ClientRequest, options: Agent.RequestOptions): Promise<net.Socket> {\r\n        const enableOCSP: boolean = (typeof process !== \"undefined\" && process.env.NODE_TLS_REJECT_UNAUTHORIZED !== \"0\" && process.env.SPEECH_CONDUCT_OCSP_CHECK !== \"0\") && options.secureEndpoint;\r\n        let socketPromise: Promise<net.Socket>;\r\n\r\n        options = {\r\n            ...options,\r\n            ...{\r\n                requestOCSP: !CertCheckAgent.forceDisableOCSPStapling,\r\n                servername: options.host\r\n            }\r\n        };\r\n\r\n        if (!!this.privProxyInfo) {\r\n            const httpProxyAgent: HttpsProxyAgent = CertCheckAgent.GetProxyAgent(this.privProxyInfo);\r\n            const baseAgent: Agent.Agent = httpProxyAgent as unknown as Agent.Agent;\r\n\r\n            socketPromise = new Promise<net.Socket>((resolve: (value: net.Socket) => void, reject: (error: string | Error) => void) => {\r\n                baseAgent.callback(request, options, (error: Error, socket: net.Socket) => {\r\n                    if (!!error) {\r\n                        reject(error);\r\n                    } else {\r\n                        resolve(socket);\r\n                    }\r\n                });\r\n            });\r\n        } else {\r\n            socketPromise = Promise.resolve(tls.connect(options));\r\n        }\r\n\r\n        if (!!enableOCSP) {\r\n            return CertCheckAgent.OCSPCheck(socketPromise, this.privProxyInfo);\r\n        } else {\r\n            return socketPromise;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}