{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = downscaleImageToDataURLUsingBrowser;\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction keepAspectRatio(width, height, maxWidth, maxHeight) {\n  if (width < maxWidth && height < maxHeight) {\n    // Photo is smaller than both maximum dimensions, take it as-is\n    return {\n      height: height,\n      width: width\n    };\n  }\n\n  var aspectRatio = width / height;\n\n  if (aspectRatio > maxWidth / maxHeight) {\n    // Photo is wider than maximum dimension, downscale it based on maxWidth.\n    return {\n      height: maxWidth / aspectRatio,\n      width: maxWidth\n    };\n  } // Photo is taller than maximum dimension, downscale it based on maxHeight.\n\n\n  return {\n    height: maxHeight,\n    width: maxHeight * aspectRatio\n  };\n}\n\nfunction createCanvas(width, height) {\n  var canvas = document.createElement('canvas');\n  canvas.height = height;\n  canvas.width = width;\n  return canvas;\n}\n\nfunction loadImageFromBlob(blob) {\n  var blobURL = URL.createObjectURL(blob);\n  return new Promise(function (resolve, reject) {\n    var image = document.createElement('img');\n    image.addEventListener('error', function (_ref) {\n      var error = _ref.error;\n      return reject(error);\n    });\n    image.addEventListener('load', function () {\n      return resolve(image);\n    });\n    image.setAttribute('src', blobURL);\n  }).finally(function () {\n    URL.revokeObjectURL(blobURL);\n  });\n}\n\nfunction downscaleImageToDataURLUsingBrowser(_x, _x2, _x3, _x4, _x5) {\n  return _downscaleImageToDataURLUsingBrowser.apply(this, arguments);\n}\n\nfunction _downscaleImageToDataURLUsingBrowser() {\n  _downscaleImageToDataURLUsingBrowser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(blob, maxWidth, maxHeight, type, quality) {\n    var image, _keepAspectRatio, height, width, canvas, context;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return loadImageFromBlob(blob);\n\n          case 2:\n            image = _context.sent;\n            _keepAspectRatio = keepAspectRatio(image.width, image.height, maxWidth, maxHeight), height = _keepAspectRatio.height, width = _keepAspectRatio.width;\n            canvas = createCanvas(width, height);\n            context = canvas.getContext('2d');\n            context.drawImage(image, 0, 0, width, height);\n            return _context.abrupt(\"return\", canvas.toDataURL(type, quality));\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _downscaleImageToDataURLUsingBrowser.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../src/Utils/downscaleImageToDataURL/downscaleImageToDataURLUsingBrowser.js"],"names":["width","height","aspectRatio","maxWidth","maxHeight","canvas","document","blobURL","URL","image","error","reject","resolve","downscaleImageToDataURLUsingBrowser","loadImageFromBlob","keepAspectRatio","createCanvas","context"],"mappings":"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","sourcesContent":["function keepAspectRatio(width, height, maxWidth, maxHeight) {\n  if (width < maxWidth && height < maxHeight) {\n    // Photo is smaller than both maximum dimensions, take it as-is\n    return {\n      height,\n      width\n    };\n  }\n\n  const aspectRatio = width / height;\n\n  if (aspectRatio > maxWidth / maxHeight) {\n    // Photo is wider than maximum dimension, downscale it based on maxWidth.\n    return {\n      height: maxWidth / aspectRatio,\n      width: maxWidth\n    };\n  }\n\n  // Photo is taller than maximum dimension, downscale it based on maxHeight.\n  return {\n    height: maxHeight,\n    width: maxHeight * aspectRatio\n  };\n}\n\nfunction createCanvas(width, height) {\n  const canvas = document.createElement('canvas');\n\n  canvas.height = height;\n  canvas.width = width;\n\n  return canvas;\n}\n\nfunction loadImageFromBlob(blob) {\n  const blobURL = URL.createObjectURL(blob);\n\n  return new Promise((resolve, reject) => {\n    const image = document.createElement('img');\n\n    image.addEventListener('error', ({ error }) => reject(error));\n    image.addEventListener('load', () => resolve(image));\n    image.setAttribute('src', blobURL);\n  }).finally(() => {\n    URL.revokeObjectURL(blobURL);\n  });\n}\n\nexport default async function downscaleImageToDataURLUsingBrowser(blob, maxWidth, maxHeight, type, quality) {\n  const image = await loadImageFromBlob(blob);\n  const { height, width } = keepAspectRatio(image.width, image.height, maxWidth, maxHeight);\n  const canvas = createCanvas(width, height);\n  const context = canvas.getContext('2d');\n\n  context.drawImage(image, 0, 0, width, height);\n\n  return canvas.toDataURL(type, quality);\n}\n"],"sourceRoot":"component:///"},"metadata":{},"sourceType":"script"}