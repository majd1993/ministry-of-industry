{"ast":null,"code":"import _classCallCheck from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { CancellationErrorCode, OutputFormat, PropertyCollection, PropertyId, ResultReason, SpeechRecognitionCanceledEventArgs, SpeechRecognitionEventArgs, SpeechRecognitionResult } from \"../sdk/Exports\";\nimport { CancellationErrorCodePropertyName, DetailedSpeechPhrase, EnumTranslation, OutputFormatPropertyName, RecognitionStatus, ServiceRecognizerBase, SimpleSpeechPhrase, SpeechHypothesis } from \"./Exports\"; // tslint:disable-next-line:max-classes-per-file\n\nexport var SpeechServiceRecognizer = /*#__PURE__*/function (_ServiceRecognizerBas) {\n  _inherits(SpeechServiceRecognizer, _ServiceRecognizerBas);\n\n  var _super = _createSuper(SpeechServiceRecognizer);\n\n  function SpeechServiceRecognizer(authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer) {\n    var _this;\n\n    _classCallCheck(this, SpeechServiceRecognizer);\n\n    _this = _super.call(this, authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer);\n    _this.privSpeechRecognizer = speechRecognizer;\n\n    if (recognizerConfig.autoDetectSourceLanguages !== undefined) {\n      var sourceLanguages = recognizerConfig.autoDetectSourceLanguages.split(\",\");\n\n      _this.privSpeechContext.setSection(\"languageId\", {\n        languages: sourceLanguages,\n        onSuccess: {\n          action: \"Recognize\"\n        },\n        onUnknown: {\n          action: \"None\"\n        }\n      });\n\n      _this.privSpeechContext.setSection(\"phraseOutput\", {\n        interimResults: {\n          resultType: \"Auto\"\n        },\n        phraseResults: {\n          resultType: \"Always\"\n        }\n      });\n    }\n\n    return _this;\n  }\n\n  _createClass(SpeechServiceRecognizer, [{\n    key: \"processTypeSpecificMessages\",\n    value: function processTypeSpecificMessages(connectionMessage) {\n      var result;\n      var resultProps = new PropertyCollection();\n      resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\n      var processed = false;\n\n      switch (connectionMessage.path.toLowerCase()) {\n        case \"speech.hypothesis\":\n        case \"speech.fragment\":\n          var hypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\n          var offset = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\n          result = new SpeechRecognitionResult(this.privRequestSession.requestId, ResultReason.RecognizingSpeech, hypothesis.Text, hypothesis.Duration, offset, hypothesis.Language, hypothesis.LanguageDetectionConfidence, undefined, connectionMessage.textBody, resultProps);\n          this.privRequestSession.onHypothesis(offset);\n          var ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\n\n          if (!!this.privSpeechRecognizer.recognizing) {\n            try {\n              this.privSpeechRecognizer.recognizing(this.privSpeechRecognizer, ev);\n              /* tslint:disable:no-empty */\n            } catch (error) {// Not going to let errors in the event handler\n              // trip things up.\n            }\n          }\n\n          processed = true;\n          break;\n\n        case \"speech.phrase\":\n          var simple = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\n          var resultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\n          this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\n\n          if (ResultReason.Canceled === resultReason) {\n            var cancelReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\n            this.cancelRecognitionLocal(cancelReason, EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus), undefined);\n          } else {\n            if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\n              if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\n                result = new SpeechRecognitionResult(this.privRequestSession.requestId, resultReason, simple.DisplayText, simple.Duration, simple.Offset + this.privRequestSession.currentTurnAudioOffset, simple.Language, simple.LanguageDetectionConfidence, undefined, connectionMessage.textBody, resultProps);\n              } else {\n                var detailed = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\n                result = new SpeechRecognitionResult(this.privRequestSession.requestId, resultReason, detailed.RecognitionStatus === RecognitionStatus.Success ? detailed.NBest[0].Display : undefined, detailed.Duration, detailed.Offset + this.privRequestSession.currentTurnAudioOffset, detailed.Language, detailed.LanguageDetectionConfidence, undefined, connectionMessage.textBody, resultProps);\n              }\n\n              var event = new SpeechRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\n\n              if (!!this.privSpeechRecognizer.recognized) {\n                try {\n                  this.privSpeechRecognizer.recognized(this.privSpeechRecognizer, event);\n                  /* tslint:disable:no-empty */\n                } catch (error) {// Not going to let errors in the event handler\n                  // trip things up.\n                }\n              }\n            }\n\n            if (!!this.privSuccessCallback) {\n              try {\n                this.privSuccessCallback(result);\n              } catch (e) {\n                if (!!this.privErrorCallback) {\n                  this.privErrorCallback(e);\n                }\n              } // Only invoke the call back once.\n              // and if it's successful don't invoke the\n              // error after that.\n\n\n              this.privSuccessCallback = undefined;\n              this.privErrorCallback = undefined;\n            }\n          }\n\n          processed = true;\n          break;\n\n        default:\n          break;\n      }\n\n      return processed;\n    } // Cancels recognition.\n\n  }, {\n    key: \"cancelRecognition\",\n    value: function cancelRecognition(sessionId, requestId, cancellationReason, errorCode, error) {\n      var properties = new PropertyCollection();\n      properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\n\n      if (!!this.privSpeechRecognizer.canceled) {\n        var cancelEvent = new SpeechRecognitionCanceledEventArgs(cancellationReason, error, errorCode, undefined, sessionId);\n\n        try {\n          this.privSpeechRecognizer.canceled(this.privSpeechRecognizer, cancelEvent);\n          /* tslint:disable:no-empty */\n        } catch (_a) {}\n      }\n\n      if (!!this.privSuccessCallback) {\n        var result = new SpeechRecognitionResult(requestId, ResultReason.Canceled, undefined, // Text\n        undefined, // Duration\n        undefined, // Offset\n        undefined, // Language\n        undefined, // Language Detection Confidence\n        error, undefined, // Json\n        properties);\n\n        try {\n          this.privSuccessCallback(result);\n          this.privSuccessCallback = undefined;\n          /* tslint:disable:no-empty */\n        } catch (_b) {}\n      }\n    }\n  }]);\n\n  return SpeechServiceRecognizer;\n}(ServiceRecognizerBase);","map":{"version":3,"sources":["src/common.speech/SpeechServiceRecognizer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IAudioSource } from \"../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n    SpeechRecognizer,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    RequestSession,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SpeechServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    private privSpeechRecognizer: SpeechRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        speechRecognizer: SpeechRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer);\r\n        this.privSpeechRecognizer = speechRecognizer;\r\n        if (recognizerConfig.autoDetectSourceLanguages !== undefined) {\r\n            const sourceLanguages: string[] = recognizerConfig.autoDetectSourceLanguages.split(\",\");\r\n            this.privSpeechContext.setSection(\"languageId\", {\r\n                languages: sourceLanguages,\r\n                onSuccess: { action: \"Recognize\" },\r\n                onUnknown: { action: \"None\" }\r\n            });\r\n            this.privSpeechContext.setSection(\"phraseOutput\", {\r\n                interimResults: {\r\n                    resultType: \"Auto\"\r\n                },\r\n                phraseResults: {\r\n                    resultType: \"Always\"\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): boolean {\r\n\r\n        let result: SpeechRecognitionResult;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        let processed: boolean = false;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privSpeechRecognizer.recognizing) {\r\n                    try {\r\n                        this.privSpeechRecognizer.recognizing(this.privSpeechRecognizer, ev);\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\r\n\r\n                if (ResultReason.Canceled === resultReason) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n\r\n                    this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus),\r\n                        undefined);\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                simple.DisplayText,\r\n                                simple.Duration,\r\n                                simple.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                                simple.Language,\r\n                                simple.LanguageDetectionConfidence,\r\n                                undefined,\r\n                                connectionMessage.textBody,\r\n                                resultProps);\r\n                        } else {\r\n                            const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                detailed.RecognitionStatus === RecognitionStatus.Success ? detailed.NBest[0].Display : undefined,\r\n                                detailed.Duration,\r\n                                detailed.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                                detailed.Language,\r\n                                detailed.LanguageDetectionConfidence,\r\n                                undefined,\r\n                                connectionMessage.textBody,\r\n                                resultProps);\r\n                        }\r\n\r\n                        const event: SpeechRecognitionEventArgs = new SpeechRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privSpeechRecognizer.recognized) {\r\n                            try {\r\n                                this.privSpeechRecognizer.recognized(this.privSpeechRecognizer, event);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privSpeechRecognizer.canceled) {\r\n            const cancelEvent: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privSpeechRecognizer.canceled(this.privSpeechRecognizer, cancelEvent);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // Language Detection Confidence\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}