{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Exports_1 = require(\"../../common.browser/Exports\");\n\nvar Exports_2 = require(\"../../common/Exports\");\n\nvar Contracts_1 = require(\"../../sdk/Contracts\");\n\nvar Exports_3 = require(\"../../sdk/Exports\");\n\nvar ConnectionFactoryBase_1 = require(\"../ConnectionFactoryBase\");\n\nvar ConversationConnectionConfig_1 = require(\"./ConversationConnectionConfig\");\n\nvar ConversationWebsocketMessageFormatter_1 = require(\"./ConversationWebsocketMessageFormatter\");\n/**\n * Create a connection to the Conversation Translator websocket for sending instant messages and commands, and for receiving translated messages.\n * The conversation must already have been started or joined.\n */\n\n\nvar ConversationConnectionFactory =\n/** @class */\nfunction (_super) {\n  __extends(ConversationConnectionFactory, _super);\n\n  function ConversationConnectionFactory() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ConversationConnectionFactory.prototype.create = function (config, authInfo, connectionId) {\n    var endpointHost = config.parameters.getProperty(Exports_3.PropertyId.ConversationTranslator_Host, ConversationConnectionConfig_1.ConversationConnectionConfig.host);\n    var correlationId = config.parameters.getProperty(Exports_3.PropertyId.ConversationTranslator_CorrelationId, Exports_2.createGuid());\n    var endpoint = \"wss://\" + endpointHost + ConversationConnectionConfig_1.ConversationConnectionConfig.webSocketPath;\n    var token = config.parameters.getProperty(Exports_3.PropertyId.ConversationTranslator_Token, undefined);\n    Contracts_1.Contracts.throwIfNullOrUndefined(token, \"token\");\n    var queryParams = {};\n    queryParams[ConversationConnectionConfig_1.ConversationConnectionConfig.configParams.apiVersion] = ConversationConnectionConfig_1.ConversationConnectionConfig.apiVersion;\n    queryParams[ConversationConnectionConfig_1.ConversationConnectionConfig.configParams.token] = token;\n    queryParams[ConversationConnectionConfig_1.ConversationConnectionConfig.configParams.correlationId] = correlationId;\n    return new Exports_1.WebsocketConnection(endpoint, queryParams, {}, new ConversationWebsocketMessageFormatter_1.ConversationWebsocketMessageFormatter(), Exports_1.ProxyInfo.fromRecognizerConfig(config), connectionId);\n  };\n\n  return ConversationConnectionFactory;\n}(ConnectionFactoryBase_1.ConnectionFactoryBase);\n\nexports.ConversationConnectionFactory = ConversationConnectionFactory;","map":{"version":3,"sources":["src/common.speech/Transcription/ConversationConnectionFactory.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAA,SAAA,GAAA,OAAA,CAAA,8BAAA,CAAA;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AACA,IAAA,uBAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;;AAEA,IAAA,8BAAA,GAAA,OAAA,CAAA,gCAAA,CAAA;;AACA,IAAA,uCAAA,GAAA,OAAA,CAAA,yCAAA,CAAA;AAEA;;;AAGG;;;AACH,IAAA,6BAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAmD,EAAA,SAAA,CAAA,6BAAA,EAAA,MAAA,CAAA;;AAAnD,WAAA,6BAAA,GAAA;;AAkBC;;AAhBU,EAAA,6BAAA,CAAA,SAAA,CAAA,MAAA,GAAP,UAAc,MAAd,EAAwC,QAAxC,EAA4D,YAA5D,EAAiF;AAE7E,QAAM,YAAY,GAAW,MAAM,CAAC,UAAP,CAAkB,WAAlB,CAA8B,SAAA,CAAA,UAAA,CAAW,2BAAzC,EAAsE,8BAAA,CAAA,4BAAA,CAA6B,IAAnG,CAA7B;AACA,QAAM,aAAa,GAAW,MAAM,CAAC,UAAP,CAAkB,WAAlB,CAA8B,SAAA,CAAA,UAAA,CAAW,oCAAzC,EAA+E,SAAA,CAAA,UAAA,EAA/E,CAA9B;AAEA,QAAM,QAAQ,GAAW,WAAS,YAAT,GAAwB,8BAAA,CAAA,4BAAA,CAA6B,aAA9E;AACA,QAAM,KAAK,GAAW,MAAM,CAAC,UAAP,CAAkB,WAAlB,CAA8B,SAAA,CAAA,UAAA,CAAW,4BAAzC,EAAuE,SAAvE,CAAtB;AACA,IAAA,WAAA,CAAA,SAAA,CAAU,sBAAV,CAAiC,KAAjC,EAAwC,OAAxC;AAEA,QAAM,WAAW,GAA8B,EAA/C;AACA,IAAA,WAAW,CAAC,8BAAA,CAAA,4BAAA,CAA6B,YAA7B,CAA0C,UAA3C,CAAX,GAAoE,8BAAA,CAAA,4BAAA,CAA6B,UAAjG;AACA,IAAA,WAAW,CAAC,8BAAA,CAAA,4BAAA,CAA6B,YAA7B,CAA0C,KAA3C,CAAX,GAA+D,KAA/D;AACA,IAAA,WAAW,CAAC,8BAAA,CAAA,4BAAA,CAA6B,YAA7B,CAA0C,aAA3C,CAAX,GAAuE,aAAvE;AACA,WAAO,IAAI,SAAA,CAAA,mBAAJ,CAAwB,QAAxB,EAAkC,WAAlC,EAA+C,EAA/C,EAAmD,IAAI,uCAAA,CAAA,qCAAJ,EAAnD,EAAgG,SAAA,CAAA,SAAA,CAAU,oBAAV,CAA+B,MAA/B,CAAhG,EAAwI,YAAxI,CAAP;AACH,GAdM;;AAgBX,SAAA,6BAAA;AAAC,CAlBD,CAAmD,uBAAA,CAAA,qBAAnD,CAAA;;AAAa,OAAA,CAAA,6BAAA,GAAA,6BAAA","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ProxyInfo, WebsocketConnection } from \"../../common.browser/Exports\";\r\nimport { createGuid, IConnection, IStringDictionary } from \"../../common/Exports\";\r\nimport { Contracts } from \"../../sdk/Contracts\";\r\nimport { PropertyId } from \"../../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"../ConnectionFactoryBase\";\r\nimport { AuthInfo, RecognizerConfig } from \"../Exports\";\r\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig\";\r\nimport { ConversationWebsocketMessageFormatter } from \"./ConversationWebsocketMessageFormatter\";\r\n\r\n/**\r\n * Create a connection to the Conversation Translator websocket for sending instant messages and commands, and for receiving translated messages.\r\n * The conversation must already have been started or joined.\r\n */\r\nexport class ConversationConnectionFactory extends ConnectionFactoryBase  {\r\n\r\n    public create(config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n\r\n        const endpointHost: string = config.parameters.getProperty(PropertyId.ConversationTranslator_Host, ConversationConnectionConfig.host);\r\n        const correlationId: string = config.parameters.getProperty(PropertyId.ConversationTranslator_CorrelationId, createGuid());\r\n\r\n        const endpoint: string = `wss://${endpointHost}${ConversationConnectionConfig.webSocketPath}`;\r\n        const token: string = config.parameters.getProperty(PropertyId.ConversationTranslator_Token, undefined);\r\n        Contracts.throwIfNullOrUndefined(token, \"token\");\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        queryParams[ConversationConnectionConfig.configParams.apiVersion] = ConversationConnectionConfig.apiVersion;\r\n        queryParams[ConversationConnectionConfig.configParams.token] = token;\r\n        queryParams[ConversationConnectionConfig.configParams.correlationId] = correlationId;\r\n        return new WebsocketConnection(endpoint, queryParams, {}, new ConversationWebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), connectionId);\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"script"}