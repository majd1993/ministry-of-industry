{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Exports_1 = require(\"../common.browser/Exports\");\n\nvar Exports_2 = require(\"../sdk/Exports\");\n\nvar ConnectionFactoryBase_1 = require(\"./ConnectionFactoryBase\");\n\nvar Exports_3 = require(\"./Exports\");\n\nvar QueryParameterNames_1 = require(\"./QueryParameterNames\");\n\nvar baseUrl = \"convai.speech\";\nvar botFramework = {\n  authHeader: \"X-DLS-Secret\",\n  resourcePath: \"\",\n  version: \"v3\"\n};\nvar customCommands = {\n  authHeader: \"X-CommandsAppId\",\n  resourcePath: \"commands\",\n  version: \"v1\"\n};\nvar pathSuffix = \"api\";\n\nfunction getDialogSpecificValues(dialogType) {\n  switch (dialogType) {\n    case \"custom_commands\":\n      {\n        return customCommands;\n      }\n\n    case \"bot_framework\":\n      {\n        return botFramework;\n      }\n  }\n\n  throw new Error(\"Invalid dialog type '\" + dialogType + \"'\");\n}\n\nvar DialogConnectionFactory =\n/** @class */\nfunction (_super) {\n  __extends(DialogConnectionFactory, _super);\n\n  function DialogConnectionFactory() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.create = function (config, authInfo, connectionId) {\n      var applicationId = config.parameters.getProperty(Exports_2.PropertyId.Conversation_ApplicationId, \"\");\n      var dialogType = config.parameters.getProperty(Exports_2.PropertyId.Conversation_DialogType);\n      var region = config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_Region);\n      var language = config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_RecoLanguage, \"en-US\");\n      var queryParams = {};\n      queryParams[QueryParameterNames_1.QueryParameterNames.LanguageParamName] = language;\n      queryParams[QueryParameterNames_1.QueryParameterNames.FormatParamName] = config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceResponse_OutputFormatOption, Exports_2.OutputFormat[Exports_2.OutputFormat.Simple]).toLowerCase();\n\n      var _a = getDialogSpecificValues(dialogType),\n          resourcePath = _a.resourcePath,\n          version = _a.version,\n          authHeader = _a.authHeader;\n\n      var headers = {};\n\n      if (authInfo.token != null && authInfo.token !== \"\") {\n        headers[authInfo.headerName] = authInfo.token;\n      }\n\n      headers[QueryParameterNames_1.QueryParameterNames.ConnectionIdHeader] = connectionId;\n\n      if (applicationId !== \"\") {\n        headers[authHeader] = applicationId;\n      }\n\n      var endpoint = config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_Endpoint, \"\");\n\n      if (endpoint === \"\") {\n        var hostSuffix = region && region.toLowerCase().startsWith(\"china\") ? \".azure.cn\" : \".microsoft.com\"; // ApplicationId is only required for CustomCommands, so we're using that to determine default endpoint\n\n        if (applicationId === \"\") {\n          endpoint = \"wss://\" + region + \".\" + baseUrl + hostSuffix + \"/\" + pathSuffix + \"/\" + version;\n        } else {\n          endpoint = \"wss://\" + region + \".\" + baseUrl + hostSuffix + \"/\" + resourcePath + \"/\" + pathSuffix + \"/\" + version;\n        }\n      }\n\n      _this.setCommonUrlParams(config, queryParams, endpoint);\n\n      return new Exports_1.WebsocketConnection(endpoint, queryParams, headers, new Exports_3.WebsocketMessageFormatter(), Exports_1.ProxyInfo.fromRecognizerConfig(config), connectionId);\n    };\n\n    return _this;\n  }\n\n  return DialogConnectionFactory;\n}(ConnectionFactoryBase_1.ConnectionFactoryBase);\n\nexports.DialogConnectionFactory = DialogConnectionFactory;","map":{"version":3,"sources":["src/common.speech/DialogConnectorFactory.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport { OutputFormatPropertyName } from \"../common.speech/Exports\";\r\nimport { IConnection, IStringDictionary } from \"../common/Exports\";\r\nimport { OutputFormat, PropertyId } from \"../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\r\nimport { AuthInfo, RecognizerConfig, WebsocketMessageFormatter } from \"./Exports\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames\";\r\n\r\nconst baseUrl: string = \"convai.speech\";\r\n\r\ninterface IBackendValues {\r\n    authHeader: string;\r\n    resourcePath: string;\r\n    version: string;\r\n}\r\n\r\nconst botFramework: IBackendValues = {\r\n    authHeader: \"X-DLS-Secret\",\r\n    resourcePath: \"\",\r\n    version: \"v3\"\r\n};\r\n\r\nconst customCommands: IBackendValues = {\r\n    authHeader: \"X-CommandsAppId\",\r\n    resourcePath: \"commands\",\r\n    version: \"v1\"\r\n};\r\n\r\nconst pathSuffix: string = \"api\";\r\n\r\nfunction getDialogSpecificValues(dialogType: string): IBackendValues {\r\n    switch (dialogType) {\r\n        case \"custom_commands\": {\r\n            return customCommands;\r\n        }\r\n        case \"bot_framework\": {\r\n            return botFramework;\r\n        }\r\n    }\r\n    throw new Error(`Invalid dialog type '${dialogType}'`);\r\n}\r\n\r\nexport class DialogConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    public create = (\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection => {\r\n\r\n        const applicationId: string = config.parameters.getProperty(PropertyId.Conversation_ApplicationId, \"\");\r\n        const dialogType: string = config.parameters.getProperty(PropertyId.Conversation_DialogType);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-US\");\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        queryParams[QueryParameterNames.LanguageParamName] = language;\r\n        queryParams[QueryParameterNames.FormatParamName] = config.parameters.getProperty(PropertyId.SpeechServiceResponse_OutputFormatOption, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n\r\n        const {resourcePath, version, authHeader} = getDialogSpecificValues(dialogType);\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (authInfo.token != null && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[QueryParameterNames.ConnectionIdHeader] = connectionId;\r\n\r\n        if (applicationId !== \"\") {\r\n            headers[authHeader] = applicationId;\r\n        }\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, \"\");\r\n        if (endpoint === \"\") {\r\n            const hostSuffix = (region && region.toLowerCase().startsWith(\"china\")) ? \".azure.cn\" : \".microsoft.com\";\r\n            // ApplicationId is only required for CustomCommands, so we're using that to determine default endpoint\r\n            if (applicationId === \"\") {\r\n                endpoint = `wss://${region}.${baseUrl}${hostSuffix}/${pathSuffix}/${version}`;\r\n            } else {\r\n                endpoint = `wss://${region}.${baseUrl}${hostSuffix}/${resourcePath}/${pathSuffix}/${version}`;\r\n            }\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), connectionId);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}