{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Contracts_1 = require(\"./Contracts\");\n/**\n * Represents a keyword recognition model for recognizing when\n * the user says a keyword to initiate further speech recognition.\n * @class KeywordRecognitionModel\n */\n\n\nvar KeywordRecognitionModel =\n/** @class */\nfunction () {\n  /**\n   * Create and initializes a new instance.\n   * @constructor\n   */\n  function KeywordRecognitionModel() {\n    this.privDisposed = false;\n  }\n  /**\n   * Creates a keyword recognition model using the specified filename.\n   * @member KeywordRecognitionModel.fromFile\n   * @function\n   * @public\n   * @param {string} fileName - A string that represents file name for the keyword recognition model.\n   *        Note, the file can point to a zip file in which case the model\n   *        will be extracted from the zip.\n   * @returns {KeywordRecognitionModel} The keyword recognition model being created.\n   */\n\n\n  KeywordRecognitionModel.fromFile = function (fileName) {\n    Contracts_1.Contracts.throwIfFileDoesNotExist(fileName, \"fileName\");\n    throw new Error(\"Not yet implemented.\");\n  };\n  /**\n   * Creates a keyword recognition model using the specified filename.\n   * @member KeywordRecognitionModel.fromStream\n   * @function\n   * @public\n   * @param {string} file - A File that represents file for the keyword recognition model.\n   *        Note, the file can point to a zip file in which case the model will be extracted from the zip.\n   * @returns {KeywordRecognitionModel} The keyword recognition model being created.\n   */\n\n\n  KeywordRecognitionModel.fromStream = function (file) {\n    Contracts_1.Contracts.throwIfNull(file, \"file\");\n    throw new Error(\"Not yet implemented.\");\n  };\n  /**\n   * Dispose of associated resources.\n   * @member KeywordRecognitionModel.prototype.close\n   * @function\n   * @public\n   */\n\n\n  KeywordRecognitionModel.prototype.close = function () {\n    if (this.privDisposed) {\n      return;\n    }\n\n    this.privDisposed = true;\n  };\n\n  return KeywordRecognitionModel;\n}();\n\nexports.KeywordRecognitionModel = KeywordRecognitionModel;","map":{"version":3,"sources":["src/sdk/KeywordRecognitionModel.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;AAEA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AAEA;;;;AAIG;;;AACH,IAAA,uBAAA;AAAA;AAAA,YAAA;AAGI;;;AAGG;AACH,WAAA,uBAAA,GAAA;AANQ,SAAA,YAAA,GAAwB,KAAxB;AAOP;AAED;;;;;;;;;AASG;;;AACW,EAAA,uBAAA,CAAA,QAAA,GAAd,UAAuB,QAAvB,EAAuC;AACnC,IAAA,WAAA,CAAA,SAAA,CAAU,uBAAV,CAAkC,QAAlC,EAA4C,UAA5C;AAEA,UAAM,IAAI,KAAJ,CAAU,sBAAV,CAAN;AACH,GAJa;AAMd;;;;;;;;AAQG;;;AACW,EAAA,uBAAA,CAAA,UAAA,GAAd,UAAyB,IAAzB,EAAmC;AAC/B,IAAA,WAAA,CAAA,SAAA,CAAU,WAAV,CAAsB,IAAtB,EAA4B,MAA5B;AAEA,UAAM,IAAI,KAAJ,CAAU,sBAAV,CAAN;AACH,GAJa;AAMd;;;;;AAKG;;;AACI,EAAA,uBAAA,CAAA,SAAA,CAAA,KAAA,GAAP,YAAA;AACI,QAAI,KAAK,YAAT,EAAuB;AACnB;AACH;;AAED,SAAK,YAAL,GAAoB,IAApB;AACH,GANM;;AAOX,SAAA,uBAAA;AAAC,CAtDD,EAAA;;AAAa,OAAA,CAAA,uBAAA,GAAA,uBAAA","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\n\r\n/**\r\n * Represents a keyword recognition model for recognizing when\r\n * the user says a keyword to initiate further speech recognition.\r\n * @class KeywordRecognitionModel\r\n */\r\nexport class KeywordRecognitionModel {\r\n    private privDisposed: boolean = false;\r\n\r\n    /**\r\n     * Create and initializes a new instance.\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n    }\r\n\r\n    /**\r\n     * Creates a keyword recognition model using the specified filename.\r\n     * @member KeywordRecognitionModel.fromFile\r\n     * @function\r\n     * @public\r\n     * @param {string} fileName - A string that represents file name for the keyword recognition model.\r\n     *        Note, the file can point to a zip file in which case the model\r\n     *        will be extracted from the zip.\r\n     * @returns {KeywordRecognitionModel} The keyword recognition model being created.\r\n     */\r\n    public static fromFile(fileName: string): KeywordRecognitionModel {\r\n        Contracts.throwIfFileDoesNotExist(fileName, \"fileName\");\r\n\r\n        throw new Error(\"Not yet implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Creates a keyword recognition model using the specified filename.\r\n     * @member KeywordRecognitionModel.fromStream\r\n     * @function\r\n     * @public\r\n     * @param {string} file - A File that represents file for the keyword recognition model.\r\n     *        Note, the file can point to a zip file in which case the model will be extracted from the zip.\r\n     * @returns {KeywordRecognitionModel} The keyword recognition model being created.\r\n     */\r\n    public static fromStream(file: File): KeywordRecognitionModel {\r\n        Contracts.throwIfNull(file, \"file\");\r\n\r\n        throw new Error(\"Not yet implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member KeywordRecognitionModel.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposed = true;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}