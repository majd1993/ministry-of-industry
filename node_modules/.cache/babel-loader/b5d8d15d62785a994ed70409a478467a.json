{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @module botframework-streaming\n */\n\n/**\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nvar httpContentStream_1 = require(\"./httpContentStream\");\n\nvar subscribableStream_1 = require(\"./subscribableStream\");\n\nvar StreamingResponse =\n/** @class */\nfunction () {\n  function StreamingResponse() {\n    this.streams = [];\n  }\n  /**\n   * Creates a streaming response with the passed in method, path, and body.\n   *\n   * @param statusCode The HTTP verb to use for this request.\n   * @param body Optional body containing additional information.\n   * @returns A streaming response with the appropriate statuscode and passed in body.\n   */\n\n\n  StreamingResponse.create = function (statusCode, body) {\n    var response = new StreamingResponse();\n    response.statusCode = statusCode;\n\n    if (body) {\n      response.addStream(body);\n    }\n\n    return response;\n  };\n  /**\n   * Adds a new stream attachment to this streaming request.\n   *\n   * @param content The Http content to include in the new stream attachment.\n   */\n\n\n  StreamingResponse.prototype.addStream = function (content) {\n    this.streams.push(new httpContentStream_1.HttpContentStream(content));\n  };\n  /**\n   * Sets the contents of the body of this streaming response.\n   *\n   * @param body The JSON text to write to the body of the streaming response.\n   */\n\n\n  StreamingResponse.prototype.setBody = function (body) {\n    var stream = new subscribableStream_1.SubscribableStream();\n    stream.write(JSON.stringify(body), 'utf8');\n    this.addStream(new httpContentStream_1.HttpContent({\n      type: 'application/json; charset=utf-8',\n      contentLength: stream.length\n    }, stream));\n  };\n\n  return StreamingResponse;\n}();\n\nexports.StreamingResponse = StreamingResponse;","map":{"version":3,"sources":["../src/streamingResponse.ts"],"names":[],"mappings":";;;;;AAAA;;AAEG;;AACH;;;AAGG;;AACH,IAAA,mBAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AACA,IAAA,oBAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AAEA,IAAA,iBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,iBAAA,GAAA;AAEW,SAAA,OAAA,GAA+B,EAA/B;AAyCV;AAvCG;;;;;;AAMG;;;AACW,EAAA,iBAAA,CAAA,MAAA,GAAd,UAAqB,UAArB,EAAyC,IAAzC,EAA2D;AACvD,QAAI,QAAQ,GAAG,IAAI,iBAAJ,EAAf;AACA,IAAA,QAAQ,CAAC,UAAT,GAAsB,UAAtB;;AACA,QAAI,IAAJ,EAAU;AACN,MAAA,QAAQ,CAAC,SAAT,CAAmB,IAAnB;AACH;;AAED,WAAO,QAAP;AACH,GARa;AAUd;;;;AAIG;;;AACI,EAAA,iBAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,OAAjB,EAAqC;AACjC,SAAK,OAAL,CAAa,IAAb,CAAkB,IAAI,mBAAA,CAAA,iBAAJ,CAAsB,OAAtB,CAAlB;AACH,GAFM;AAIP;;;;AAIG;;;AACI,EAAA,iBAAA,CAAA,SAAA,CAAA,OAAA,GAAP,UAAe,IAAf,EAAwB;AACpB,QAAI,MAAM,GAAG,IAAI,oBAAA,CAAA,kBAAJ,EAAb;AACA,IAAA,MAAM,CAAC,KAAP,CAAa,IAAI,CAAC,SAAL,CAAe,IAAf,CAAb,EAAmC,MAAnC;AACA,SAAK,SAAL,CAAe,IAAI,mBAAA,CAAA,WAAJ,CAAgB;AAC3B,MAAA,IAAI,EAAE,iCADqB;AAE3B,MAAA,aAAa,EAAE,MAAM,CAAC;AAFK,KAAhB,EAGZ,MAHY,CAAf;AAIH,GAPM;;AAQX,SAAA,iBAAA;AAAC,CA3CD,EAAA;;AAAa,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @module botframework-streaming\n */\n/**\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nvar httpContentStream_1 = require(\"./httpContentStream\");\nvar subscribableStream_1 = require(\"./subscribableStream\");\nvar StreamingResponse = /** @class */ (function () {\n    function StreamingResponse() {\n        this.streams = [];\n    }\n    /**\n     * Creates a streaming response with the passed in method, path, and body.\n     *\n     * @param statusCode The HTTP verb to use for this request.\n     * @param body Optional body containing additional information.\n     * @returns A streaming response with the appropriate statuscode and passed in body.\n     */\n    StreamingResponse.create = function (statusCode, body) {\n        var response = new StreamingResponse();\n        response.statusCode = statusCode;\n        if (body) {\n            response.addStream(body);\n        }\n        return response;\n    };\n    /**\n     * Adds a new stream attachment to this streaming request.\n     *\n     * @param content The Http content to include in the new stream attachment.\n     */\n    StreamingResponse.prototype.addStream = function (content) {\n        this.streams.push(new httpContentStream_1.HttpContentStream(content));\n    };\n    /**\n     * Sets the contents of the body of this streaming response.\n     *\n     * @param body The JSON text to write to the body of the streaming response.\n     */\n    StreamingResponse.prototype.setBody = function (body) {\n        var stream = new subscribableStream_1.SubscribableStream();\n        stream.write(JSON.stringify(body), 'utf8');\n        this.addStream(new httpContentStream_1.HttpContent({\n            type: 'application/json; charset=utf-8',\n            contentLength: stream.length\n        }, stream));\n    };\n    return StreamingResponse;\n}());\nexports.StreamingResponse = StreamingResponse;\n//# sourceMappingURL=streamingResponse.js.map"]},"metadata":{},"sourceType":"script"}