{"ast":null,"code":"import _classCallCheck from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { AutoDetectSourceLanguagesOpenRangeOptionName } from \"../common.speech/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport { PropertyCollection, PropertyId } from \"./Exports\";\n/**\n * Language auto detect configuration.\n * @class AutoDetectSourceLanguageConfig\n * Added in version 1.13.0.\n */\n\nexport var AutoDetectSourceLanguageConfig = /*#__PURE__*/function () {\n  function AutoDetectSourceLanguageConfig() {\n    _classCallCheck(this, AutoDetectSourceLanguageConfig);\n\n    this.privProperties = new PropertyCollection();\n  }\n  /**\n   * @member AutoDetectSourceLanguageConfig.fromOpenRange\n   * @function\n   * @public\n   * Only [[SpeechSynthesizer]] supports source language auto detection from open range,\n   * for [[Recognizer]], please use AutoDetectSourceLanguageConfig with specific source languages.\n   * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\n   * @summary Creates an instance of the AutoDetectSourceLanguageConfig with open range.\n   */\n\n\n  _createClass(AutoDetectSourceLanguageConfig, [{\n    key: \"properties\",\n    get:\n    /**\n     * @member AutoDetectSourceLanguageConfig.prototype.properties\n     * @function\n     * @public\n     * @return {PropertyCollection} Properties of the config.\n     * @summary Gets a auto detected language config properties\n     */\n    function get() {\n      return this.privProperties;\n    }\n  }], [{\n    key: \"fromOpenRange\",\n    value: function fromOpenRange() {\n      var config = new AutoDetectSourceLanguageConfig();\n      config.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, AutoDetectSourceLanguagesOpenRangeOptionName);\n      return config;\n    }\n    /**\n     * @member AutoDetectSourceLanguageConfig.fromLanguages\n     * @function\n     * @public\n     * @param {string[]} languages Comma-separated string of languages (eg. \"en-US,fr-FR\") to populate properties of config.\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given languages.\n     */\n\n  }, {\n    key: \"fromLanguages\",\n    value: function fromLanguages(languages) {\n      Contracts.throwIfArrayEmptyOrWhitespace(languages, \"languages\");\n      var config = new AutoDetectSourceLanguageConfig();\n      config.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, languages.join());\n      return config;\n    }\n    /**\n     * @member AutoDetectSourceLanguageConfig.fromSourceLanguageConfigs\n     * @function\n     * @public\n     * @param {SourceLanguageConfig[]} configs SourceLanguageConfigs to populate properties of config.\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given SourceLanguageConfigs.\n     */\n\n  }, {\n    key: \"fromSourceLanguageConfigs\",\n    value: function fromSourceLanguageConfigs(configs) {\n      if (configs.length < 1) {\n        throw new Error(\"Expected non-empty SourceLanguageConfig array.\");\n      }\n\n      var autoConfig = new AutoDetectSourceLanguageConfig();\n      var langs = [];\n      configs.forEach(function (config) {\n        langs.push(config.language);\n\n        if (config.endpointId !== undefined && config.endpointId !== \"\") {\n          var customProperty = config.language + PropertyId.SpeechServiceConnection_EndpointId.toString();\n          autoConfig.properties.setProperty(customProperty, config.endpointId);\n        }\n      });\n      autoConfig.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, langs.join());\n      return autoConfig;\n    }\n  }]);\n\n  return AutoDetectSourceLanguageConfig;\n}();","map":{"version":3,"sources":["src/sdk/AutoDetectSourceLanguageConfig.ts"],"names":[],"mappings":";;AAAA;AACA;AAEA,SAAS,4CAAT,QAA6D,0BAA7D;AACA,SAAQ,SAAR,QAAwB,aAAxB;AACA,SACI,kBADJ,EAEI,UAFJ,QAIO,WAJP;AAMA;;;;AAIG;;AACH,WAAa,8BAAb;AAGI,4CAAA;AAAA;;AACI,SAAK,cAAL,GAAsB,IAAI,kBAAJ,EAAtB;AACH;AAED;;;;;;;;AAQG;;;AAfP;AAAA;AAAA;AA+DI;;;;;;AAMG;AACH,mBAAqB;AACjB,aAAO,KAAK,cAAZ;AACH;AAxEL;AAAA;AAAA,WAgBW,yBAAoB;AACvB,UAAM,MAAM,GAAG,IAAI,8BAAJ,EAAf;AACA,MAAA,MAAM,CAAC,UAAP,CAAkB,WAAlB,CAA8B,UAAU,CAAC,iDAAzC,EAA4F,4CAA5F;AACA,aAAO,MAAP;AACH;AAED;;;;;;;AAOG;;AA7BP;AAAA;AAAA,WA8BW,uBAAqB,SAArB,EAAwC;AAC3C,MAAA,SAAS,CAAC,6BAAV,CAAwC,SAAxC,EAAmD,WAAnD;AACA,UAAM,MAAM,GAAG,IAAI,8BAAJ,EAAf;AACA,MAAA,MAAM,CAAC,UAAP,CAAkB,WAAlB,CAA8B,UAAU,CAAC,iDAAzC,EAA4F,SAAS,CAAC,IAAV,EAA5F;AACA,aAAO,MAAP;AACH;AAED;;;;;;;AAOG;;AA5CP;AAAA;AAAA,WA6CW,mCAAiC,OAAjC,EAAgE;AACnE,UAAI,OAAO,CAAC,MAAR,GAAiB,CAArB,EAAwB;AACpB,cAAM,IAAI,KAAJ,CAAU,gDAAV,CAAN;AACH;;AACD,UAAM,UAAU,GAAG,IAAI,8BAAJ,EAAnB;AACA,UAAM,KAAK,GAAa,EAAxB;AACA,MAAA,OAAO,CAAC,OAAR,CAAgB,UAAC,MAAD,EAAiC;AAC7C,QAAA,KAAK,CAAC,IAAN,CAAW,MAAM,CAAC,QAAlB;;AACA,YAAI,MAAM,CAAC,UAAP,KAAsB,SAAtB,IAAmC,MAAM,CAAC,UAAP,KAAsB,EAA7D,EAAiE;AAC7D,cAAM,cAAc,GAAG,MAAM,CAAC,QAAP,GAAkB,UAAU,CAAC,kCAAX,CAA8C,QAA9C,EAAzC;AACA,UAAA,UAAU,CAAC,UAAX,CAAsB,WAAtB,CAAkC,cAAlC,EAAkD,MAAM,CAAC,UAAzD;AACH;AACJ,OAND;AAOA,MAAA,UAAU,CAAC,UAAX,CAAsB,WAAtB,CAAkC,UAAU,CAAC,iDAA7C,EAAgG,KAAK,CAAC,IAAN,EAAhG;AAEA,aAAO,UAAP;AACH;AA7DL;;AAAA;AAAA","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AutoDetectSourceLanguagesOpenRangeOptionName } from \"../common.speech/Exports\";\r\nimport {Contracts} from \"./Contracts\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SourceLanguageConfig,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Language auto detect configuration.\r\n * @class AutoDetectSourceLanguageConfig\r\n * Added in version 1.13.0.\r\n */\r\nexport class AutoDetectSourceLanguageConfig {\r\n    private privProperties: PropertyCollection;\r\n\r\n    private constructor() {\r\n        this.privProperties = new PropertyCollection();\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromOpenRange\r\n     * @function\r\n     * @public\r\n     * Only [[SpeechSynthesizer]] supports source language auto detection from open range,\r\n     * for [[Recognizer]], please use AutoDetectSourceLanguageConfig with specific source languages.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with open range.\r\n     */\r\n    public static fromOpenRange(): AutoDetectSourceLanguageConfig {\r\n        const config = new AutoDetectSourceLanguageConfig();\r\n        config.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, AutoDetectSourceLanguagesOpenRangeOptionName);\r\n        return config;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string[]} languages Comma-separated string of languages (eg. \"en-US,fr-FR\") to populate properties of config.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given languages.\r\n     */\r\n    public static fromLanguages(languages: string[]): AutoDetectSourceLanguageConfig {\r\n        Contracts.throwIfArrayEmptyOrWhitespace(languages, \"languages\");\r\n        const config = new AutoDetectSourceLanguageConfig();\r\n        config.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, languages.join());\r\n        return config;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromSourceLanguageConfigs\r\n     * @function\r\n     * @public\r\n     * @param {SourceLanguageConfig[]} configs SourceLanguageConfigs to populate properties of config.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given SourceLanguageConfigs.\r\n     */\r\n    public static fromSourceLanguageConfigs(configs: SourceLanguageConfig[]): AutoDetectSourceLanguageConfig {\r\n        if (configs.length < 1) {\r\n            throw new Error(\"Expected non-empty SourceLanguageConfig array.\");\r\n        }\r\n        const autoConfig = new AutoDetectSourceLanguageConfig();\r\n        const langs: string[] = [];\r\n        configs.forEach((config: SourceLanguageConfig) => {\r\n            langs.push(config.language);\r\n            if (config.endpointId !== undefined && config.endpointId !== \"\") {\r\n                const customProperty = config.language + PropertyId.SpeechServiceConnection_EndpointId.toString();\r\n                autoConfig.properties.setProperty(customProperty, config.endpointId);\r\n            }\r\n        });\r\n        autoConfig.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, langs.join());\r\n\r\n        return autoConfig;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @return {PropertyCollection} Properties of the config.\r\n     * @summary Gets a auto detected language config properties\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}