{"ast":null,"code":"'use strict';\n\nmodule.exports = orderedItems;\nvar lineFeed = '\\n';\nvar dot = '.';\nvar blank = lineFeed + lineFeed; // Visit ordered list items.\n//\n// Starts the list with\n// `node.start` and increments each following list item\n// bullet by one:\n//\n//     2. foo\n//     3. bar\n//\n// In `incrementListMarker: false` mode, does not increment\n// each marker and stays on `node.start`:\n//\n//     1. foo\n//     1. bar\n\nfunction orderedItems(node) {\n  var self = this;\n  var fn = self.visitors.listItem;\n  var increment = self.options.incrementListMarker;\n  var values = [];\n  var start = node.start;\n  var children = node.children;\n  var length = children.length;\n  var index = -1;\n  var bullet;\n  start = start == null ? 1 : start;\n\n  while (++index < length) {\n    bullet = (increment ? start + index : start) + dot;\n    values[index] = fn.call(self, children[index], node, index, bullet);\n  }\n\n  return values.join(node.spread ? blank : lineFeed);\n}","map":{"version":3,"sources":["/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/remark-stringify/lib/macro/ordered-items.js"],"names":["module","exports","orderedItems","lineFeed","dot","blank","node","self","fn","visitors","listItem","increment","options","incrementListMarker","values","start","children","length","index","bullet","call","join","spread"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,YAAjB;AAEA,IAAIC,QAAQ,GAAG,IAAf;AACA,IAAIC,GAAG,GAAG,GAAV;AAEA,IAAIC,KAAK,GAAGF,QAAQ,GAAGA,QAAvB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,YAAT,CAAsBI,IAAtB,EAA4B;AAC1B,MAAIC,IAAI,GAAG,IAAX;AACA,MAAIC,EAAE,GAAGD,IAAI,CAACE,QAAL,CAAcC,QAAvB;AACA,MAAIC,SAAS,GAAGJ,IAAI,CAACK,OAAL,CAAaC,mBAA7B;AACA,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,KAAK,GAAGT,IAAI,CAACS,KAAjB;AACA,MAAIC,QAAQ,GAAGV,IAAI,CAACU,QAApB;AACA,MAAIC,MAAM,GAAGD,QAAQ,CAACC,MAAtB;AACA,MAAIC,KAAK,GAAG,CAAC,CAAb;AACA,MAAIC,MAAJ;AAEAJ,EAAAA,KAAK,GAAGA,KAAK,IAAI,IAAT,GAAgB,CAAhB,GAAoBA,KAA5B;;AAEA,SAAO,EAAEG,KAAF,GAAUD,MAAjB,EAAyB;AACvBE,IAAAA,MAAM,GAAG,CAACR,SAAS,GAAGI,KAAK,GAAGG,KAAX,GAAmBH,KAA7B,IAAsCX,GAA/C;AACAU,IAAAA,MAAM,CAACI,KAAD,CAAN,GAAgBV,EAAE,CAACY,IAAH,CAAQb,IAAR,EAAcS,QAAQ,CAACE,KAAD,CAAtB,EAA+BZ,IAA/B,EAAqCY,KAArC,EAA4CC,MAA5C,CAAhB;AACD;;AAED,SAAOL,MAAM,CAACO,IAAP,CAAYf,IAAI,CAACgB,MAAL,GAAcjB,KAAd,GAAsBF,QAAlC,CAAP;AACD","sourcesContent":["'use strict'\n\nmodule.exports = orderedItems\n\nvar lineFeed = '\\n'\nvar dot = '.'\n\nvar blank = lineFeed + lineFeed\n\n// Visit ordered list items.\n//\n// Starts the list with\n// `node.start` and increments each following list item\n// bullet by one:\n//\n//     2. foo\n//     3. bar\n//\n// In `incrementListMarker: false` mode, does not increment\n// each marker and stays on `node.start`:\n//\n//     1. foo\n//     1. bar\nfunction orderedItems(node) {\n  var self = this\n  var fn = self.visitors.listItem\n  var increment = self.options.incrementListMarker\n  var values = []\n  var start = node.start\n  var children = node.children\n  var length = children.length\n  var index = -1\n  var bullet\n\n  start = start == null ? 1 : start\n\n  while (++index < length) {\n    bullet = (increment ? start + index : start) + dot\n    values[index] = fn.call(self, children[index], node, index, bullet)\n  }\n\n  return values.join(node.spread ? blank : lineFeed)\n}\n"]},"metadata":{},"sourceType":"script"}