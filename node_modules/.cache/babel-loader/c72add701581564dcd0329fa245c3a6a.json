{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useTimePassed;\n\nvar _react = require(\"react\");\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n} // Returns true if Date.now() > at, otherwise, false.\n// If Date.now() does not meet \"at\" yet, will trigger a refresh when Date.now() meet \"at\".\n\n\nfunction useTimePassed(timeAt) {\n  var now = Date.now();\n\n  var _useState = (0, _react.useState)(),\n      _useState2 = _slicedToArray(_useState, 2),\n      _ = _useState2[0],\n      setDummy = _useState2[1];\n\n  var passed = now >= timeAt;\n  (0, _react.useEffect)(function () {\n    if (!passed) {\n      var timeout = setTimeout(function () {\n        return setDummy({});\n      }, Math.max(0, timeAt - now));\n      return function () {\n        return clearTimeout(timeout);\n      };\n    }\n  }, [now, passed, timeAt]);\n  return passed;\n}","map":{"version":3,"sources":["../../../src/hooks/internal/useTimePassed.js"],"names":["now","Date","_","setDummy","passed","timeout","setTimeout","Math","timeAt","clearTimeout"],"mappings":";;;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAEA;AACA;;;AACe,SAAA,aAAA,CAAA,MAAA,EAA+B;AAC5C,MAAMA,GAAG,GAAGC,IAAI,CAAhB,GAAYA,EAAZ;;AAD4C,MAAA,SAAA,GAEtB,CAAA,GAAA,MAAA,CAFsB,QAEtB,GAFsB;AAAA,MAAA,UAAA,GAAA,cAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAA,MAErCC,CAFqC,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MAElCC,QAFkC,GAAA,UAAA,CAAA,CAAA,CAAA;;AAG5C,MAAMC,MAAM,GAAGJ,GAAG,IAAlB,MAAA;AAEA,GAAA,GAAA,MAAA,CAAA,SAAA,EAAU,YAAM;AACd,QAAI,CAAJ,MAAA,EAAa;AACX,UAAMK,OAAO,GAAGC,UAAU,CAAC,YAAA;AAAA,eAAMH,QAAQ,CAAd,EAAc,CAAd;AAAD,OAAA,EAAqBI,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAYC,MAAM,GAAjE,GAA+CD,CAArB,CAA1B;AAEA,aAAO,YAAA;AAAA,eAAME,YAAY,CAAlB,OAAkB,CAAlB;AAAP,OAAA;AACD;AALH,GAAA,EAMG,CAAA,GAAA,EAAA,MAAA,EANH,MAMG,CANH;AAQA,SAAA,MAAA;AACD","sourcesContent":["import { useEffect, useState } from 'react';\n\n// Returns true if Date.now() > at, otherwise, false.\n// If Date.now() does not meet \"at\" yet, will trigger a refresh when Date.now() meet \"at\".\nexport default function useTimePassed(timeAt) {\n  const now = Date.now();\n  const [_, setDummy] = useState();\n  const passed = now >= timeAt;\n\n  useEffect(() => {\n    if (!passed) {\n      const timeout = setTimeout(() => setDummy({}), Math.max(0, timeAt - now));\n\n      return () => clearTimeout(timeout);\n    }\n  }, [now, passed, timeAt]);\n\n  return passed;\n}\n"],"sourceRoot":"component:///"},"metadata":{},"sourceType":"script"}