{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useTrackEvent;\n\nvar _react = require(\"react\");\n\nvar _createCustomEvent = _interopRequireDefault(require(\"../utils/createCustomEvent\"));\n\nvar _isObject = _interopRequireDefault(require(\"../utils/isObject\"));\n\nvar _useReadTelemetryDimensions = _interopRequireDefault(require(\"./internal/useReadTelemetryDimensions\"));\n\nvar _useWebChatAPIContext2 = _interopRequireDefault(require(\"./internal/useWebChatAPIContext\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction isNonNegativeFiniteNumberOrString(value) {\n  return typeof value === 'number' && isFinite(value) && value >= 0 || typeof value === 'string';\n}\n\nfunction useTrackEvent() {\n  var _useWebChatAPIContext = (0, _useWebChatAPIContext2.default)(),\n      onTelemetry = _useWebChatAPIContext.onTelemetry;\n\n  var readTelemetryDimensions = (0, _useReadTelemetryDimensions.default)();\n  var trackEvent = (0, _react.useCallback)(function (level, name, data) {\n    if (!name || typeof name !== 'string') {\n      return console.warn('botframework-webchat: \"name\" passed to \"useTrackEvent\" hook must be a string.');\n    }\n\n    if (typeof data !== 'undefined') {\n      if ((0, _isObject.default)(data)) {\n        if (!Object.values(data).every(function (value) {\n          return isNonNegativeFiniteNumberOrString(value);\n        })) {\n          return console.warn('botframework-webchat: Every value in \"data\" map passed to \"useTrackEvent\" hook must be a non-negative finite number or string.');\n        }\n      } else if (!isNonNegativeFiniteNumberOrString(data)) {\n        return console.warn('botframework-webchat: \"data\" passed to \"useTrackEvent\" hook must be a non-negative finite number or string.');\n      }\n    }\n\n    onTelemetry && onTelemetry((0, _createCustomEvent.default)('event', {\n      data: data,\n      dimensions: readTelemetryDimensions(),\n      level: level,\n      name: name\n    }));\n  }, [onTelemetry, readTelemetryDimensions]);\n  return (0, _react.useMemo)(function () {\n    var info = trackEvent.bind(null, 'info');\n    info.debug = trackEvent.bind(null, 'debug');\n    info.error = trackEvent.bind(null, 'error');\n    info.info = info;\n    info.warn = trackEvent.bind(null, 'warn');\n    return info;\n  }, [trackEvent]);\n}","map":{"version":3,"sources":["../../src/hooks/useTrackEvent.js"],"names":["isFinite","value","onTelemetry","readTelemetryDimensions","trackEvent","console","isNonNegativeFiniteNumberOrString","data","dimensions","level","name","info"],"mappings":";;;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAEA,IAAA,kBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,4BAAA,CAAA,CAAA;;AACA,IAAA,SAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,mBAAA,CAAA,CAAA;;AACA,IAAA,2BAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,uCAAA,CAAA,CAAA;;AACA,IAAA,sBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,iCAAA,CAAA,CAAA;;;;;;;;AAEA,SAAA,iCAAA,CAAA,KAAA,EAAkD;AAChD,SAAQ,OAAA,KAAA,KAAA,QAAA,IAA6BA,QAAQ,CAArC,KAAqC,CAArC,IAAgDC,KAAK,IAAtD,CAAC,IAA+D,OAAA,KAAA,KAAvE,QAAA;AACD;;AAEc,SAAA,aAAA,GAAyB;AAAA,MAAA,qBAAA,GACd,CAAA,GAAA,sBAAA,CADc,OACd,GADc;AAAA,MAC9BC,WAD8B,GAAA,qBAAA,CAAA,WAAA;;AAEtC,MAAMC,uBAAuB,GAAG,CAAA,GAAA,2BAAA,CAAhC,OAAgC,GAAhC;AAEA,MAAMC,UAAU,GAAG,CAAA,GAAA,MAAA,CAAA,WAAA,EACjB,UAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAuB;AACrB,QAAI,CAAA,IAAA,IAAS,OAAA,IAAA,KAAb,QAAA,EAAuC;AACrC,aAAOC,OAAO,CAAPA,IAAAA,CAAP,+EAAOA,CAAP;AACD;;AAED,QAAI,OAAA,IAAA,KAAJ,WAAA,EAAiC;AAC/B,UAAI,CAAA,GAAA,SAAA,CAAA,OAAA,EAAJ,IAAI,CAAJ,EAAoB;AAClB,YAAI,CAAC,MAAM,CAAN,MAAA,CAAA,IAAA,EAAA,KAAA,CAA0B,UAAA,KAAA,EAAK;AAAA,iBAAIC,iCAAiC,CAArC,KAAqC,CAArC;AAApC,SAAK,CAAL,EAAmF;AACjF,iBAAOD,OAAO,CAAPA,IAAAA,CAAP,gIAAOA,CAAP;AAGD;AALH,OAAA,MAMO,IAAI,CAACC,iCAAiC,CAAtC,IAAsC,CAAtC,EAA8C;AACnD,eAAOD,OAAO,CAAPA,IAAAA,CAAP,6GAAOA,CAAP;AAGD;AACF;;AAEDH,IAAAA,WAAW,IACTA,WAAW,CAAC,CAAA,GAAA,kBAAA,CAAA,OAAA,EAAA,OAAA,EAA2B;AAAEK,MAAAA,IAAI,EAAN,IAAA;AAAQC,MAAAA,UAAU,EAAEL,uBAApB,EAAA;AAA+CM,MAAAA,KAAK,EAApD,KAAA;AAAsDC,MAAAA,IAAI,EAAJA;AAAtD,KAA3B,CAAD,CADbR;AApBe,GAAA,EAuBjB,CAAA,WAAA,EAvBF,uBAuBE,CAvBiB,CAAnB;AA0BA,SAAO,CAAA,GAAA,MAAA,CAAA,OAAA,EAAQ,YAAM;AACnB,QAAMS,IAAI,GAAGP,UAAU,CAAVA,IAAAA,CAAAA,IAAAA,EAAb,MAAaA,CAAb;AAEAO,IAAAA,IAAI,CAAJA,KAAAA,GAAaP,UAAU,CAAVA,IAAAA,CAAAA,IAAAA,EAAbO,OAAaP,CAAbO;AACAA,IAAAA,IAAI,CAAJA,KAAAA,GAAaP,UAAU,CAAVA,IAAAA,CAAAA,IAAAA,EAAbO,OAAaP,CAAbO;AACAA,IAAAA,IAAI,CAAJA,IAAAA,GAAAA,IAAAA;AACAA,IAAAA,IAAI,CAAJA,IAAAA,GAAYP,UAAU,CAAVA,IAAAA,CAAAA,IAAAA,EAAZO,MAAYP,CAAZO;AAEA,WAAA,IAAA;AARK,GAAA,EASJ,CATH,UASG,CATI,CAAP;AAUD","sourcesContent":["import { useCallback, useMemo } from 'react';\n\nimport createCustomEvent from '../utils/createCustomEvent';\nimport isObject from '../utils/isObject';\nimport useReadTelemetryDimensions from './internal/useReadTelemetryDimensions';\nimport useWebChatAPIContext from './internal/useWebChatAPIContext';\n\nfunction isNonNegativeFiniteNumberOrString(value) {\n  return (typeof value === 'number' && isFinite(value) && value >= 0) || typeof value === 'string';\n}\n\nexport default function useTrackEvent() {\n  const { onTelemetry } = useWebChatAPIContext();\n  const readTelemetryDimensions = useReadTelemetryDimensions();\n\n  const trackEvent = useCallback(\n    (level, name, data) => {\n      if (!name || typeof name !== 'string') {\n        return console.warn('botframework-webchat: \"name\" passed to \"useTrackEvent\" hook must be a string.');\n      }\n\n      if (typeof data !== 'undefined') {\n        if (isObject(data)) {\n          if (!Object.values(data).every(value => isNonNegativeFiniteNumberOrString(value))) {\n            return console.warn(\n              'botframework-webchat: Every value in \"data\" map passed to \"useTrackEvent\" hook must be a non-negative finite number or string.'\n            );\n          }\n        } else if (!isNonNegativeFiniteNumberOrString(data)) {\n          return console.warn(\n            'botframework-webchat: \"data\" passed to \"useTrackEvent\" hook must be a non-negative finite number or string.'\n          );\n        }\n      }\n\n      onTelemetry &&\n        onTelemetry(createCustomEvent('event', { data, dimensions: readTelemetryDimensions(), level, name }));\n    },\n    [onTelemetry, readTelemetryDimensions]\n  );\n\n  return useMemo(() => {\n    const info = trackEvent.bind(null, 'info');\n\n    info.debug = trackEvent.bind(null, 'debug');\n    info.error = trackEvent.bind(null, 'error');\n    info.info = info;\n    info.warn = trackEvent.bind(null, 'warn');\n\n    return info;\n  }, [trackEvent]);\n}\n"],"sourceRoot":"component:///"},"metadata":{},"sourceType":"script"}