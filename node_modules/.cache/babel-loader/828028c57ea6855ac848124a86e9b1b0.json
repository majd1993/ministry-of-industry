{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.connectDictationInterims = exports.default = void 0;\n\nvar _botframeworkWebchatCore = require(\"botframework-webchat-core\");\n\nvar _botframeworkWebchatApi = require(\"botframework-webchat-api\");\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _connectToWebChat = _interopRequireDefault(require(\"../connectToWebChat\"));\n\nvar _useStyleSet3 = _interopRequireDefault(require(\"../hooks/useStyleSet\"));\n\nvar _useStyleToEmotionObject = _interopRequireDefault(require(\"../hooks/internal/useStyleToEmotionObject\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar _Constants$DictateSta = _botframeworkWebchatCore.Constants.DictateState,\n    DICTATING = _Constants$DictateSta.DICTATING,\n    STARTING = _Constants$DictateSta.STARTING,\n    STOPPING = _Constants$DictateSta.STOPPING;\nvar useDictateInterims = _botframeworkWebchatApi.hooks.useDictateInterims,\n    useDictateState = _botframeworkWebchatApi.hooks.useDictateState,\n    useLocalizer = _botframeworkWebchatApi.hooks.useLocalizer;\nvar ROOT_STYLE = {\n  alignItems: 'center',\n  display: 'flex'\n};\n\nvar connectDictationInterims = function connectDictationInterims() {\n  for (var _len = arguments.length, selectors = new Array(_len), _key = 0; _key < _len; _key++) {\n    selectors[_key] = arguments[_key];\n  }\n\n  return _connectToWebChat.default.apply(void 0, [function (_ref) {\n    var dictateInterims = _ref.dictateInterims,\n        dictateState = _ref.dictateState,\n        language = _ref.language;\n    return {\n      dictateInterims: dictateInterims,\n      dictateState: dictateState,\n      language: language\n    };\n  }].concat(selectors));\n};\n\nexports.connectDictationInterims = connectDictationInterims;\n\nvar DictationInterims = function DictationInterims(_ref2) {\n  var className = _ref2.className;\n\n  var _useDictateInterims = useDictateInterims(),\n      _useDictateInterims2 = _slicedToArray(_useDictateInterims, 1),\n      dictateInterims = _useDictateInterims2[0];\n\n  var _useDictateState = useDictateState(),\n      _useDictateState2 = _slicedToArray(_useDictateState, 1),\n      dictateState = _useDictateState2[0];\n\n  var _useStyleSet = (0, _useStyleSet3.default)(),\n      _useStyleSet2 = _slicedToArray(_useStyleSet, 1),\n      dictationInterimsStyleSet = _useStyleSet2[0].dictationInterims;\n\n  var localize = useLocalizer();\n  var rootClassName = (0, _useStyleToEmotionObject.default)()(ROOT_STYLE) + '';\n  return dictateState === STARTING || dictateState === STOPPING ? /*#__PURE__*/_react.default.createElement(\"p\", {\n    className: (0, _classnames.default)(dictationInterimsStyleSet + '', rootClassName, (className || '') + '', 'status')\n  }, dictateState === STARTING && localize('SPEECH_INPUT_STARTING')) : dictateState === DICTATING && (dictateInterims.length ? /*#__PURE__*/_react.default.createElement(\"p\", {\n    className: (0, _classnames.default)(dictationInterimsStyleSet + '', rootClassName, (className || '') + '', 'dictating')\n  }, dictateInterims.map(function (interim, index) {\n    return /*#__PURE__*/_react.default.createElement(\"span\", {\n      key: index\n    }, interim, \"\\xA0\");\n  })) : /*#__PURE__*/_react.default.createElement(\"p\", {\n    className: (0, _classnames.default)(dictationInterimsStyleSet + '', rootClassName, (className || '') + '', 'status')\n  }, localize('SPEECH_INPUT_LISTENING')));\n};\n\nDictationInterims.defaultProps = {\n  className: ''\n};\nDictationInterims.propTypes = {\n  className: _propTypes.default.string\n}; // TODO: [P3] After speech started, when clicking on the transcript, it should\n//       stop the dictation and allow the user to type-correct the transcript\n\nvar _default = DictationInterims;\nexports.default = _default;","map":{"version":3,"sources":["../../src/SendBox/DictationInterims.js"],"names":["DictateState","DICTATING","STARTING","STOPPING","Constants","useDictateInterims","useDictateState","useLocalizer","hooks","ROOT_STYLE","alignItems","display","connectDictationInterims","selectors","dictateInterims","dictateState","language","DictationInterims","className","dictationInterimsStyleSet","localize","rootClassName","index","PropTypes","string"],"mappings":"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","sourcesContent":["/* eslint react/no-array-index-key: \"off\" */\n\nimport { Constants } from 'botframework-webchat-core';\nimport { hooks } from 'botframework-webchat-api';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport connectToWebChat from '../connectToWebChat';\nimport useStyleSet from '../hooks/useStyleSet';\nimport useStyleToEmotionObject from '../hooks/internal/useStyleToEmotionObject';\n\nconst {\n  DictateState: { DICTATING, STARTING, STOPPING }\n} = Constants;\n\nconst { useDictateInterims, useDictateState, useLocalizer } = hooks;\n\nconst ROOT_STYLE = {\n  alignItems: 'center',\n  display: 'flex'\n};\n\nconst connectDictationInterims = (...selectors) =>\n  connectToWebChat(\n    ({ dictateInterims, dictateState, language }) => ({\n      dictateInterims,\n      dictateState,\n      language\n    }),\n    ...selectors\n  );\n\nconst DictationInterims = ({ className }) => {\n  const [dictateInterims] = useDictateInterims();\n  const [dictateState] = useDictateState();\n  const [{ dictationInterims: dictationInterimsStyleSet }] = useStyleSet();\n  const localize = useLocalizer();\n  const rootClassName = useStyleToEmotionObject()(ROOT_STYLE) + '';\n\n  return dictateState === STARTING || dictateState === STOPPING ? (\n    <p className={classNames(dictationInterimsStyleSet + '', rootClassName, (className || '') + '', 'status')}>\n      {dictateState === STARTING && localize('SPEECH_INPUT_STARTING')}\n    </p>\n  ) : (\n    dictateState === DICTATING &&\n      (dictateInterims.length ? (\n        <p className={classNames(dictationInterimsStyleSet + '', rootClassName, (className || '') + '', 'dictating')}>\n          {dictateInterims.map((interim, index) => (\n            <span key={index}>\n              {interim}\n              &nbsp;\n            </span>\n          ))}\n        </p>\n      ) : (\n        <p className={classNames(dictationInterimsStyleSet + '', rootClassName, (className || '') + '', 'status')}>\n          {localize('SPEECH_INPUT_LISTENING')}\n        </p>\n      ))\n  );\n};\n\nDictationInterims.defaultProps = {\n  className: ''\n};\n\nDictationInterims.propTypes = {\n  className: PropTypes.string\n};\n\n// TODO: [P3] After speech started, when clicking on the transcript, it should\n//       stop the dictation and allow the user to type-correct the transcript\n\nexport default DictationInterims;\n\nexport { connectDictationInterims };\n"],"sourceRoot":"component:///"},"metadata":{},"sourceType":"script"}