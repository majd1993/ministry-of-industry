{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n} // Differences between <textarea> and <AccessibleTextArea>:\n// - Disable behavior\n//   - When the widget is disabled\n//     - Set \"aria-disabled\" attribute to \"true\"\n//     - Set \"readonly\" attribute\n//     - Set \"tabIndex\" to -1\n//     - Remove \"onChange\" handler\n//   - Why this is needed\n//     - Browser compatibility: when the widget is disabled, different browser send focus to different places\n//     - When the widget is disabled, it's reasonable to keep the focus on the same widget for an extended period of time\n//       - When the user presses TAB after the current widget is disabled, it should move the focus to the next non-disabled widget\n// Developers using this accessible widget will need to:\n// - Style the disabled widget themselves using CSS query `:disabled, [aria-disabled=\"true\"] {}`\n// - Modify all the code that checks disabled through the \"disabled\" attribute to use aria-disabled=\"true\" instead\n//   - aria-disabled=\"true\" is the source of truth\n// - If the widget is contained by a <form>, the developer need to filter out some `onSubmit` event caused by this widget\n\n\nvar AccessibleTextArea = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, forwardedRef) {\n  var disabled = _ref.disabled,\n      onChange = _ref.onChange,\n      onFocus = _ref.onFocus,\n      onKeyDown = _ref.onKeyDown,\n      onKeyPress = _ref.onKeyPress,\n      onSelect = _ref.onSelect,\n      tabIndex = _ref.tabIndex,\n      props = _objectWithoutProperties(_ref, [\"disabled\", \"onChange\", \"onFocus\", \"onKeyDown\", \"onKeyPress\", \"onSelect\", \"tabIndex\"]);\n\n  var targetRef = (0, _react.useRef)();\n  var ref = forwardedRef || targetRef;\n  return /*#__PURE__*/_react.default.createElement(\"textarea\", _extends({\n    \"aria-disabled\": disabled || undefined,\n    onChange: disabled ? undefined : onChange,\n    onFocus: disabled ? undefined : onFocus,\n    onKeyDown: disabled ? undefined : onKeyDown,\n    onKeyPress: disabled ? undefined : onKeyPress,\n    onSelect: disabled ? undefined : onSelect,\n    readOnly: disabled,\n    ref: ref,\n    tabIndex: disabled ? -1 : tabIndex\n  }, props));\n});\nAccessibleTextArea.defaultProps = {\n  disabled: undefined,\n  onChange: undefined,\n  onFocus: undefined,\n  onKeyDown: undefined,\n  onKeyPress: undefined,\n  onSelect: undefined,\n  tabIndex: undefined\n};\nAccessibleTextArea.displayName = 'AccessibleTextArea';\nAccessibleTextArea.propTypes = {\n  disabled: _propTypes.default.bool,\n  onChange: _propTypes.default.func,\n  onFocus: _propTypes.default.func,\n  onKeyDown: _propTypes.default.func,\n  onKeyPress: _propTypes.default.func,\n  onSelect: _propTypes.default.func,\n  tabIndex: _propTypes.default.number\n};\nvar _default = AccessibleTextArea;\nexports.default = _default;","map":{"version":3,"sources":["../../src/Utils/AccessibleTextArea.js"],"names":["AccessibleTextArea","disabled","onChange","onFocus","onKeyDown","onKeyPress","onSelect","tabIndex","props","targetRef","ref","forwardedRef","undefined","PropTypes","number"],"mappings":"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","sourcesContent":["/* eslint no-magic-numbers: [\"error\", { \"ignore\": [-1] }] */\n\nimport PropTypes from 'prop-types';\nimport React, { forwardRef, useRef } from 'react';\n\n// Differences between <textarea> and <AccessibleTextArea>:\n// - Disable behavior\n//   - When the widget is disabled\n//     - Set \"aria-disabled\" attribute to \"true\"\n//     - Set \"readonly\" attribute\n//     - Set \"tabIndex\" to -1\n//     - Remove \"onChange\" handler\n//   - Why this is needed\n//     - Browser compatibility: when the widget is disabled, different browser send focus to different places\n//     - When the widget is disabled, it's reasonable to keep the focus on the same widget for an extended period of time\n//       - When the user presses TAB after the current widget is disabled, it should move the focus to the next non-disabled widget\n\n// Developers using this accessible widget will need to:\n// - Style the disabled widget themselves using CSS query `:disabled, [aria-disabled=\"true\"] {}`\n// - Modify all the code that checks disabled through the \"disabled\" attribute to use aria-disabled=\"true\" instead\n//   - aria-disabled=\"true\" is the source of truth\n// - If the widget is contained by a <form>, the developer need to filter out some `onSubmit` event caused by this widget\n\nconst AccessibleTextArea = forwardRef(\n  ({ disabled, onChange, onFocus, onKeyDown, onKeyPress, onSelect, tabIndex, ...props }, forwardedRef) => {\n    const targetRef = useRef();\n\n    const ref = forwardedRef || targetRef;\n\n    return (\n      <textarea\n        aria-disabled={disabled || undefined}\n        onChange={disabled ? undefined : onChange}\n        onFocus={disabled ? undefined : onFocus}\n        onKeyDown={disabled ? undefined : onKeyDown}\n        onKeyPress={disabled ? undefined : onKeyPress}\n        onSelect={disabled ? undefined : onSelect}\n        readOnly={disabled}\n        ref={ref}\n        tabIndex={disabled ? -1 : tabIndex}\n        {...props}\n      />\n    );\n  }\n);\n\nAccessibleTextArea.defaultProps = {\n  disabled: undefined,\n  onChange: undefined,\n  onFocus: undefined,\n  onKeyDown: undefined,\n  onKeyPress: undefined,\n  onSelect: undefined,\n  tabIndex: undefined\n};\n\nAccessibleTextArea.displayName = 'AccessibleTextArea';\n\nAccessibleTextArea.propTypes = {\n  disabled: PropTypes.bool,\n  onChange: PropTypes.func,\n  onFocus: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  onKeyPress: PropTypes.func,\n  onSelect: PropTypes.func,\n  tabIndex: PropTypes.number\n};\n\nexport default AccessibleTextArea;\n"],"sourceRoot":"component:///"},"metadata":{},"sourceType":"script"}