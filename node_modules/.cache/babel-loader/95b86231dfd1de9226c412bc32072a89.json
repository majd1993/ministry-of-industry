{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = stopDictateOnCardActionSaga;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _effects = require(\"redux-saga/effects\");\n\nvar _postActivity = require(\"../actions/postActivity\");\n\nvar _stopDictate = _interopRequireDefault(require(\"../actions/stopDictate\"));\n\nvar _whileConnected = _interopRequireDefault(require(\"./effects/whileConnected\"));\n\nvar _marked = /*#__PURE__*/_regenerator[\"default\"].mark(stopDictateOnCardAction),\n    _marked2 = /*#__PURE__*/_regenerator[\"default\"].mark(stopDictateOnCardActionSaga);\n\nfunction stopDictateOnCardAction() {\n  return _regenerator[\"default\"].wrap(function stopDictateOnCardAction$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return (0, _effects.takeEvery)( // Currently, there are no actions that are related to card input\n          // For now, we are using POST_ACTIVITY of a \"message\" activity\n          // In the future, if we have an action for card input, we should use that instead\n          function (_ref) {\n            var payload = _ref.payload,\n                type = _ref.type;\n            return type === _postActivity.POST_ACTIVITY_PENDING && payload.activity.type === 'message';\n          }, /*#__PURE__*/_regenerator[\"default\"].mark(function putStopDictate() {\n            return _regenerator[\"default\"].wrap(function putStopDictate$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.next = 2;\n                    return (0, _effects.put)((0, _stopDictate[\"default\"])());\n\n                  case 2:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, putStopDictate);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction stopDictateOnCardActionSaga() {\n  return _regenerator[\"default\"].wrap(function stopDictateOnCardActionSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return (0, _whileConnected[\"default\"])(stopDictateOnCardAction);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["../../src/sagas/stopDictateOnCardActionSaga.js"],"names":["stopDictateOnCardAction","payload","type","POST_ACTIVITY_PENDING","stopDictateOnCardActionSaga"],"mappings":";;;;;;;;;;;AAAA,IAAA,QAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAEA,IAAA,aAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AACA,IAAA,YAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,wBAAA,CAAA,CAAA;;AACA,IAAA,eAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,0BAAA,CAAA,CAAA;;wDAEUA,uB;yDAeeI,2B;;AAfzB,SAAA,uBAAA,GAAA;AAAA,SAAA,YAAA,CAAA,SAAA,CAAA,CAAA,IAAA,CAAA,SAAA,wBAAA,CAAA,SAAA,EAAA;AAAA,WAAA,CAAA,EAAA;AAAA,cAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,aAAA,CAAA;AAAA,UAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAIE,iBAAM,CAAA,GAAA,QAAA,CAAA,SAAA,GACJ;AACA;AACA;AACA,oBAAA,IAAA,EAAA;AAAA,gBAAGH,OAAH,GAAA,IAAA,CAAA,OAAA;AAAA,gBAAYC,IAAZ,GAAA,IAAA,CAAA,IAAA;AAAA,mBAAuBA,IAAI,KAAKC,aAAAA,CAATD,qBAAAA,IAAkCD,OAAO,CAAPA,QAAAA,CAAAA,IAAAA,KAAzD,SAAA;AAJI,WAAA,EAAA,aAAA,YAAA,CAAA,SAAA,CAAA,CAAA,IAAA,CAKJ,SAAA,cAAA,GAAA;AAAA,mBAAA,YAAA,CAAA,SAAA,CAAA,CAAA,IAAA,CAAA,SAAA,eAAA,CAAA,QAAA,EAAA;AAAA,qBAAA,CAAA,EAAA;AAAA,wBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,uBAAA,CAAA;AAAA,oBAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AACE,2BAAM,CAAA,GAAA,QAAA,CAAA,GAAA,EAAI,CAAA,GAAA,YAAA,CAAV,SAAU,CAAA,GAAJ,CAAN;;AADF,uBAAA,CAAA;AAAA,uBAAA,KAAA;AAAA,2BAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,aAAA,EAAA,cAAA,CAAA;AALF,WAAM,CAAA,CAAN;;AAJF,aAAA,CAAA;AAAA,aAAA,KAAA;AAAA,iBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,GAAA,EAAA,OAAA,CAAA;AAAA;;AAee,SAAA,2BAAA,GAAA;AAAA,SAAA,YAAA,CAAA,SAAA,CAAA,CAAA,IAAA,CAAA,SAAA,4BAAA,CAAA,SAAA,EAAA;AAAA,WAAA,CAAA,EAAA;AAAA,cAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,aAAA,CAAA;AAAA,UAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AACb,iBAAM,CAAA,GAAA,eAAA,CAAA,SAAA,CAAA,EAAN,uBAAM,CAAN;;AADa,aAAA,CAAA;AAAA,aAAA,KAAA;AAAA,iBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,GAAA,EAAA,QAAA,CAAA;AAAA","sourcesContent":["import { put, takeEvery } from 'redux-saga/effects';\n\nimport { POST_ACTIVITY_PENDING } from '../actions/postActivity';\nimport stopDictate from '../actions/stopDictate';\nimport whileConnected from './effects/whileConnected';\n\nfunction* stopDictateOnCardAction() {\n  // TODO: [P2] We should stop speech input when the user click on anything on a card, including open URL which doesn't generate postActivity\n  //       This functionality was not implemented in v3\n\n  yield takeEvery(\n    // Currently, there are no actions that are related to card input\n    // For now, we are using POST_ACTIVITY of a \"message\" activity\n    // In the future, if we have an action for card input, we should use that instead\n    ({ payload, type }) => type === POST_ACTIVITY_PENDING && payload.activity.type === 'message',\n    function* putStopDictate() {\n      yield put(stopDictate());\n    }\n  );\n}\n\nexport default function* stopDictateOnCardActionSaga() {\n  yield whileConnected(stopDictateOnCardAction);\n}\n"],"sourceRoot":"core:///"},"metadata":{},"sourceType":"script"}