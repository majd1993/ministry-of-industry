{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Exports_1 = require(\"../common.browser/Exports\");\n\nvar Exports_2 = require(\"../sdk/Exports\");\n\nvar ConnectionFactoryBase_1 = require(\"./ConnectionFactoryBase\");\n\nvar Exports_3 = require(\"./Exports\");\n\nvar QueryParameterNames_1 = require(\"./QueryParameterNames\");\n\nvar TestHooksParamName = \"testhooks\";\nvar ConnectionIdHeader = \"X-ConnectionId\";\n\nvar TranslationConnectionFactory =\n/** @class */\nfunction (_super) {\n  __extends(TranslationConnectionFactory, _super);\n\n  function TranslationConnectionFactory() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.create = function (config, authInfo, connectionId) {\n      var endpoint = config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_Endpoint, undefined);\n\n      if (!endpoint) {\n        var region = config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_Region, undefined);\n        var hostSuffix = region && region.toLowerCase().startsWith(\"china\") ? \".azure.cn\" : \".microsoft.com\";\n        var host = config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".s2s.speech\" + hostSuffix);\n        endpoint = host + \"/speech/translation/cognitiveservices/v1\";\n      }\n\n      var queryParams = {\n        from: config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_RecoLanguage),\n        to: config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_TranslationToLanguages)\n      };\n\n      _this.setCommonUrlParams(config, queryParams, endpoint);\n\n      _this.setUrlParameter(Exports_2.PropertyId.SpeechServiceResponse_TranslationRequestStablePartialResult, QueryParameterNames_1.QueryParameterNames.StableTranslation, config, queryParams, endpoint);\n\n      var voiceName = \"voice\";\n      var featureName = \"features\";\n\n      if (config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\n        queryParams[voiceName] = config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_TranslationVoice);\n        queryParams[featureName] = \"texttospeech\";\n      }\n\n      var headers = {};\n\n      if (authInfo.token !== undefined && authInfo.token !== \"\") {\n        headers[authInfo.headerName] = authInfo.token;\n      }\n\n      headers[ConnectionIdHeader] = connectionId;\n      config.parameters.setProperty(Exports_2.PropertyId.SpeechServiceConnection_Url, endpoint);\n      return new Exports_1.WebsocketConnection(endpoint, queryParams, headers, new Exports_3.WebsocketMessageFormatter(), Exports_1.ProxyInfo.fromRecognizerConfig(config), connectionId);\n    };\n\n    return _this;\n  }\n\n  return TranslationConnectionFactory;\n}(ConnectionFactoryBase_1.ConnectionFactoryBase);\n\nexports.TranslationConnectionFactory = TranslationConnectionFactory;","map":{"version":3,"sources":["src/common.speech/TranslationConnectionFactory.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary,\r\n} from \"../common/Exports\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames\";\r\n\r\nconst TestHooksParamName: string = \"testhooks\";\r\nconst ConnectionIdHeader: string = \"X-ConnectionId\";\r\n\r\nexport class TranslationConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    public create = (\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection => {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n            const hostSuffix: string = (region && region.toLowerCase().startsWith(\"china\")) ? \".azure.cn\" : \".microsoft.com\";\r\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".s2s.speech\" + hostSuffix);\r\n            endpoint = host + \"/speech/translation/cognitiveservices/v1\";\r\n        }\r\n\r\n        const queryParams: IStringDictionary<string> = {\r\n            from: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            to: config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages),\r\n        };\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n        this.setUrlParameter(\r\n            PropertyId.SpeechServiceResponse_TranslationRequestStablePartialResult,\r\n            QueryParameterNames.StableTranslation,\r\n            config,\r\n            queryParams,\r\n            endpoint\r\n        );\r\n\r\n        const voiceName: string = \"voice\";\r\n        const featureName: string = \"features\";\r\n\r\n        if (config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\r\n            queryParams[voiceName] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice);\r\n            queryParams[featureName] = \"texttospeech\";\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[ConnectionIdHeader] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), connectionId);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}