{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Exports_1 = require(\"../../common/Exports\");\n/**\n * Placeholder class for the Conversation Request Session. Based off RequestSession.\n * TODO: define what telemetry is required.\n */\n\n\nvar ConversationRequestSession =\n/** @class */\nfunction () {\n  function ConversationRequestSession(sessionId) {\n    var _this = this;\n\n    this.privIsDisposed = false;\n    this.privDetachables = new Array();\n\n    this.onPreConnectionStart = function (authFetchEventId, connectionId) {\n      _this.privSessionId = connectionId;\n    };\n\n    this.onAuthCompleted = function (isError, error) {\n      if (isError) {\n        _this.onComplete();\n      }\n    };\n\n    this.onConnectionEstablishCompleted = function (statusCode, reason) {\n      if (statusCode === 200) {\n        return;\n      } else if (statusCode === 403) {\n        _this.onComplete();\n      }\n    };\n\n    this.onServiceTurnEndResponse = function (continuousRecognition) {\n      if (!continuousRecognition) {\n        _this.onComplete();\n      } else {\n        _this.privRequestId = Exports_1.createNoDashGuid();\n      }\n    };\n\n    this.dispose = function (error) {\n      if (!_this.privIsDisposed) {\n        // we should have completed by now. If we did not its an unknown error.\n        _this.privIsDisposed = true;\n\n        for (var _i = 0, _a = _this.privDetachables; _i < _a.length; _i++) {\n          var detachable = _a[_i];\n          detachable.detach();\n        }\n      }\n    };\n\n    this.onComplete = function () {//\n    };\n\n    this.privSessionId = sessionId;\n    this.privRequestId = Exports_1.createNoDashGuid();\n    this.privRequestCompletionDeferral = new Exports_1.Deferred();\n  }\n\n  Object.defineProperty(ConversationRequestSession.prototype, \"sessionId\", {\n    get: function get() {\n      return this.privSessionId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ConversationRequestSession.prototype, \"requestId\", {\n    get: function get() {\n      return this.privRequestId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ConversationRequestSession.prototype, \"completionPromise\", {\n    get: function get() {\n      return this.privRequestCompletionDeferral.promise();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return ConversationRequestSession;\n}();\n\nexports.ConversationRequestSession = ConversationRequestSession;","map":{"version":3,"sources":["src/common.speech/Transcription/ConversationRequestSession.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;AAEA,IAAA,SAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;AAOA;;;AAGG;;;AACH,IAAA,0BAAA;AAAA;AAAA,YAAA;AAOI,WAAA,0BAAA,CAAY,SAAZ,EAA6B;AAA7B,QAAA,KAAA,GAAA,IAAA;;AANQ,SAAA,cAAA,GAA0B,KAA1B;AACA,SAAA,eAAA,GAAiC,IAAI,KAAJ,EAAjC;;AAuBD,SAAA,oBAAA,GAAuB,UAAC,gBAAD,EAA2B,YAA3B,EAA+C;AACzE,MAAA,KAAI,CAAC,aAAL,GAAqB,YAArB;AACH,KAFM;;AAIA,SAAA,eAAA,GAAkB,UAAC,OAAD,EAAmB,KAAnB,EAAiC;AACtD,UAAI,OAAJ,EAAa;AACT,QAAA,KAAI,CAAC,UAAL;AACH;AACJ,KAJM;;AAMA,SAAA,8BAAA,GAAiC,UAAC,UAAD,EAAqB,MAArB,EAAoC;AACxE,UAAI,UAAU,KAAK,GAAnB,EAAwB;AACpB;AACH,OAFD,MAEO,IAAI,UAAU,KAAK,GAAnB,EAAwB;AAC3B,QAAA,KAAI,CAAC,UAAL;AACH;AACJ,KANM;;AAQA,SAAA,wBAAA,GAA2B,UAAC,qBAAD,EAA+B;AAC7D,UAAI,CAAC,qBAAL,EAA4B;AACxB,QAAA,KAAI,CAAC,UAAL;AACH,OAFD,MAEO;AACH,QAAA,KAAI,CAAC,aAAL,GAAqB,SAAA,CAAA,gBAAA,EAArB;AACH;AACJ,KANM;;AAQA,SAAA,OAAA,GAAU,UAAC,KAAD,EAAe;AAC5B,UAAI,CAAC,KAAI,CAAC,cAAV,EAA0B;AACtB;AACA,QAAA,KAAI,CAAC,cAAL,GAAsB,IAAtB;;AACA,aAAyB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,KAAI,CAAC,eAA9B,EAAyB,EAAA,GAAA,EAAA,CAAA,MAAzB,EAAyB,EAAA,EAAzB,EAA+C;AAA1C,cAAM,UAAU,GAAA,EAAA,CAAA,EAAA,CAAhB;AACD,UAAA,UAAU,CAAC,MAAX;AACH;AACJ;AACJ,KARM;;AAUC,SAAA,UAAA,GAAa,YAAA,CACjB;AACH,KAFO;;AArDJ,SAAK,aAAL,GAAqB,SAArB;AACA,SAAK,aAAL,GAAqB,SAAA,CAAA,gBAAA,EAArB;AACA,SAAK,6BAAL,GAAqC,IAAI,SAAA,CAAA,QAAJ,EAArC;AACH;;AAED,EAAA,MAAA,CAAA,cAAA,CAAW,0BAAA,CAAA,SAAX,EAAW,WAAX,EAAoB;SAApB,eAAA;AACI,aAAO,KAAK,aAAZ;AACH,KAFmB;oBAAA;;AAAA,GAApB;AAIA,EAAA,MAAA,CAAA,cAAA,CAAW,0BAAA,CAAA,SAAX,EAAW,WAAX,EAAoB;SAApB,eAAA;AACI,aAAO,KAAK,aAAZ;AACH,KAFmB;oBAAA;;AAAA,GAApB;AAIA,EAAA,MAAA,CAAA,cAAA,CAAW,0BAAA,CAAA,SAAX,EAAW,mBAAX,EAA4B;SAA5B,eAAA;AACI,aAAO,KAAK,6BAAL,CAAmC,OAAnC,EAAP;AACH,KAF2B;oBAAA;;AAAA,GAA5B;AA4CJ,SAAA,0BAAA;AAAC,CAjED,EAAA;;AAAa,OAAA,CAAA,0BAAA,GAAA,0BAAA","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    IDetachable,\r\n    Promise,\r\n} from \"../../common/Exports\";\r\n\r\n/**\r\n * Placeholder class for the Conversation Request Session. Based off RequestSession.\r\n * TODO: define what telemetry is required.\r\n */\r\nexport class ConversationRequestSession {\r\n    private privIsDisposed: boolean = false;\r\n    private privDetachables: IDetachable[] = new Array<IDetachable>();\r\n    private privRequestId: string;\r\n    private privRequestCompletionDeferral: Deferred<boolean>;\r\n    private privSessionId: string;\r\n\r\n    constructor(sessionId: string) {\r\n        this.privSessionId = sessionId;\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privRequestCompletionDeferral = new Deferred<boolean>();\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get completionPromise(): Promise<boolean> {\r\n        return this.privRequestCompletionDeferral.promise();\r\n    }\r\n\r\n    public onPreConnectionStart = (authFetchEventId: string, connectionId: string): void => {\r\n        this.privSessionId = connectionId;\r\n    }\r\n\r\n    public onAuthCompleted = (isError: boolean, error?: string): void => {\r\n        if (isError) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onConnectionEstablishCompleted = (statusCode: number, reason?: string): void => {\r\n        if (statusCode === 200) {\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onServiceTurnEndResponse = (continuousRecognition: boolean): void => {\r\n        if (!continuousRecognition) {\r\n            this.onComplete();\r\n        } else {\r\n            this.privRequestId = createNoDashGuid();\r\n        }\r\n    }\r\n\r\n    public dispose = (error?: string): void => {\r\n        if (!this.privIsDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.privIsDisposed = true;\r\n            for (const detachable of this.privDetachables) {\r\n                detachable.detach();\r\n            }\r\n        }\r\n    }\r\n\r\n    private onComplete = (): void => {\r\n        //\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"script"}