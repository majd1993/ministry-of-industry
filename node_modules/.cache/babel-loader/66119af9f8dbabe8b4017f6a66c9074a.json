{"ast":null,"code":"'use strict';\n\nvar entityPrefixLength = require('./entity-prefix-length');\n\nmodule.exports = copy;\nvar ampersand = '&';\nvar punctuationExppresion = /[-!\"#$%&'()*+,./:;<=>?@[\\\\\\]^`{|}~_]/; // For shortcut and collapsed reference links, the contents is also an\n// identifier, so we need to restore the original encoding and escaping\n// that were present in the source string.\n//\n// This function takes the unescaped & unencoded value from shortcut’s\n// child nodes and the identifier and encodes the former according to\n// the latter.\n\nfunction copy(value, identifier) {\n  var length = value.length;\n  var count = identifier.length;\n  var result = [];\n  var position = 0;\n  var index = 0;\n  var start;\n\n  while (index < length) {\n    // Take next non-punctuation characters from `value`.\n    start = index;\n\n    while (index < length && !punctuationExppresion.test(value.charAt(index))) {\n      index += 1;\n    }\n\n    result.push(value.slice(start, index)); // Advance `position` to the next punctuation character.\n\n    while (position < count && !punctuationExppresion.test(identifier.charAt(position))) {\n      position += 1;\n    } // Take next punctuation characters from `identifier`.\n\n\n    start = position;\n\n    while (position < count && punctuationExppresion.test(identifier.charAt(position))) {\n      if (identifier.charAt(position) === ampersand) {\n        position += entityPrefixLength(identifier.slice(position));\n      }\n\n      position += 1;\n    }\n\n    result.push(identifier.slice(start, position)); // Advance `index` to the next non-punctuation character.\n\n    while (index < length && punctuationExppresion.test(value.charAt(index))) {\n      index += 1;\n    }\n  }\n\n  return result.join('');\n}","map":{"version":3,"sources":["/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/remark-stringify/lib/util/copy-identifier-encoding.js"],"names":["entityPrefixLength","require","module","exports","copy","ampersand","punctuationExppresion","value","identifier","length","count","result","position","index","start","test","charAt","push","slice","join"],"mappings":"AAAA;;AAEA,IAAIA,kBAAkB,GAAGC,OAAO,CAAC,wBAAD,CAAhC;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,IAAjB;AAEA,IAAIC,SAAS,GAAG,GAAhB;AAEA,IAAIC,qBAAqB,GAAG,sCAA5B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASF,IAAT,CAAcG,KAAd,EAAqBC,UAArB,EAAiC;AAC/B,MAAIC,MAAM,GAAGF,KAAK,CAACE,MAAnB;AACA,MAAIC,KAAK,GAAGF,UAAU,CAACC,MAAvB;AACA,MAAIE,MAAM,GAAG,EAAb;AACA,MAAIC,QAAQ,GAAG,CAAf;AACA,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,KAAJ;;AAEA,SAAOD,KAAK,GAAGJ,MAAf,EAAuB;AACrB;AACAK,IAAAA,KAAK,GAAGD,KAAR;;AAEA,WAAOA,KAAK,GAAGJ,MAAR,IAAkB,CAACH,qBAAqB,CAACS,IAAtB,CAA2BR,KAAK,CAACS,MAAN,CAAaH,KAAb,CAA3B,CAA1B,EAA2E;AACzEA,MAAAA,KAAK,IAAI,CAAT;AACD;;AAEDF,IAAAA,MAAM,CAACM,IAAP,CAAYV,KAAK,CAACW,KAAN,CAAYJ,KAAZ,EAAmBD,KAAnB,CAAZ,EARqB,CAUrB;;AACA,WACED,QAAQ,GAAGF,KAAX,IACA,CAACJ,qBAAqB,CAACS,IAAtB,CAA2BP,UAAU,CAACQ,MAAX,CAAkBJ,QAAlB,CAA3B,CAFH,EAGE;AACAA,MAAAA,QAAQ,IAAI,CAAZ;AACD,KAhBoB,CAkBrB;;;AACAE,IAAAA,KAAK,GAAGF,QAAR;;AAEA,WACEA,QAAQ,GAAGF,KAAX,IACAJ,qBAAqB,CAACS,IAAtB,CAA2BP,UAAU,CAACQ,MAAX,CAAkBJ,QAAlB,CAA3B,CAFF,EAGE;AACA,UAAIJ,UAAU,CAACQ,MAAX,CAAkBJ,QAAlB,MAAgCP,SAApC,EAA+C;AAC7CO,QAAAA,QAAQ,IAAIZ,kBAAkB,CAACQ,UAAU,CAACU,KAAX,CAAiBN,QAAjB,CAAD,CAA9B;AACD;;AAEDA,MAAAA,QAAQ,IAAI,CAAZ;AACD;;AAEDD,IAAAA,MAAM,CAACM,IAAP,CAAYT,UAAU,CAACU,KAAX,CAAiBJ,KAAjB,EAAwBF,QAAxB,CAAZ,EAhCqB,CAkCrB;;AACA,WAAOC,KAAK,GAAGJ,MAAR,IAAkBH,qBAAqB,CAACS,IAAtB,CAA2BR,KAAK,CAACS,MAAN,CAAaH,KAAb,CAA3B,CAAzB,EAA0E;AACxEA,MAAAA,KAAK,IAAI,CAAT;AACD;AACF;;AAED,SAAOF,MAAM,CAACQ,IAAP,CAAY,EAAZ,CAAP;AACD","sourcesContent":["'use strict'\n\nvar entityPrefixLength = require('./entity-prefix-length')\n\nmodule.exports = copy\n\nvar ampersand = '&'\n\nvar punctuationExppresion = /[-!\"#$%&'()*+,./:;<=>?@[\\\\\\]^`{|}~_]/\n\n// For shortcut and collapsed reference links, the contents is also an\n// identifier, so we need to restore the original encoding and escaping\n// that were present in the source string.\n//\n// This function takes the unescaped & unencoded value from shortcut’s\n// child nodes and the identifier and encodes the former according to\n// the latter.\nfunction copy(value, identifier) {\n  var length = value.length\n  var count = identifier.length\n  var result = []\n  var position = 0\n  var index = 0\n  var start\n\n  while (index < length) {\n    // Take next non-punctuation characters from `value`.\n    start = index\n\n    while (index < length && !punctuationExppresion.test(value.charAt(index))) {\n      index += 1\n    }\n\n    result.push(value.slice(start, index))\n\n    // Advance `position` to the next punctuation character.\n    while (\n      position < count &&\n      !punctuationExppresion.test(identifier.charAt(position))\n    ) {\n      position += 1\n    }\n\n    // Take next punctuation characters from `identifier`.\n    start = position\n\n    while (\n      position < count &&\n      punctuationExppresion.test(identifier.charAt(position))\n    ) {\n      if (identifier.charAt(position) === ampersand) {\n        position += entityPrefixLength(identifier.slice(position))\n      }\n\n      position += 1\n    }\n\n    result.push(identifier.slice(start, position))\n\n    // Advance `index` to the next non-punctuation character.\n    while (index < length && punctuationExppresion.test(value.charAt(index))) {\n      index += 1\n    }\n  }\n\n  return result.join('')\n}\n"]},"metadata":{},"sourceType":"script"}