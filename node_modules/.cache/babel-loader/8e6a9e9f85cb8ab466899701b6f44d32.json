{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createDefaultCardActionMiddleware;\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n} // This code is adopted from sanitize-html/naughtyScheme.\n// sanitize-html is a dependency of Web Chat but the naughtScheme function is neither exposed nor reusable.\n// https://github.com/apostrophecms/sanitize-html/blob/master/src/index.js#L526\n\n\nfunction getScheme(href) {\n  // Browsers ignore character codes of 32 (space) and below in a surprising\n  // number of situations. Start reading here:\n  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet#Embedded_tab\n\n  /* eslint-disable-next-line no-control-regex */\n  href = href.replace(/[\\0- ]+/g, ''); // Clobber any comments in URLs, which the browser might\n  // interpret inside an XML data island, allowing\n  // a javascript: URL to be snuck through\n\n  href = href.replace(/<!\\x2D\\x2D(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*?\\x2D\\x2D>/g, ''); // Case insensitive so we don't get faked out by JAVASCRIPT #1\n\n  var matches = href.match(/^([A-Za-z]+):/);\n\n  if (!matches) {\n    // Protocol-relative URL or no scheme\n    return;\n  }\n\n  return matches[1].toLowerCase();\n}\n\nvar ALLOWED_SCHEMES = ['data', 'http', 'https', 'ftp', 'mailto', 'sip', 'tel'];\n\nfunction createDefaultCardActionMiddleware() {\n  return [function () {\n    return function (next) {\n      return function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        var _args$ = args[0],\n            _args$$cardAction = _args$.cardAction,\n            type = _args$$cardAction.type,\n            value = _args$$cardAction.value,\n            getSignInUrl = _args$.getSignInUrl;\n\n        switch (type) {\n          case 'call':\n          case 'downloadFile':\n          case 'openUrl':\n          case 'playAudio':\n          case 'playVideo':\n          case 'showImage':\n            if (ALLOWED_SCHEMES.includes(getScheme(value))) {\n              window.open(value, '_blank', 'noopener noreferrer');\n            } else {\n              console.warn('botframework-webchat: Cannot open URL with disallowed schemes.', value);\n            }\n\n            break;\n\n          case 'signin':\n            {\n              // TODO: [P3] We should prime the URL into the OAuthCard directly, instead of calling getSessionId on-demand\n              //       This is to eliminate the delay between window.open() and location.href call\n              _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                var popup, url;\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        popup = window.open();\n                        _context.next = 3;\n                        return getSignInUrl();\n\n                      case 3:\n                        url = _context.sent;\n                        popup.location.href = url;\n\n                      case 5:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }))();\n\n              break;\n            }\n\n          default:\n            return next.apply(void 0, args);\n        }\n      };\n    };\n  }];\n}","map":{"version":3,"sources":["../../../src/Middleware/CardAction/createCoreMiddleware.js"],"names":["href","matches","ALLOWED_SCHEMES","args","type","value","getSignInUrl","getScheme","window","console","popup","url","next"],"mappings":"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","sourcesContent":["// This code is adopted from sanitize-html/naughtyScheme.\n// sanitize-html is a dependency of Web Chat but the naughtScheme function is neither exposed nor reusable.\n// https://github.com/apostrophecms/sanitize-html/blob/master/src/index.js#L526\nfunction getScheme(href) {\n  // Browsers ignore character codes of 32 (space) and below in a surprising\n  // number of situations. Start reading here:\n  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet#Embedded_tab\n\n  /* eslint-disable-next-line no-control-regex */\n  href = href.replace(/[\\x00-\\x20]+/gu, '');\n\n  // Clobber any comments in URLs, which the browser might\n  // interpret inside an XML data island, allowing\n  // a javascript: URL to be snuck through\n  href = href.replace(/<!--.*?-->/gu, '');\n\n  // Case insensitive so we don't get faked out by JAVASCRIPT #1\n  const matches = href.match(/^([a-zA-Z]+):/u);\n\n  if (!matches) {\n    // Protocol-relative URL or no scheme\n    return;\n  }\n\n  return matches[1].toLowerCase();\n}\n\nconst ALLOWED_SCHEMES = ['data', 'http', 'https', 'ftp', 'mailto', 'sip', 'tel'];\n\nexport default function createDefaultCardActionMiddleware() {\n  return [\n    () => next => (...args) => {\n      const [\n        {\n          cardAction: { type, value },\n          getSignInUrl\n        }\n      ] = args;\n\n      switch (type) {\n        case 'call':\n        case 'downloadFile':\n        case 'openUrl':\n        case 'playAudio':\n        case 'playVideo':\n        case 'showImage':\n          if (ALLOWED_SCHEMES.includes(getScheme(value))) {\n            window.open(value, '_blank', 'noopener noreferrer');\n          } else {\n            console.warn('botframework-webchat: Cannot open URL with disallowed schemes.', value);\n          }\n\n          break;\n\n        case 'signin': {\n          // TODO: [P3] We should prime the URL into the OAuthCard directly, instead of calling getSessionId on-demand\n          //       This is to eliminate the delay between window.open() and location.href call\n\n          (async function () {\n            const popup = window.open();\n            const url = await getSignInUrl();\n\n            popup.location.href = url;\n          })();\n\n          break;\n        }\n\n        default:\n          return next(...args);\n      }\n    }\n  ];\n}\n"],"sourceRoot":"component:///"},"metadata":{},"sourceType":"script"}