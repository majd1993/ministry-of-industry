{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) {\n    if (b.hasOwnProperty(p)) d[p] = b[p];\n  }\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Subject_1 = require('../Subject');\n\nvar tryCatch_1 = require('../util/tryCatch');\n\nvar errorObject_1 = require('../util/errorObject');\n\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\n\n\nfunction retryWhen(notifier) {\n  return function (source) {\n    return source.lift(new RetryWhenOperator(notifier, source));\n  };\n}\n\nexports.retryWhen = retryWhen;\n\nvar RetryWhenOperator = function () {\n  function RetryWhenOperator(notifier, source) {\n    this.notifier = notifier;\n    this.source = source;\n  }\n\n  RetryWhenOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  };\n\n  return RetryWhenOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar RetryWhenSubscriber = function (_super) {\n  __extends(RetryWhenSubscriber, _super);\n\n  function RetryWhenSubscriber(destination, notifier, source) {\n    _super.call(this, destination);\n\n    this.notifier = notifier;\n    this.source = source;\n  }\n\n  RetryWhenSubscriber.prototype.error = function (err) {\n    if (!this.isStopped) {\n      var errors = this.errors;\n      var retries = this.retries;\n      var retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject_1.Subject();\n        retries = tryCatch_1.tryCatch(this.notifier)(errors);\n\n        if (retries === errorObject_1.errorObject) {\n          return _super.prototype.error.call(this, errorObject_1.errorObject.e);\n        }\n\n        retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n      errors.next(err);\n    }\n  };\n  /** @deprecated internal use only */\n\n\n  RetryWhenSubscriber.prototype._unsubscribe = function () {\n    var _a = this,\n        errors = _a.errors,\n        retriesSubscription = _a.retriesSubscription;\n\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n\n    this.retries = null;\n  };\n\n  RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    var _a = this,\n        errors = _a.errors,\n        retries = _a.retries,\n        retriesSubscription = _a.retriesSubscription;\n\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this._unsubscribeAndRecycle();\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n    this.source.subscribe(this);\n  };\n\n  return RetryWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);","map":{"version":3,"sources":["../../src/operators/retryWhen.ts"],"names":[],"mappings":"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","sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryWhenOperator(notifier, source));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              public source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this._unsubscribeAndRecycle();\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}