{"ast":null,"code":"import _classCallCheck from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { Context, OS, SpeakerIdMessageAdapter, SpeakerRecognitionConfig } from \"../common.speech/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport { PropertyId, ResultReason, VoiceProfile, VoiceProfileEnrollmentResult, VoiceProfileResult } from \"./Exports\";\n/**\n * Defines VoiceProfileClient class for Speaker Recognition\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\n * @class VoiceProfileClient\n */\n\nexport var VoiceProfileClient = /*#__PURE__*/function () {\n  /**\n   * VoiceProfileClient constructor.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer (authentication key, region, &c)\n   */\n  function VoiceProfileClient(speechConfig) {\n    _classCallCheck(this, VoiceProfileClient);\n\n    var speechConfigImpl = speechConfig;\n    Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\n    this.privProperties = speechConfigImpl.properties.clone();\n    this.implClientSetup();\n  }\n  /**\n   * Gets the authorization token used to communicate with the service.\n   * @member VoiceProfileClient.prototype.authorizationToken\n   * @function\n   * @public\n   * @returns {string} Authorization token.\n   */\n\n\n  _createClass(VoiceProfileClient, [{\n    key: \"authorizationToken\",\n    get: function get() {\n      return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n    }\n    /**\n     * Gets/Sets the authorization token used to communicate with the service.\n     * @member VoiceProfileClient.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} token - Authorization token.\n     */\n    ,\n    set: function set(token) {\n      Contracts.throwIfNullOrWhitespace(token, \"token\");\n      this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n    }\n    /**\n     * The collection of properties and their values defined for this VoiceProfileClient.\n     * @member VoiceProfileClient.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The collection of properties and their values defined for this VoiceProfileClient.\n     */\n\n  }, {\n    key: \"properties\",\n    get: function get() {\n      return this.privProperties;\n    }\n    /**\n     * Create a speaker recognition voice profile\n     * @member VoiceProfileClient.prototype.createProfileAsync\n     * @function\n     * @public\n     * @param {VoiceProfileType} profileType Type of Voice Profile to be created\n     *        specifies the keyword to be recognized.\n     * @param {string} lang Language string (locale) for Voice Profile\n     * @param cb - Callback invoked once Voice Profile has been created.\n     * @param err - Callback invoked in case of an error.\n     */\n\n  }, {\n    key: \"createProfileAsync\",\n    value: function createProfileAsync(profileType, lang, cb, err) {\n      this.privAdapter.createProfile(profileType, lang).on(function (result) {\n        if (!!cb) {\n          var response = result.json();\n          var profile = new VoiceProfile(response.profileId, profileType);\n          cb(profile);\n        }\n      }, function (error) {\n        if (!!err) {\n          err(error);\n        }\n      });\n    }\n    /**\n     * Create a speaker recognition voice profile\n     * @member VoiceProfileClient.prototype.enrollProfileAsync\n     * @function\n     * @public\n     * @param {VoiceProfile} profile Voice Profile to create enrollment for\n     * @param {AudioConfig} audioConfig source info from which to create enrollment\n     * @param cb - Callback invoked once Enrollment request has been submitted.\n     * @param err - Callback invoked in case of an error.\n     */\n\n  }, {\n    key: \"enrollProfileAsync\",\n    value: function enrollProfileAsync(profile, audioConfig, cb, err) {\n      var configImpl = audioConfig;\n      Contracts.throwIfNullOrUndefined(configImpl, \"audioConfig\");\n      this.privAdapter.createEnrollment(profile, configImpl).on(function (result) {\n        if (!!cb) {\n          cb(new VoiceProfileEnrollmentResult(result.ok ? ResultReason.EnrolledVoiceProfile : ResultReason.Canceled, result.data, result.statusText));\n        }\n      }, function (error) {\n        if (!!err) {\n          err(error);\n        }\n      });\n    }\n    /**\n     * Delete a speaker recognition voice profile\n     * @member VoiceProfileClient.prototype.deleteProfileAsync\n     * @function\n     * @public\n     * @param {VoiceProfile} profile Voice Profile to be deleted\n     * @param cb - Callback invoked once Voice Profile has been deleted.\n     * @param err - Callback invoked in case of an error.\n     */\n\n  }, {\n    key: \"deleteProfileAsync\",\n    value: function deleteProfileAsync(profile, cb, err) {\n      var _this = this;\n\n      this.privAdapter.deleteProfile(profile).on(function (result) {\n        _this.handleResultCallbacks(result, ResultReason.DeletedVoiceProfile, cb);\n      }, function (error) {\n        if (!!err) {\n          err(error);\n        }\n      });\n    }\n    /**\n     * Remove all enrollments for a speaker recognition voice profile\n     * @member VoiceProfileClient.prototype.resetProfileAsync\n     * @function\n     * @public\n     * @param {VoiceProfile} profile Voice Profile to be reset\n     * @param cb - Callback invoked once Voice Profile has been reset.\n     * @param err - Callback invoked in case of an error.\n     */\n\n  }, {\n    key: \"resetProfileAsync\",\n    value: function resetProfileAsync(profile, cb, err) {\n      var _this2 = this;\n\n      this.privAdapter.resetProfile(profile).on(function (result) {\n        _this2.handleResultCallbacks(result, ResultReason.ResetVoiceProfile, cb);\n      }, function (error) {\n        if (!!err) {\n          err(error);\n        }\n      });\n    }\n    /**\n     * Included for compatibility\n     * @member VoiceProfileClient.prototype.close\n     * @function\n     * @public\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      return;\n    } // Does class setup, swiped from Recognizer.\n\n  }, {\n    key: \"implClientSetup\",\n    value: function implClientSetup() {\n      var osPlatform = typeof window !== \"undefined\" ? \"Browser\" : \"Node\";\n      var osName = \"unknown\";\n      var osVersion = \"unknown\";\n\n      if (typeof navigator !== \"undefined\") {\n        osPlatform = osPlatform + \"/\" + navigator.platform;\n        osName = navigator.userAgent;\n        osVersion = navigator.appVersion;\n      }\n\n      var recognizerConfig = new SpeakerRecognitionConfig(new Context(new OS(osPlatform, osName, osVersion)), this.privProperties);\n      this.privAdapter = new SpeakerIdMessageAdapter(recognizerConfig);\n    }\n  }, {\n    key: \"handleResultCallbacks\",\n    value: function handleResultCallbacks(result, successReason, cb) {\n      if (!!cb) {\n        var response = new VoiceProfileResult(result.ok ? successReason : ResultReason.Canceled, result.statusText);\n        cb(response);\n      }\n    }\n  }]);\n\n  return VoiceProfileClient;\n}();","map":{"version":3,"sources":["src/sdk/VoiceProfileClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    FileAudioSource,\r\n    IRestResponse,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    Context,\r\n    OS,\r\n    SpeakerIdMessageAdapter,\r\n    SpeakerRecognitionConfig,\r\n} from \"../common.speech/Exports\";\r\nimport { IAudioSource, PromiseResult } from \"../common/Exports\";\r\nimport { AudioConfig, AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    VoiceProfile,\r\n    VoiceProfileEnrollmentResult,\r\n    VoiceProfileResult,\r\n    VoiceProfileType,\r\n} from \"./Exports\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Defines VoiceProfileClient class for Speaker Recognition\r\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\r\n * @class VoiceProfileClient\r\n */\r\nexport class VoiceProfileClient {\r\n    protected privProperties: PropertyCollection;\r\n    private privAdapter: SpeakerIdMessageAdapter;\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member VoiceProfileClient.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member VoiceProfileClient.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this VoiceProfileClient.\r\n     * @member VoiceProfileClient.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this VoiceProfileClient.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * VoiceProfileClient constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer (authentication key, region, &c)\r\n     */\r\n    public constructor(speechConfig: SpeechConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        this.privProperties = speechConfigImpl.properties.clone();\r\n        this.implClientSetup();\r\n    }\r\n\r\n    /**\r\n     * Create a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.createProfileAsync\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfileType} profileType Type of Voice Profile to be created\r\n     *        specifies the keyword to be recognized.\r\n     * @param {string} lang Language string (locale) for Voice Profile\r\n     * @param cb - Callback invoked once Voice Profile has been created.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public createProfileAsync(profileType: VoiceProfileType, lang: string, cb?: (e: VoiceProfile) => void, err?: (e: string) => void): void {\r\n        this.privAdapter.createProfile(profileType, lang).on((result: IRestResponse) => {\r\n            if (!!cb) {\r\n                const response: { profileId: string } = result.json();\r\n                const profile = new VoiceProfile(response.profileId, profileType);\r\n                cb(profile);\r\n            }\r\n        },\r\n        (error: string) => {\r\n            if (!!err) {\r\n                err(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Create a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.enrollProfileAsync\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfile} profile Voice Profile to create enrollment for\r\n     * @param {AudioConfig} audioConfig source info from which to create enrollment\r\n     * @param cb - Callback invoked once Enrollment request has been submitted.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public enrollProfileAsync(profile: VoiceProfile, audioConfig: AudioConfig, cb?: (e: VoiceProfileEnrollmentResult) => void, err?: (e: string) => void): void {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"audioConfig\");\r\n        this.privAdapter.createEnrollment(profile, configImpl).on((result: IRestResponse) => {\r\n            if (!!cb) {\r\n                cb(\r\n                    new VoiceProfileEnrollmentResult(\r\n                        result.ok ? ResultReason.EnrolledVoiceProfile : ResultReason.Canceled,\r\n                        result.data,\r\n                        result.statusText,\r\n                    )\r\n                );\r\n            }\r\n        },\r\n        (error: string) => {\r\n            if (!!err) {\r\n                err(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Delete a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.deleteProfileAsync\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfile} profile Voice Profile to be deleted\r\n     * @param cb - Callback invoked once Voice Profile has been deleted.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public deleteProfileAsync(profile: VoiceProfile, cb?: (response: VoiceProfileResult) => void, err?: (e: string) => void): void {\r\n        this.privAdapter.deleteProfile(profile).on((result: IRestResponse) => {\r\n            this.handleResultCallbacks(result, ResultReason.DeletedVoiceProfile, cb);\r\n        },\r\n        (error: string) => {\r\n            if (!!err) {\r\n                err(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Remove all enrollments for a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.resetProfileAsync\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfile} profile Voice Profile to be reset\r\n     * @param cb - Callback invoked once Voice Profile has been reset.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public resetProfileAsync(profile: VoiceProfile, cb?: (response: VoiceProfileResult) => void, err?: (e: string) => void): void {\r\n        this.privAdapter.resetProfile(profile).on((result: IRestResponse) => {\r\n            this.handleResultCallbacks(result, ResultReason.ResetVoiceProfile, cb);\r\n        },\r\n        (error: string) => {\r\n            if (!!err) {\r\n                err(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Included for compatibility\r\n     * @member VoiceProfileClient.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n\r\n    // Does class setup, swiped from Recognizer.\r\n    protected implClientSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const recognizerConfig =\r\n            new SpeakerRecognitionConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion)),\r\n                this.privProperties);\r\n\r\n        this.privAdapter = new SpeakerIdMessageAdapter(recognizerConfig);\r\n    }\r\n\r\n    private handleResultCallbacks(result: IRestResponse, successReason: ResultReason, cb?: (response: VoiceProfileResult) => void): void {\r\n        if (!!cb) {\r\n            const response: VoiceProfileResult =\r\n                new VoiceProfileResult(\r\n                    result.ok ? successReason : ResultReason.Canceled,\r\n                    result.statusText\r\n                );\r\n            cb(response);\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}