{"ast":null,"code":"'use strict';\n\nvar whitespace = require('is-whitespace-character');\n\nmodule.exports = newline;\nvar lineFeed = '\\n';\n\nfunction newline(eat, value, silent) {\n  var character = value.charAt(0);\n  var length;\n  var subvalue;\n  var queue;\n  var index;\n\n  if (character !== lineFeed) {\n    return;\n  }\n  /* istanbul ignore if - never used (yet) */\n\n\n  if (silent) {\n    return true;\n  }\n\n  index = 1;\n  length = value.length;\n  subvalue = character;\n  queue = '';\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (!whitespace(character)) {\n      break;\n    }\n\n    queue += character;\n\n    if (character === lineFeed) {\n      subvalue += queue;\n      queue = '';\n    }\n\n    index++;\n  }\n\n  eat(subvalue);\n}","map":{"version":3,"sources":["/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/remark-parse/lib/tokenize/newline.js"],"names":["whitespace","require","module","exports","newline","lineFeed","eat","value","silent","character","charAt","length","subvalue","queue","index"],"mappings":"AAAA;;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,yBAAD,CAAxB;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,OAAjB;AAEA,IAAIC,QAAQ,GAAG,IAAf;;AAEA,SAASD,OAAT,CAAiBE,GAAjB,EAAsBC,KAAtB,EAA6BC,MAA7B,EAAqC;AACnC,MAAIC,SAAS,GAAGF,KAAK,CAACG,MAAN,CAAa,CAAb,CAAhB;AACA,MAAIC,MAAJ;AACA,MAAIC,QAAJ;AACA,MAAIC,KAAJ;AACA,MAAIC,KAAJ;;AAEA,MAAIL,SAAS,KAAKJ,QAAlB,EAA4B;AAC1B;AACD;AAED;;;AACA,MAAIG,MAAJ,EAAY;AACV,WAAO,IAAP;AACD;;AAEDM,EAAAA,KAAK,GAAG,CAAR;AACAH,EAAAA,MAAM,GAAGJ,KAAK,CAACI,MAAf;AACAC,EAAAA,QAAQ,GAAGH,SAAX;AACAI,EAAAA,KAAK,GAAG,EAAR;;AAEA,SAAOC,KAAK,GAAGH,MAAf,EAAuB;AACrBF,IAAAA,SAAS,GAAGF,KAAK,CAACG,MAAN,CAAaI,KAAb,CAAZ;;AAEA,QAAI,CAACd,UAAU,CAACS,SAAD,CAAf,EAA4B;AAC1B;AACD;;AAEDI,IAAAA,KAAK,IAAIJ,SAAT;;AAEA,QAAIA,SAAS,KAAKJ,QAAlB,EAA4B;AAC1BO,MAAAA,QAAQ,IAAIC,KAAZ;AACAA,MAAAA,KAAK,GAAG,EAAR;AACD;;AAEDC,IAAAA,KAAK;AACN;;AAEDR,EAAAA,GAAG,CAACM,QAAD,CAAH;AACD","sourcesContent":["'use strict'\n\nvar whitespace = require('is-whitespace-character')\n\nmodule.exports = newline\n\nvar lineFeed = '\\n'\n\nfunction newline(eat, value, silent) {\n  var character = value.charAt(0)\n  var length\n  var subvalue\n  var queue\n  var index\n\n  if (character !== lineFeed) {\n    return\n  }\n\n  /* istanbul ignore if - never used (yet) */\n  if (silent) {\n    return true\n  }\n\n  index = 1\n  length = value.length\n  subvalue = character\n  queue = ''\n\n  while (index < length) {\n    character = value.charAt(index)\n\n    if (!whitespace(character)) {\n      break\n    }\n\n    queue += character\n\n    if (character === lineFeed) {\n      subvalue += queue\n      queue = ''\n    }\n\n    index++\n  }\n\n  eat(subvalue)\n}\n"]},"metadata":{},"sourceType":"script"}