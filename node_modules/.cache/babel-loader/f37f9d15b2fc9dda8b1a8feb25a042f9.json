{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Exports_1 = require(\"../common.speech/Exports\");\n\nvar Contracts_1 = require(\"./Contracts\");\n\nvar Exports_2 = require(\"./Exports\");\n/**\n * Translation recognizer\n * @class TranslationRecognizer\n */\n\n\nvar TranslationRecognizer =\n/** @class */\nfunction (_super) {\n  __extends(TranslationRecognizer, _super);\n  /**\n   * Initializes an instance of the TranslationRecognizer.\n   * @constructor\n   * @param {SpeechTranslationConfig} speechConfig - Set of properties to configure this recognizer.\n   * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\n   */\n\n\n  function TranslationRecognizer(speechConfig, audioConfig) {\n    var _this = this;\n\n    var configImpl = speechConfig;\n    Contracts_1.Contracts.throwIfNull(configImpl, \"speechConfig\");\n    _this = _super.call(this, audioConfig, configImpl.properties, new Exports_1.TranslationConnectionFactory()) || this;\n    _this.privDisposedTranslationRecognizer = false;\n    _this.privProperties = configImpl.properties.clone();\n\n    if (_this.properties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\n      Contracts_1.Contracts.throwIfNullOrWhitespace(_this.properties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_TranslationVoice), Exports_2.PropertyId[Exports_2.PropertyId.SpeechServiceConnection_TranslationVoice]);\n    }\n\n    Contracts_1.Contracts.throwIfNullOrWhitespace(_this.properties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_TranslationToLanguages), Exports_2.PropertyId[Exports_2.PropertyId.SpeechServiceConnection_TranslationToLanguages]);\n    Contracts_1.Contracts.throwIfNullOrWhitespace(_this.properties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_RecoLanguage), Exports_2.PropertyId[Exports_2.PropertyId.SpeechServiceConnection_RecoLanguage]);\n    return _this;\n  }\n\n  Object.defineProperty(TranslationRecognizer.prototype, \"speechRecognitionLanguage\", {\n    /**\n     * Gets the language name that was set when the recognizer was created.\n     * @member TranslationRecognizer.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     * @returns {string} Gets the language name that was set when the recognizer was created.\n     */\n    get: function get() {\n      Contracts_1.Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n      return this.properties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_RecoLanguage);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TranslationRecognizer.prototype, \"targetLanguages\", {\n    /**\n     * Gets target languages for translation that were set when the recognizer was created.\n     * The language is specified in BCP-47 format. The translation will provide translated text for each of language.\n     * @member TranslationRecognizer.prototype.targetLanguages\n     * @function\n     * @public\n     * @returns {string[]} Gets target languages for translation that were set when the recognizer was created.\n     */\n    get: function get() {\n      Contracts_1.Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n      return this.properties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TranslationRecognizer.prototype, \"voiceName\", {\n    /**\n     * Gets the name of output voice.\n     * @member TranslationRecognizer.prototype.voiceName\n     * @function\n     * @public\n     * @returns {string} the name of output voice.\n     */\n    get: function get() {\n      Contracts_1.Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n      return this.properties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TranslationRecognizer.prototype, \"authorizationToken\", {\n    /**\n     * Gets the authorization token used to communicate with the service.\n     * @member TranslationRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @returns {string} Authorization token.\n     */\n    get: function get() {\n      return this.properties.getProperty(Exports_2.PropertyId.SpeechServiceAuthorization_Token);\n    },\n\n    /**\n     * Gets/Sets the authorization token used to communicate with the service.\n     * @member TranslationRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} value - Authorization token.\n     */\n    set: function set(value) {\n      this.properties.setProperty(Exports_2.PropertyId.SpeechServiceAuthorization_Token, value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TranslationRecognizer.prototype, \"properties\", {\n    /**\n     * The collection of properties and their values defined for this TranslationRecognizer.\n     * @member TranslationRecognizer.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The collection of properties and their values defined for this TranslationRecognizer.\n     */\n    get: function get() {\n      return this.privProperties;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Starts recognition and translation, and stops after the first utterance is recognized.\n   * The task returns the translation text as result.\n   * Note: recognizeOnceAsync returns when the first utterance has been recognized, so it is suitableonly\n   *       for single shot recognition like command or query. For long-running recognition,\n   *       use startContinuousRecognitionAsync() instead.\n   * @member TranslationRecognizer.prototype.recognizeOnceAsync\n   * @function\n   * @public\n   * @param cb - Callback that received the result when the translation has completed.\n   * @param err - Callback invoked in case of an error.\n   */\n\n  TranslationRecognizer.prototype.recognizeOnceAsync = function (cb, err) {\n    Contracts_1.Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n    this.recognizeOnceAsyncImpl(Exports_1.RecognitionMode.Conversation, cb, err);\n  };\n  /**\n   * Starts recognition and translation, until stopContinuousRecognitionAsync() is called.\n   * User must subscribe to events to receive translation results.\n   * @member TranslationRecognizer.prototype.startContinuousRecognitionAsync\n   * @function\n   * @public\n   * @param cb - Callback that received the translation has started.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  TranslationRecognizer.prototype.startContinuousRecognitionAsync = function (cb, err) {\n    this.startContinuousRecognitionAsyncImpl(Exports_1.RecognitionMode.Conversation, cb, err);\n  };\n  /**\n   * Stops continuous recognition and translation.\n   * @member TranslationRecognizer.prototype.stopContinuousRecognitionAsync\n   * @function\n   * @public\n   * @param cb - Callback that received the translation has stopped.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  TranslationRecognizer.prototype.stopContinuousRecognitionAsync = function (cb, err) {\n    this.stopContinuousRecognitionAsyncImpl(cb, err);\n  };\n  /**\n   * closes all external resources held by an instance of this class.\n   * @member TranslationRecognizer.prototype.close\n   * @function\n   * @public\n   */\n\n\n  TranslationRecognizer.prototype.close = function () {\n    Contracts_1.Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n    this.dispose(true);\n  };\n\n  TranslationRecognizer.prototype.dispose = function (disposing) {\n    if (this.privDisposedTranslationRecognizer) {\n      return;\n    }\n\n    if (disposing) {\n      this.implRecognizerStop();\n      this.privDisposedTranslationRecognizer = true;\n\n      _super.prototype.dispose.call(this, disposing);\n    }\n  };\n\n  TranslationRecognizer.prototype.createRecognizerConfig = function (speechConfig) {\n    return new Exports_1.RecognizerConfig(speechConfig, this.properties);\n  };\n\n  TranslationRecognizer.prototype.createServiceRecognizer = function (authentication, connectionFactory, audioConfig, recognizerConfig) {\n    var configImpl = audioConfig;\n    return new Exports_1.TranslationServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\n  };\n\n  return TranslationRecognizer;\n}(Exports_2.Recognizer);\n\nexports.TranslationRecognizer = TranslationRecognizer;","map":{"version":3,"sources":["src/sdk/TranslationRecognizer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    TranslationConnectionFactory,\r\n    TranslationServiceRecognizer,\r\n} from \"../common.speech/Exports\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    TranslationRecognitionCanceledEventArgs,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognitionResult,\r\n    TranslationSynthesisEventArgs,\r\n} from \"./Exports\";\r\nimport { SpeechTranslationConfig, SpeechTranslationConfigImpl } from \"./SpeechTranslationConfig\";\r\n\r\n/**\r\n * Translation recognizer\r\n * @class TranslationRecognizer\r\n */\r\nexport class TranslationRecognizer extends Recognizer {\r\n    private privDisposedTranslationRecognizer: boolean;\r\n\r\n    /**\r\n     * Initializes an instance of the TranslationRecognizer.\r\n     * @constructor\r\n     * @param {SpeechTranslationConfig} speechConfig - Set of properties to configure this recognizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig) {\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, new TranslationConnectionFactory());\r\n\r\n        this.privDisposedTranslationRecognizer = false;\r\n        this.privProperties = configImpl.properties.clone();\r\n\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\r\n            Contracts.throwIfNullOrWhitespace(\r\n                this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice),\r\n                PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\r\n        }\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages),\r\n            PropertyId[PropertyId.SpeechServiceConnection_TranslationToLanguages]);\r\n\r\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(\r\n            PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member TranslationRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member TranslationRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member TranslationRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: TranslationRecognizer, event: TranslationRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * The event synthesizing signals that a translation synthesis result is received.\r\n     * @member TranslationRecognizer.prototype.synthesizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesizing: (sender: TranslationRecognizer, event: TranslationSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the language name that was set when the recognizer was created.\r\n     * @member TranslationRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} Gets the language name that was set when the recognizer was created.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets target languages for translation that were set when the recognizer was created.\r\n     * The language is specified in BCP-47 format. The translation will provide translated text for each of language.\r\n     * @member TranslationRecognizer.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @returns {string[]} Gets target languages for translation that were set when the recognizer was created.\r\n     */\r\n    public get targetLanguages(): string[] {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n    }\r\n\r\n    /**\r\n     * Gets the name of output voice.\r\n     * @member TranslationRecognizer.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} the name of output voice.\r\n     */\r\n    public get voiceName(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member TranslationRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member TranslationRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - Authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this TranslationRecognizer.\r\n     * @member TranslationRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this TranslationRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and translation, and stops after the first utterance is recognized.\r\n     * The task returns the translation text as result.\r\n     * Note: recognizeOnceAsync returns when the first utterance has been recognized, so it is suitableonly\r\n     *       for single shot recognition like command or query. For long-running recognition,\r\n     *       use startContinuousRecognitionAsync() instead.\r\n     * @member TranslationRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the result when the translation has completed.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: TranslationRecognitionResult) => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n        this.recognizeOnceAsyncImpl(RecognitionMode.Conversation, cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and translation, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive translation results.\r\n     * @member TranslationRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the translation has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation, cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous recognition and translation.\r\n     * @member TranslationRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the translation has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        this.stopContinuousRecognitionAsyncImpl(cb, err);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member TranslationRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        this.dispose(true);\r\n    }\r\n\r\n    protected dispose(disposing: boolean): boolean {\r\n        if (this.privDisposedTranslationRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.implRecognizerStop();\r\n            this.privDisposedTranslationRecognizer = true;\r\n            super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.properties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new TranslationServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}