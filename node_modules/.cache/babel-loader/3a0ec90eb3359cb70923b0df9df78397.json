{"ast":null,"code":"import _classCallCheck from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ProxyInfo, WebsocketConnection } from \"../common.browser/Exports\";\nimport { PropertyId } from \"../sdk/Exports\";\nimport { WebsocketMessageFormatter } from \"./Exports\";\nimport { QueryParameterNames } from \"./QueryParameterNames\";\nexport var SpeechSynthesisConnectionFactory = function SpeechSynthesisConnectionFactory() {\n  var _this = this;\n\n  _classCallCheck(this, SpeechSynthesisConnectionFactory);\n\n  this.synthesisUri = \"/cognitiveservices/websocket/v1\";\n\n  this.create = function (config, authInfo, connectionId) {\n    var endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n    var region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\n    var hostSuffix = region && region.toLowerCase().startsWith(\"china\") ? \".azure.cn\" : \".microsoft.com\";\n    var host = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".tts.speech\" + hostSuffix);\n    var queryParams = {};\n\n    if (!endpoint) {\n      endpoint = host + _this.synthesisUri;\n    }\n\n    var headers = {};\n\n    if (authInfo.token !== undefined && authInfo.token !== \"\") {\n      headers[authInfo.headerName] = authInfo.token;\n    }\n\n    headers[QueryParameterNames.ConnectionIdHeader] = connectionId;\n    config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\n    return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromParameters(config.parameters), connectionId);\n  };\n};","map":{"version":3,"sources":["src/common.speech/SpeechSynthesisConnectionFactory.ts"],"names":[],"mappings":";AAAA;AACA;AAEA,SACI,SADJ,EAEI,mBAFJ,QAGO,2BAHP;AAQA,SAAS,UAAT,QAA2B,gBAA3B;AACA,SAGI,yBAHJ,QAIO,WAJP;AAMA,SACI,mBADJ,QAEO,uBAFP;AAIA,WAAa,gCAAb,GAAA,4CAAA;AAAA;;AAAA;;AAEqB,OAAA,YAAA,GAAuB,iCAAvB;;AAEV,OAAA,MAAA,GAAS,UACZ,MADY,EAEZ,QAFY,EAGZ,YAHY,EAG0B;AAEtC,QAAI,QAAQ,GAAW,MAAM,CAAC,UAAP,CAAkB,WAAlB,CAA8B,UAAU,CAAC,gCAAzC,EAA2E,SAA3E,CAAvB;AACA,QAAM,MAAM,GAAW,MAAM,CAAC,UAAP,CAAkB,WAAlB,CAA8B,UAAU,CAAC,8BAAzC,EAAyE,SAAzE,CAAvB;AACA,QAAM,UAAU,GAAI,MAAM,IAAI,MAAM,CAAC,WAAP,GAAqB,UAArB,CAAgC,OAAhC,CAAX,GAAuD,WAAvD,GAAqE,gBAAxF;AACA,QAAM,IAAI,GAAW,MAAM,CAAC,UAAP,CAAkB,WAAlB,CAA8B,UAAU,CAAC,4BAAzC,EAAuE,WAAW,MAAX,GAAoB,aAApB,GAAoC,UAA3G,CAArB;AAEA,QAAM,WAAW,GAA8B,EAA/C;;AAEA,QAAI,CAAC,QAAL,EAAe;AACX,MAAA,QAAQ,GAAG,IAAI,GAAG,KAAI,CAAC,YAAvB;AACH;;AAED,QAAM,OAAO,GAA8B,EAA3C;;AACA,QAAI,QAAQ,CAAC,KAAT,KAAmB,SAAnB,IAAgC,QAAQ,CAAC,KAAT,KAAmB,EAAvD,EAA2D;AACvD,MAAA,OAAO,CAAC,QAAQ,CAAC,UAAV,CAAP,GAA+B,QAAQ,CAAC,KAAxC;AACH;;AACD,IAAA,OAAO,CAAC,mBAAmB,CAAC,kBAArB,CAAP,GAAkD,YAAlD;AAEA,IAAA,MAAM,CAAC,UAAP,CAAkB,WAAlB,CAA8B,UAAU,CAAC,2BAAzC,EAAsE,QAAtE;AAEA,WAAO,IAAI,mBAAJ,CAAwB,QAAxB,EAAkC,WAAlC,EAA+C,OAA/C,EAAwD,IAAI,yBAAJ,EAAxD,EAAyF,SAAS,CAAC,cAAV,CAAyB,MAAM,CAAC,UAAhC,CAAzF,EAAsI,YAAtI,CAAP;AACH,GAzBM;AA0BV,CA9BD","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection, WebsocketMessageAdapter,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports\";\r\nimport { PropertyId } from \"../sdk/Exports\";\r\nimport {\r\n    AuthInfo,\r\n    SynthesizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports\";\r\nimport { ISynthesisConnectionFactory } from \"./ISynthesisConnectionFactory\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames\";\r\n\r\nexport class SpeechSynthesisConnectionFactory implements ISynthesisConnectionFactory {\r\n\r\n    private readonly synthesisUri: string = \"/cognitiveservices/websocket/v1\";\r\n\r\n    public create = (\r\n        config: SynthesizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection => {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix = (region && region.toLowerCase().startsWith(\"china\")) ? \".azure.cn\" : \".microsoft.com\";\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".tts.speech\" + hostSuffix);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n\r\n        if (!endpoint) {\r\n            endpoint = host + this.synthesisUri;\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[QueryParameterNames.ConnectionIdHeader] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromParameters(config.parameters), connectionId);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}