{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Error_1 = require(\"./Error\");\n\nvar Guid_1 = require(\"./Guid\");\n\nvar Queue_1 = require(\"./Queue\");\n\nvar Stream =\n/** @class */\nfunction () {\n  function Stream(streamId) {\n    var _this = this;\n\n    this.privIsWriteEnded = false;\n    this.privIsReadEnded = false;\n\n    this.read = function () {\n      if (_this.privIsReadEnded) {\n        throw new Error_1.InvalidOperationError(\"Stream read has already finished\");\n      }\n\n      return _this.privReaderQueue.dequeue().onSuccessContinueWith(function (streamChunk) {\n        if (streamChunk === undefined || streamChunk.isEnd) {\n          _this.privReaderQueue.dispose(\"End of stream reached\");\n        }\n\n        return streamChunk;\n      });\n    };\n\n    this.readEnded = function () {\n      if (!_this.privIsReadEnded) {\n        _this.privIsReadEnded = true;\n        _this.privReaderQueue = new Queue_1.Queue();\n      }\n    };\n\n    this.throwIfClosed = function () {\n      if (_this.privIsWriteEnded) {\n        throw new Error_1.InvalidOperationError(\"Stream closed\");\n      }\n    };\n\n    this.privId = streamId ? streamId : Guid_1.createNoDashGuid();\n    this.privReaderQueue = new Queue_1.Queue();\n  }\n\n  Object.defineProperty(Stream.prototype, \"isClosed\", {\n    get: function get() {\n      return this.privIsWriteEnded;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Stream.prototype, \"isReadEnded\", {\n    get: function get() {\n      return this.privIsReadEnded;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Stream.prototype, \"id\", {\n    get: function get() {\n      return this.privId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Stream.prototype.close = function () {\n    if (!this.privIsWriteEnded) {\n      this.writeStreamChunk({\n        buffer: null,\n        isEnd: true,\n        timeReceived: Date.now()\n      });\n      this.privIsWriteEnded = true;\n    }\n  };\n\n  Stream.prototype.writeStreamChunk = function (streamChunk) {\n    this.throwIfClosed();\n\n    if (!this.privReaderQueue.isDisposed()) {\n      try {\n        this.privReaderQueue.enqueue(streamChunk);\n      } catch (e) {// Do nothing\n      }\n    }\n  };\n\n  return Stream;\n}();\n\nexports.Stream = Stream;","map":{"version":3,"sources":["src/common/Stream.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;AAEA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAEA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAQA,IAAA,MAAA;AAAA;AAAA,YAAA;AAMI,WAAA,MAAA,CAAmB,QAAnB,EAAoC;AAApC,QAAA,KAAA,GAAA,IAAA;;AAJQ,SAAA,gBAAA,GAA4B,KAA5B;AACA,SAAA,eAAA,GAA2B,KAA3B;;AA0CD,SAAA,IAAA,GAAO,YAAA;AACV,UAAI,KAAI,CAAC,eAAT,EAA0B;AACtB,cAAM,IAAI,OAAA,CAAA,qBAAJ,CAA0B,kCAA1B,CAAN;AACH;;AAED,aAAO,KAAI,CAAC,eAAL,CACF,OADE,GAEF,qBAFE,CAEoB,UAAC,WAAD,EAAmC;AACtD,YAAI,WAAW,KAAK,SAAhB,IAA6B,WAAW,CAAC,KAA7C,EAAoD;AAChD,UAAA,KAAI,CAAC,eAAL,CAAqB,OAArB,CAA6B,uBAA7B;AACH;;AAED,eAAO,WAAP;AACH,OARE,CAAP;AASH,KAdM;;AAgBA,SAAA,SAAA,GAAY,YAAA;AACf,UAAI,CAAC,KAAI,CAAC,eAAV,EAA2B;AACvB,QAAA,KAAI,CAAC,eAAL,GAAuB,IAAvB;AACA,QAAA,KAAI,CAAC,eAAL,GAAuB,IAAI,OAAA,CAAA,KAAJ,EAAvB;AACH;AACJ,KALM;;AAOC,SAAA,aAAA,GAAgB,YAAA;AACpB,UAAI,KAAI,CAAC,gBAAT,EAA2B;AACvB,cAAM,IAAI,OAAA,CAAA,qBAAJ,CAA0B,eAA1B,CAAN;AACH;AACJ,KAJO;;AA7DJ,SAAK,MAAL,GAAc,QAAQ,GAAG,QAAH,GAAc,MAAA,CAAA,gBAAA,EAApC;AACA,SAAK,eAAL,GAAuB,IAAI,OAAA,CAAA,KAAJ,EAAvB;AACH;;AAED,EAAA,MAAA,CAAA,cAAA,CAAW,MAAA,CAAA,SAAX,EAAW,UAAX,EAAmB;SAAnB,eAAA;AACI,aAAO,KAAK,gBAAZ;AACH,KAFkB;oBAAA;;AAAA,GAAnB;AAIA,EAAA,MAAA,CAAA,cAAA,CAAW,MAAA,CAAA,SAAX,EAAW,aAAX,EAAsB;SAAtB,eAAA;AACI,aAAO,KAAK,eAAZ;AACH,KAFqB;oBAAA;;AAAA,GAAtB;AAIA,EAAA,MAAA,CAAA,cAAA,CAAW,MAAA,CAAA,SAAX,EAAW,IAAX,EAAa;SAAb,eAAA;AACI,aAAO,KAAK,MAAZ;AACH,KAFY;oBAAA;;AAAA,GAAb;;AAIO,EAAA,MAAA,CAAA,SAAA,CAAA,KAAA,GAAP,YAAA;AACI,QAAI,CAAC,KAAK,gBAAV,EAA4B;AACxB,WAAK,gBAAL,CAAsB;AAClB,QAAA,MAAM,EAAE,IADU;AAElB,QAAA,KAAK,EAAE,IAFW;AAGlB,QAAA,YAAY,EAAE,IAAI,CAAC,GAAL;AAHI,OAAtB;AAKA,WAAK,gBAAL,GAAwB,IAAxB;AACH;AACJ,GATM;;AAWA,EAAA,MAAA,CAAA,SAAA,CAAA,gBAAA,GAAP,UAAwB,WAAxB,EAA0D;AACtD,SAAK,aAAL;;AACA,QAAI,CAAC,KAAK,eAAL,CAAqB,UAArB,EAAL,EAAwC;AACpC,UAAI;AACA,aAAK,eAAL,CAAqB,OAArB,CAA6B,WAA7B;AACH,OAFD,CAEE,OAAO,CAAP,EAAU,CACR;AACH;AACJ;AACJ,GATM;;AAuCX,SAAA,MAAA;AAAC,CAzED,EAAA;;AAAa,OAAA,CAAA,MAAA,GAAA,MAAA","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"./Error\";\r\nimport { createNoDashGuid } from \"./Guid\";\r\nimport { Promise } from \"./Promise\";\r\nimport { Queue } from \"./Queue\";\r\n\r\nexport interface IStreamChunk<TBuffer> {\r\n    isEnd: boolean;\r\n    buffer: TBuffer;\r\n    timeReceived: number;\r\n}\r\n\r\nexport class Stream<TBuffer> {\r\n    private privId: string;\r\n    private privIsWriteEnded: boolean = false;\r\n    private privIsReadEnded: boolean = false;\r\n    private privReaderQueue: Queue<IStreamChunk<TBuffer>>;\r\n\r\n    public constructor(streamId?: string) {\r\n        this.privId = streamId ? streamId : createNoDashGuid();\r\n        this.privReaderQueue = new Queue<IStreamChunk<TBuffer>>();\r\n    }\r\n\r\n    public get isClosed(): boolean {\r\n        return this.privIsWriteEnded;\r\n    }\r\n\r\n    public get isReadEnded(): boolean {\r\n        return this.privIsReadEnded;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public close(): void {\r\n        if (!this.privIsWriteEnded) {\r\n            this.writeStreamChunk({\r\n                buffer: null,\r\n                isEnd: true,\r\n                timeReceived: Date.now(),\r\n            });\r\n            this.privIsWriteEnded = true;\r\n        }\r\n    }\r\n\r\n    public writeStreamChunk(streamChunk: IStreamChunk<TBuffer>): void {\r\n        this.throwIfClosed();\r\n        if (!this.privReaderQueue.isDisposed()) {\r\n            try {\r\n                this.privReaderQueue.enqueue(streamChunk);\r\n            } catch (e) {\r\n                // Do nothing\r\n            }\r\n        }\r\n    }\r\n\r\n    public read = (): Promise<IStreamChunk<TBuffer>> => {\r\n        if (this.privIsReadEnded) {\r\n            throw new InvalidOperationError(\"Stream read has already finished\");\r\n        }\r\n\r\n        return this.privReaderQueue\r\n            .dequeue()\r\n            .onSuccessContinueWith((streamChunk: IStreamChunk<TBuffer>) => {\r\n                if (streamChunk === undefined || streamChunk.isEnd) {\r\n                    this.privReaderQueue.dispose(\"End of stream reached\");\r\n                }\r\n\r\n                return streamChunk;\r\n            });\r\n    }\r\n\r\n    public readEnded = (): void => {\r\n        if (!this.privIsReadEnded) {\r\n            this.privIsReadEnded = true;\r\n            this.privReaderQueue = new Queue<IStreamChunk<TBuffer>>();\r\n        }\r\n    }\r\n\r\n    private throwIfClosed = (): void => {\r\n        if (this.privIsWriteEnded) {\r\n            throw new InvalidOperationError(\"Stream closed\");\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}