{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) {\n    if (b.hasOwnProperty(p)) d[p] = b[p];\n  }\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar isNumeric_1 = require('../util/isNumeric');\n\nvar Observable_1 = require('../Observable');\n\nvar async_1 = require('../scheduler/async');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\n\n\nvar IntervalObservable = function (_super) {\n  __extends(IntervalObservable, _super);\n\n  function IntervalObservable(period, scheduler) {\n    if (period === void 0) {\n      period = 0;\n    }\n\n    if (scheduler === void 0) {\n      scheduler = async_1.async;\n    }\n\n    _super.call(this);\n\n    this.period = period;\n    this.scheduler = scheduler;\n\n    if (!isNumeric_1.isNumeric(period) || period < 0) {\n      this.period = 0;\n    }\n\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = async_1.async;\n    }\n  }\n  /**\n   * Creates an Observable that emits sequential numbers every specified\n   * interval of time, on a specified IScheduler.\n   *\n   * <span class=\"informal\">Emits incremental numbers periodically in time.\n   * </span>\n   *\n   * <img src=\"./img/interval.png\" width=\"100%\">\n   *\n   * `interval` returns an Observable that emits an infinite sequence of\n   * ascending integers, with a constant interval of time of your choosing\n   * between those emissions. The first emission is not sent immediately, but\n   * only after the first period has passed. By default, this operator uses the\n   * `async` IScheduler to provide a notion of time, but you may pass any\n   * IScheduler to it.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n   * var numbers = Rx.Observable.interval(1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link delay}\n   *\n   * @param {number} [period=0] The interval size in milliseconds (by default)\n   * or the time unit determined by the scheduler's clock.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a sequential number each time\n   * interval.\n   * @static true\n   * @name interval\n   * @owner Observable\n   */\n\n\n  IntervalObservable.create = function (period, scheduler) {\n    if (period === void 0) {\n      period = 0;\n    }\n\n    if (scheduler === void 0) {\n      scheduler = async_1.async;\n    }\n\n    return new IntervalObservable(period, scheduler);\n  };\n\n  IntervalObservable.dispatch = function (state) {\n    var index = state.index,\n        subscriber = state.subscriber,\n        period = state.period;\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index += 1;\n    this.schedule(state, period);\n  };\n  /** @deprecated internal use only */\n\n\n  IntervalObservable.prototype._subscribe = function (subscriber) {\n    var index = 0;\n    var period = this.period;\n    var scheduler = this.scheduler;\n    subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n      index: index,\n      subscriber: subscriber,\n      period: period\n    }));\n  };\n\n  return IntervalObservable;\n}(Observable_1.Observable);\n\nexports.IntervalObservable = IntervalObservable;","map":{"version":3,"sources":["../../src/observable/IntervalObservable.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AACA,IAAA,WAAA,GAAA,OAAA,CAA0B,mBAA1B,CAAA;;AAEA,IAAA,YAAA,GAAA,OAAA,CAA2B,eAA3B,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAsB,oBAAtB,CAAA;AAEA;;;;AAIG;;;AACH,IAAA,kBAAA,GAAA,UAAA,MAAA,EAAA;AAAwC,EAAA,SAAA,CAAA,kBAAA,EAAA,MAAA,CAAA;;AAqDtC,WAAA,kBAAA,CAAoB,MAApB,EACoB,SADpB,EACiD;AADrC,QAAA,MAAA,KAAA,KAAA,CAAA,EAA0B;AAA1B,MAAA,MAAA,GAAA,CAAA;AAA0B;;AAC1B,QAAA,SAAA,KAAA,KAAA,CAAA,EAAqC;AAArC,MAAA,SAAA,GAAA,OAAA,CAAA,KAAA;AAAqC;;AAC/C,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA;;AAFkB,SAAA,MAAA,GAAA,MAAA;AACA,SAAA,SAAA,GAAA,SAAA;;AAElB,QAAI,CAAC,WAAA,CAAA,SAAA,CAAU,MAAV,CAAD,IAAsB,MAAM,GAAG,CAAnC,EAAsC;AACpC,WAAK,MAAL,GAAc,CAAd;AACD;;AACD,QAAI,CAAC,SAAD,IAAc,OAAO,SAAS,CAAC,QAAjB,KAA8B,UAAhD,EAA4D;AAC1D,WAAK,SAAL,GAAiB,OAAA,CAAA,KAAjB;AACD;AACF;AA7DD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCG;;;AACI,EAAA,kBAAA,CAAA,MAAA,GAAP,UAAc,MAAd,EACc,SADd,EAC2C;AAD7B,QAAA,MAAA,KAAA,KAAA,CAAA,EAAkB;AAAlB,MAAA,MAAA,GAAA,CAAA;AAAkB;;AAClB,QAAA,SAAA,KAAA,KAAA,CAAA,EAA6B;AAA7B,MAAA,SAAA,GAAA,OAAA,CAAA,KAAA;AAA6B;;AACzC,WAAO,IAAI,kBAAJ,CAAuB,MAAvB,EAA+B,SAA/B,CAAP;AACD,GAHM;;AAKA,EAAA,kBAAA,CAAA,QAAA,GAAP,UAAgB,KAAhB,EAA0B;AAChB,QAAA,KAAA,GAAA,KAAA,CAAA,KAAA;AAAA,QAAO,UAAA,GAAA,KAAA,CAAA,UAAP;AAAA,QAAmB,MAAA,GAAA,KAAA,CAAA,MAAnB;AAER,IAAA,UAAU,CAAC,IAAX,CAAgB,KAAhB;;AAEA,QAAI,UAAU,CAAC,MAAf,EAAuB;AACrB;AACD;;AAED,IAAA,KAAK,CAAC,KAAN,IAAe,CAAf;AAEO,SAAM,QAAN,CAAe,KAAf,EAAsB,MAAtB;AACR,GAZM;AAyBP;;;AAAqC,EAAA,kBAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAW,UAAX,EAAyC;AAC5E,QAAM,KAAK,GAAG,CAAd;AACA,QAAM,MAAM,GAAG,KAAK,MAApB;AACA,QAAM,SAAS,GAAG,KAAK,SAAvB;AAEA,IAAA,UAAU,CAAC,GAAX,CAAe,SAAS,CAAC,QAAV,CAAmB,kBAAkB,CAAC,QAAtC,EAAgD,MAAhD,EAAwD;AACrE,MAAA,KAAA,EAAA,KADqE;AAC9D,MAAA,UAAA,EAAA,UAD8D;AAClD,MAAA,MAAA,EAAA;AADkD,KAAxD,CAAf;AAGD,GARoC;;AASvC,SAAA,kBAAA;AAAC,CAzED,CAAwC,YAAA,CAAA,UAAxC,CAAA;;AAAa,OAAA,CAAA,kBAAA,GAAkB,kBAAlB","sourcesContent":["import { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IntervalObservable extends Observable<number> {\n  /**\n   * Creates an Observable that emits sequential numbers every specified\n   * interval of time, on a specified IScheduler.\n   *\n   * <span class=\"informal\">Emits incremental numbers periodically in time.\n   * </span>\n   *\n   * <img src=\"./img/interval.png\" width=\"100%\">\n   *\n   * `interval` returns an Observable that emits an infinite sequence of\n   * ascending integers, with a constant interval of time of your choosing\n   * between those emissions. The first emission is not sent immediately, but\n   * only after the first period has passed. By default, this operator uses the\n   * `async` IScheduler to provide a notion of time, but you may pass any\n   * IScheduler to it.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n   * var numbers = Rx.Observable.interval(1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link delay}\n   *\n   * @param {number} [period=0] The interval size in milliseconds (by default)\n   * or the time unit determined by the scheduler's clock.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a sequential number each time\n   * interval.\n   * @static true\n   * @name interval\n   * @owner Observable\n   */\n  static create(period: number = 0,\n                scheduler: IScheduler = async): Observable<number> {\n    return new IntervalObservable(period, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { index, subscriber, period } = state;\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index += 1;\n\n    (<any> this).schedule(state, period);\n  }\n\n  constructor(private period: number = 0,\n              private scheduler: IScheduler = async) {\n    super();\n    if (!isNumeric(period) || period < 0) {\n      this.period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = async;\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<number>) {\n    const index = 0;\n    const period = this.period;\n    const scheduler = this.scheduler;\n\n    subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n      index, subscriber, period\n    }));\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}