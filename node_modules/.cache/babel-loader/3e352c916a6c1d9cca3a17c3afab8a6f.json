{"ast":null,"code":"/**\n * Globalize Runtime v1.5.0\n *\n * http://github.com/jquery/globalize\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2020-03-25T12:19Z\n */\n\n/*!\n * Globalize Runtime v1.5.0 2020-03-25T12:19Z Released under the MIT license\n * http://git.io/TrdQbw\n */\n(function (root, factory) {\n  \"use strict\"; // UMD returnExports\n\n  if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define(factory);\n  } else if (typeof exports === \"object\") {\n    // Node, CommonJS\n    module.exports = factory();\n  } else {\n    // Globalize\n    root.Globalize = factory();\n  }\n})(this, function () {\n  /**\n   * A toString method that outputs meaningful values for objects or arrays and\n   * still performs as fast as a plain string in case variable is string, or as\n   * fast as `\"\" + number` in case variable is a number.\n   * Ref: http://jsperf.com/my-stringify\n   */\n  var toString = function toString(variable) {\n    return typeof variable === \"string\" ? variable : typeof variable === \"number\" ? \"\" + variable : JSON.stringify(variable);\n  };\n  /**\n   * formatMessage( message, data )\n   *\n   * @message [String] A message with optional {vars} to be replaced.\n   *\n   * @data [Array or JSON] Object with replacing-variables content.\n   *\n   * Return the formatted message. For example:\n   *\n   * - formatMessage( \"{0} second\", [ 1 ] ); // 1 second\n   *\n   * - formatMessage( \"{0}/{1}\", [\"m\", \"s\"] ); // m/s\n   *\n   * - formatMessage( \"{name} <{email}>\", {\n   *     name: \"Foo\",\n   *     email: \"bar@baz.qux\"\n   *   }); // Foo <bar@baz.qux>\n   */\n\n\n  var formatMessage = function formatMessage(message, data) {\n    // Replace {attribute}'s\n    message = message.replace(/{[0-9a-zA-Z-_. ]+}/g, function (name) {\n      name = name.replace(/^{([^}]*)}$/, \"$1\");\n      return toString(data[name]);\n    });\n    return message;\n  };\n\n  var objectExtend = function objectExtend() {\n    var destination = arguments[0],\n        sources = [].slice.call(arguments, 1);\n    sources.forEach(function (source) {\n      var prop;\n\n      for (prop in source) {\n        destination[prop] = source[prop];\n      }\n    });\n    return destination;\n  };\n\n  var createError = function createError(code, message, attributes) {\n    var error;\n    message = code + (message ? \": \" + formatMessage(message, attributes) : \"\");\n    error = new Error(message);\n    error.code = code;\n    objectExtend(error, attributes);\n    return error;\n  };\n  /**\n   * Pushes part to parts array, concat two consecutive parts of the same type.\n   */\n\n\n  var partsPush = function partsPush(parts, type, value) {\n    // Concat two consecutive parts of same type\n    if (parts.length && parts[parts.length - 1].type === type) {\n      parts[parts.length - 1].value += value;\n      return;\n    }\n\n    parts.push({\n      type: type,\n      value: value\n    });\n  };\n  /**\n   * formatMessage( message, data )\n   *\n   * @message [String] A message with optional {vars} to be replaced.\n   *\n   * @data [Array or JSON] Object with replacing-variables content.\n   *\n   * Return the formatted message. For example:\n   *\n   * - formatMessage( \"{0} second\", [ 1 ] );\n   * > [{type: \"variable\", value: \"1\", name: \"0\"}, {type: \"literal\", value: \" second\"}]\n   *\n   * - formatMessage( \"{0}/{1}\", [\"m\", \"s\"] );\n   * > [\n   *     { type: \"variable\", value: \"m\", name: \"0\" },\n   *     { type: \"literal\", value: \" /\" },\n   *     { type: \"variable\", value: \"s\", name: \"1\" }\n   *   ]\n   */\n\n\n  var formatMessageToParts = function formatMessageToParts(message, data) {\n    var lastOffset = 0,\n        parts = []; // Create parts.\n\n    message.replace(/{[0-9a-zA-Z-_. ]+}/g, function (nameIncludingBrackets, offset) {\n      var name = nameIncludingBrackets.slice(1, -1);\n      partsPush(parts, \"literal\", message.slice(lastOffset, offset));\n      partsPush(parts, \"variable\", data[name]);\n      parts[parts.length - 1].name = name;\n      lastOffset += offset + nameIncludingBrackets.length;\n    }); // Skip empty ones such as `{ type: 'literal', value: '' }`.\n\n    return parts.filter(function (part) {\n      return part.value !== \"\";\n    });\n  };\n  /**\n   * Returns joined parts values.\n   */\n\n\n  var partsJoin = function partsJoin(parts) {\n    return parts.map(function (part) {\n      return part.value;\n    }).join(\"\");\n  };\n\n  var runtimeStringify = function runtimeStringify(args) {\n    return JSON.stringify(args, function (key, value) {\n      if (value && value.runtimeKey) {\n        return value.runtimeKey;\n      }\n\n      return value;\n    });\n  }; // Based on http://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript-jquery\n\n\n  var stringHash = function stringHash(str) {\n    return [].reduce.call(str, function (hash, i) {\n      var chr = i.charCodeAt(0);\n      hash = (hash << 5) - hash + chr;\n      return hash | 0;\n    }, 0);\n  };\n\n  var runtimeKey = function runtimeKey(fnName, locale, args, argsStr) {\n    var hash;\n    argsStr = argsStr || runtimeStringify(args);\n    hash = stringHash(fnName + locale + argsStr);\n    return hash > 0 ? \"a\" + hash : \"b\" + Math.abs(hash);\n  };\n\n  var validate = function validate(code, message, check, attributes) {\n    if (!check) {\n      throw createError(code, message, attributes);\n    }\n  };\n\n  var validateParameterPresence = function validateParameterPresence(value, name) {\n    validate(\"E_MISSING_PARAMETER\", \"Missing required parameter `{name}`.\", value !== undefined, {\n      name: name\n    });\n  };\n\n  var validateParameterType = function validateParameterType(value, name, check, expected) {\n    validate(\"E_INVALID_PAR_TYPE\", \"Invalid `{name}` parameter ({value}). {expected} expected.\", check, {\n      expected: expected,\n      name: name,\n      value: value\n    });\n  };\n\n  var validateParameterTypeString = function validateParameterTypeString(value, name) {\n    validateParameterType(value, name, value === undefined || typeof value === \"string\", \"a string\");\n  }; // ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions?redirectlocale=en-US&redirectslug=JavaScript%2FGuide%2FRegular_Expressions\n\n\n  var regexpEscape = function regexpEscape(string) {\n    return string.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\");\n  };\n\n  var stringPad = function stringPad(str, count, right) {\n    var length;\n\n    if (typeof str !== \"string\") {\n      str = String(str);\n    }\n\n    for (length = str.length; length < count; length += 1) {\n      str = right ? str + \"0\" : \"0\" + str;\n    }\n\n    return str;\n  };\n\n  function Globalize(locale) {\n    if (!(this instanceof Globalize)) {\n      return new Globalize(locale);\n    }\n\n    validateParameterPresence(locale, \"locale\");\n    validateParameterTypeString(locale, \"locale\");\n    this._locale = locale;\n  }\n\n  Globalize.locale = function (locale) {\n    validateParameterTypeString(locale, \"locale\");\n\n    if (arguments.length) {\n      this._locale = locale;\n    }\n\n    return this._locale;\n  };\n\n  Globalize._createError = createError;\n  Globalize._formatMessage = formatMessage;\n  Globalize._formatMessageToParts = formatMessageToParts;\n  Globalize._partsJoin = partsJoin;\n  Globalize._partsPush = partsPush;\n  Globalize._regexpEscape = regexpEscape;\n  Globalize._runtimeKey = runtimeKey;\n  Globalize._stringPad = stringPad;\n  Globalize._validateParameterPresence = validateParameterPresence;\n  Globalize._validateParameterTypeString = validateParameterTypeString;\n  Globalize._validateParameterType = validateParameterType;\n  return Globalize;\n});","map":{"version":3,"sources":["/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/globalize/dist/globalize-runtime.js"],"names":["root","factory","define","amd","exports","module","Globalize","toString","variable","JSON","stringify","formatMessage","message","data","replace","name","objectExtend","destination","arguments","sources","slice","call","forEach","source","prop","createError","code","attributes","error","Error","partsPush","parts","type","value","length","push","formatMessageToParts","lastOffset","nameIncludingBrackets","offset","filter","part","partsJoin","map","join","runtimeStringify","args","key","runtimeKey","stringHash","str","reduce","hash","i","chr","charCodeAt","fnName","locale","argsStr","Math","abs","validate","check","validateParameterPresence","undefined","validateParameterType","expected","validateParameterTypeString","regexpEscape","string","stringPad","count","right","String","_locale","_createError","_formatMessage","_formatMessageToParts","_partsJoin","_partsPush","_regexpEscape","_runtimeKey","_stringPad","_validateParameterPresence","_validateParameterTypeString","_validateParameterType"],"mappings":"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","sourcesContent":["/**\n * Globalize Runtime v1.5.0\n *\n * http://github.com/jquery/globalize\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2020-03-25T12:19Z\n */\n/*!\n * Globalize Runtime v1.5.0 2020-03-25T12:19Z Released under the MIT license\n * http://git.io/TrdQbw\n */\n(function( root, factory ) {\n\n\t\"use strict\";\n\n\t// UMD returnExports\n\tif ( typeof define === \"function\" && define.amd ) {\n\n\t\t// AMD\n\t\tdefine( factory );\n\t} else if ( typeof exports === \"object\" ) {\n\n\t\t// Node, CommonJS\n\t\tmodule.exports = factory();\n\t} else {\n\n\t\t// Globalize\n\t\troot.Globalize = factory();\n\t}\n}( this, function() {\n\n\n\n\n/**\n * A toString method that outputs meaningful values for objects or arrays and\n * still performs as fast as a plain string in case variable is string, or as\n * fast as `\"\" + number` in case variable is a number.\n * Ref: http://jsperf.com/my-stringify\n */\nvar toString = function( variable ) {\n\treturn typeof variable === \"string\" ? variable : ( typeof variable === \"number\" ? \"\" +\n\t\tvariable : JSON.stringify( variable ) );\n};\n\n\n\n\n/**\n * formatMessage( message, data )\n *\n * @message [String] A message with optional {vars} to be replaced.\n *\n * @data [Array or JSON] Object with replacing-variables content.\n *\n * Return the formatted message. For example:\n *\n * - formatMessage( \"{0} second\", [ 1 ] ); // 1 second\n *\n * - formatMessage( \"{0}/{1}\", [\"m\", \"s\"] ); // m/s\n *\n * - formatMessage( \"{name} <{email}>\", {\n *     name: \"Foo\",\n *     email: \"bar@baz.qux\"\n *   }); // Foo <bar@baz.qux>\n */\nvar formatMessage = function( message, data ) {\n\n\t// Replace {attribute}'s\n\tmessage = message.replace( /{[0-9a-zA-Z-_. ]+}/g, function( name ) {\n\t\tname = name.replace( /^{([^}]*)}$/, \"$1\" );\n\t\treturn toString( data[ name ] );\n\t});\n\n\treturn message;\n};\n\n\n\n\nvar objectExtend = function() {\n\tvar destination = arguments[ 0 ],\n\t\tsources = [].slice.call( arguments, 1 );\n\n\tsources.forEach(function( source ) {\n\t\tvar prop;\n\t\tfor ( prop in source ) {\n\t\t\tdestination[ prop ] = source[ prop ];\n\t\t}\n\t});\n\n\treturn destination;\n};\n\n\n\n\nvar createError = function( code, message, attributes ) {\n\tvar error;\n\n\tmessage = code + ( message ? \": \" + formatMessage( message, attributes ) : \"\" );\n\terror = new Error( message );\n\terror.code = code;\n\n\tobjectExtend( error, attributes );\n\n\treturn error;\n};\n\n\n\n\n/**\n * Pushes part to parts array, concat two consecutive parts of the same type.\n */\nvar partsPush = function( parts, type, value ) {\n\n\t\t// Concat two consecutive parts of same type\n\t\tif ( parts.length && parts[ parts.length - 1 ].type === type ) {\n\t\t\tparts[ parts.length - 1 ].value += value;\n\t\t\treturn;\n\t\t}\n\n\t\tparts.push( { type: type, value: value } );\n};\n\n\n\n\n/**\n * formatMessage( message, data )\n *\n * @message [String] A message with optional {vars} to be replaced.\n *\n * @data [Array or JSON] Object with replacing-variables content.\n *\n * Return the formatted message. For example:\n *\n * - formatMessage( \"{0} second\", [ 1 ] );\n * > [{type: \"variable\", value: \"1\", name: \"0\"}, {type: \"literal\", value: \" second\"}]\n *\n * - formatMessage( \"{0}/{1}\", [\"m\", \"s\"] );\n * > [\n *     { type: \"variable\", value: \"m\", name: \"0\" },\n *     { type: \"literal\", value: \" /\" },\n *     { type: \"variable\", value: \"s\", name: \"1\" }\n *   ]\n */\nvar formatMessageToParts = function( message, data ) {\n\n\tvar lastOffset = 0,\n\t\tparts = [];\n\n\t// Create parts.\n\tmessage.replace( /{[0-9a-zA-Z-_. ]+}/g, function( nameIncludingBrackets, offset ) {\n\t\tvar name = nameIncludingBrackets.slice( 1, -1 );\n\t\tpartsPush( parts, \"literal\", message.slice( lastOffset, offset ));\n\t\tpartsPush( parts, \"variable\", data[ name ] );\n\t\tparts[ parts.length - 1 ].name = name;\n\t\tlastOffset += offset + nameIncludingBrackets.length;\n\t});\n\n\t// Skip empty ones such as `{ type: 'literal', value: '' }`.\n\treturn parts.filter(function( part ) {\n\t\treturn part.value !== \"\";\n\t});\n};\n\n\n\n\n/**\n * Returns joined parts values.\n */\nvar partsJoin = function( parts ) {\n\treturn parts.map( function( part ) {\n\t\treturn part.value;\n\t}).join( \"\" );\n};\n\n\n\n\nvar runtimeStringify = function( args ) {\n\treturn JSON.stringify( args, function( key, value ) {\n\t\tif ( value && value.runtimeKey ) {\n\t\t\treturn value.runtimeKey;\n\t\t}\n\t\treturn value;\n\t} );\n};\n\n\n\n\n// Based on http://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript-jquery\nvar stringHash = function( str ) {\n\treturn [].reduce.call( str, function( hash, i ) {\n\t\tvar chr = i.charCodeAt( 0 );\n\t\thash = ( ( hash << 5 ) - hash ) + chr;\n\t\treturn hash | 0;\n\t}, 0 );\n};\n\n\n\n\nvar runtimeKey = function( fnName, locale, args, argsStr ) {\n\tvar hash;\n\targsStr = argsStr || runtimeStringify( args );\n\thash = stringHash( fnName + locale + argsStr );\n\treturn hash > 0 ? \"a\" + hash : \"b\" + Math.abs( hash );\n};\n\n\n\n\nvar validate = function( code, message, check, attributes ) {\n\tif ( !check ) {\n\t\tthrow createError( code, message, attributes );\n\t}\n};\n\n\n\n\nvar validateParameterPresence = function( value, name ) {\n\tvalidate( \"E_MISSING_PARAMETER\", \"Missing required parameter `{name}`.\",\n\t\tvalue !== undefined, { name: name });\n};\n\n\n\n\nvar validateParameterType = function( value, name, check, expected ) {\n\tvalidate(\n\t\t\"E_INVALID_PAR_TYPE\",\n\t\t\"Invalid `{name}` parameter ({value}). {expected} expected.\",\n\t\tcheck,\n\t\t{\n\t\t\texpected: expected,\n\t\t\tname: name,\n\t\t\tvalue: value\n\t\t}\n\t);\n};\n\n\n\n\nvar validateParameterTypeString = function( value, name ) {\n\tvalidateParameterType(\n\t\tvalue,\n\t\tname,\n\t\tvalue === undefined || typeof value === \"string\",\n\t\t\"a string\"\n\t);\n};\n\n\n\n\n// ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions?redirectlocale=en-US&redirectslug=JavaScript%2FGuide%2FRegular_Expressions\nvar regexpEscape = function( string ) {\n\treturn string.replace( /([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\" );\n};\n\n\n\n\nvar stringPad = function( str, count, right ) {\n\tvar length;\n\tif ( typeof str !== \"string\" ) {\n\t\tstr = String( str );\n\t}\n\tfor ( length = str.length; length < count; length += 1 ) {\n\t\tstr = ( right ? ( str + \"0\" ) : ( \"0\" + str ) );\n\t}\n\treturn str;\n};\n\n\n\n\nfunction Globalize( locale ) {\n\tif ( !( this instanceof Globalize ) ) {\n\t\treturn new Globalize( locale );\n\t}\n\n\tvalidateParameterPresence( locale, \"locale\" );\n\tvalidateParameterTypeString( locale, \"locale\" );\n\n\tthis._locale = locale;\n}\n\nGlobalize.locale = function( locale ) {\n\tvalidateParameterTypeString( locale, \"locale\" );\n\n\tif ( arguments.length ) {\n\t\tthis._locale = locale;\n\t}\n\treturn this._locale;\n};\n\nGlobalize._createError = createError;\nGlobalize._formatMessage = formatMessage;\nGlobalize._formatMessageToParts = formatMessageToParts;\nGlobalize._partsJoin = partsJoin;\nGlobalize._partsPush = partsPush;\nGlobalize._regexpEscape = regexpEscape;\nGlobalize._runtimeKey = runtimeKey;\nGlobalize._stringPad = stringPad;\nGlobalize._validateParameterPresence = validateParameterPresence;\nGlobalize._validateParameterTypeString = validateParameterTypeString;\nGlobalize._validateParameterType = validateParameterType;\n\nreturn Globalize;\n\n\n\n\n}));\n"]},"metadata":{},"sourceType":"script"}