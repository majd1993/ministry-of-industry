{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Contracts_1 = require(\"./Contracts\");\n\nvar Exports_1 = require(\"./Exports\");\n/**\n * Class that defines base configurations for dialog service connector\n * @class DialogServiceConfig\n */\n\n\nvar DialogServiceConfig =\n/** @class */\nfunction () {\n  /**\n   * Creates an instance of DialogService config.\n   * @constructor\n   */\n  function DialogServiceConfig() {}\n\n  return DialogServiceConfig;\n}();\n\nexports.DialogServiceConfig = DialogServiceConfig;\n/**\n * Dialog Service configuration.\n * @class DialogServiceConfigImpl\n */\n// tslint:disable-next-line:max-classes-per-file\n\nvar DialogServiceConfigImpl =\n/** @class */\nfunction (_super) {\n  __extends(DialogServiceConfigImpl, _super);\n  /**\n   * Creates an instance of dialogService config.\n   */\n\n\n  function DialogServiceConfigImpl() {\n    var _this = _super.call(this) || this;\n\n    _this.privSpeechConfig = new Exports_1.SpeechConfigImpl();\n    return _this;\n  }\n\n  Object.defineProperty(DialogServiceConfigImpl.prototype, \"properties\", {\n    /**\n     * Provides access to custom properties.\n     * @member DialogServiceConfigImpl.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The properties.\n     */\n    get: function get() {\n      return this.privSpeechConfig.properties;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DialogServiceConfigImpl.prototype, \"speechRecognitionLanguage\", {\n    /**\n     * Gets the speech recognition language.\n     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     */\n    get: function get() {\n      return this.privSpeechConfig.speechRecognitionLanguage;\n    },\n\n    /**\n     * Sets the speech recognition language.\n     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     * @param {string} value - The language to set.\n     */\n    set: function set(value) {\n      Contracts_1.Contracts.throwIfNullOrWhitespace(value, \"value\");\n      this.privSpeechConfig.speechRecognitionLanguage = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Sets a named property as value\n   * @member DialogServiceConfigImpl.prototype.setProperty\n   * @function\n   * @public\n   * @param {PropertyId | string} name - The property to set.\n   * @param {string} value - The value.\n   */\n\n  DialogServiceConfigImpl.prototype.setProperty = function (name, value) {\n    this.privSpeechConfig.setProperty(name, value);\n  };\n  /**\n   * Sets a named property as value\n   * @member DialogServiceConfigImpl.prototype.getProperty\n   * @function\n   * @public\n   * @param {PropertyId | string} name - The property to get.\n   * @param {string} def - The default value to return in case the property is not known.\n   * @returns {string} The current value, or provided default, of the given property.\n   */\n\n\n  DialogServiceConfigImpl.prototype.getProperty = function (name, def) {\n    return this.privSpeechConfig.getProperty(name);\n  };\n  /**\n   * Sets the proxy configuration.\n   * Only relevant in Node.js environments.\n   * Added in version 1.4.0.\n   * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\n   * @param proxyPort The port number of the proxy server.\n   * @param proxyUserName The user name of the proxy server.\n   * @param proxyPassword The password of the proxy server.\n   */\n\n\n  DialogServiceConfigImpl.prototype.setProxy = function (proxyHostName, proxyPort, proxyUserName, proxyPassword) {\n    this.setProperty(Exports_1.PropertyId.SpeechServiceConnection_ProxyHostName, proxyHostName);\n    this.setProperty(Exports_1.PropertyId.SpeechServiceConnection_ProxyPort, \"\" + proxyPort);\n\n    if (proxyUserName) {\n      this.setProperty(Exports_1.PropertyId.SpeechServiceConnection_ProxyUserName, proxyUserName);\n    }\n\n    if (proxyPassword) {\n      this.setProperty(Exports_1.PropertyId.SpeechServiceConnection_ProxyPassword, proxyPassword);\n    }\n  };\n\n  DialogServiceConfigImpl.prototype.setServiceProperty = function (name, value, channel) {\n    this.privSpeechConfig.setServiceProperty(name, value, channel);\n  };\n  /**\n   * Dispose of associated resources.\n   * @member DialogServiceConfigImpl.prototype.close\n   * @function\n   * @public\n   */\n\n\n  DialogServiceConfigImpl.prototype.close = function () {\n    return;\n  };\n\n  return DialogServiceConfigImpl;\n}(DialogServiceConfig);\n\nexports.DialogServiceConfigImpl = DialogServiceConfigImpl;","map":{"version":3,"sources":["src/sdk/DialogServiceConfig.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\nimport { PropertyCollection, PropertyId, ServicePropertyChannel, SpeechConfigImpl } from \"./Exports\";\r\n\r\n/**\r\n * Class that defines base configurations for dialog service connector\r\n * @class DialogServiceConfig\r\n */\r\nexport abstract class DialogServiceConfig {\r\n\r\n    /**\r\n     * Creates an instance of DialogService config.\r\n     * @constructor\r\n     */\r\n    protected constructor() { }\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member DialogServiceConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member DialogServiceConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string, def?: string): string;\r\n\r\n    /**\r\n     * @member DialogServiceConfig.prototype.setServiceProperty\r\n     * @function\r\n     * @public\r\n     * @param {name} The name of the property.\r\n     * @param {value} Value to set.\r\n     * @param {channel} The channel used to pass the specified property to service.\r\n     * @summary Sets a property value that will be passed to service using the specified channel.\r\n     */\r\n    public abstract setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server.\r\n     * @param proxyPort The port number of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param porxyPort The port number of the proxy server.\r\n     * @param proxyUserName The user name of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n\r\n    /**\r\n     * Returns the configured language.\r\n     * @member DialogServiceConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get speechRecognitionLanguage(): string;\r\n\r\n    /**\r\n     * Gets/Sets the input language.\r\n     * @member DialogServiceConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language to use for recognition.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Not used in DialogServiceConfig\r\n     * @member DialogServiceConfig.applicationId\r\n     */\r\n    public applicationId: string;\r\n}\r\n\r\n/**\r\n * Dialog Service configuration.\r\n * @class DialogServiceConfigImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class DialogServiceConfigImpl extends DialogServiceConfig {\r\n\r\n    private privSpeechConfig: SpeechConfigImpl;\r\n\r\n    /**\r\n     * Creates an instance of dialogService config.\r\n     */\r\n    public constructor() {\r\n        super();\r\n        this.privSpeechConfig = new SpeechConfigImpl();\r\n    }\r\n\r\n    /**\r\n     * Provides access to custom properties.\r\n     * @member DialogServiceConfigImpl.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The properties.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privSpeechConfig.properties;\r\n    }\r\n\r\n    /**\r\n     * Gets the speech recognition language.\r\n     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechConfig.speechRecognitionLanguage;\r\n    }\r\n\r\n    /**\r\n     * Sets the speech recognition language.\r\n     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language to set.\r\n     */\r\n    public set speechRecognitionLanguage(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.privSpeechConfig.speechRecognitionLanguage = value;\r\n    }\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member DialogServiceConfigImpl.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {PropertyId | string} name - The property to set.\r\n     * @param {string} value - The value.\r\n     */\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        this.privSpeechConfig.setProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member DialogServiceConfigImpl.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {PropertyId | string} name - The property to get.\r\n     * @param {string} def - The default value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public getProperty(name: string | PropertyId, def?: string): string {\r\n        return this.privSpeechConfig.getProperty(name);\r\n    }\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param proxyPort The port number of the proxy server.\r\n     * @param proxyUserName The user name of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName?: string, proxyPassword?: string): void {\r\n        this.setProperty(PropertyId.SpeechServiceConnection_ProxyHostName, proxyHostName);\r\n        this.setProperty(PropertyId.SpeechServiceConnection_ProxyPort, `${proxyPort}`);\r\n        if (proxyUserName) {\r\n            this.setProperty(PropertyId.SpeechServiceConnection_ProxyUserName, proxyUserName);\r\n        }\r\n        if (proxyPassword) {\r\n            this.setProperty(PropertyId.SpeechServiceConnection_ProxyPassword, proxyPassword);\r\n        }\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void {\r\n        this.privSpeechConfig.setServiceProperty(name, value, channel);\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member DialogServiceConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}