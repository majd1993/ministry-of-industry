{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _botframeworkWebchatApi = require(\"botframework-webchat-api\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _CheckMarkIcon = _interopRequireDefault(require(\"./CheckMarkIcon\"));\n\nvar _ExclamationMarkIcon = _interopRequireDefault(require(\"./ExclamationMarkIcon\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar useLocalizer = _botframeworkWebchatApi.hooks.useLocalizer;\n\nvar NotificationIcon = function NotificationIcon(_ref) {\n  var className = _ref.className,\n      level = _ref.level;\n  var localize = useLocalizer();\n  var prefixes = {\n    error: localize('TOAST_ALT_ERROR'),\n    info: localize('TOAST_ALT_INFO'),\n    success: localize('TOAST_ALT_SUCCESS'),\n    warn: localize('TOAST_ALT_WARN')\n  };\n  var prefix = prefixes[level] || '';\n  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, level === 'success' ? /*#__PURE__*/_react.default.createElement(_CheckMarkIcon.default, {\n    \"aria-label\": prefix,\n    className: className\n  }) : /*#__PURE__*/_react.default.createElement(_ExclamationMarkIcon.default, {\n    \"aria-label\": prefix,\n    className: className\n  }));\n};\n\nNotificationIcon.defaultProps = {\n  className: undefined\n};\nNotificationIcon.propTypes = {\n  className: _propTypes.default.string,\n  level: _propTypes.default.oneOf(['error', 'info', 'success', 'warn']).isRequired\n};\nvar _default = NotificationIcon;\nexports.default = _default;","map":{"version":3,"sources":["../../src/Toast/NotificationIcon.js"],"names":["useLocalizer","hooks","NotificationIcon","className","level","localize","prefixes","error","info","success","warn","prefix","undefined","PropTypes","isRequired"],"mappings":";;;;;;;AAAA,IAAA,uBAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;;AACA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;AACA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAEA,IAAA,cAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,iBAAA,CAAA,CAAA;;AACA,IAAA,oBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,uBAAA,CAAA,CAAA;;;;;;;;IAEQA,Y,GAAiBC,uBAAAA,CAAAA,KAAAA,CAAjBD,Y;;AAER,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,IAAA,EAA0B;AAAA,MAAvBC,SAAuB,GAAA,IAAA,CAAvBA,SAAuB;AAAA,MAAZC,KAAY,GAAA,IAAA,CAAZA,KAAY;AACjD,MAAMC,QAAQ,GAAGL,YAAjB,EAAA;AAEA,MAAMM,QAAQ,GAAG;AACfC,IAAAA,KAAK,EAAEF,QAAQ,CADA,iBACA,CADA;AAEfG,IAAAA,IAAI,EAAEH,QAAQ,CAFC,gBAED,CAFC;AAGfI,IAAAA,OAAO,EAAEJ,QAAQ,CAHF,mBAGE,CAHF;AAIfK,IAAAA,IAAI,EAAEL,QAAQ,CAAA,gBAAA;AAJC,GAAjB;AAOA,MAAMM,MAAM,GAAGL,QAAQ,CAARA,KAAQ,CAARA,IAAf,EAAA;AAEA,SAAA,aACE,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,MAAA,CAAD,OAAC,CAAD,QAAA,EAAA,IAAA,EACG,KAAK,KAAL,SAAA,GAAA,aACC,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,cAAA,CAAD,OAAA,EAAA;AAAe,kBAAf,MAAA;AAAmC,IAAA,SAAS,EAAEH;AAA9C,GAAA,CADD,GAAA,aAGC,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,oBAAA,CAAD,OAAA,EAAA;AAAqB,kBAArB,MAAA;AAAyC,IAAA,SAAS,EAAEA;AAApD,GAAA,CAJJ,CADF;AAZF,CAAA;;AAuBAD,gBAAgB,CAAhBA,YAAAA,GAAgC;AAC9BC,EAAAA,SAAS,EAAES;AADmB,CAAhCV;AAIAA,gBAAgB,CAAhBA,SAAAA,GAA6B;AAC3BC,EAAAA,SAAS,EAAEU,UAAAA,CAAAA,OAAAA,CADgB,MAAA;AAE3BT,EAAAA,KAAK,EAAES,UAAAA,CAAAA,OAAAA,CAAAA,KAAAA,CAAgB,CAAA,OAAA,EAAA,MAAA,EAAA,SAAA,EAAhBA,MAAgB,CAAhBA,EAAsDC;AAFlC,CAA7BZ;eAKeA,gB","sourcesContent":["import { hooks } from 'botframework-webchat-api';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport CheckMarkIcon from './CheckMarkIcon';\nimport ExclamationMarkIcon from './ExclamationMarkIcon';\n\nconst { useLocalizer } = hooks;\n\nconst NotificationIcon = ({ className, level }) => {\n  const localize = useLocalizer();\n\n  const prefixes = {\n    error: localize('TOAST_ALT_ERROR'),\n    info: localize('TOAST_ALT_INFO'),\n    success: localize('TOAST_ALT_SUCCESS'),\n    warn: localize('TOAST_ALT_WARN')\n  };\n\n  const prefix = prefixes[level] || '';\n\n  return (\n    <React.Fragment>\n      {level === 'success' ? (\n        <CheckMarkIcon aria-label={prefix} className={className} />\n      ) : (\n        <ExclamationMarkIcon aria-label={prefix} className={className} />\n      )}\n    </React.Fragment>\n  );\n};\n\nNotificationIcon.defaultProps = {\n  className: undefined\n};\n\nNotificationIcon.propTypes = {\n  className: PropTypes.string,\n  level: PropTypes.oneOf(['error', 'info', 'success', 'warn']).isRequired\n};\n\nexport default NotificationIcon;\n"],"sourceRoot":"component:///"},"metadata":{},"sourceType":"script"}