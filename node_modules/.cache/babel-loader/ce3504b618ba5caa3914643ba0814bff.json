{"ast":null,"code":"\"use strict\"; //\n// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\n//\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Exports_1 = require(\"../common.speech/Exports\");\n\nvar ConnectionMessage_1 = require(\"./ConnectionMessage\");\n\nvar Contracts_1 = require(\"./Contracts\");\n\nvar Exports_2 = require(\"./Exports\");\n/**\n * Connection is a proxy class for managing connection to the speech service of the specified Recognizer.\n * By default, a Recognizer autonomously manages connection to service when needed.\n * The Connection class provides additional methods for users to explicitly open or close a connection and\n * to subscribe to connection status changes.\n * The use of Connection is optional, and mainly for scenarios where fine tuning of application\n * behavior based on connection status is needed. Users can optionally call Open() to manually set up a connection\n * in advance before starting recognition on the Recognizer associated with this Connection.\n * If the Recognizer needs to connect or disconnect to service, it will\n * setup or shutdown the connection independently. In this case the Connection will be notified by change of connection\n * status via Connected/Disconnected events.\n * Added in version 1.2.1.\n */\n\n\nvar Connection =\n/** @class */\nfunction () {\n  function Connection() {}\n  /**\n   * Gets the Connection instance from the specified recognizer.\n   * @param recognizer The recognizer associated with the connection.\n   * @return The Connection instance of the recognizer.\n   */\n\n\n  Connection.fromRecognizer = function (recognizer) {\n    var recoBase = recognizer.internalData;\n    var ret = new Connection();\n    ret.privInternalData = recoBase;\n    ret.setupEvents();\n    return ret;\n  };\n  /**\n   * Gets the Connection instance from the specified synthesizer.\n   * @param synthesizer The synthesizer associated with the connection.\n   * @return The Connection instance of the synthesizer.\n   */\n\n\n  Connection.fromSynthesizer = function (synthesizer) {\n    var synthBase = synthesizer.internalData;\n    var ret = new Connection();\n    ret.privInternalData = synthBase;\n    ret.setupEvents();\n    return ret;\n  };\n  /**\n   * Starts to set up connection to the service.\n   * Users can optionally call openConnection() to manually set up a connection in advance before starting recognition on the\n   * Recognizer associated with this Connection. After starting recognition, calling Open() will have no effect\n   *\n   * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to\n   * be notified when the connection is established.\n   */\n\n\n  Connection.prototype.openConnection = function () {\n    this.privInternalData.connect();\n  };\n  /**\n   * Closes the connection the service.\n   * Users can optionally call closeConnection() to manually shutdown the connection of the associated Recognizer.\n   *\n   * If closeConnection() is called during recognition, recognition will fail and cancel with an error.\n   */\n\n\n  Connection.prototype.closeConnection = function () {\n    if (this.privInternalData instanceof Exports_1.SynthesisAdapterBase) {\n      throw new Error(\"Disconnecting a synthesizer's connection is currently not supported\");\n    } else {\n      this.privInternalData.disconnect();\n    }\n  };\n  /**\n   * Appends a parameter in a message to service.\n   * Added in version 1.12.1.\n   * @param path The path of the network message.\n   * @param propertyName Name of the property\n   * @param propertyValue Value of the property. This is a json string.\n   */\n\n\n  Connection.prototype.setMessageProperty = function (path, propertyName, propertyValue) {\n    Contracts_1.Contracts.throwIfNullOrWhitespace(propertyName, \"propertyName\");\n\n    if (this.privInternalData instanceof Exports_1.ServiceRecognizerBase) {\n      if (path.toLowerCase() !== \"speech.context\") {\n        throw new Error(\"Only speech.context message property sets are currently supported for recognizer\");\n      } else {\n        this.privInternalData.speechContext.setSection(propertyName, propertyValue);\n      }\n    } else if (this.privInternalData instanceof Exports_1.SynthesisAdapterBase) {\n      if (path.toLowerCase() !== \"synthesis.context\") {\n        throw new Error(\"Only synthesis.context message property sets are currently supported for synthesizer\");\n      } else {\n        this.privInternalData.synthesisContext.setSection(propertyName, propertyValue);\n      }\n    }\n  };\n  /**\n   * Sends a message to the speech service.\n   * Added in version 1.13.0.\n   * @param path The WebSocket path of the message\n   * @param payload The payload of the message. This is a json string or a ArrayBuffer.\n   * @param success A callback to indicate success.\n   * @param error A callback to indicate an error.\n   */\n\n\n  Connection.prototype.sendMessageAsync = function (path, payload, success, error) {\n    this.privInternalData.sendNetworkMessage(path, payload, success, error);\n  };\n  /**\n   * Dispose of associated resources.\n   */\n\n\n  Connection.prototype.close = function () {\n    /* tslint:disable:no-empty */\n  };\n\n  Connection.prototype.setupEvents = function () {\n    var _this = this;\n\n    this.privEventListener = this.privInternalData.connectionEvents.attach(function (connectionEvent) {\n      if (connectionEvent.name === \"ConnectionEstablishedEvent\") {\n        if (!!_this.connected) {\n          _this.connected(new Exports_2.ConnectionEventArgs(connectionEvent.connectionId));\n        }\n      } else if (connectionEvent.name === \"ConnectionClosedEvent\") {\n        if (!!_this.disconnected) {\n          _this.disconnected(new Exports_2.ConnectionEventArgs(connectionEvent.connectionId));\n        }\n      } else if (connectionEvent.name === \"ConnectionMessageSentEvent\") {\n        if (!!_this.messageSent) {\n          _this.messageSent(new Exports_2.ConnectionMessageEventArgs(new ConnectionMessage_1.ConnectionMessageImpl(connectionEvent.message)));\n        }\n      } else if (connectionEvent.name === \"ConnectionMessageReceivedEvent\") {\n        if (!!_this.messageReceived) {\n          _this.messageReceived(new Exports_2.ConnectionMessageEventArgs(new ConnectionMessage_1.ConnectionMessageImpl(connectionEvent.message)));\n        }\n      }\n    });\n    this.privServiceEventListener = this.privInternalData.serviceEvents.attach(function (e) {\n      if (!!_this.receivedServiceMessage) {\n        _this.receivedServiceMessage(new Exports_2.ServiceEventArgs(e.jsonString, e.name));\n      }\n    });\n  };\n\n  return Connection;\n}();\n\nexports.Connection = Connection;","map":{"version":3,"sources":["src/sdk/Connection.ts"],"names":[],"mappings":"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","sourcesContent":["//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport {\r\n    ServiceRecognizerBase,\r\n    SynthesisAdapterBase,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    ConnectionEvent,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionMessageSentEvent,\r\n    IDetachable,\r\n    ServiceEvent,\r\n} from \"../common/Exports\";\r\nimport {\r\n    ConnectionMessageImpl\r\n} from \"./ConnectionMessage\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    ConnectionEventArgs,\r\n    ConnectionMessageEventArgs,\r\n    Recognizer,\r\n    ServiceEventArgs,\r\n    SpeechSynthesizer,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Connection is a proxy class for managing connection to the speech service of the specified Recognizer.\r\n * By default, a Recognizer autonomously manages connection to service when needed.\r\n * The Connection class provides additional methods for users to explicitly open or close a connection and\r\n * to subscribe to connection status changes.\r\n * The use of Connection is optional, and mainly for scenarios where fine tuning of application\r\n * behavior based on connection status is needed. Users can optionally call Open() to manually set up a connection\r\n * in advance before starting recognition on the Recognizer associated with this Connection.\r\n * If the Recognizer needs to connect or disconnect to service, it will\r\n * setup or shutdown the connection independently. In this case the Connection will be notified by change of connection\r\n * status via Connected/Disconnected events.\r\n * Added in version 1.2.1.\r\n */\r\nexport class Connection {\r\n    private privInternalData: ServiceRecognizerBase | SynthesisAdapterBase;\r\n    private privEventListener: IDetachable;\r\n    private privServiceEventListener: IDetachable;\r\n\r\n    /**\r\n     * Gets the Connection instance from the specified recognizer.\r\n     * @param recognizer The recognizer associated with the connection.\r\n     * @return The Connection instance of the recognizer.\r\n     */\r\n    public static fromRecognizer(recognizer: Recognizer): Connection {\r\n        const recoBase: ServiceRecognizerBase = recognizer.internalData as ServiceRecognizerBase;\r\n\r\n        const ret: Connection = new Connection();\r\n\r\n        ret.privInternalData = recoBase;\r\n        ret.setupEvents();\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Gets the Connection instance from the specified synthesizer.\r\n     * @param synthesizer The synthesizer associated with the connection.\r\n     * @return The Connection instance of the synthesizer.\r\n     */\r\n    public static fromSynthesizer(synthesizer: SpeechSynthesizer): Connection {\r\n        const synthBase: SynthesisAdapterBase = synthesizer.internalData as SynthesisAdapterBase;\r\n\r\n        const ret: Connection = new Connection();\r\n\r\n        ret.privInternalData = synthBase;\r\n        ret.setupEvents();\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Starts to set up connection to the service.\r\n     * Users can optionally call openConnection() to manually set up a connection in advance before starting recognition on the\r\n     * Recognizer associated with this Connection. After starting recognition, calling Open() will have no effect\r\n     *\r\n     * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to\r\n     * be notified when the connection is established.\r\n     */\r\n    public openConnection(): void {\r\n        this.privInternalData.connect();\r\n    }\r\n\r\n    /**\r\n     * Closes the connection the service.\r\n     * Users can optionally call closeConnection() to manually shutdown the connection of the associated Recognizer.\r\n     *\r\n     * If closeConnection() is called during recognition, recognition will fail and cancel with an error.\r\n     */\r\n    public closeConnection(): void {\r\n        if (this.privInternalData instanceof SynthesisAdapterBase) {\r\n            throw new Error(\"Disconnecting a synthesizer's connection is currently not supported\");\r\n        } else {\r\n            (this.privInternalData as ServiceRecognizerBase).disconnect();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Appends a parameter in a message to service.\r\n     * Added in version 1.12.1.\r\n     * @param path The path of the network message.\r\n     * @param propertyName Name of the property\r\n     * @param propertyValue Value of the property. This is a json string.\r\n     */\r\n    public setMessageProperty(path: string, propertyName: string, propertyValue: string): void {\r\n        Contracts.throwIfNullOrWhitespace(propertyName, \"propertyName\");\r\n\r\n        if (this.privInternalData instanceof ServiceRecognizerBase) {\r\n            if (path.toLowerCase() !== \"speech.context\") {\r\n                throw new Error(\"Only speech.context message property sets are currently supported for recognizer\");\r\n            } else {\r\n                (this.privInternalData as ServiceRecognizerBase).speechContext.setSection(propertyName, propertyValue);\r\n            }\r\n        } else if (this.privInternalData instanceof SynthesisAdapterBase) {\r\n            if (path.toLowerCase() !== \"synthesis.context\") {\r\n                throw new Error(\"Only synthesis.context message property sets are currently supported for synthesizer\");\r\n            } else {\r\n                (this.privInternalData as SynthesisAdapterBase).synthesisContext.setSection(propertyName, propertyValue);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends a message to the speech service.\r\n     * Added in version 1.13.0.\r\n     * @param path The WebSocket path of the message\r\n     * @param payload The payload of the message. This is a json string or a ArrayBuffer.\r\n     * @param success A callback to indicate success.\r\n     * @param error A callback to indicate an error.\r\n     */\r\n    public sendMessageAsync(path: string, payload: string | ArrayBuffer, success?: () => void, error?: (error: string) => void): void {\r\n        this.privInternalData.sendNetworkMessage(path, payload, success, error);\r\n    }\r\n\r\n    /**\r\n     * Any message from service that is not being processed by any other top level recognizers.\r\n     *\r\n     * Will be removed in 2.0.\r\n     */\r\n    public receivedServiceMessage: (args: ServiceEventArgs) => void;\r\n\r\n    /**\r\n     * Any message received from the Speech Service.\r\n     */\r\n    public messageReceived: (args: ConnectionMessageEventArgs) => void;\r\n\r\n    /**\r\n     * Any message sent to the Speech Service.\r\n     */\r\n    public messageSent: (args: ConnectionMessageEventArgs) => void;\r\n\r\n    /**\r\n     * The Connected event to indicate that the recognizer is connected to service.\r\n     */\r\n    public connected: (args: ConnectionEventArgs) => void;\r\n\r\n    /**\r\n     * The Disconnected event to indicate that the recognizer is disconnected from service.\r\n     */\r\n    public disconnected: (args: ConnectionEventArgs) => void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     */\r\n    public close(): void {\r\n        /* tslint:disable:no-empty */\r\n    }\r\n\r\n    private setupEvents(): void {\r\n        this.privEventListener = this.privInternalData.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionEstablishedEvent\") {\r\n                if (!!this.connected) {\r\n                    this.connected(new ConnectionEventArgs(connectionEvent.connectionId));\r\n                }\r\n            } else if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                if (!!this.disconnected) {\r\n                    this.disconnected(new ConnectionEventArgs(connectionEvent.connectionId));\r\n                }\r\n            } else if (connectionEvent.name === \"ConnectionMessageSentEvent\") {\r\n                if (!!this.messageSent) {\r\n                    this.messageSent(new ConnectionMessageEventArgs(new ConnectionMessageImpl((connectionEvent as ConnectionMessageSentEvent).message)));\r\n                }\r\n            } else if (connectionEvent.name === \"ConnectionMessageReceivedEvent\") {\r\n                if (!!this.messageReceived) {\r\n                    this.messageReceived(new ConnectionMessageEventArgs(new ConnectionMessageImpl((connectionEvent as ConnectionMessageReceivedEvent).message)));\r\n                }\r\n            }\r\n        });\r\n\r\n        this.privServiceEventListener = this.privInternalData.serviceEvents.attach((e: ServiceEvent): void => {\r\n            if (!!this.receivedServiceMessage) {\r\n                this.receivedServiceMessage(new ServiceEventArgs(e.jsonString, e.name));\r\n            }\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}