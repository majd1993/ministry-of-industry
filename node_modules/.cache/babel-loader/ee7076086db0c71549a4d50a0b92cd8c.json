{"ast":null,"code":"'use strict';\n\nvar entities = require('character-entities-html4');\n\nvar legacy = require('character-entities-legacy');\n\nvar hexadecimal = require('is-hexadecimal');\n\nvar alphanumerical = require('is-alphanumerical');\n\nvar dangerous = require('./dangerous.json');\n/* Expose. */\n\n\nmodule.exports = encode;\nencode.escape = escape;\nvar own = {}.hasOwnProperty;\n/* List of enforced escapes. */\n\nvar escapes = ['\"', \"'\", '<', '>', '&', '`'];\n/* Map of characters to names. */\n\nvar characters = construct();\n/* Default escapes. */\n\nvar defaultEscapes = toExpression(escapes);\n/* Surrogate pairs. */\n\nvar surrogatePair = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n/* Non-ASCII characters. */\n// eslint-disable-next-line no-control-regex, unicorn/no-hex-escape\n\nvar bmp = /[\\x01-\\t\\x0B\\f\\x0E-\\x1F\\x7F\\x81\\x8D\\x8F\\x90\\x9D\\xA0-\\uFFFF]/g;\n/* Encode special characters in `value`. */\n\nfunction encode(value, options) {\n  var settings = options || {};\n  var subset = settings.subset;\n  var set = subset ? toExpression(subset) : defaultEscapes;\n  var escapeOnly = settings.escapeOnly;\n  var omit = settings.omitOptionalSemicolons;\n  value = value.replace(set, function (char, pos, val) {\n    return one(char, val.charAt(pos + 1), settings);\n  });\n\n  if (subset || escapeOnly) {\n    return value;\n  }\n\n  return value.replace(surrogatePair, replaceSurrogatePair).replace(bmp, replaceBmp);\n\n  function replaceSurrogatePair(pair, pos, val) {\n    return toHexReference((pair.charCodeAt(0) - 0xd800) * 0x400 + pair.charCodeAt(1) - 0xdc00 + 0x10000, val.charAt(pos + 2), omit);\n  }\n\n  function replaceBmp(char, pos, val) {\n    return one(char, val.charAt(pos + 1), settings);\n  }\n}\n/* Shortcut to escape special characters in HTML. */\n\n\nfunction escape(value) {\n  return encode(value, {\n    escapeOnly: true,\n    useNamedReferences: true\n  });\n}\n/* Encode `char` according to `options`. */\n\n\nfunction one(char, next, options) {\n  var shortest = options.useShortestReferences;\n  var omit = options.omitOptionalSemicolons;\n  var named;\n  var numeric;\n\n  if ((shortest || options.useNamedReferences) && own.call(characters, char)) {\n    named = toNamed(characters[char], next, omit, options.attribute);\n  }\n\n  if (shortest || !named) {\n    numeric = toHexReference(char.charCodeAt(0), next, omit);\n  }\n\n  if (named && (!shortest || named.length < numeric.length)) {\n    return named;\n  }\n\n  return numeric;\n}\n/* Transform `code` into an entity. */\n\n\nfunction toNamed(name, next, omit, attribute) {\n  var value = '&' + name;\n\n  if (omit && own.call(legacy, name) && dangerous.indexOf(name) === -1 && (!attribute || next && next !== '=' && !alphanumerical(next))) {\n    return value;\n  }\n\n  return value + ';';\n}\n/* Transform `code` into a hexadecimal character reference. */\n\n\nfunction toHexReference(code, next, omit) {\n  var value = '&#x' + code.toString(16).toUpperCase();\n  return omit && next && !hexadecimal(next) ? value : value + ';';\n}\n/* Create an expression for `characters`. */\n\n\nfunction toExpression(characters) {\n  return new RegExp('[' + characters.join('') + ']', 'g');\n}\n/* Construct the map. */\n\n\nfunction construct() {\n  var chars = {};\n  var name;\n\n  for (name in entities) {\n    chars[entities[name]] = name;\n  }\n\n  return chars;\n}","map":{"version":3,"sources":["/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/stringify-entities/index.js"],"names":["entities","require","legacy","hexadecimal","alphanumerical","dangerous","module","exports","encode","escape","own","hasOwnProperty","escapes","characters","construct","defaultEscapes","toExpression","surrogatePair","bmp","value","options","settings","subset","set","escapeOnly","omit","omitOptionalSemicolons","replace","char","pos","val","one","charAt","replaceSurrogatePair","replaceBmp","pair","toHexReference","charCodeAt","useNamedReferences","next","shortest","useShortestReferences","named","numeric","call","toNamed","attribute","length","name","indexOf","code","toString","toUpperCase","RegExp","join","chars"],"mappings":"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","sourcesContent":["'use strict'\n\nvar entities = require('character-entities-html4')\nvar legacy = require('character-entities-legacy')\nvar hexadecimal = require('is-hexadecimal')\nvar alphanumerical = require('is-alphanumerical')\nvar dangerous = require('./dangerous.json')\n\n/* Expose. */\nmodule.exports = encode\nencode.escape = escape\n\nvar own = {}.hasOwnProperty\n\n/* List of enforced escapes. */\nvar escapes = ['\"', \"'\", '<', '>', '&', '`']\n\n/* Map of characters to names. */\nvar characters = construct()\n\n/* Default escapes. */\nvar defaultEscapes = toExpression(escapes)\n\n/* Surrogate pairs. */\nvar surrogatePair = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g\n\n/* Non-ASCII characters. */\n// eslint-disable-next-line no-control-regex, unicorn/no-hex-escape\nvar bmp = /[\\x01-\\t\\x0B\\f\\x0E-\\x1F\\x7F\\x81\\x8D\\x8F\\x90\\x9D\\xA0-\\uFFFF]/g\n\n/* Encode special characters in `value`. */\nfunction encode(value, options) {\n  var settings = options || {}\n  var subset = settings.subset\n  var set = subset ? toExpression(subset) : defaultEscapes\n  var escapeOnly = settings.escapeOnly\n  var omit = settings.omitOptionalSemicolons\n\n  value = value.replace(set, function(char, pos, val) {\n    return one(char, val.charAt(pos + 1), settings)\n  })\n\n  if (subset || escapeOnly) {\n    return value\n  }\n\n  return value\n    .replace(surrogatePair, replaceSurrogatePair)\n    .replace(bmp, replaceBmp)\n\n  function replaceSurrogatePair(pair, pos, val) {\n    return toHexReference(\n      (pair.charCodeAt(0) - 0xd800) * 0x400 +\n        pair.charCodeAt(1) -\n        0xdc00 +\n        0x10000,\n      val.charAt(pos + 2),\n      omit\n    )\n  }\n\n  function replaceBmp(char, pos, val) {\n    return one(char, val.charAt(pos + 1), settings)\n  }\n}\n\n/* Shortcut to escape special characters in HTML. */\nfunction escape(value) {\n  return encode(value, {\n    escapeOnly: true,\n    useNamedReferences: true\n  })\n}\n\n/* Encode `char` according to `options`. */\nfunction one(char, next, options) {\n  var shortest = options.useShortestReferences\n  var omit = options.omitOptionalSemicolons\n  var named\n  var numeric\n\n  if ((shortest || options.useNamedReferences) && own.call(characters, char)) {\n    named = toNamed(characters[char], next, omit, options.attribute)\n  }\n\n  if (shortest || !named) {\n    numeric = toHexReference(char.charCodeAt(0), next, omit)\n  }\n\n  if (named && (!shortest || named.length < numeric.length)) {\n    return named\n  }\n\n  return numeric\n}\n\n/* Transform `code` into an entity. */\nfunction toNamed(name, next, omit, attribute) {\n  var value = '&' + name\n\n  if (\n    omit &&\n    own.call(legacy, name) &&\n    dangerous.indexOf(name) === -1 &&\n    (!attribute || (next && next !== '=' && !alphanumerical(next)))\n  ) {\n    return value\n  }\n\n  return value + ';'\n}\n\n/* Transform `code` into a hexadecimal character reference. */\nfunction toHexReference(code, next, omit) {\n  var value = '&#x' + code.toString(16).toUpperCase()\n  return omit && next && !hexadecimal(next) ? value : value + ';'\n}\n\n/* Create an expression for `characters`. */\nfunction toExpression(characters) {\n  return new RegExp('[' + characters.join('') + ']', 'g')\n}\n\n/* Construct the map. */\nfunction construct() {\n  var chars = {}\n  var name\n\n  for (name in entities) {\n    chars[entities[name]] = name\n  }\n\n  return chars\n}\n"]},"metadata":{},"sourceType":"script"}