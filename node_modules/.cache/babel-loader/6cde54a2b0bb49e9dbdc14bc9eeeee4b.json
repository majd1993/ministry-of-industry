{"ast":null,"code":"import _regeneratorRuntime from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport * as tls from \"tls\";\nimport * as url from \"url\";\nimport * as ocsp from \"../../external/ocsp/ocsp\";\nimport { Events, OCSPCacheEntryExpiredEvent, OCSPCacheEntryNeedsRefreshEvent, OCSPCacheFetchErrorEvent, OCSPCacheHitEvent, OCSPCacheMissEvent, OCSPCacheUpdatehCompleteEvent, OCSPCacheUpdateNeededEvent, OCSPDiskCacheHitEvent, OCSPDiskCacheStoreEvent, OCSPMemoryCacheHitEvent, OCSPMemoryCacheStoreEvent, OCSPResponseRetrievedEvent, OCSPStapleReceivedEvent, OCSPVerificationFailedEvent } from \"../common/Exports\";\nimport Agent from \"agent-base\"; // @ts-ignore\n\nimport Cache from \"async-disk-cache\";\nimport HttpsProxyAgent from \"https-proxy-agent\";\nimport { OCSPCacheUpdateErrorEvent } from \"../common/OCSPEvents\";\nexport var CertCheckAgent = /*#__PURE__*/function () {\n  function CertCheckAgent(proxyInfo) {\n    _classCallCheck(this, CertCheckAgent);\n\n    if (!!proxyInfo) {\n      this.privProxyInfo = proxyInfo;\n    } // Initialize this here to allow tests to set the env variable before the cache is constructed.\n\n\n    if (!CertCheckAgent.privDiskCache) {\n      CertCheckAgent.privDiskCache = new Cache(\"microsoft-cognitiveservices-speech-sdk-cache\", {\n        supportBuffer: true,\n        location: typeof process !== \"undefined\" && !!process.env.SPEECH_OCSP_CACHE_ROOT ? process.env.SPEECH_OCSP_CACHE_ROOT : undefined\n      });\n    }\n  } // Test hook to force the disk cache to be recreated.\n\n\n  _createClass(CertCheckAgent, [{\n    key: \"GetAgent\",\n    value: function GetAgent(disableStapling) {\n      var agent = new Agent.Agent(this.CreateConnection);\n\n      if (this.privProxyInfo !== undefined && this.privProxyInfo.HostName !== undefined && this.privProxyInfo.Port > 0) {\n        var proxyName = \"privProxyInfo\";\n        agent[proxyName] = this.privProxyInfo;\n      }\n\n      return agent;\n    }\n  }, {\n    key: \"CreateConnection\",\n    value: function CreateConnection(request, options) {\n      var enableOCSP = typeof process !== \"undefined\" && process.env.NODE_TLS_REJECT_UNAUTHORIZED !== \"0\" && process.env.SPEECH_CONDUCT_OCSP_CHECK !== \"0\" && options.secureEndpoint;\n      var socketPromise;\n      options = Object.assign(Object.assign({}, options), {\n        requestOCSP: !CertCheckAgent.forceDisableOCSPStapling,\n        servername: options.host\n      });\n\n      if (!!this.privProxyInfo) {\n        var httpProxyAgent = CertCheckAgent.GetProxyAgent(this.privProxyInfo);\n        var baseAgent = httpProxyAgent;\n        socketPromise = new Promise(function (resolve, reject) {\n          baseAgent.callback(request, options, function (error, socket) {\n            if (!!error) {\n              reject(error);\n            } else {\n              resolve(socket);\n            }\n          });\n        });\n      } else {\n        socketPromise = Promise.resolve(tls.connect(options));\n      }\n\n      if (!!enableOCSP) {\n        return CertCheckAgent.OCSPCheck(socketPromise, this.privProxyInfo);\n      } else {\n        return socketPromise;\n      }\n    }\n  }], [{\n    key: \"forceReinitDiskCache\",\n    value: function forceReinitDiskCache() {\n      CertCheckAgent.privDiskCache = undefined;\n      CertCheckAgent.privMemCache = {};\n    }\n  }, {\n    key: \"GetProxyAgent\",\n    value: function GetProxyAgent(proxyInfo) {\n      var httpProxyOptions = {\n        host: proxyInfo.HostName,\n        port: proxyInfo.Port\n      };\n\n      if (!!proxyInfo.UserName) {\n        httpProxyOptions.headers = {\n          \"Proxy-Authentication\": \"Basic \" + new Buffer(proxyInfo.UserName + \":\" + (proxyInfo.Password === undefined) ? \"\" : proxyInfo.Password).toString(\"base64\")\n        };\n      } else {\n        httpProxyOptions.headers = {};\n      }\n\n      httpProxyOptions.headers.requestOCSP = \"true\";\n      var httpProxyAgent = new HttpsProxyAgent(httpProxyOptions);\n      return httpProxyAgent;\n    }\n  }, {\n    key: \"OCSPCheck\",\n    value: function OCSPCheck(socketPromise, proxyInfo) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this = this;\n\n        var ocspRequest, stapling, resolved, socket, tlsSocket;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                resolved = false;\n                _context2.next = 3;\n                return socketPromise;\n\n              case 3:\n                socket = _context2.sent;\n                socket.cork();\n                tlsSocket = socket;\n                return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  socket.on(\"OCSPResponse\", function (data) {\n                    if (!!data) {\n                      _this.onEvent(new OCSPStapleReceivedEvent());\n\n                      stapling = data;\n                    }\n                  });\n                  socket.on(\"error\", function (error) {\n                    if (!resolved) {\n                      resolved = true;\n                      socket.destroy();\n                      reject(error);\n                    }\n                  });\n                  tlsSocket.on(\"secure\", function () {\n                    return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                      var peer, issuer, sig, cacheEntry;\n                      return _regeneratorRuntime.wrap(function _callee$(_context) {\n                        while (1) {\n                          switch (_context.prev = _context.next) {\n                            case 0:\n                              peer = tlsSocket.getPeerCertificate(true);\n                              _context.prev = 1;\n                              _context.next = 4;\n                              return this.GetIssuer(peer);\n\n                            case 4:\n                              issuer = _context.sent;\n                              // We always need a request to verify the response.\n                              ocspRequest = ocsp.request.generate(peer.raw, issuer.raw); // Do we have a result for this certificate in our memory cache?\n\n                              // Do we have a result for this certificate in our memory cache?\n                              sig = ocspRequest.id.toString(\"hex\"); // Stapled response trumps cached response.\n\n                              if (stapling) {\n                                _context.next = 12;\n                                break;\n                              }\n\n                              _context.next = 10;\n                              return CertCheckAgent.GetResponseFromCache(sig, ocspRequest, proxyInfo);\n\n                            case 10:\n                              cacheEntry = _context.sent;\n                              stapling = cacheEntry;\n\n                            case 12:\n                              _context.next = 14;\n                              return this.VerifyOCSPResponse(stapling, ocspRequest, proxyInfo);\n\n                            case 14:\n                              socket.uncork();\n                              resolved = true;\n                              resolve(socket);\n                              _context.next = 24;\n                              break;\n\n                            case 19:\n                              _context.prev = 19;\n                              _context.t0 = _context[\"catch\"](1);\n                              socket.destroy();\n                              resolved = true;\n                              reject(_context.t0);\n\n                            case 24:\n                            case \"end\":\n                              return _context.stop();\n                          }\n                        }\n                      }, _callee, this, [[1, 19]]);\n                    }));\n                  });\n                }));\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n    }\n  }, {\n    key: \"GetIssuer\",\n    value: function GetIssuer(peer) {\n      if (peer.issuerCertificate) {\n        return Promise.resolve(peer.issuerCertificate);\n      }\n\n      return new Promise(function (resolve, reject) {\n        var ocspAgent = new ocsp.Agent({});\n        ocspAgent.fetchIssuer(peer, null, function (error, value) {\n          if (!!error) {\n            reject(error);\n            return;\n          }\n\n          resolve(value);\n        });\n      });\n    }\n  }, {\n    key: \"GetResponseFromCache\",\n    value: function GetResponseFromCache(signature, ocspRequest, proxyInfo) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this2 = this;\n\n        var cachedResponse, diskCacheResponse, cachedOcspResponse, tbsData, cachedStartTime, cachedNextTime, minUpdate;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                cachedResponse = CertCheckAgent.privMemCache[signature];\n\n                if (!!cachedResponse) {\n                  this.onEvent(new OCSPMemoryCacheHitEvent(signature));\n                } // Do we have a result for this certificate on disk in %TMP%?\n\n\n                if (cachedResponse) {\n                  _context3.next = 13;\n                  break;\n                }\n\n                _context3.prev = 3;\n                _context3.next = 6;\n                return CertCheckAgent.privDiskCache.get(signature);\n\n              case 6:\n                diskCacheResponse = _context3.sent;\n\n                if (!!diskCacheResponse.isCached) {\n                  CertCheckAgent.onEvent(new OCSPDiskCacheHitEvent(signature));\n                  CertCheckAgent.StoreMemoryCacheEntry(signature, diskCacheResponse.value);\n                  cachedResponse = diskCacheResponse.value;\n                }\n\n                _context3.next = 13;\n                break;\n\n              case 10:\n                _context3.prev = 10;\n                _context3.t0 = _context3[\"catch\"](3);\n                cachedResponse = null;\n\n              case 13:\n                if (cachedResponse) {\n                  _context3.next = 15;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", cachedResponse);\n\n              case 15:\n                _context3.prev = 15;\n                cachedOcspResponse = ocsp.utils.parseResponse(cachedResponse);\n                tbsData = cachedOcspResponse.value.tbsResponseData;\n\n                if (!(tbsData.responses.length < 1)) {\n                  _context3.next = 21;\n                  break;\n                }\n\n                this.onEvent(new OCSPCacheFetchErrorEvent(signature, \"Not enough data in cached response\"));\n                return _context3.abrupt(\"return\");\n\n              case 21:\n                cachedStartTime = tbsData.responses[0].thisUpdate;\n                cachedNextTime = tbsData.responses[0].nextUpdate;\n\n                if (cachedNextTime < Date.now() + this.testTimeOffset - 60000) {\n                  // Cached entry has expired.\n                  this.onEvent(new OCSPCacheEntryExpiredEvent(signature, cachedNextTime));\n                  cachedResponse = null;\n                } else {\n                  // If we're within one day of the next update, or 50% of the way through the validity period,\n                  // background an update to the cache.\n                  minUpdate = Math.min(24 * 60 * 60 * 1000, (cachedNextTime - cachedStartTime) / 2);\n\n                  if (cachedNextTime - (Date.now() + this.testTimeOffset) < minUpdate) {\n                    this.onEvent(new OCSPCacheEntryNeedsRefreshEvent(signature, cachedStartTime, cachedNextTime));\n                    this.UpdateCache(ocspRequest, proxyInfo).catch(function (error) {\n                      // Well, not much we can do here.\n                      _this2.onEvent(new OCSPCacheUpdateErrorEvent(signature, error.toString()));\n                    });\n                  } else {\n                    this.onEvent(new OCSPCacheHitEvent(signature, cachedStartTime, cachedNextTime));\n                  }\n                }\n\n                _context3.next = 30;\n                break;\n\n              case 26:\n                _context3.prev = 26;\n                _context3.t1 = _context3[\"catch\"](15);\n                this.onEvent(new OCSPCacheFetchErrorEvent(signature, _context3.t1));\n                cachedResponse = null;\n\n              case 30:\n                if (!cachedResponse) {\n                  this.onEvent(new OCSPCacheMissEvent(signature));\n                }\n\n                return _context3.abrupt(\"return\", cachedResponse);\n\n              case 32:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[3, 10], [15, 26]]);\n      }));\n    }\n  }, {\n    key: \"VerifyOCSPResponse\",\n    value: function VerifyOCSPResponse(cacheValue, ocspRequest, proxyInfo) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var _this3 = this;\n\n        var ocspResponse, sig;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                ocspResponse = cacheValue;\n                sig = ocspRequest.certID.toString(\"hex\"); // Do we have a valid response?\n\n                if (ocspResponse) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                _context4.next = 5;\n                return CertCheckAgent.GetOCSPResponse(ocspRequest, proxyInfo);\n\n              case 5:\n                ocspResponse = _context4.sent;\n\n              case 6:\n                return _context4.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  ocsp.verify({\n                    request: ocspRequest,\n                    response: ocspResponse\n                  }, function (error, result) {\n                    if (!!error) {\n                      CertCheckAgent.onEvent(new OCSPVerificationFailedEvent(ocspRequest.id.toString(\"hex\"), error)); // Bad Cached Value? One more try without the cache.\n\n                      // Bad Cached Value? One more try without the cache.\n                      if (!!cacheValue) {\n                        _this3.VerifyOCSPResponse(null, ocspRequest, proxyInfo).then(function () {\n                          resolve();\n                        }, function (error) {\n                          reject(error);\n                        });\n                      } else {\n                        reject(error);\n                      }\n                    } else {\n                      if (!cacheValue) {\n                        CertCheckAgent.StoreCacheEntry(ocspRequest.id.toString(\"hex\"), ocspResponse);\n                      }\n\n                      resolve();\n                    }\n                  });\n                }));\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n    }\n  }, {\n    key: \"UpdateCache\",\n    value: function UpdateCache(req, proxyInfo) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var signature, rawResponse;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                signature = req.id.toString(\"hex\");\n                this.onEvent(new OCSPCacheUpdateNeededEvent(signature));\n                _context5.next = 4;\n                return this.GetOCSPResponse(req, proxyInfo);\n\n              case 4:\n                rawResponse = _context5.sent;\n                this.StoreCacheEntry(signature, rawResponse);\n                this.onEvent(new OCSPCacheUpdatehCompleteEvent(req.id.toString(\"hex\")));\n\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n  }, {\n    key: \"StoreCacheEntry\",\n    value: function StoreCacheEntry(sig, rawResponse) {\n      this.StoreMemoryCacheEntry(sig, rawResponse);\n      this.StoreDiskCacheEntry(sig, rawResponse);\n    }\n  }, {\n    key: \"StoreMemoryCacheEntry\",\n    value: function StoreMemoryCacheEntry(sig, rawResponse) {\n      this.privMemCache[sig] = rawResponse;\n      this.onEvent(new OCSPMemoryCacheStoreEvent(sig));\n    }\n  }, {\n    key: \"StoreDiskCacheEntry\",\n    value: function StoreDiskCacheEntry(sig, rawResponse) {\n      var _this4 = this;\n\n      this.privDiskCache.set(sig, rawResponse).then(function () {\n        _this4.onEvent(new OCSPDiskCacheStoreEvent(sig));\n      });\n    }\n  }, {\n    key: \"GetOCSPResponse\",\n    value: function GetOCSPResponse(req, proxyInfo) {\n      var _this5 = this;\n\n      var ocspMethod = \"1.3.6.1.5.5.7.48.1\";\n      var options = {};\n\n      if (!!proxyInfo) {\n        var agent = CertCheckAgent.GetProxyAgent(proxyInfo);\n        options.agent = agent;\n      }\n\n      return new Promise(function (resolve, reject) {\n        ocsp.utils.getAuthorityInfo(req.cert, ocspMethod, function (error, uri) {\n          if (error) {\n            reject(error);\n            return;\n          }\n\n          var parsedUri = url.parse(uri);\n          options = Object.assign(Object.assign({}, options), parsedUri);\n          ocsp.utils.getResponse(options, req.data, function (error, raw) {\n            if (error) {\n              reject(error);\n              return;\n            }\n\n            _this5.onEvent(new OCSPResponseRetrievedEvent(req.certID.toString(\"hex\")));\n\n            resolve(raw);\n          });\n        });\n      });\n    }\n  }]);\n\n  return CertCheckAgent;\n}(); // Test hook to enable forcing expiration / refresh to happen.\n\nCertCheckAgent.testTimeOffset = 0; // Test hook to disable stapling for cache testing.\n\nCertCheckAgent.forceDisableOCSPStapling = false; // An in memory cache for recived responses.\n\nCertCheckAgent.privMemCache = {};\n\nCertCheckAgent.onEvent = function (event) {\n  Events.instance.onEvent(event);\n};","map":{"version":3,"sources":["src/common.browser/CertChecks.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport * as http from \"http\";\r\nimport * as tls from \"tls\";\r\nimport * as url from \"url\";\r\nimport * as ocsp from \"../../external/ocsp/ocsp\";\r\nimport {\r\n    Events,\r\n    OCSPCacheEntryExpiredEvent,\r\n    OCSPCacheEntryNeedsRefreshEvent,\r\n    OCSPCacheFetchErrorEvent,\r\n    OCSPCacheHitEvent,\r\n    OCSPCacheMissEvent,\r\n    OCSPCacheUpdatehCompleteEvent,\r\n    OCSPCacheUpdateNeededEvent,\r\n    OCSPDiskCacheHitEvent,\r\n    OCSPDiskCacheStoreEvent,\r\n    OCSPEvent,\r\n    OCSPMemoryCacheHitEvent,\r\n    OCSPMemoryCacheStoreEvent,\r\n    OCSPResponseRetrievedEvent,\r\n    OCSPStapleReceivedEvent,\r\n    OCSPVerificationFailedEvent,\r\n    OCSPWSUpgradeStartedEvent\r\n} from \"../common/Exports\";\r\nimport { IStringDictionary } from \"../common/IDictionary\";\r\nimport { ProxyInfo } from \"./ProxyInfo\";\r\n\r\nimport Agent from \"agent-base\";\r\n\r\n// @ts-ignore\r\nimport Cache from \"async-disk-cache\";\r\nimport HttpsProxyAgent from \"https-proxy-agent\";\r\nimport * as net from \"net\";\r\nimport { OCSPCacheUpdateErrorEvent } from \"../common/OCSPEvents\";\r\n\r\nexport class CertCheckAgent {\r\n\r\n    // Test hook to enable forcing expiration / refresh to happen.\r\n    public static testTimeOffset: number = 0;\r\n\r\n    // Test hook to disable stapling for cache testing.\r\n    public static forceDisableOCSPStapling: boolean = false;\r\n\r\n    // An in memory cache for recived responses.\r\n    private static privMemCache: IStringDictionary<Buffer> = {};\r\n\r\n    // The on disk cache.\r\n    private static privDiskCache: Cache;\r\n\r\n    private privProxyInfo: ProxyInfo;\r\n\r\n    constructor(proxyInfo?: ProxyInfo) {\r\n        if (!!proxyInfo) {\r\n            this.privProxyInfo = proxyInfo;\r\n        }\r\n\r\n        // Initialize this here to allow tests to set the env variable before the cache is constructed.\r\n        if (!CertCheckAgent.privDiskCache) {\r\n            CertCheckAgent.privDiskCache = new Cache(\"microsoft-cognitiveservices-speech-sdk-cache\", { supportBuffer: true, location: (typeof process !== \"undefined\" && !!process.env.SPEECH_OCSP_CACHE_ROOT) ? process.env.SPEECH_OCSP_CACHE_ROOT : undefined });\r\n        }\r\n    }\r\n\r\n    // Test hook to force the disk cache to be recreated.\r\n    public static forceReinitDiskCache(): void {\r\n        CertCheckAgent.privDiskCache = undefined;\r\n        CertCheckAgent.privMemCache = {};\r\n    }\r\n\r\n    public GetAgent(disableStapling?: boolean): http.Agent {\r\n        const agent: any = new Agent.Agent(this.CreateConnection);\r\n\r\n        if (this.privProxyInfo !== undefined &&\r\n            this.privProxyInfo.HostName !== undefined &&\r\n            this.privProxyInfo.Port > 0) {\r\n            const proxyName: string = \"privProxyInfo\";\r\n            agent[proxyName] = this.privProxyInfo;\r\n        }\r\n\r\n        return agent;\r\n    }\r\n\r\n    private static GetProxyAgent(proxyInfo: ProxyInfo): HttpsProxyAgent {\r\n        const httpProxyOptions: HttpsProxyAgent.HttpsProxyAgentOptions = {\r\n            host: proxyInfo.HostName,\r\n            port: proxyInfo.Port,\r\n        };\r\n\r\n        if (!!proxyInfo.UserName) {\r\n            httpProxyOptions.headers = {\r\n                \"Proxy-Authentication\": \"Basic \" + new Buffer(proxyInfo.UserName + \":\" + (proxyInfo.Password === undefined) ? \"\" : proxyInfo.Password).toString(\"base64\"),\r\n            };\r\n        } else {\r\n            httpProxyOptions.headers = {};\r\n        }\r\n\r\n        httpProxyOptions.headers.requestOCSP = \"true\";\r\n\r\n        const httpProxyAgent: HttpsProxyAgent = new HttpsProxyAgent(httpProxyOptions);\r\n        return httpProxyAgent;\r\n    }\r\n\r\n    private static async OCSPCheck(socketPromise: Promise<net.Socket>, proxyInfo: ProxyInfo): Promise<net.Socket> {\r\n        let ocspRequest: ocsp.Request;\r\n        let stapling: Buffer;\r\n        let resolved: boolean = false;\r\n\r\n        const socket: net.Socket = await socketPromise;\r\n        socket.cork();\r\n\r\n        const tlsSocket: tls.TLSSocket = socket as tls.TLSSocket;\r\n\r\n        return new Promise<net.Socket>((resolve: (value: net.Socket) => void, reject: (error: string | Error) => void) => {\r\n            socket.on(\"OCSPResponse\", (data: Buffer): void => {\r\n                if (!!data) {\r\n                    this.onEvent(new OCSPStapleReceivedEvent());\r\n                    stapling = data;\r\n                }\r\n            });\r\n\r\n            socket.on(\"error\", (error: Error) => {\r\n                if (!resolved) {\r\n                    resolved = true;\r\n                    socket.destroy();\r\n                    reject(error);\r\n                }\r\n            });\r\n\r\n            tlsSocket.on(\"secure\", async () => {\r\n                const peer: tls.DetailedPeerCertificate = tlsSocket.getPeerCertificate(true);\r\n                try {\r\n                    const issuer: tls.DetailedPeerCertificate = await this.GetIssuer(peer);\r\n\r\n                    // We always need a request to verify the response.\r\n                    ocspRequest = ocsp.request.generate(peer.raw, issuer.raw);\r\n\r\n                    // Do we have a result for this certificate in our memory cache?\r\n                    const sig: string = ocspRequest.id.toString(\"hex\");\r\n\r\n                    // Stapled response trumps cached response.\r\n                    if (!stapling) {\r\n                        const cacheEntry: Buffer = await CertCheckAgent.GetResponseFromCache(sig, ocspRequest, proxyInfo);\r\n                        stapling = cacheEntry;\r\n                    }\r\n\r\n                    await this.VerifyOCSPResponse(stapling, ocspRequest, proxyInfo);\r\n\r\n                    socket.uncork();\r\n                    resolved = true;\r\n                    resolve(socket);\r\n                } catch (e) {\r\n                    socket.destroy();\r\n                    resolved = true;\r\n                    reject(e);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    private static GetIssuer(peer: tls.DetailedPeerCertificate): Promise<tls.DetailedPeerCertificate> {\r\n        if (peer.issuerCertificate) {\r\n            return Promise.resolve(peer.issuerCertificate);\r\n        }\r\n\r\n        return new Promise<tls.DetailedPeerCertificate>((resolve: (value: tls.DetailedPeerCertificate) => void, reject: (reason: string) => void) => {\r\n            const ocspAgent: ocsp.Agent = new ocsp.Agent({});\r\n            ocspAgent.fetchIssuer(peer, null, (error: string, value: tls.DetailedPeerCertificate): void => {\r\n                if (!!error) {\r\n                    reject(error);\r\n                    return;\r\n                }\r\n\r\n                resolve(value);\r\n            });\r\n        });\r\n    }\r\n\r\n    private static async GetResponseFromCache(signature: string, ocspRequest: ocsp.Request, proxyInfo: ProxyInfo): Promise<Buffer> {\r\n        let cachedResponse: Buffer = CertCheckAgent.privMemCache[signature];\r\n\r\n        if (!!cachedResponse) {\r\n            this.onEvent(new OCSPMemoryCacheHitEvent(signature));\r\n        }\r\n\r\n        // Do we have a result for this certificate on disk in %TMP%?\r\n        if (!cachedResponse) {\r\n            try {\r\n                const diskCacheResponse: any = await CertCheckAgent.privDiskCache.get(signature);\r\n                if (!!diskCacheResponse.isCached) {\r\n                    CertCheckAgent.onEvent(new OCSPDiskCacheHitEvent(signature));\r\n                    CertCheckAgent.StoreMemoryCacheEntry(signature, diskCacheResponse.value);\r\n                    cachedResponse = diskCacheResponse.value;\r\n                }\r\n            } catch (error) {\r\n                cachedResponse = null;\r\n            }\r\n        }\r\n\r\n        if (!cachedResponse) {\r\n            return cachedResponse;\r\n        }\r\n\r\n        try {\r\n            const cachedOcspResponse: ocsp.Response = ocsp.utils.parseResponse(cachedResponse);\r\n            const tbsData = cachedOcspResponse.value.tbsResponseData;\r\n            if (tbsData.responses.length < 1) {\r\n                this.onEvent(new OCSPCacheFetchErrorEvent(signature, \"Not enough data in cached response\"));\r\n                return;\r\n            }\r\n\r\n            const cachedStartTime: number = tbsData.responses[0].thisUpdate;\r\n            const cachedNextTime: number = tbsData.responses[0].nextUpdate;\r\n\r\n            if (cachedNextTime < (Date.now() + this.testTimeOffset - 60000)) {\r\n                // Cached entry has expired.\r\n                this.onEvent(new OCSPCacheEntryExpiredEvent(signature, cachedNextTime));\r\n                cachedResponse = null;\r\n            } else {\r\n                // If we're within one day of the next update, or 50% of the way through the validity period,\r\n                // background an update to the cache.\r\n\r\n                const minUpdate: number = Math.min(24 * 60 * 60 * 1000, (cachedNextTime - cachedStartTime) / 2);\r\n\r\n                if ((cachedNextTime - (Date.now() + this.testTimeOffset)) < minUpdate) {\r\n                    this.onEvent(new OCSPCacheEntryNeedsRefreshEvent(signature, cachedStartTime, cachedNextTime));\r\n                    this.UpdateCache(ocspRequest, proxyInfo).catch((error: string) => {\r\n                        // Well, not much we can do here.\r\n                        this.onEvent(new OCSPCacheUpdateErrorEvent(signature, error.toString()));\r\n                    });\r\n                } else {\r\n                    this.onEvent(new OCSPCacheHitEvent(signature, cachedStartTime, cachedNextTime));\r\n                }\r\n            }\r\n        } catch (error) {\r\n            this.onEvent(new OCSPCacheFetchErrorEvent(signature, error));\r\n            cachedResponse = null;\r\n        }\r\n        if (!cachedResponse) {\r\n            this.onEvent(new OCSPCacheMissEvent(signature));\r\n        }\r\n        return cachedResponse;\r\n    }\r\n\r\n    private static async VerifyOCSPResponse(cacheValue: Buffer, ocspRequest: ocsp.Request, proxyInfo: ProxyInfo): Promise<void> {\r\n        let ocspResponse: Buffer = cacheValue;\r\n        const sig: string = ocspRequest.certID.toString(\"hex\");\r\n\r\n        // Do we have a valid response?\r\n        if (!ocspResponse) {\r\n            ocspResponse = await CertCheckAgent.GetOCSPResponse(ocspRequest, proxyInfo);\r\n        }\r\n\r\n        return new Promise<void>((resolve: () => void, reject: (error: string | Error) => void) => {\r\n            ocsp.verify({ request: ocspRequest, response: ocspResponse }, (error: string, result: any): void => {\r\n                if (!!error) {\r\n                    CertCheckAgent.onEvent(new OCSPVerificationFailedEvent(ocspRequest.id.toString(\"hex\"), error));\r\n\r\n                    // Bad Cached Value? One more try without the cache.\r\n                    if (!!cacheValue) {\r\n                        this.VerifyOCSPResponse(null, ocspRequest, proxyInfo).then(() => {\r\n                            resolve();\r\n                        }, (error: Error) => {\r\n                            reject(error);\r\n                        });\r\n                    } else {\r\n                        reject(error);\r\n                    }\r\n                } else {\r\n                    if (!cacheValue) {\r\n                        CertCheckAgent.StoreCacheEntry(ocspRequest.id.toString(\"hex\"), ocspResponse);\r\n                    }\r\n                    resolve();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    private static async UpdateCache(req: ocsp.Request, proxyInfo: ProxyInfo): Promise<void> {\r\n        const signature: string = req.id.toString(\"hex\");\r\n        this.onEvent(new OCSPCacheUpdateNeededEvent(signature));\r\n\r\n        const rawResponse: Buffer = await this.GetOCSPResponse(req, proxyInfo);\r\n        this.StoreCacheEntry(signature, rawResponse);\r\n        this.onEvent(new OCSPCacheUpdatehCompleteEvent(req.id.toString(\"hex\")));\r\n\r\n    }\r\n\r\n    private static StoreCacheEntry(sig: string, rawResponse: Buffer): void {\r\n        this.StoreMemoryCacheEntry(sig, rawResponse);\r\n        this.StoreDiskCacheEntry(sig, rawResponse);\r\n    }\r\n\r\n    private static StoreMemoryCacheEntry(sig: string, rawResponse: Buffer): void {\r\n        this.privMemCache[sig] = rawResponse;\r\n        this.onEvent(new OCSPMemoryCacheStoreEvent(sig));\r\n    }\r\n\r\n    private static StoreDiskCacheEntry(sig: string, rawResponse: Buffer): void {\r\n        this.privDiskCache.set(sig, rawResponse).then(() => {\r\n            this.onEvent(new OCSPDiskCacheStoreEvent(sig));\r\n        });\r\n    }\r\n\r\n    private static GetOCSPResponse(req: ocsp.Request, proxyInfo: ProxyInfo): Promise<Buffer> {\r\n\r\n        const ocspMethod: string = \"1.3.6.1.5.5.7.48.1\";\r\n        let options: http.RequestOptions = {};\r\n\r\n        if (!!proxyInfo) {\r\n            const agent: HttpsProxyAgent = CertCheckAgent.GetProxyAgent(proxyInfo);\r\n            options.agent = agent;\r\n        }\r\n\r\n        return new Promise<Buffer>((resolve: (value: Buffer) => void, reject: (error: string | Error) => void) => {\r\n            ocsp.utils.getAuthorityInfo(req.cert, ocspMethod, (error: string, uri: string): void => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                }\r\n\r\n                const parsedUri = url.parse(uri);\r\n                options = { ...options, ...parsedUri };\r\n\r\n                ocsp.utils.getResponse(options, req.data, (error: string, raw: Buffer): void => {\r\n                    if (error) {\r\n                        reject(error);\r\n                        return;\r\n                    }\r\n\r\n                    this.onEvent(new OCSPResponseRetrievedEvent(req.certID.toString(\"hex\")));\r\n                    resolve(raw);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    private static onEvent = (event: OCSPEvent): void => {\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private CreateConnection(request: Agent.ClientRequest, options: Agent.RequestOptions): Promise<net.Socket> {\r\n        const enableOCSP: boolean = (typeof process !== \"undefined\" && process.env.NODE_TLS_REJECT_UNAUTHORIZED !== \"0\" && process.env.SPEECH_CONDUCT_OCSP_CHECK !== \"0\") && options.secureEndpoint;\r\n        let socketPromise: Promise<net.Socket>;\r\n\r\n        options = {\r\n            ...options,\r\n            ...{\r\n                requestOCSP: !CertCheckAgent.forceDisableOCSPStapling,\r\n                servername: options.host\r\n            }\r\n        };\r\n\r\n        if (!!this.privProxyInfo) {\r\n            const httpProxyAgent: HttpsProxyAgent = CertCheckAgent.GetProxyAgent(this.privProxyInfo);\r\n            const baseAgent: Agent.Agent = httpProxyAgent as unknown as Agent.Agent;\r\n\r\n            socketPromise = new Promise<net.Socket>((resolve: (value: net.Socket) => void, reject: (error: string | Error) => void) => {\r\n                baseAgent.callback(request, options, (error: Error, socket: net.Socket) => {\r\n                    if (!!error) {\r\n                        reject(error);\r\n                    } else {\r\n                        resolve(socket);\r\n                    }\r\n                });\r\n            });\r\n        } else {\r\n            socketPromise = Promise.resolve(tls.connect(options));\r\n        }\r\n\r\n        if (!!enableOCSP) {\r\n            return CertCheckAgent.OCSPCheck(socketPromise, this.privProxyInfo);\r\n        } else {\r\n            return socketPromise;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}