{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Error_1 = require(\"./Error\");\n\nvar PromiseState;\n\n(function (PromiseState) {\n  PromiseState[PromiseState[\"None\"] = 0] = \"None\";\n  PromiseState[PromiseState[\"Resolved\"] = 1] = \"Resolved\";\n  PromiseState[PromiseState[\"Rejected\"] = 2] = \"Rejected\";\n})(PromiseState = exports.PromiseState || (exports.PromiseState = {}));\n\nvar PromiseResult =\n/** @class */\nfunction () {\n  function PromiseResult(promiseResultEventSource) {\n    var _this = this;\n\n    this.throwIfError = function () {\n      if (_this.isError) {\n        throw _this.error;\n      }\n    };\n\n    promiseResultEventSource.on(function (result) {\n      if (!_this.privIsCompleted) {\n        _this.privIsCompleted = true;\n        _this.privIsError = false;\n        _this.privResult = result;\n      }\n    }, function (error) {\n      if (!_this.privIsCompleted) {\n        _this.privIsCompleted = true;\n        _this.privIsError = true;\n        _this.privError = error;\n      }\n    });\n  }\n\n  Object.defineProperty(PromiseResult.prototype, \"isCompleted\", {\n    get: function get() {\n      return this.privIsCompleted;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PromiseResult.prototype, \"isError\", {\n    get: function get() {\n      return this.privIsError;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PromiseResult.prototype, \"error\", {\n    get: function get() {\n      return this.privError;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PromiseResult.prototype, \"result\", {\n    get: function get() {\n      return this.privResult;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PromiseResult;\n}();\n\nexports.PromiseResult = PromiseResult; // tslint:disable-next-line:max-classes-per-file\n\nvar PromiseResultEventSource =\n/** @class */\nfunction () {\n  function PromiseResultEventSource() {\n    var _this = this;\n\n    this.setResult = function (result) {\n      _this.privOnSetResult(result);\n    };\n\n    this.setError = function (error) {\n      _this.privOnSetError(error);\n    };\n\n    this.on = function (onSetResult, onSetError) {\n      _this.privOnSetResult = onSetResult;\n      _this.privOnSetError = onSetError;\n    };\n  }\n\n  return PromiseResultEventSource;\n}();\n\nexports.PromiseResultEventSource = PromiseResultEventSource; // tslint:disable-next-line:max-classes-per-file\n\nvar PromiseHelper =\n/** @class */\nfunction () {\n  function PromiseHelper() {}\n\n  PromiseHelper.whenAll = function (promises) {\n    if (!promises || promises.length === 0) {\n      throw new Error_1.ArgumentNullError(\"promises\");\n    }\n\n    var deferred = new Deferred();\n    var errors = [];\n    var completedPromises = 0;\n\n    var checkForCompletion = function checkForCompletion() {\n      completedPromises++;\n\n      if (completedPromises === promises.length) {\n        if (errors.length === 0) {\n          deferred.resolve(true);\n        } else {\n          deferred.reject(errors.join(\", \"));\n        }\n      }\n    };\n\n    for (var _i = 0, promises_1 = promises; _i < promises_1.length; _i++) {\n      var promise = promises_1[_i];\n      promise.on(function (r) {\n        checkForCompletion();\n      }, function (e) {\n        errors.push(e);\n        checkForCompletion();\n      });\n    }\n\n    return deferred.promise();\n  };\n\n  PromiseHelper.fromResult = function (result) {\n    var deferred = new Deferred();\n    deferred.resolve(result);\n    return deferred.promise();\n  };\n\n  PromiseHelper.fromError = function (error) {\n    var deferred = new Deferred();\n    deferred.reject(error);\n    return deferred.promise();\n  };\n\n  return PromiseHelper;\n}();\n\nexports.PromiseHelper = PromiseHelper; // TODO: replace with ES6 promises\n// tslint:disable-next-line:max-classes-per-file\n\nvar Promise =\n/** @class */\nfunction () {\n  function Promise(sink) {\n    var _this = this;\n\n    this.result = function () {\n      return _this.privSink.result;\n    };\n\n    this.continueWith = function (continuationCallback) {\n      if (!continuationCallback) {\n        throw new Error_1.ArgumentNullError(\"continuationCallback\");\n      }\n\n      var continuationDeferral = new Deferred();\n\n      _this.privSink.on(function (r) {\n        try {\n          var continuationResult = continuationCallback(_this.privSink.result);\n          continuationDeferral.resolve(continuationResult);\n        } catch (e) {\n          continuationDeferral.reject(e);\n        }\n      }, function (error) {\n        try {\n          var continuationResult = continuationCallback(_this.privSink.result);\n          continuationDeferral.resolve(continuationResult);\n        } catch (e) {\n          continuationDeferral.reject(\"'Error handler for error \" + error + \" threw error \" + e + \"'\");\n        }\n      });\n\n      return continuationDeferral.promise();\n    };\n\n    this.onSuccessContinueWith = function (continuationCallback) {\n      if (!continuationCallback) {\n        throw new Error_1.ArgumentNullError(\"continuationCallback\");\n      }\n\n      var continuationDeferral = new Deferred();\n\n      _this.privSink.on(function (r) {\n        try {\n          var continuationResult = continuationCallback(r);\n          continuationDeferral.resolve(continuationResult);\n        } catch (e) {\n          continuationDeferral.reject(e);\n        }\n      }, function (error) {\n        continuationDeferral.reject(error);\n      });\n\n      return continuationDeferral.promise();\n    };\n\n    this.continueWithPromise = function (continuationCallback) {\n      if (!continuationCallback) {\n        throw new Error_1.ArgumentNullError(\"continuationCallback\");\n      }\n\n      var continuationDeferral = new Deferred();\n\n      _this.privSink.on(function (r) {\n        try {\n          var continuationPromise = continuationCallback(_this.privSink.result);\n\n          if (!continuationPromise) {\n            throw new Error(\"'Continuation callback did not return promise'\");\n          }\n\n          continuationPromise.on(function (continuationResult) {\n            continuationDeferral.resolve(continuationResult);\n          }, function (e) {\n            continuationDeferral.reject(e);\n          });\n        } catch (e) {\n          continuationDeferral.reject(e);\n        }\n      }, function (error) {\n        try {\n          var continuationPromise = continuationCallback(_this.privSink.result);\n\n          if (!continuationPromise) {\n            throw new Error(\"Continuation callback did not return promise\");\n          }\n\n          continuationPromise.on(function (continuationResult) {\n            continuationDeferral.resolve(continuationResult);\n          }, function (e) {\n            continuationDeferral.reject(e);\n          });\n        } catch (e) {\n          continuationDeferral.reject(\"'Error handler for error \" + error + \" threw error \" + e + \"'\");\n        }\n      });\n\n      return continuationDeferral.promise();\n    };\n\n    this.onSuccessContinueWithPromise = function (continuationCallback) {\n      if (!continuationCallback) {\n        throw new Error_1.ArgumentNullError(\"continuationCallback\");\n      }\n\n      var continuationDeferral = new Deferred();\n\n      _this.privSink.on(function (r) {\n        try {\n          var continuationPromise = continuationCallback(r);\n\n          if (!continuationPromise) {\n            throw new Error(\"Continuation callback did not return promise\");\n          }\n\n          continuationPromise.on(function (continuationResult) {\n            continuationDeferral.resolve(continuationResult);\n          }, function (e) {\n            continuationDeferral.reject(e);\n          });\n        } catch (e) {\n          continuationDeferral.reject(e);\n        }\n      }, function (error) {\n        continuationDeferral.reject(error);\n      });\n\n      return continuationDeferral.promise();\n    };\n\n    this.on = function (successCallback, errorCallback) {\n      if (!successCallback) {\n        throw new Error_1.ArgumentNullError(\"successCallback\");\n      }\n\n      if (!errorCallback) {\n        throw new Error_1.ArgumentNullError(\"errorCallback\");\n      }\n\n      _this.privSink.on(successCallback, errorCallback);\n\n      return _this;\n    };\n\n    this.finally = function (callback) {\n      if (!callback) {\n        throw new Error_1.ArgumentNullError(\"callback\");\n      }\n\n      var callbackWrapper = function callbackWrapper(_) {\n        callback();\n      };\n\n      return _this.on(callbackWrapper, callbackWrapper);\n    };\n\n    this.privSink = sink;\n  }\n\n  return Promise;\n}();\n\nexports.Promise = Promise; // tslint:disable-next-line:max-classes-per-file\n\nvar Deferred =\n/** @class */\nfunction () {\n  function Deferred() {\n    var _this = this;\n\n    this.state = function () {\n      return _this.privSink.state;\n    };\n\n    this.promise = function () {\n      return _this.privPromise;\n    };\n\n    this.resolve = function (result) {\n      _this.privSink.resolve(result);\n\n      return _this;\n    };\n\n    this.reject = function (error) {\n      _this.privSink.reject(error);\n\n      return _this;\n    };\n\n    this.privSink = new Sink();\n    this.privPromise = new Promise(this.privSink);\n  }\n\n  return Deferred;\n}();\n\nexports.Deferred = Deferred; // tslint:disable-next-line:max-classes-per-file\n\nvar Sink =\n/** @class */\nfunction () {\n  function Sink() {\n    var _this = this;\n\n    this.privState = PromiseState.None;\n    this.privPromiseResult = null;\n    this.privPromiseResultEvents = null;\n    this.privSuccessHandlers = [];\n    this.privErrorHandlers = [];\n\n    this.resolve = function (result) {\n      if (_this.privState !== PromiseState.None) {\n        throw new Error(\"'Cannot resolve a completed promise'\");\n      }\n\n      _this.privState = PromiseState.Resolved;\n\n      _this.privPromiseResultEvents.setResult(result);\n\n      for (var i = 0; i < _this.privSuccessHandlers.length; i++) {\n        _this.executeSuccessCallback(result, _this.privSuccessHandlers[i], _this.privErrorHandlers[i]);\n      }\n\n      _this.detachHandlers();\n    };\n\n    this.reject = function (error) {\n      if (_this.privState !== PromiseState.None) {\n        throw new Error(\"'Cannot reject a completed promise'\");\n      }\n\n      _this.privState = PromiseState.Rejected;\n\n      _this.privPromiseResultEvents.setError(error);\n\n      for (var _i = 0, _a = _this.privErrorHandlers; _i < _a.length; _i++) {\n        var errorHandler = _a[_i];\n\n        _this.executeErrorCallback(error, errorHandler);\n      }\n\n      _this.detachHandlers();\n    };\n\n    this.on = function (successCallback, errorCallback) {\n      if (successCallback == null) {\n        successCallback = function successCallback(r) {\n          return;\n        };\n      }\n\n      if (_this.privState === PromiseState.None) {\n        _this.privSuccessHandlers.push(successCallback);\n\n        _this.privErrorHandlers.push(errorCallback);\n      } else {\n        if (_this.privState === PromiseState.Resolved) {\n          _this.executeSuccessCallback(_this.privPromiseResult.result, successCallback, errorCallback);\n        } else if (_this.privState === PromiseState.Rejected) {\n          _this.executeErrorCallback(_this.privPromiseResult.error, errorCallback);\n        }\n\n        _this.detachHandlers();\n      }\n    };\n\n    this.executeSuccessCallback = function (result, successCallback, errorCallback) {\n      try {\n        successCallback(result);\n      } catch (e) {\n        _this.executeErrorCallback(\"'Unhandled callback error: \" + e + \"'\", errorCallback);\n      }\n    };\n\n    this.executeErrorCallback = function (error, errorCallback) {\n      if (errorCallback) {\n        try {\n          errorCallback(error);\n        } catch (e) {\n          throw new Error(\"'Unhandled callback error: \" + e + \". InnerError: \" + error + \"'\");\n        }\n      } else {\n        throw new Error(\"'Unhandled error: \" + error + \"'\");\n      }\n    };\n\n    this.detachHandlers = function () {\n      _this.privErrorHandlers = [];\n      _this.privSuccessHandlers = [];\n    };\n\n    this.privPromiseResultEvents = new PromiseResultEventSource();\n    this.privPromiseResult = new PromiseResult(this.privPromiseResultEvents);\n  }\n\n  Object.defineProperty(Sink.prototype, \"state\", {\n    get: function get() {\n      return this.privState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sink.prototype, \"result\", {\n    get: function get() {\n      return this.privPromiseResult;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Sink;\n}();\n\nexports.Sink = Sink;","map":{"version":3,"sources":["src/common/Promise.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError  } from \"./Error\";\r\n\r\nexport enum PromiseState {\r\n    None,\r\n    Resolved,\r\n    Rejected,\r\n}\r\n\r\nexport interface IPromise<T> {\r\n    result(): PromiseResult<T>;\r\n\r\n    continueWith<TContinuationResult>(\r\n        continuationCallback: (promiseResult: PromiseResult<T>) => TContinuationResult): IPromise<TContinuationResult>;\r\n\r\n    continueWithPromise<TContinuationResult>(\r\n        continuationCallback: (promiseResult: PromiseResult<T>) => IPromise<TContinuationResult>): IPromise<TContinuationResult>;\r\n\r\n    onSuccessContinueWith<TContinuationResult>(\r\n        continuationCallback: (result: T) => TContinuationResult): IPromise<TContinuationResult>;\r\n\r\n    onSuccessContinueWithPromise<TContinuationResult>(\r\n        continuationCallback: (result: T) => IPromise<TContinuationResult>): IPromise<TContinuationResult>;\r\n\r\n    on(successCallback: (result: T) => void, errorCallback: (error: string) => void): IPromise<T>;\r\n\r\n    finally(callback: () => void): IPromise<T>;\r\n}\r\n\r\nexport interface IDeferred<T> {\r\n    state(): PromiseState;\r\n\r\n    promise(): IPromise<T>;\r\n\r\n    resolve(result: T): IDeferred<T>;\r\n\r\n    reject(error: string): IDeferred<T>;\r\n}\r\n\r\nexport class PromiseResult<T> {\r\n    protected privIsCompleted: boolean;\r\n    protected privIsError: boolean;\r\n    protected privError: string;\r\n    protected privResult: T;\r\n\r\n    public constructor(promiseResultEventSource: PromiseResultEventSource<T>) {\r\n        promiseResultEventSource.on((result: T) => {\r\n            if (!this.privIsCompleted) {\r\n                this.privIsCompleted = true;\r\n                this.privIsError = false;\r\n                this.privResult = result;\r\n            }\r\n        }, (error: string) => {\r\n            if (!this.privIsCompleted) {\r\n                this.privIsCompleted = true;\r\n                this.privIsError = true;\r\n                this.privError = error;\r\n            }\r\n        });\r\n    }\r\n\r\n    public get isCompleted(): boolean {\r\n        return this.privIsCompleted;\r\n    }\r\n\r\n    public get isError(): boolean {\r\n        return this.privIsError;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n\r\n    public get result(): T {\r\n        return this.privResult;\r\n    }\r\n\r\n    public throwIfError = (): void => {\r\n        if (this.isError) {\r\n            throw this.error;\r\n        }\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class PromiseResultEventSource<T>  {\r\n\r\n    private privOnSetResult: (result: T) => void;\r\n    private privOnSetError: (error: string) => void;\r\n\r\n    public setResult = (result: T): void => {\r\n        this.privOnSetResult(result);\r\n    }\r\n\r\n    public setError = (error: string): void => {\r\n        this.privOnSetError(error);\r\n    }\r\n\r\n    public on = (onSetResult: (result: T) => void, onSetError: (error: string) => void): void => {\r\n        this.privOnSetResult = onSetResult;\r\n        this.privOnSetError = onSetError;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class PromiseHelper {\r\n    public static whenAll = (promises: Array<Promise<any>>): Promise<boolean> => {\r\n        if (!promises || promises.length === 0) {\r\n            throw new ArgumentNullError(\"promises\");\r\n        }\r\n\r\n        const deferred = new Deferred<boolean>();\r\n        const errors: string[] = [];\r\n        let completedPromises: number = 0;\r\n\r\n        const checkForCompletion = () => {\r\n            completedPromises++;\r\n            if (completedPromises === promises.length) {\r\n                if (errors.length === 0) {\r\n                    deferred.resolve(true);\r\n                } else {\r\n                    deferred.reject(errors.join(\", \"));\r\n                }\r\n            }\r\n        };\r\n\r\n        for (const promise of promises) {\r\n            promise.on((r: any) => {\r\n                checkForCompletion();\r\n            }, (e: string) => {\r\n                errors.push(e);\r\n                checkForCompletion();\r\n            });\r\n        }\r\n\r\n        return deferred.promise();\r\n    }\r\n\r\n    public static fromResult = <TResult>(result: TResult): Promise<TResult> => {\r\n        const deferred = new Deferred<TResult>();\r\n        deferred.resolve(result);\r\n        return deferred.promise();\r\n    }\r\n\r\n    public static fromError = <TResult>(error: string): Promise<TResult> => {\r\n        const deferred = new Deferred<TResult>();\r\n        deferred.reject(error);\r\n        return deferred.promise();\r\n    }\r\n}\r\n\r\n// TODO: replace with ES6 promises\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class Promise<T> implements IPromise<T> {\r\n    private privSink: Sink<T>;\r\n\r\n    public constructor(sink: Sink<T>) {\r\n        this.privSink = sink;\r\n    }\r\n\r\n    public result = (): PromiseResult<T> => {\r\n        return this.privSink.result;\r\n    }\r\n\r\n    public continueWith = <TContinuationResult>(\r\n        continuationCallback: (promiseResult: PromiseResult<T>) => TContinuationResult): Promise<TContinuationResult> => {\r\n\r\n        if (!continuationCallback) {\r\n            throw new ArgumentNullError(\"continuationCallback\");\r\n        }\r\n\r\n        const continuationDeferral = new Deferred<TContinuationResult>();\r\n\r\n        this.privSink.on(\r\n            (r: T) => {\r\n                try {\r\n                    const continuationResult: TContinuationResult = continuationCallback(this.privSink.result);\r\n                    continuationDeferral.resolve(continuationResult);\r\n                } catch (e) {\r\n                    continuationDeferral.reject(e);\r\n                }\r\n            },\r\n            (error: string) => {\r\n                try {\r\n                    const continuationResult: TContinuationResult = continuationCallback(this.privSink.result);\r\n                    continuationDeferral.resolve(continuationResult);\r\n                } catch (e) {\r\n                    continuationDeferral.reject(`'Error handler for error ${error} threw error ${e}'`);\r\n                }\r\n            },\r\n        );\r\n\r\n        return continuationDeferral.promise();\r\n    }\r\n\r\n    public onSuccessContinueWith = <TContinuationResult>(\r\n        continuationCallback: (result: T) => TContinuationResult): Promise<TContinuationResult> => {\r\n\r\n        if (!continuationCallback) {\r\n            throw new ArgumentNullError(\"continuationCallback\");\r\n        }\r\n\r\n        const continuationDeferral = new Deferred<TContinuationResult>();\r\n\r\n        this.privSink.on(\r\n            (r: T) => {\r\n                try {\r\n                    const continuationResult: TContinuationResult = continuationCallback(r);\r\n                    continuationDeferral.resolve(continuationResult);\r\n                } catch (e) {\r\n                    continuationDeferral.reject(e);\r\n                }\r\n            },\r\n            (error: string) => {\r\n                continuationDeferral.reject(error);\r\n            },\r\n        );\r\n\r\n        return continuationDeferral.promise();\r\n    }\r\n\r\n    public continueWithPromise = <TContinuationResult>(\r\n        continuationCallback: (promiseResult: PromiseResult<T>) => Promise<TContinuationResult>): Promise<TContinuationResult> => {\r\n\r\n        if (!continuationCallback) {\r\n            throw new ArgumentNullError(\"continuationCallback\");\r\n        }\r\n\r\n        const continuationDeferral = new Deferred<TContinuationResult>();\r\n\r\n        this.privSink.on(\r\n            (r: T) => {\r\n                try {\r\n                    const continuationPromise: Promise<TContinuationResult> = continuationCallback(this.privSink.result);\r\n                    if (!continuationPromise) {\r\n                        throw new Error(\"'Continuation callback did not return promise'\");\r\n                    }\r\n                    continuationPromise.on((continuationResult: TContinuationResult) => {\r\n                        continuationDeferral.resolve(continuationResult);\r\n                    }, (e: string) => {\r\n                        continuationDeferral.reject(e);\r\n                    });\r\n                } catch (e) {\r\n                    continuationDeferral.reject(e);\r\n                }\r\n            },\r\n            (error: string) => {\r\n                try {\r\n                    const continuationPromise: Promise<TContinuationResult> = continuationCallback(this.privSink.result);\r\n                    if (!continuationPromise) {\r\n                        throw new Error(\"Continuation callback did not return promise\");\r\n                    }\r\n                    continuationPromise.on((continuationResult: TContinuationResult) => {\r\n                        continuationDeferral.resolve(continuationResult);\r\n                    }, (e: string) => {\r\n                        continuationDeferral.reject(e);\r\n                    });\r\n                } catch (e) {\r\n                    continuationDeferral.reject(`'Error handler for error ${error} threw error ${e}'`);\r\n                }\r\n            },\r\n        );\r\n\r\n        return continuationDeferral.promise();\r\n    }\r\n\r\n    public onSuccessContinueWithPromise = <TContinuationResult>(\r\n        continuationCallback: (result: T) => Promise<TContinuationResult>): Promise<TContinuationResult> => {\r\n\r\n        if (!continuationCallback) {\r\n            throw new ArgumentNullError(\"continuationCallback\");\r\n        }\r\n\r\n        const continuationDeferral = new Deferred<TContinuationResult>();\r\n\r\n        this.privSink.on(\r\n            (r: T) => {\r\n                try {\r\n                    const continuationPromise: Promise<TContinuationResult> = continuationCallback(r);\r\n                    if (!continuationPromise) {\r\n                        throw new Error(\"Continuation callback did not return promise\");\r\n                    }\r\n                    continuationPromise.on((continuationResult: TContinuationResult) => {\r\n                        continuationDeferral.resolve(continuationResult);\r\n                    }, (e: string) => {\r\n                        continuationDeferral.reject(e);\r\n                    });\r\n                } catch (e) {\r\n                    continuationDeferral.reject(e);\r\n                }\r\n            },\r\n            (error: string) => {\r\n                continuationDeferral.reject(error);\r\n            },\r\n        );\r\n\r\n        return continuationDeferral.promise();\r\n    }\r\n\r\n    public on = (\r\n        successCallback: (result: T) => void,\r\n        errorCallback: (error: string) => void): Promise<T> => {\r\n        if (!successCallback) {\r\n            throw new ArgumentNullError(\"successCallback\");\r\n        }\r\n\r\n        if (!errorCallback) {\r\n            throw new ArgumentNullError(\"errorCallback\");\r\n        }\r\n\r\n        this.privSink.on(successCallback, errorCallback);\r\n        return this;\r\n    }\r\n\r\n    public finally = (callback: () => void): Promise<T> => {\r\n        if (!callback) {\r\n            throw new ArgumentNullError(\"callback\");\r\n        }\r\n\r\n        const callbackWrapper = (_: any) => {\r\n            callback();\r\n        };\r\n\r\n        return this.on(callbackWrapper, callbackWrapper);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class Deferred<T> implements IDeferred<T> {\r\n    private privPromise: Promise<T>;\r\n    private privSink: Sink<T>;\r\n\r\n    public constructor() {\r\n        this.privSink = new Sink<T>();\r\n        this.privPromise = new Promise<T>(this.privSink);\r\n    }\r\n\r\n    public state = (): PromiseState => {\r\n        return this.privSink.state;\r\n    }\r\n\r\n    public promise = (): Promise<T> => {\r\n        return this.privPromise;\r\n    }\r\n\r\n    public resolve = (result: T): Deferred<T> => {\r\n        this.privSink.resolve(result);\r\n        return this;\r\n    }\r\n\r\n    public reject = (error: string): Deferred<T> => {\r\n        this.privSink.reject(error);\r\n        return this;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class Sink<T> {\r\n    private privState: PromiseState = PromiseState.None;\r\n    private privPromiseResult: PromiseResult<T> = null;\r\n    private privPromiseResultEvents: PromiseResultEventSource<T> = null;\r\n\r\n    private privSuccessHandlers: Array<((result: T) => void)> = [];\r\n    private privErrorHandlers: Array<(e: string) => void> = [];\r\n\r\n    public constructor() {\r\n        this.privPromiseResultEvents = new PromiseResultEventSource();\r\n        this.privPromiseResult = new PromiseResult(this.privPromiseResultEvents);\r\n    }\r\n\r\n    public get state(): PromiseState {\r\n        return this.privState;\r\n    }\r\n\r\n    public get result(): PromiseResult<T> {\r\n        return this.privPromiseResult;\r\n    }\r\n\r\n    public resolve = (result: T): void => {\r\n        if (this.privState !== PromiseState.None) {\r\n            throw new Error(\"'Cannot resolve a completed promise'\");\r\n        }\r\n\r\n        this.privState = PromiseState.Resolved;\r\n        this.privPromiseResultEvents.setResult(result);\r\n\r\n        for (let i = 0; i < this.privSuccessHandlers.length; i++) {\r\n            this.executeSuccessCallback(result, this.privSuccessHandlers[i], this.privErrorHandlers[i]);\r\n        }\r\n\r\n        this.detachHandlers();\r\n    }\r\n\r\n    public reject = (error: string): void => {\r\n        if (this.privState !== PromiseState.None) {\r\n            throw new Error(\"'Cannot reject a completed promise'\");\r\n        }\r\n\r\n        this.privState = PromiseState.Rejected;\r\n        this.privPromiseResultEvents.setError(error);\r\n\r\n        for (const errorHandler of this.privErrorHandlers) {\r\n            this.executeErrorCallback(error, errorHandler);\r\n        }\r\n\r\n        this.detachHandlers();\r\n    }\r\n\r\n    public on = (\r\n        successCallback: (result: T) => void,\r\n        errorCallback: (error: string) => void): void => {\r\n\r\n        if (successCallback == null) {\r\n            successCallback = (r: T) => { return; };\r\n        }\r\n\r\n        if (this.privState === PromiseState.None) {\r\n            this.privSuccessHandlers.push(successCallback);\r\n            this.privErrorHandlers.push(errorCallback);\r\n        } else {\r\n            if (this.privState === PromiseState.Resolved) {\r\n                this.executeSuccessCallback(this.privPromiseResult.result, successCallback, errorCallback);\r\n            } else if (this.privState === PromiseState.Rejected) {\r\n                this.executeErrorCallback(this.privPromiseResult.error, errorCallback);\r\n            }\r\n\r\n            this.detachHandlers();\r\n        }\r\n    }\r\n\r\n    private executeSuccessCallback = (result: T, successCallback: (result: T) => void, errorCallback: (error: string) => void): void => {\r\n        try {\r\n            successCallback(result);\r\n        } catch (e) {\r\n            this.executeErrorCallback(`'Unhandled callback error: ${e}'`, errorCallback);\r\n        }\r\n    }\r\n\r\n    private executeErrorCallback = (error: string, errorCallback: (error: string) => void): void => {\r\n        if (errorCallback) {\r\n            try {\r\n                errorCallback(error);\r\n            } catch (e) {\r\n                throw new Error(`'Unhandled callback error: ${e}. InnerError: ${error}'`);\r\n            }\r\n        } else {\r\n            throw new Error(`'Unhandled error: ${error}'`);\r\n        }\r\n    }\r\n\r\n    private detachHandlers = (): void => {\r\n        this.privErrorHandlers = [];\r\n        this.privSuccessHandlers = [];\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}