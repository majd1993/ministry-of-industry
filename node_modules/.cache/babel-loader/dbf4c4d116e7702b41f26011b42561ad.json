{"ast":null,"code":"'use strict';\n\nvar uri = require('../util/enclose-uri');\n\nvar title = require('../util/enclose-title');\n\nmodule.exports = link;\nvar space = ' ';\nvar leftSquareBracket = '[';\nvar rightSquareBracket = ']';\nvar leftParenthesis = '(';\nvar rightParenthesis = ')'; // Expression for a protocol:\n// See <http://en.wikipedia.org/wiki/URI_scheme#Generic_syntax>.\n\nvar protocol = /^[a-z][a-z+.-]+:\\/?/i; // Stringify a link.\n//\n// When no title exists, the compiled `children` equal `url`, and `url` starts\n// with a protocol, an auto link is created:\n//\n// ```markdown\n// <http://example.com>\n// ```\n//\n// Otherwise, is smart about enclosing `url` (see `encloseURI()`) and `title`\n// (see `encloseTitle()`).\n// ```\n//\n// ```markdown\n// [foo](<foo at bar dot com> 'An \"example\" e-mail')\n// ```\n//\n// Supports named entities in the `url` and `title` when in `settings.encode`\n// mode.\n\nfunction link(node) {\n  var self = this;\n  var content = self.encode(node.url || '', node);\n  var exit = self.enterLink();\n  var escaped = self.encode(self.escape(node.url || '', node));\n  var value = self.all(node).join('');\n  exit();\n\n  if (node.title == null && protocol.test(content) && escaped === value) {\n    // Backslash escapes do not work in autolinks, so we do not escape.\n    return uri(self.encode(node.url), true);\n  }\n\n  content = uri(content);\n\n  if (node.title) {\n    content += space + title(self.encode(self.escape(node.title, node), node));\n  }\n\n  return leftSquareBracket + value + rightSquareBracket + leftParenthesis + content + rightParenthesis;\n}","map":{"version":3,"sources":["/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/remark-stringify/lib/visitors/link.js"],"names":["uri","require","title","module","exports","link","space","leftSquareBracket","rightSquareBracket","leftParenthesis","rightParenthesis","protocol","node","self","content","encode","url","exit","enterLink","escaped","escape","value","all","join","test"],"mappings":"AAAA;;AAEA,IAAIA,GAAG,GAAGC,OAAO,CAAC,qBAAD,CAAjB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,uBAAD,CAAnB;;AAEAE,MAAM,CAACC,OAAP,GAAiBC,IAAjB;AAEA,IAAIC,KAAK,GAAG,GAAZ;AACA,IAAIC,iBAAiB,GAAG,GAAxB;AACA,IAAIC,kBAAkB,GAAG,GAAzB;AACA,IAAIC,eAAe,GAAG,GAAtB;AACA,IAAIC,gBAAgB,GAAG,GAAvB,C,CAEA;AACA;;AACA,IAAIC,QAAQ,GAAG,sBAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASN,IAAT,CAAcO,IAAd,EAAoB;AAClB,MAAIC,IAAI,GAAG,IAAX;AACA,MAAIC,OAAO,GAAGD,IAAI,CAACE,MAAL,CAAYH,IAAI,CAACI,GAAL,IAAY,EAAxB,EAA4BJ,IAA5B,CAAd;AACA,MAAIK,IAAI,GAAGJ,IAAI,CAACK,SAAL,EAAX;AACA,MAAIC,OAAO,GAAGN,IAAI,CAACE,MAAL,CAAYF,IAAI,CAACO,MAAL,CAAYR,IAAI,CAACI,GAAL,IAAY,EAAxB,EAA4BJ,IAA5B,CAAZ,CAAd;AACA,MAAIS,KAAK,GAAGR,IAAI,CAACS,GAAL,CAASV,IAAT,EAAeW,IAAf,CAAoB,EAApB,CAAZ;AAEAN,EAAAA,IAAI;;AAEJ,MAAIL,IAAI,CAACV,KAAL,IAAc,IAAd,IAAsBS,QAAQ,CAACa,IAAT,CAAcV,OAAd,CAAtB,IAAgDK,OAAO,KAAKE,KAAhE,EAAuE;AACrE;AACA,WAAOrB,GAAG,CAACa,IAAI,CAACE,MAAL,CAAYH,IAAI,CAACI,GAAjB,CAAD,EAAwB,IAAxB,CAAV;AACD;;AAEDF,EAAAA,OAAO,GAAGd,GAAG,CAACc,OAAD,CAAb;;AAEA,MAAIF,IAAI,CAACV,KAAT,EAAgB;AACdY,IAAAA,OAAO,IAAIR,KAAK,GAAGJ,KAAK,CAACW,IAAI,CAACE,MAAL,CAAYF,IAAI,CAACO,MAAL,CAAYR,IAAI,CAACV,KAAjB,EAAwBU,IAAxB,CAAZ,EAA2CA,IAA3C,CAAD,CAAxB;AACD;;AAED,SACEL,iBAAiB,GACjBc,KADA,GAEAb,kBAFA,GAGAC,eAHA,GAIAK,OAJA,GAKAJ,gBANF;AAQD","sourcesContent":["'use strict'\n\nvar uri = require('../util/enclose-uri')\nvar title = require('../util/enclose-title')\n\nmodule.exports = link\n\nvar space = ' '\nvar leftSquareBracket = '['\nvar rightSquareBracket = ']'\nvar leftParenthesis = '('\nvar rightParenthesis = ')'\n\n// Expression for a protocol:\n// See <http://en.wikipedia.org/wiki/URI_scheme#Generic_syntax>.\nvar protocol = /^[a-z][a-z+.-]+:\\/?/i\n\n// Stringify a link.\n//\n// When no title exists, the compiled `children` equal `url`, and `url` starts\n// with a protocol, an auto link is created:\n//\n// ```markdown\n// <http://example.com>\n// ```\n//\n// Otherwise, is smart about enclosing `url` (see `encloseURI()`) and `title`\n// (see `encloseTitle()`).\n// ```\n//\n// ```markdown\n// [foo](<foo at bar dot com> 'An \"example\" e-mail')\n// ```\n//\n// Supports named entities in the `url` and `title` when in `settings.encode`\n// mode.\nfunction link(node) {\n  var self = this\n  var content = self.encode(node.url || '', node)\n  var exit = self.enterLink()\n  var escaped = self.encode(self.escape(node.url || '', node))\n  var value = self.all(node).join('')\n\n  exit()\n\n  if (node.title == null && protocol.test(content) && escaped === value) {\n    // Backslash escapes do not work in autolinks, so we do not escape.\n    return uri(self.encode(node.url), true)\n  }\n\n  content = uri(content)\n\n  if (node.title) {\n    content += space + title(self.encode(self.escape(node.title, node), node))\n  }\n\n  return (\n    leftSquareBracket +\n    value +\n    rightSquareBracket +\n    leftParenthesis +\n    content +\n    rightParenthesis\n  )\n}\n"]},"metadata":{},"sourceType":"script"}