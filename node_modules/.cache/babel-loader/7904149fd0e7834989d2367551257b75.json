{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = connectionStatusUpdateSaga;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _effects = require(\"redux-saga/effects\");\n\nvar _connectionStatusUpdate = _interopRequireDefault(require(\"../actions/connectionStatusUpdate\"));\n\nvar _observeEach = _interopRequireDefault(require(\"./effects/observeEach\"));\n\nvar _setReferenceGrammarID = _interopRequireDefault(require(\"../actions/setReferenceGrammarID\"));\n\nvar _whileConnected = _interopRequireDefault(require(\"./effects/whileConnected\"));\n\nvar _marked = /*#__PURE__*/_regenerator[\"default\"].mark(observeConnectionStatus),\n    _marked2 = /*#__PURE__*/_regenerator[\"default\"].mark(connectionStatusUpdateSaga);\n\nfunction observeConnectionStatus(_ref) {\n  var directLine;\n  return _regenerator[\"default\"].wrap(function observeConnectionStatus$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          directLine = _ref.directLine;\n          _context2.next = 3;\n          return (0, _observeEach[\"default\"])(directLine.connectionStatus$, /*#__PURE__*/_regenerator[\"default\"].mark(function updateConnectionStatus(connectionStatus) {\n            return _regenerator[\"default\"].wrap(function updateConnectionStatus$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.next = 2;\n                    return (0, _effects.put)((0, _connectionStatusUpdate[\"default\"])(connectionStatus));\n\n                  case 2:\n                    _context.next = 4;\n                    return (0, _effects.put)((0, _setReferenceGrammarID[\"default\"])(directLine.referenceGrammarId));\n\n                  case 4:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, updateConnectionStatus);\n          }));\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction connectionStatusUpdateSaga() {\n  return _regenerator[\"default\"].wrap(function connectionStatusUpdateSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return (0, _whileConnected[\"default\"])(observeConnectionStatus);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["../../src/sagas/connectionStatusUpdateSaga.js"],"names":["observeConnectionStatus","directLine","connectionStatusUpdateSaga"],"mappings":";;;;;;;;;;;AAAA,IAAA,QAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAEA,IAAA,uBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,mCAAA,CAAA,CAAA;;AACA,IAAA,YAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,uBAAA,CAAA,CAAA;;AACA,IAAA,sBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,kCAAA,CAAA,CAAA;;AACA,IAAA,eAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,0BAAA,CAAA,CAAA;;wDAEUA,uB;yDAOeE,0B;;AAPzB,SAAA,uBAAA,CAAA,IAAA,EAAA;AAAA,MAAA,UAAA;AAAA,SAAA,YAAA,CAAA,SAAA,CAAA,CAAA,IAAA,CAAA,SAAA,wBAAA,CAAA,SAAA,EAAA;AAAA,WAAA,CAAA,EAAA;AAAA,cAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,aAAA,CAAA;AAAoCD,UAAAA,UAApC,GAAA,IAAA,CAAA,UAAoCA;AAApC,UAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AACE,iBAAM,CAAA,GAAA,YAAA,CAAA,SAAA,CAAA,EAAYA,UAAU,CAAtB,iBAAA,EAAA,aAAA,YAAA,CAAA,SAAA,CAAA,CAAA,IAAA,CAA0C,SAAA,sBAAA,CAAA,gBAAA,EAAA;AAAA,mBAAA,YAAA,CAAA,SAAA,CAAA,CAAA,IAAA,CAAA,SAAA,uBAAA,CAAA,QAAA,EAAA;AAAA,qBAAA,CAAA,EAAA;AAAA,wBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,uBAAA,CAAA;AAAA,oBAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAC9C,2BAAM,CAAA,GAAA,QAAA,CAAA,GAAA,EAAI,CAAA,GAAA,uBAAA,CAAA,SAAA,CAAA,EAAV,gBAAU,CAAJ,CAAN;;AAD8C,uBAAA,CAAA;AAAA,oBAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAE9C,2BAAM,CAAA,GAAA,QAAA,CAAA,GAAA,EAAI,CAAA,GAAA,sBAAA,CAAA,SAAA,CAAA,EAAsBA,UAAU,CAA1C,kBAAU,CAAJ,CAAN;;AAF8C,uBAAA,CAAA;AAAA,uBAAA,KAAA;AAAA,2BAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,aAAA,EAAA,sBAAA,CAAA;AAAhD,WAAM,CAAA,CAAN;;AADF,aAAA,CAAA;AAAA,aAAA,KAAA;AAAA,iBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,GAAA,EAAA,OAAA,CAAA;AAAA;;AAOe,SAAA,0BAAA,GAAA;AAAA,SAAA,YAAA,CAAA,SAAA,CAAA,CAAA,IAAA,CAAA,SAAA,2BAAA,CAAA,SAAA,EAAA;AAAA,WAAA,CAAA,EAAA;AAAA,cAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,aAAA,CAAA;AAAA,UAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AACb,iBAAM,CAAA,GAAA,eAAA,CAAA,SAAA,CAAA,EAAN,uBAAM,CAAN;;AADa,aAAA,CAAA;AAAA,aAAA,KAAA;AAAA,iBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,GAAA,EAAA,QAAA,CAAA;AAAA","sourcesContent":["import { put } from 'redux-saga/effects';\n\nimport connectionStatusUpdate from '../actions/connectionStatusUpdate';\nimport observeEach from './effects/observeEach';\nimport setReferenceGrammarID from '../actions/setReferenceGrammarID';\nimport whileConnected from './effects/whileConnected';\n\nfunction* observeConnectionStatus({ directLine }) {\n  yield observeEach(directLine.connectionStatus$, function* updateConnectionStatus(connectionStatus) {\n    yield put(connectionStatusUpdate(connectionStatus));\n    yield put(setReferenceGrammarID(directLine.referenceGrammarId));\n  });\n}\n\nexport default function* connectionStatusUpdateSaga() {\n  yield whileConnected(observeConnectionStatus);\n}\n"],"sourceRoot":"core:///"},"metadata":{},"sourceType":"script"}