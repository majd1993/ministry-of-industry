{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar _a;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar SpeechSynthesisOutputFormat_1 = require(\"../SpeechSynthesisOutputFormat\");\n\nvar AudioStreamFormat_1 = require(\"./AudioStreamFormat\");\n\nvar AudioFormatTag;\n\n(function (AudioFormatTag) {\n  AudioFormatTag[AudioFormatTag[\"PCM\"] = 1] = \"PCM\";\n  AudioFormatTag[AudioFormatTag[\"MuLaw\"] = 2] = \"MuLaw\";\n  AudioFormatTag[AudioFormatTag[\"Siren\"] = 3] = \"Siren\";\n  AudioFormatTag[AudioFormatTag[\"MP3\"] = 4] = \"MP3\";\n  AudioFormatTag[AudioFormatTag[\"SILKSkype\"] = 5] = \"SILKSkype\";\n  AudioFormatTag[AudioFormatTag[\"Opus\"] = 6] = \"Opus\";\n})(AudioFormatTag = exports.AudioFormatTag || (exports.AudioFormatTag = {}));\n/**\n * @private\n * @class AudioOutputFormatImpl\n * Added in version 1.11.0\n */\n// tslint:disable-next-line:max-classes-per-file\n\n\nvar AudioOutputFormatImpl =\n/** @class */\nfunction (_super) {\n  __extends(AudioOutputFormatImpl, _super);\n  /**\n   * Creates an instance with the given values.\n   * @constructor\n   * @param formatTag\n   * @param {number} samplesPerSec - Samples per second.\n   * @param {number} bitsPerSample - Bits per sample.\n   * @param {number} channels - Number of channels.\n   * @param avgBytesPerSec\n   * @param blockAlign\n   * @param audioFormatString\n   * @param requestAudioFormatString\n   * @param hasHeader\n   */\n\n\n  function AudioOutputFormatImpl(formatTag, channels, samplesPerSec, avgBytesPerSec, blockAlign, bitsPerSample, audioFormatString, requestAudioFormatString, hasHeader) {\n    var _this = _super.call(this, samplesPerSec, bitsPerSample, channels) || this;\n\n    _this.formatTag = formatTag;\n    _this.avgBytesPerSec = avgBytesPerSec;\n    _this.blockAlign = blockAlign;\n    _this.priAudioFormatString = audioFormatString;\n    _this.priRequestAudioFormatString = requestAudioFormatString;\n    _this.priHasHeader = hasHeader;\n    return _this;\n  }\n\n  AudioOutputFormatImpl.fromSpeechSynthesisOutputFormat = function (speechSynthesisOutputFormat) {\n    if (speechSynthesisOutputFormat === undefined) {\n      return AudioOutputFormatImpl.getDefaultOutputFormat();\n    }\n\n    return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(AudioOutputFormatImpl.SpeechSynthesisOutputFormatToString[speechSynthesisOutputFormat]);\n  };\n\n  AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString = function (speechSynthesisOutputFormatString) {\n    switch (speechSynthesisOutputFormatString) {\n      case \"raw-8khz-8bit-mono-mulaw\":\n        return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 8000, 8000, 1, 8, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"riff-16khz-16kbps-mono-siren\":\n        return new AudioOutputFormatImpl(AudioFormatTag.Siren, 1, 16000, 2000, 40, 0, speechSynthesisOutputFormatString, \"audio-16khz-16kbps-mono-siren\", true);\n\n      case \"audio-16khz-16kbps-mono-siren\":\n        return new AudioOutputFormatImpl(AudioFormatTag.Siren, 1, 16000, 2000, 40, 0, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"audio-16khz-32kbitrate-mono-mp3\":\n        return new AudioOutputFormatImpl(AudioFormatTag.MP3, 1, 16000, 32 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"audio-16khz-128kbitrate-mono-mp3\":\n        return new AudioOutputFormatImpl(AudioFormatTag.MP3, 1, 16000, 128 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"audio-16khz-64kbitrate-mono-mp3\":\n        return new AudioOutputFormatImpl(AudioFormatTag.MP3, 1, 16000, 64 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"audio-24khz-48kbitrate-mono-mp3\":\n        return new AudioOutputFormatImpl(AudioFormatTag.MP3, 1, 16000, 48 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"audio-24khz-96kbitrate-mono-mp3\":\n        return new AudioOutputFormatImpl(AudioFormatTag.MP3, 1, 16000, 96 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"audio-24khz-160kbitrate-mono-mp3\":\n        return new AudioOutputFormatImpl(AudioFormatTag.MP3, 1, 16000, 160 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"raw-16khz-16bit-mono-truesilk\":\n        return new AudioOutputFormatImpl(AudioFormatTag.SILKSkype, 1, 16000, 32000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"riff-8khz-16bit-mono-pcm\":\n        return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 8000, 16000, 2, 16, speechSynthesisOutputFormatString, \"raw-8khz-16bit-mono-pcm\", true);\n\n      case \"riff-24khz-16bit-mono-pcm\":\n        return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 24000, 48000, 2, 16, speechSynthesisOutputFormatString, \"raw-24khz-16bit-mono-pcm\", true);\n\n      case \"riff-8khz-8bit-mono-mulaw\":\n        return new AudioOutputFormatImpl(AudioFormatTag.MuLaw, 1, 8000, 8000, 1, 8, speechSynthesisOutputFormatString, \"raw-8khz-8bit-mono-mulaw\", true);\n\n      case \"raw-16khz-16bit-mono-pcm\":\n        return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 16000, 32000, 2, 16, speechSynthesisOutputFormatString, \"raw-16khz-16bit-mono-pcm\", false);\n\n      case \"raw-24khz-16bit-mono-pcm\":\n        return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 24000, 48000, 2, 16, speechSynthesisOutputFormatString, \"raw-24khz-16bit-mono-pcm\", false);\n\n      case \"raw-8khz-16bit-mono-pcm\":\n        return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 8000, 16000, 2, 16, speechSynthesisOutputFormatString, \"raw-8khz-16bit-mono-pcm\", false);\n\n      case \"ogg-16khz-16bit-mono-opus\":\n        return new AudioOutputFormatImpl(AudioFormatTag.Opus, 1, 16000, 8192, 2, 16, speechSynthesisOutputFormatString, \"ogg-16khz-16bit-mono-opus\", false);\n\n      case \"ogg-24khz-16bit-mono-opus\":\n        return new AudioOutputFormatImpl(AudioFormatTag.Opus, 1, 24000, 8192, 2, 16, speechSynthesisOutputFormatString, \"ogg-24khz-16bit-mono-opus\", false);\n\n      case \"riff-16khz-16bit-mono-pcm\":\n      default:\n        return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 16000, 32000, 2, 16, \"riff-16khz-16bit-mono-pcm\", \"raw-16khz-16bit-mono-pcm\", true);\n    }\n  };\n\n  AudioOutputFormatImpl.getDefaultOutputFormat = function () {\n    return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(typeof window !== \"undefined\" ? \"audio-24khz-48kbitrate-mono-mp3\" : \"riff-16khz-16bit-mono-pcm\");\n  };\n\n  Object.defineProperty(AudioOutputFormatImpl.prototype, \"hasHeader\", {\n    /**\n     * Specifies if this audio output format has a header\n     * @boolean AudioOutputFormatImpl.prototype.hasHeader\n     * @function\n     * @public\n     */\n    get: function get() {\n      return this.priHasHeader;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AudioOutputFormatImpl.prototype, \"header\", {\n    /**\n     * Specifies the header of this format\n     * @ArrayBuffer AudioOutputFormatImpl.prototype.header\n     * @function\n     * @public\n     */\n    get: function get() {\n      if (this.hasHeader) {\n        return this.privHeader;\n      }\n\n      return undefined;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Updates the header based on the audio length\n   * @member AudioOutputFormatImpl.updateHeader\n   * @function\n   * @public\n   * @param {number} audioLength - the audio length\n   */\n\n  AudioOutputFormatImpl.prototype.updateHeader = function (audioLength) {\n    if (this.priHasHeader) {\n      var view = new DataView(this.privHeader);\n      view.setUint32(40, audioLength, true);\n    }\n  };\n\n  Object.defineProperty(AudioOutputFormatImpl.prototype, \"requestAudioFormatString\", {\n    /**\n     * Specifies the audio format string to be sent to the service\n     * @string AudioOutputFormatImpl.prototype.requestAudioFormatString\n     * @function\n     * @public\n     */\n    get: function get() {\n      return this.priRequestAudioFormatString;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  AudioOutputFormatImpl.SpeechSynthesisOutputFormatToString = (_a = {}, _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Raw8Khz8BitMonoMULaw] = \"raw-8khz-8bit-mono-mulaw\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Riff16Khz16KbpsMonoSiren] = \"riff-16khz-16kbps-mono-siren\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Audio16Khz16KbpsMonoSiren] = \"audio-16khz-16kbps-mono-siren\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3] = \"audio-16khz-32kbitrate-mono-mp3\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Audio16Khz128KBitRateMonoMp3] = \"audio-16khz-128kbitrate-mono-mp3\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Audio16Khz64KBitRateMonoMp3] = \"audio-16khz-64kbitrate-mono-mp3\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3] = \"audio-24khz-48kbitrate-mono-mp3\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Audio24Khz96KBitRateMonoMp3] = \"audio-24khz-96kbitrate-mono-mp3\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Audio24Khz160KBitRateMonoMp3] = \"audio-24khz-160kbitrate-mono-mp3\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Raw16Khz16BitMonoTrueSilk] = \"raw-16khz-16bit-mono-truesilk\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Riff16Khz16BitMonoPcm] = \"riff-16khz-16bit-mono-pcm\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Riff8Khz16BitMonoPcm] = \"riff-8khz-16bit-mono-pcm\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm] = \"riff-24khz-16bit-mono-pcm\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Riff8Khz8BitMonoMULaw] = \"riff-8khz-8bit-mono-mulaw\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Raw16Khz16BitMonoPcm] = \"raw-16khz-16bit-mono-pcm\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm] = \"raw-24khz-16bit-mono-pcm\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Raw8Khz16BitMonoPcm] = \"raw-8khz-16bit-mono-pcm\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Ogg16Khz16BitMonoOpus] = \"ogg-16khz-16bit-mono-opus\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Ogg24Khz16BitMonoOpus] = \"ogg-24khz-16bit-mono-opus\", _a);\n  return AudioOutputFormatImpl;\n}(AudioStreamFormat_1.AudioStreamFormatImpl);\n\nexports.AudioOutputFormatImpl = AudioOutputFormatImpl;","map":{"version":3,"sources":["src/sdk/Audio/AudioOutputFormat.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { INumberDictionary } from \"../../common/Exports\";\r\nimport { SpeechSynthesisOutputFormat } from \"../SpeechSynthesisOutputFormat\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\r\n\r\nexport enum AudioFormatTag {\r\n    PCM = 1,\r\n    MuLaw,\r\n    Siren,\r\n    MP3,\r\n    SILKSkype,\r\n    Opus,\r\n}\r\n\r\n/**\r\n * @private\r\n * @class AudioOutputFormatImpl\r\n * Added in version 1.11.0\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioOutputFormatImpl extends AudioStreamFormatImpl {\r\n    public static SpeechSynthesisOutputFormatToString: INumberDictionary<string> = {\r\n        [SpeechSynthesisOutputFormat.Raw8Khz8BitMonoMULaw]: \"raw-8khz-8bit-mono-mulaw\",\r\n        [SpeechSynthesisOutputFormat.Riff16Khz16KbpsMonoSiren]: \"riff-16khz-16kbps-mono-siren\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz16KbpsMonoSiren]: \"audio-16khz-16kbps-mono-siren\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3]: \"audio-16khz-32kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz128KBitRateMonoMp3]: \"audio-16khz-128kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz64KBitRateMonoMp3]: \"audio-16khz-64kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3]: \"audio-24khz-48kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz96KBitRateMonoMp3]: \"audio-24khz-96kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz160KBitRateMonoMp3]: \"audio-24khz-160kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoTrueSilk]: \"raw-16khz-16bit-mono-truesilk\",\r\n        [SpeechSynthesisOutputFormat.Riff16Khz16BitMonoPcm]: \"riff-16khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz16BitMonoPcm]: \"riff-8khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm]: \"riff-24khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz8BitMonoMULaw]: \"riff-8khz-8bit-mono-mulaw\",\r\n        [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoPcm]: \"raw-16khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm]: \"raw-24khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw8Khz16BitMonoPcm]: \"raw-8khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Ogg16Khz16BitMonoOpus]: \"ogg-16khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Ogg24Khz16BitMonoOpus]: \"ogg-24khz-16bit-mono-opus\",\r\n    };\r\n    private priAudioFormatString: string;\r\n    /**\r\n     * audio format string for synthesis request, which may differ from priAudioFormatString.\r\n     * e.g. for riff format, we will request raw format and add a header in SDK side.\r\n     */\r\n    private readonly priRequestAudioFormatString: string;\r\n    private readonly priHasHeader: boolean;\r\n\r\n    /**\r\n     * Creates an instance with the given values.\r\n     * @constructor\r\n     * @param formatTag\r\n     * @param {number} samplesPerSec - Samples per second.\r\n     * @param {number} bitsPerSample - Bits per sample.\r\n     * @param {number} channels - Number of channels.\r\n     * @param avgBytesPerSec\r\n     * @param blockAlign\r\n     * @param audioFormatString\r\n     * @param requestAudioFormatString\r\n     * @param hasHeader\r\n     */\r\n    public constructor(formatTag: AudioFormatTag,\r\n                       channels: number,\r\n                       samplesPerSec: number,\r\n                       avgBytesPerSec: number,\r\n                       blockAlign: number,\r\n                       bitsPerSample: number,\r\n                       audioFormatString: string,\r\n                       requestAudioFormatString: string,\r\n                       hasHeader: boolean) {\r\n        super(samplesPerSec, bitsPerSample, channels);\r\n        this.formatTag = formatTag;\r\n        this.avgBytesPerSec = avgBytesPerSec;\r\n        this.blockAlign = blockAlign;\r\n        this.priAudioFormatString = audioFormatString;\r\n        this.priRequestAudioFormatString = requestAudioFormatString;\r\n        this.priHasHeader = hasHeader;\r\n    }\r\n\r\n    public static fromSpeechSynthesisOutputFormat(speechSynthesisOutputFormat?: SpeechSynthesisOutputFormat): AudioOutputFormatImpl {\r\n        if (speechSynthesisOutputFormat === undefined) {\r\n            return AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(\r\n            AudioOutputFormatImpl.SpeechSynthesisOutputFormatToString[speechSynthesisOutputFormat]);\r\n    }\r\n\r\n    public static fromSpeechSynthesisOutputFormatString(speechSynthesisOutputFormatString: string): AudioOutputFormatImpl {\r\n        switch (speechSynthesisOutputFormatString) {\r\n            case \"raw-8khz-8bit-mono-mulaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-16khz-16kbps-mono-siren\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.Siren,\r\n                    1,\r\n                    16000,\r\n                    2000,\r\n                    40,\r\n                    0,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"audio-16khz-16kbps-mono-siren\",\r\n                    true);\r\n            case \"audio-16khz-16kbps-mono-siren\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.Siren,\r\n                    1,\r\n                    16000,\r\n                    2000,\r\n                    40,\r\n                    0,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-32kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    32 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-128kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    128 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-64kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    64 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-48kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    48 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-96kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    96 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-160kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    160 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-16khz-16bit-mono-truesilk\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.SILKSkype,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n\r\n            case \"riff-8khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    8000,\r\n                    16000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"riff-24khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-24khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"riff-8khz-8bit-mono-mulaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MuLaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-8bit-mono-mulaw\",\r\n                    true);\r\n            case \"raw-16khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-16khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"raw-24khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-24khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"raw-8khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    8000,\r\n                    16000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"ogg-16khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.Opus,\r\n                    1,\r\n                    16000,\r\n                    8192,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"ogg-16khz-16bit-mono-opus\",\r\n                    false);\r\n            case \"ogg-24khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.Opus,\r\n                    1,\r\n                    24000,\r\n                    8192,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"ogg-24khz-16bit-mono-opus\",\r\n                    false);\r\n            case \"riff-16khz-16bit-mono-pcm\":\r\n            default:\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    \"riff-16khz-16bit-mono-pcm\",\r\n                    \"raw-16khz-16bit-mono-pcm\",\r\n                    true);\r\n        }\r\n    }\r\n\r\n    public static getDefaultOutputFormat(): AudioOutputFormatImpl {\r\n        return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(\r\n            (typeof window !== \"undefined\") ? \"audio-24khz-48kbitrate-mono-mp3\" : \"riff-16khz-16bit-mono-pcm\");\r\n    }\r\n\r\n    /**\r\n     * The format tag of the audio\r\n     * @AudioFormatTag AudioOutputFormatImpl.prototype.formatTag\r\n     * @function\r\n     * @public\r\n     */\r\n    public formatTag: AudioFormatTag;\r\n\r\n    /**\r\n     * Specifies if this audio output format has a header\r\n     * @boolean AudioOutputFormatImpl.prototype.hasHeader\r\n     * @function\r\n     * @public\r\n     */\r\n    public get hasHeader(): boolean {\r\n        return this.priHasHeader;\r\n    }\r\n\r\n    /**\r\n     * Specifies the header of this format\r\n     * @ArrayBuffer AudioOutputFormatImpl.prototype.header\r\n     * @function\r\n     * @public\r\n     */\r\n    public get header(): ArrayBuffer {\r\n        if (this.hasHeader) {\r\n            return this.privHeader;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Updates the header based on the audio length\r\n     * @member AudioOutputFormatImpl.updateHeader\r\n     * @function\r\n     * @public\r\n     * @param {number} audioLength - the audio length\r\n     */\r\n    public updateHeader(audioLength: number): void {\r\n        if (this.priHasHeader) {\r\n            const view = new DataView(this.privHeader);\r\n            view.setUint32(40, audioLength, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio format string to be sent to the service\r\n     * @string AudioOutputFormatImpl.prototype.requestAudioFormatString\r\n     * @function\r\n     * @public\r\n     */\r\n    public get requestAudioFormatString(): string {\r\n        return this.priRequestAudioFormatString;\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"script"}