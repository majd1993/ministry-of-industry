{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar payloadTypes_1 = require(\"../payloads/payloadTypes\");\n\nvar headerSerializer_1 = require(\"../payloads/headerSerializer\");\n\nvar payloadConstants_1 = require(\"../payloads/payloadConstants\");\n\nvar transportDisconnectedEvent_1 = require(\"./transportDisconnectedEvent\");\n/**\n * Payload receiver for streaming.\n */\n\n\nvar PayloadReceiver =\n/** @class */\nfunction () {\n  function PayloadReceiver() {\n    this.disconnected = function (sender, events) {};\n  }\n  /**\n   * Connects to a transport receiver\n   *\n   * @param receiver The [ITransportReceiver](xref:botframework-streaming.ITransportReceiver) object to pull incoming data from.\n   */\n\n\n  PayloadReceiver.prototype.connect = function (receiver) {\n    if (this.isConnected) {\n      throw new Error('Already connected.');\n    } else {\n      this._receiver = receiver;\n      this.isConnected = true;\n      this.runReceive();\n    }\n  };\n  /**\n   * Allows subscribing to this receiver in order to be notified when new data comes in.\n   *\n   * @param getStream Callback when a new stream has been received.\n   * @param receiveAction Callback when a new message has been received.\n   */\n\n\n  PayloadReceiver.prototype.subscribe = function (getStream, receiveAction) {\n    this._getStream = getStream;\n    this._receiveAction = receiveAction;\n  };\n  /**\n   * Force this receiver to disconnect.\n   *\n   * @param e Event arguments to include when broadcasting disconnection event.\n   */\n\n\n  PayloadReceiver.prototype.disconnect = function (e) {\n    var didDisconnect;\n\n    try {\n      if (this.isConnected) {\n        this._receiver.close();\n\n        didDisconnect = true;\n        this.isConnected = false;\n      }\n    } catch (error) {\n      this.isConnected = false;\n      this.disconnected(this, new transportDisconnectedEvent_1.TransportDisconnectedEvent(error.message));\n    }\n\n    this._receiver = null;\n    this.isConnected = false;\n\n    if (didDisconnect) {\n      this.disconnected(this, e || transportDisconnectedEvent_1.TransportDisconnectedEvent.Empty);\n    }\n  };\n\n  PayloadReceiver.prototype.runReceive = function () {\n    this.receivePackets().catch();\n  };\n\n  PayloadReceiver.prototype.receivePackets = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var isClosed, readSoFar, _a, header, isStream, bytesActuallyRead, contentStream, count, _b, error_1;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (!(this.isConnected && !isClosed)) return [3\n            /*break*/\n            , 11];\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 9,, 10]);\n\n            readSoFar = 0;\n            _c.label = 2;\n\n          case 2:\n            if (!(readSoFar < payloadConstants_1.PayloadConstants.MaxHeaderLength)) return [3\n            /*break*/\n            , 4];\n            _a = this;\n            return [4\n            /*yield*/\n            , this._receiver.receive(payloadConstants_1.PayloadConstants.MaxHeaderLength - readSoFar)];\n\n          case 3:\n            _a._receiveHeaderBuffer = _c.sent();\n\n            if (this._receiveHeaderBuffer) {\n              readSoFar += this._receiveHeaderBuffer.length;\n            }\n\n            return [3\n            /*break*/\n            , 2];\n\n          case 4:\n            header = headerSerializer_1.HeaderSerializer.deserialize(this._receiveHeaderBuffer);\n            isStream = header.payloadType === payloadTypes_1.PayloadTypes.stream;\n            if (!(header.payloadLength > 0)) return [3\n            /*break*/\n            , 8];\n            bytesActuallyRead = 0;\n            contentStream = this._getStream(header);\n            _c.label = 5;\n\n          case 5:\n            if (!(bytesActuallyRead < header.payloadLength && bytesActuallyRead < payloadConstants_1.PayloadConstants.MaxPayloadLength)) return [3\n            /*break*/\n            , 7];\n            count = Math.min(header.payloadLength - bytesActuallyRead, payloadConstants_1.PayloadConstants.MaxPayloadLength);\n            _b = this;\n            return [4\n            /*yield*/\n            , this._receiver.receive(count)];\n\n          case 6:\n            _b._receivePayloadBuffer = _c.sent();\n            bytesActuallyRead += this._receivePayloadBuffer.byteLength;\n            contentStream.write(this._receivePayloadBuffer); // If this is a stream we want to keep handing it up as it comes in\n\n            if (isStream) {\n              this._receiveAction(header, contentStream, bytesActuallyRead);\n            }\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 7:\n            if (!isStream) {\n              this._receiveAction(header, contentStream, bytesActuallyRead);\n            }\n\n            _c.label = 8;\n\n          case 8:\n            return [3\n            /*break*/\n            , 10];\n\n          case 9:\n            error_1 = _c.sent();\n            isClosed = true;\n            this.disconnect(new transportDisconnectedEvent_1.TransportDisconnectedEvent(error_1.message));\n            return [3\n            /*break*/\n            , 10];\n\n          case 10:\n            return [3\n            /*break*/\n            , 0];\n\n          case 11:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return PayloadReceiver;\n}();\n\nexports.PayloadReceiver = PayloadReceiver;","map":{"version":3,"sources":["../../src/payloadTransport/payloadReceiver.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,IAAA,cAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;;AACA,IAAA,kBAAA,GAAA,OAAA,CAAA,8BAAA,CAAA;;AAEA,IAAA,kBAAA,GAAA,OAAA,CAAA,8BAAA,CAAA;;AACA,IAAA,4BAAA,GAAA,OAAA,CAAA,8BAAA,CAAA;AAKA;;AAEG;;;AACH,IAAA,eAAA;AAAA;AAAA,YAAA;AAAA,WAAA,eAAA,GAAA;AAEW,SAAA,YAAA,GAAkD,UAAS,MAAT,EAAiB,MAAjB,EAAuB,CAAG,CAA5E;AA2GV;AApGG;;;;AAIG;;;AACI,EAAA,eAAA,CAAA,SAAA,CAAA,OAAA,GAAP,UAAe,QAAf,EAA2C;AACvC,QAAI,KAAK,WAAT,EAAsB;AAClB,YAAM,IAAI,KAAJ,CAAU,oBAAV,CAAN;AACH,KAFD,MAEO;AACH,WAAK,SAAL,GAAiB,QAAjB;AACA,WAAK,WAAL,GAAmB,IAAnB;AACA,WAAK,UAAL;AACH;AACJ,GARM;AAUP;;;;;AAKG;;;AACI,EAAA,eAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,SAAjB,EAAqE,aAArE,EAAwJ;AACpJ,SAAK,UAAL,GAAkB,SAAlB;AACA,SAAK,cAAL,GAAsB,aAAtB;AACH,GAHM;AAKP;;;;AAIG;;;AACI,EAAA,eAAA,CAAA,SAAA,CAAA,UAAA,GAAP,UAAkB,CAAlB,EAAgD;AAC5C,QAAI,aAAJ;;AACA,QAAI;AACA,UAAI,KAAK,WAAT,EAAsB;AAClB,aAAK,SAAL,CAAe,KAAf;;AACA,QAAA,aAAa,GAAG,IAAhB;AACA,aAAK,WAAL,GAAmB,KAAnB;AACH;AACJ,KAND,CAME,OAAO,KAAP,EAAc;AACZ,WAAK,WAAL,GAAmB,KAAnB;AACA,WAAK,YAAL,CAAkB,IAAlB,EAAwB,IAAI,4BAAA,CAAA,0BAAJ,CAA+B,KAAK,CAAC,OAArC,CAAxB;AACH;;AACD,SAAK,SAAL,GAAiB,IAAjB;AACA,SAAK,WAAL,GAAmB,KAAnB;;AAEA,QAAI,aAAJ,EAAmB;AACf,WAAK,YAAL,CAAkB,IAAlB,EAAwB,CAAC,IAAI,4BAAA,CAAA,0BAAA,CAA2B,KAAxD;AACH;AACJ,GAlBM;;AAoBC,EAAA,eAAA,CAAA,SAAA,CAAA,UAAA,GAAR,YAAA;AACI,SAAK,cAAL,GACK,KADL;AAEH,GAHO;;AAKM,EAAA,eAAA,CAAA,SAAA,CAAA,cAAA,GAAd,YAAA;;;;;;;gBAGW,EAAA,KAAK,WAAL,IAAoB,CAAC,QAArB,C,EAA6B,OAAA,CAAA;AAAA;AAAA,cAAA,EAAA,CAAA;;;;;;AAExB,YAAA,SAAS,GAAG,CAAZ;;;;gBACG,EAAA,SAAS,GAAG,kBAAA,CAAA,gBAAA,CAAiB,eAA7B,C,EAA4C,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AAC/C,YAAA,EAAA,GAAA,IAAA;AAA4B,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,SAAL,CAAe,OAAf,CAAuB,kBAAA,CAAA,gBAAA,CAAiB,eAAjB,GAAmC,SAA1D,CAAN,CAAA;;;AAA5B,YAAA,EAAA,CAAK,oBAAL,GAA4B,EAAA,CAAA,IAAA,EAA5B;;AAEA,gBAAI,KAAK,oBAAT,EAA+B;AAC3B,cAAA,SAAS,IAAI,KAAK,oBAAL,CAA0B,MAAvC;AACH;;;;;;;AAGD,YAAA,MAAM,GAAG,kBAAA,CAAA,gBAAA,CAAiB,WAAjB,CAA6B,KAAK,oBAAlC,CAAT;AACA,YAAA,QAAQ,GAAG,MAAM,CAAC,WAAP,KAAuB,cAAA,CAAA,YAAA,CAAa,MAA/C;gBAEA,EAAA,MAAM,CAAC,aAAP,GAAuB,CAAvB,C,EAAA,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACI,YAAA,iBAAiB,GAAG,CAApB;AAEA,YAAA,aAAa,GAAG,KAAK,UAAL,CAAgB,MAAhB,CAAhB;;;;gBAEG,EAAA,iBAAiB,GAAG,MAAM,CAAC,aAA3B,IAA4C,iBAAiB,GAAG,kBAAA,CAAA,gBAAA,CAAiB,gBAAjF,C,EAAiG,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AAChG,YAAA,KAAK,GAAG,IAAI,CAAC,GAAL,CAAS,MAAM,CAAC,aAAP,GAAuB,iBAAhC,EAAmD,kBAAA,CAAA,gBAAA,CAAiB,gBAApE,CAAR;AACJ,YAAA,EAAA,GAAA,IAAA;AAA6B,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,SAAL,CAAe,OAAf,CAAuB,KAAvB,CAAN,CAAA;;;AAA7B,YAAA,EAAA,CAAK,qBAAL,GAA6B,EAAA,CAAA,IAAA,EAA7B;AACA,YAAA,iBAAiB,IAAI,KAAK,qBAAL,CAA2B,UAAhD;AACA,YAAA,aAAa,CAAC,KAAd,CAAoB,KAAK,qBAAzB,E,CAEA;;AACA,gBAAI,QAAJ,EAAc;AACV,mBAAK,cAAL,CAAoB,MAApB,EAA4B,aAA5B,EAA2C,iBAA3C;AACH;;;;;;;AAGL,gBAAI,CAAC,QAAL,EAAe;AACX,mBAAK,cAAL,CAAoB,MAApB,EAA4B,aAA5B,EAA2C,iBAA3C;AACH;;;;;;;;;;;AAGL,YAAA,QAAQ,GAAG,IAAX;AACA,iBAAK,UAAL,CAAgB,IAAI,4BAAA,CAAA,0BAAJ,CAA+B,OAAK,CAAC,OAArC,CAAhB;;;;;;;;;;;;;;;;;AAGX,GA3Ca;;AA4ClB,SAAA,eAAA;AAAC,CA7GD,EAAA;;AAAa,OAAA,CAAA,eAAA,GAAA,eAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar payloadTypes_1 = require(\"../payloads/payloadTypes\");\nvar headerSerializer_1 = require(\"../payloads/headerSerializer\");\nvar payloadConstants_1 = require(\"../payloads/payloadConstants\");\nvar transportDisconnectedEvent_1 = require(\"./transportDisconnectedEvent\");\n/**\n * Payload receiver for streaming.\n */\nvar PayloadReceiver = /** @class */ (function () {\n    function PayloadReceiver() {\n        this.disconnected = function (sender, events) { };\n    }\n    /**\n     * Connects to a transport receiver\n     *\n     * @param receiver The [ITransportReceiver](xref:botframework-streaming.ITransportReceiver) object to pull incoming data from.\n     */\n    PayloadReceiver.prototype.connect = function (receiver) {\n        if (this.isConnected) {\n            throw new Error('Already connected.');\n        }\n        else {\n            this._receiver = receiver;\n            this.isConnected = true;\n            this.runReceive();\n        }\n    };\n    /**\n     * Allows subscribing to this receiver in order to be notified when new data comes in.\n     *\n     * @param getStream Callback when a new stream has been received.\n     * @param receiveAction Callback when a new message has been received.\n     */\n    PayloadReceiver.prototype.subscribe = function (getStream, receiveAction) {\n        this._getStream = getStream;\n        this._receiveAction = receiveAction;\n    };\n    /**\n     * Force this receiver to disconnect.\n     *\n     * @param e Event arguments to include when broadcasting disconnection event.\n     */\n    PayloadReceiver.prototype.disconnect = function (e) {\n        var didDisconnect;\n        try {\n            if (this.isConnected) {\n                this._receiver.close();\n                didDisconnect = true;\n                this.isConnected = false;\n            }\n        }\n        catch (error) {\n            this.isConnected = false;\n            this.disconnected(this, new transportDisconnectedEvent_1.TransportDisconnectedEvent(error.message));\n        }\n        this._receiver = null;\n        this.isConnected = false;\n        if (didDisconnect) {\n            this.disconnected(this, e || transportDisconnectedEvent_1.TransportDisconnectedEvent.Empty);\n        }\n    };\n    PayloadReceiver.prototype.runReceive = function () {\n        this.receivePackets()\n            .catch();\n    };\n    PayloadReceiver.prototype.receivePackets = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var isClosed, readSoFar, _a, header, isStream, bytesActuallyRead, contentStream, count, _b, error_1;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        if (!(this.isConnected && !isClosed)) return [3 /*break*/, 11];\n                        _c.label = 1;\n                    case 1:\n                        _c.trys.push([1, 9, , 10]);\n                        readSoFar = 0;\n                        _c.label = 2;\n                    case 2:\n                        if (!(readSoFar < payloadConstants_1.PayloadConstants.MaxHeaderLength)) return [3 /*break*/, 4];\n                        _a = this;\n                        return [4 /*yield*/, this._receiver.receive(payloadConstants_1.PayloadConstants.MaxHeaderLength - readSoFar)];\n                    case 3:\n                        _a._receiveHeaderBuffer = _c.sent();\n                        if (this._receiveHeaderBuffer) {\n                            readSoFar += this._receiveHeaderBuffer.length;\n                        }\n                        return [3 /*break*/, 2];\n                    case 4:\n                        header = headerSerializer_1.HeaderSerializer.deserialize(this._receiveHeaderBuffer);\n                        isStream = header.payloadType === payloadTypes_1.PayloadTypes.stream;\n                        if (!(header.payloadLength > 0)) return [3 /*break*/, 8];\n                        bytesActuallyRead = 0;\n                        contentStream = this._getStream(header);\n                        _c.label = 5;\n                    case 5:\n                        if (!(bytesActuallyRead < header.payloadLength && bytesActuallyRead < payloadConstants_1.PayloadConstants.MaxPayloadLength)) return [3 /*break*/, 7];\n                        count = Math.min(header.payloadLength - bytesActuallyRead, payloadConstants_1.PayloadConstants.MaxPayloadLength);\n                        _b = this;\n                        return [4 /*yield*/, this._receiver.receive(count)];\n                    case 6:\n                        _b._receivePayloadBuffer = _c.sent();\n                        bytesActuallyRead += this._receivePayloadBuffer.byteLength;\n                        contentStream.write(this._receivePayloadBuffer);\n                        // If this is a stream we want to keep handing it up as it comes in\n                        if (isStream) {\n                            this._receiveAction(header, contentStream, bytesActuallyRead);\n                        }\n                        return [3 /*break*/, 5];\n                    case 7:\n                        if (!isStream) {\n                            this._receiveAction(header, contentStream, bytesActuallyRead);\n                        }\n                        _c.label = 8;\n                    case 8: return [3 /*break*/, 10];\n                    case 9:\n                        error_1 = _c.sent();\n                        isClosed = true;\n                        this.disconnect(new transportDisconnectedEvent_1.TransportDisconnectedEvent(error_1.message));\n                        return [3 /*break*/, 10];\n                    case 10: return [3 /*break*/, 0];\n                    case 11: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return PayloadReceiver;\n}());\nexports.PayloadReceiver = PayloadReceiver;\n//# sourceMappingURL=payloadReceiver.js.map"]},"metadata":{},"sourceType":"script"}