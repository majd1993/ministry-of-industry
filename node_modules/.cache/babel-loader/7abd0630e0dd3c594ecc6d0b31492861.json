{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = dedupeFilenames;\n\nvar _parseFilename2 = _interopRequireDefault(require(\"./parseFilename\"));\n\nfunction dedupeFilenames(array) {\n  var nextArray = [];\n  array.forEach(function (value) {\n    var _parseFilename = (0, _parseFilename2[\"default\"])(value),\n        extname = _parseFilename.extname,\n        name = _parseFilename.name;\n\n    var count = 0;\n    var nextValue = value;\n\n    while (nextArray.includes(nextValue)) {\n      nextValue = [name, \"(\".concat(++count, \")\")].filter(function (segment) {\n        return segment;\n      }).join(' ') + extname;\n    }\n\n    nextArray.push(nextValue);\n  });\n  return nextArray;\n}","map":{"version":3,"sources":["../src/dedupeFilenames.ts"],"names":["nextArray","array","extname","name","count","nextValue"],"mappings":";;;;;;;;;AAAA,IAAA,eAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,iBAAA,CAAA,CAAA;;AAEe,SAAA,eAAA,CAAA,KAAA,EAA0C;AACrD,MAAMA,SAAmB,GAAzB,EAAA;AAEAC,EAAAA,KAAK,CAALA,OAAAA,CAAc,UAAA,KAAA,EAAS;AAAA,QAAA,cAAA,GACO,CAAA,GAAA,eAAA,CAAA,SAAA,CAAA,EADP,KACO,CADP;AAAA,QACXC,OADW,GAAA,cAAA,CAAA,OAAA;AAAA,QACFC,IADE,GAAA,cAAA,CAAA,IAAA;;AAEnB,QAAIC,KAAK,GAAT,CAAA;AACA,QAAIC,SAAS,GAAb,KAAA;;AAEA,WAAOL,SAAS,CAATA,QAAAA,CAAP,SAAOA,CAAP,EAAsC;AAClCK,MAAAA,SAAS,GAAG,CAAA,IAAA,EAAA,IAAA,MAAA,CAAa,EAAb,KAAA,EAAA,GAAA,CAAA,EAAA,MAAA,CAAkC,UAAA,OAAA,EAAO;AAAA,eAAA,OAAA;AAAzC,OAAA,EAAA,IAAA,CAAA,GAAA,IAAZA,OAAAA;AACH;;AAEDL,IAAAA,SAAS,CAATA,IAAAA,CAAAA,SAAAA;AATJC,GAAAA;AAYA,SAAA,SAAA;AACH","sourcesContent":["import parseFilename from './parseFilename';\n\nexport default function dedupeFilenames(array: string[]) {\n    const nextArray: string[] = [];\n\n    array.forEach(value => {\n        const { extname, name } = parseFilename(value);\n        let count = 0;\n        let nextValue = value;\n\n        while (nextArray.includes(nextValue)) {\n            nextValue = [name, `(${ (++count) })`].filter(segment => segment).join(' ') + extname;\n        }\n\n        nextArray.push(nextValue);\n    });\n\n    return nextArray;\n}\n"]},"metadata":{},"sourceType":"script"}