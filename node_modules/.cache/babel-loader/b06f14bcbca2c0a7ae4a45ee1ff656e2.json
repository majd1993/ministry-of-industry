{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Contracts_1 = require(\"./Contracts\");\n/**\n * Language understanding model\n * @class LanguageUnderstandingModel\n */\n\n\nvar LanguageUnderstandingModel =\n/** @class */\nfunction () {\n  /**\n   * Creates and initializes a new instance\n   * @constructor\n   */\n  function LanguageUnderstandingModel() {}\n  /**\n   * Creates an language understanding model using the specified endpoint.\n   * @member LanguageUnderstandingModel.fromEndpoint\n   * @function\n   * @public\n   * @param {URL} uri - A String that represents the endpoint of the language understanding model.\n   * @returns {LanguageUnderstandingModel} The language understanding model being created.\n   */\n\n\n  LanguageUnderstandingModel.fromEndpoint = function (uri) {\n    Contracts_1.Contracts.throwIfNull(uri, \"uri\");\n    Contracts_1.Contracts.throwIfNullOrWhitespace(uri.hostname, \"uri\");\n    var langModelImp = new LanguageUnderstandingModelImpl(); // Need to extract the app ID from the URL.\n    // URL is in the format: https://<region>.api.cognitive.microsoft.com/luis/v2.0/apps/<Guid>?subscription-key=<key>&timezoneOffset=-360\n    // Start tearing the string apart.\n    // region can be extracted from the host name.\n\n    var firstDot = uri.host.indexOf(\".\");\n\n    if (-1 === firstDot) {\n      throw new Error(\"Could not determine region from endpoint\");\n    }\n\n    langModelImp.region = uri.host.substr(0, firstDot); // Now the app ID.\n\n    var lastSegment = uri.pathname.lastIndexOf(\"/\") + 1;\n\n    if (-1 === lastSegment) {\n      throw new Error(\"Could not determine appId from endpoint\");\n    }\n\n    langModelImp.appId = uri.pathname.substr(lastSegment); // And finally the key.\n\n    langModelImp.subscriptionKey = uri.searchParams.get(\"subscription-key\");\n\n    if (undefined === langModelImp.subscriptionKey) {\n      throw new Error(\"Could not determine subscription key from endpoint\");\n    }\n\n    return langModelImp;\n  };\n  /**\n   * Creates an language understanding model using the application id of Language Understanding service.\n   * @member LanguageUnderstandingModel.fromAppId\n   * @function\n   * @public\n   * @param {string} appId - A String that represents the application id of Language Understanding service.\n   * @returns {LanguageUnderstandingModel} The language understanding model being created.\n   */\n\n\n  LanguageUnderstandingModel.fromAppId = function (appId) {\n    Contracts_1.Contracts.throwIfNullOrWhitespace(appId, \"appId\");\n    var langModelImp = new LanguageUnderstandingModelImpl();\n    langModelImp.appId = appId;\n    return langModelImp;\n  };\n  /**\n   * Creates a language understanding model using hostname, subscription key and application\n   * id of Language Understanding service.\n   * @member LanguageUnderstandingModel.fromSubscription\n   * @function\n   * @public\n   * @param {string} subscriptionKey - A String that represents the subscription key of\n   *        Language Understanding service.\n   * @param {string} appId - A String that represents the application id of Language\n   *        Understanding service.\n   * @param {LanguageUnderstandingModel} region - A String that represents the region\n   *        of the Language Understanding service (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n   * @returns {LanguageUnderstandingModel} The language understanding model being created.\n   */\n\n\n  LanguageUnderstandingModel.fromSubscription = function (subscriptionKey, appId, region) {\n    Contracts_1.Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\n    Contracts_1.Contracts.throwIfNullOrWhitespace(appId, \"appId\");\n    Contracts_1.Contracts.throwIfNullOrWhitespace(region, \"region\");\n    var langModelImp = new LanguageUnderstandingModelImpl();\n    langModelImp.appId = appId;\n    langModelImp.region = region;\n    langModelImp.subscriptionKey = subscriptionKey;\n    return langModelImp;\n  };\n\n  return LanguageUnderstandingModel;\n}();\n\nexports.LanguageUnderstandingModel = LanguageUnderstandingModel;\n/**\n * @private\n * @class LanguageUnderstandingModelImpl\n */\n// tslint:disable-next-line:max-classes-per-file\n\nvar LanguageUnderstandingModelImpl =\n/** @class */\nfunction (_super) {\n  __extends(LanguageUnderstandingModelImpl, _super);\n\n  function LanguageUnderstandingModelImpl() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  return LanguageUnderstandingModelImpl;\n}(LanguageUnderstandingModel);\n\nexports.LanguageUnderstandingModelImpl = LanguageUnderstandingModelImpl;","map":{"version":3,"sources":["src/sdk/LanguageUnderstandingModel.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\n\r\n/**\r\n * Language understanding model\r\n * @class LanguageUnderstandingModel\r\n */\r\nexport class LanguageUnderstandingModel {\r\n    /**\r\n     * Creates and initializes a new instance\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n    }\r\n\r\n    /**\r\n     * Creates an language understanding model using the specified endpoint.\r\n     * @member LanguageUnderstandingModel.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} uri - A String that represents the endpoint of the language understanding model.\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromEndpoint(uri: URL): LanguageUnderstandingModel {\r\n        Contracts.throwIfNull(uri, \"uri\");\r\n        Contracts.throwIfNullOrWhitespace(uri.hostname, \"uri\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        // Need to extract the app ID from the URL.\r\n        // URL is in the format: https://<region>.api.cognitive.microsoft.com/luis/v2.0/apps/<Guid>?subscription-key=<key>&timezoneOffset=-360\r\n\r\n        // Start tearing the string apart.\r\n\r\n        // region can be extracted from the host name.\r\n        const firstDot: number = uri.host.indexOf(\".\");\r\n        if (-1 === firstDot) {\r\n            throw new Error(\"Could not determine region from endpoint\");\r\n        }\r\n        langModelImp.region = uri.host.substr(0, firstDot);\r\n\r\n        // Now the app ID.\r\n\r\n        const lastSegment: number = uri.pathname.lastIndexOf(\"/\") + 1;\r\n        if (-1 === lastSegment) {\r\n            throw new Error(\"Could not determine appId from endpoint\");\r\n        }\r\n\r\n        langModelImp.appId = uri.pathname.substr(lastSegment);\r\n\r\n        // And finally the key.\r\n        langModelImp.subscriptionKey = uri.searchParams.get(\"subscription-key\");\r\n        if (undefined === langModelImp.subscriptionKey) {\r\n            throw new Error(\"Could not determine subscription key from endpoint\");\r\n        }\r\n\r\n        return langModelImp;\r\n    }\r\n\r\n    /**\r\n     * Creates an language understanding model using the application id of Language Understanding service.\r\n     * @member LanguageUnderstandingModel.fromAppId\r\n     * @function\r\n     * @public\r\n     * @param {string} appId - A String that represents the application id of Language Understanding service.\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromAppId(appId: string): LanguageUnderstandingModel {\r\n        Contracts.throwIfNullOrWhitespace(appId, \"appId\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        langModelImp.appId = appId;\r\n        return langModelImp;\r\n    }\r\n\r\n    /**\r\n     * Creates a language understanding model using hostname, subscription key and application\r\n     * id of Language Understanding service.\r\n     * @member LanguageUnderstandingModel.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - A String that represents the subscription key of\r\n     *        Language Understanding service.\r\n     * @param {string} appId - A String that represents the application id of Language\r\n     *        Understanding service.\r\n     * @param {LanguageUnderstandingModel} region - A String that represents the region\r\n     *        of the Language Understanding service (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, appId: string, region: string): LanguageUnderstandingModel {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(appId, \"appId\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        langModelImp.appId = appId;\r\n        langModelImp.region = region;\r\n        langModelImp.subscriptionKey = subscriptionKey;\r\n        return langModelImp;\r\n    }\r\n}\r\n\r\n/**\r\n * @private\r\n * @class LanguageUnderstandingModelImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class LanguageUnderstandingModelImpl extends LanguageUnderstandingModel {\r\n    public appId: string;\r\n    public region: string;\r\n    public subscriptionKey: string;\r\n}\r\n"]},"metadata":{},"sourceType":"script"}