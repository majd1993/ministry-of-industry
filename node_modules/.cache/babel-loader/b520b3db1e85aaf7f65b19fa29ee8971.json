{"ast":null,"code":"import _inherits from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { connectivity, type } from \"../../common.speech/Exports\";\nimport { AudioSourceInitializingEvent, AudioSourceReadyEvent, AudioStreamNodeAttachedEvent, AudioStreamNodeAttachingEvent, AudioStreamNodeDetachedEvent, ChunkedArrayBufferStream, Events, EventSource, PromiseHelper } from \"../../common/Exports\";\nimport { createNoDashGuid } from \"../../common/Guid\";\nimport { AudioStreamFormat } from \"../Exports\";\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\n/**\n * Represents audio input stream used for custom audio input configurations.\n * @class AudioInputStream\n */\n\nexport var AudioInputStream = /*#__PURE__*/function () {\n  /**\n   * Creates and initializes an instance.\n   * @constructor\n   */\n  function AudioInputStream() {\n    _classCallCheck(this, AudioInputStream);\n  }\n  /**\n   * Creates a memory backed PushAudioInputStream with the specified audio format.\n   * @member AudioInputStream.createPushStream\n   * @function\n   * @public\n   * @param {AudioStreamFormat} format - The audio data format in which audio will be\n   *        written to the push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\n   * @returns {PushAudioInputStream} The audio input stream being created.\n   */\n\n\n  _createClass(AudioInputStream, null, [{\n    key: \"createPushStream\",\n    value: function createPushStream(format) {\n      return PushAudioInputStream.create(format);\n    }\n    /**\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for read()\n     * and close() methods.\n     * @member AudioInputStream.createPullStream\n     * @function\n     * @public\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object, derived from\n     *        PullAudioInputStreamCallback\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be returned from\n     *        the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\n     * @returns {PullAudioInputStream} The audio input stream being created.\n     */\n\n  }, {\n    key: \"createPullStream\",\n    value: function createPullStream(callback, format) {\n      return PullAudioInputStream.create(callback, format); // throw new Error(\"Oops\");\n    }\n  }]);\n\n  return AudioInputStream;\n}();\n/**\n * Represents memory backed push audio input stream used for custom audio input configurations.\n * @class PushAudioInputStream\n */\n// tslint:disable-next-line:max-classes-per-file\n\nexport var PushAudioInputStream = /*#__PURE__*/function (_AudioInputStream) {\n  _inherits(PushAudioInputStream, _AudioInputStream);\n\n  var _super = _createSuper(PushAudioInputStream);\n\n  function PushAudioInputStream() {\n    _classCallCheck(this, PushAudioInputStream);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PushAudioInputStream, null, [{\n    key: \"create\",\n    value:\n    /**\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\n     * @member PushAudioInputStream.create\n     * @function\n     * @public\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be written to the\n     *        push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\n     * @returns {PushAudioInputStream} The push audio input stream being created.\n     */\n    function create(format) {\n      return new PushAudioInputStreamImpl(format);\n    }\n  }]);\n\n  return PushAudioInputStream;\n}(AudioInputStream);\n/**\n * Represents memory backed push audio input stream used for custom audio input configurations.\n * @private\n * @class PushAudioInputStreamImpl\n */\n// tslint:disable-next-line:max-classes-per-file\n\nexport var PushAudioInputStreamImpl = /*#__PURE__*/function (_PushAudioInputStream) {\n  _inherits(PushAudioInputStreamImpl, _PushAudioInputStream);\n\n  var _super2 = _createSuper(PushAudioInputStreamImpl);\n\n  /**\n   * Creates and initalizes an instance with the given values.\n   * @constructor\n   * @param {AudioStreamFormat} format - The audio stream format.\n   */\n  function PushAudioInputStreamImpl(format) {\n    var _this;\n\n    _classCallCheck(this, PushAudioInputStreamImpl);\n\n    _this = _super2.call(this);\n\n    _this.onEvent = function (event) {\n      _this.privEvents.onEvent(event);\n\n      Events.instance.onEvent(event);\n    };\n\n    if (format === undefined) {\n      _this.privFormat = AudioStreamFormatImpl.getDefaultInputFormat();\n    } else {\n      _this.privFormat = format;\n    }\n\n    _this.privEvents = new EventSource();\n    _this.privId = createNoDashGuid();\n    _this.privStream = new ChunkedArrayBufferStream(_this.privFormat.avgBytesPerSec / 10);\n    return _this;\n  }\n  /**\n   * Format information for the audio\n   */\n\n\n  _createClass(PushAudioInputStreamImpl, [{\n    key: \"format\",\n    get: function get() {\n      return PromiseHelper.fromResult(this.privFormat);\n    }\n    /**\n     * Writes the audio data specified by making an internal copy of the data.\n     * @member PushAudioInputStreamImpl.prototype.write\n     * @function\n     * @public\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(dataBuffer) {\n      this.privStream.writeStreamChunk({\n        buffer: dataBuffer,\n        isEnd: false,\n        timeReceived: Date.now()\n      });\n    }\n    /**\n     * Closes the stream.\n     * @member PushAudioInputStreamImpl.prototype.close\n     * @function\n     * @public\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.privStream.close();\n    }\n  }, {\n    key: \"id\",\n    value: function id() {\n      return this.privId;\n    }\n  }, {\n    key: \"blob\",\n    get: function get() {\n      var _this2 = this;\n\n      return this.attach(\"id\").onSuccessContinueWithPromise(function (audioNode) {\n        var data = [];\n        var bufferData = Buffer.from(\"\");\n\n        var readCycle = function readCycle() {\n          return audioNode.read().onSuccessContinueWithPromise(function (audioStreamChunk) {\n            if (!audioStreamChunk || audioStreamChunk.isEnd) {\n              if (typeof XMLHttpRequest !== \"undefined\") {\n                return PromiseHelper.fromResult(new Blob(data));\n              } else {\n                return PromiseHelper.fromResult(Buffer.from(bufferData));\n              }\n            } else {\n              if (typeof Blob !== \"undefined\") {\n                data.push(audioStreamChunk.buffer);\n              } else {\n                bufferData = Buffer.concat([bufferData, _this2.toBuffer(audioStreamChunk.buffer)]);\n              }\n\n              return readCycle();\n            }\n          });\n        };\n\n        return readCycle();\n      });\n    }\n  }, {\n    key: \"turnOn\",\n    value: function turnOn() {\n      this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\n\n      this.onEvent(new AudioSourceReadyEvent(this.privId));\n      return PromiseHelper.fromResult(true);\n    }\n  }, {\n    key: \"attach\",\n    value: function attach(audioNodeId) {\n      var _this3 = this;\n\n      this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\n      return this.turnOn().onSuccessContinueWith(function (_) {\n        // For now we support a single parallel reader of the pushed stream.\n        // So we can simiply hand the stream to the recognizer and let it recognize.\n        return _this3.privStream;\n      }).onSuccessContinueWith(function (stream) {\n        _this3.onEvent(new AudioStreamNodeAttachedEvent(_this3.privId, audioNodeId));\n\n        return {\n          detach: function detach() {\n            stream.readEnded();\n\n            _this3.onEvent(new AudioStreamNodeDetachedEvent(_this3.privId, audioNodeId));\n\n            _this3.turnOff();\n          },\n          id: function id() {\n            return audioNodeId;\n          },\n          read: function read() {\n            return stream.read();\n          }\n        };\n      });\n    }\n  }, {\n    key: \"detach\",\n    value: function detach(audioNodeId) {\n      this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n    }\n  }, {\n    key: \"turnOff\",\n    value: function turnOff() {\n      return PromiseHelper.fromResult(false);\n    }\n  }, {\n    key: \"events\",\n    get: function get() {\n      return this.privEvents;\n    }\n  }, {\n    key: \"deviceInfo\",\n    get: function get() {\n      return PromiseHelper.fromResult({\n        bitspersample: this.privFormat.bitsPerSample,\n        channelcount: this.privFormat.channels,\n        connectivity: connectivity.Unknown,\n        manufacturer: \"Speech SDK\",\n        model: \"PushStream\",\n        samplerate: this.privFormat.samplesPerSec,\n        type: type.Stream\n      });\n    }\n  }, {\n    key: \"toBuffer\",\n    value: function toBuffer(arrayBuffer) {\n      var buf = Buffer.alloc(arrayBuffer.byteLength);\n      var view = new Uint8Array(arrayBuffer);\n\n      for (var i = 0; i < buf.length; ++i) {\n        buf[i] = view[i];\n      }\n\n      return buf;\n    }\n  }]);\n\n  return PushAudioInputStreamImpl;\n}(PushAudioInputStream);\n/*\n * Represents audio input stream used for custom audio input configurations.\n * @class PullAudioInputStream\n */\n// tslint:disable-next-line:max-classes-per-file\n\nexport var PullAudioInputStream = /*#__PURE__*/function (_AudioInputStream2) {\n  _inherits(PullAudioInputStream, _AudioInputStream2);\n\n  var _super3 = _createSuper(PullAudioInputStream);\n\n  /**\n   * Creates and initializes and instance.\n   * @constructor\n   */\n  function PullAudioInputStream() {\n    _classCallCheck(this, PullAudioInputStream);\n\n    return _super3.call(this);\n  }\n  /**\n   * Creates a PullAudioInputStream that delegates to the specified callback interface for\n   * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\n   * @member PullAudioInputStream.create\n   * @function\n   * @public\n   * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\n   *        derived from PullAudioInputStreamCustomCallback\n   * @param {AudioStreamFormat} format - The audio data format in which audio will be\n   *        returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\n   * @returns {PullAudioInputStream} The push audio input stream being created.\n   */\n\n\n  _createClass(PullAudioInputStream, null, [{\n    key: \"create\",\n    value: function create(callback, format) {\n      return new PullAudioInputStreamImpl(callback, format);\n    }\n  }]);\n\n  return PullAudioInputStream;\n}(AudioInputStream);\n/**\n * Represents audio input stream used for custom audio input configurations.\n * @private\n * @class PullAudioInputStreamImpl\n */\n// tslint:disable-next-line:max-classes-per-file\n\nexport var PullAudioInputStreamImpl = /*#__PURE__*/function (_PullAudioInputStream) {\n  _inherits(PullAudioInputStreamImpl, _PullAudioInputStream);\n\n  var _super4 = _createSuper(PullAudioInputStreamImpl);\n\n  /**\n   * Creates a PullAudioInputStream that delegates to the specified callback interface for\n   * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\n   * @constructor\n   * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\n   *        derived from PullAudioInputStreamCustomCallback\n   * @param {AudioStreamFormat} format - The audio data format in which audio will be\n   *        returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\n   */\n  function PullAudioInputStreamImpl(callback, format) {\n    var _this4;\n\n    _classCallCheck(this, PullAudioInputStreamImpl);\n\n    _this4 = _super4.call(this);\n\n    _this4.onEvent = function (event) {\n      _this4.privEvents.onEvent(event);\n\n      Events.instance.onEvent(event);\n    };\n\n    if (undefined === format) {\n      _this4.privFormat = AudioStreamFormat.getDefaultInputFormat();\n    } else {\n      _this4.privFormat = format;\n    }\n\n    _this4.privEvents = new EventSource();\n    _this4.privId = createNoDashGuid();\n    _this4.privCallback = callback;\n    _this4.privIsClosed = false;\n    _this4.privBufferSize = _this4.privFormat.avgBytesPerSec / 10;\n    return _this4;\n  }\n  /**\n   * Format information for the audio\n   */\n\n\n  _createClass(PullAudioInputStreamImpl, [{\n    key: \"format\",\n    get: function get() {\n      return PromiseHelper.fromResult(this.privFormat);\n    }\n    /**\n     * Closes the stream.\n     * @member PullAudioInputStreamImpl.prototype.close\n     * @function\n     * @public\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.privIsClosed = true;\n      this.privCallback.close();\n    }\n  }, {\n    key: \"id\",\n    value: function id() {\n      return this.privId;\n    }\n  }, {\n    key: \"blob\",\n    get: function get() {\n      return PromiseHelper.fromError(\"Not implemented\");\n    }\n  }, {\n    key: \"turnOn\",\n    value: function turnOn() {\n      this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\n\n      this.onEvent(new AudioSourceReadyEvent(this.privId));\n      return PromiseHelper.fromResult(true);\n    }\n  }, {\n    key: \"attach\",\n    value: function attach(audioNodeId) {\n      var _this5 = this;\n\n      this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\n      return this.turnOn().onSuccessContinueWith(function (result) {\n        _this5.onEvent(new AudioStreamNodeAttachedEvent(_this5.privId, audioNodeId));\n\n        return {\n          detach: function detach() {\n            _this5.privCallback.close();\n\n            _this5.onEvent(new AudioStreamNodeDetachedEvent(_this5.privId, audioNodeId));\n\n            _this5.turnOff();\n          },\n          id: function id() {\n            return audioNodeId;\n          },\n          read: function read() {\n            var totalBytes = 0;\n            var transmitBuff; // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\n\n            while (totalBytes < _this5.privBufferSize) {\n              // Sizing the read buffer to the delta between the perfect size and what's left means we won't ever get too much\n              // data back.\n              var readBuff = new ArrayBuffer(_this5.privBufferSize - totalBytes);\n\n              var pulledBytes = _this5.privCallback.read(readBuff); // If there is no return buffer yet defined, set the return buffer to the that was just populated.\n              // This was, if we have enough data there's no copy penalty, but if we don't we have a buffer that's the\n              // preferred size allocated.\n\n\n              if (undefined === transmitBuff) {\n                transmitBuff = readBuff;\n              } else {\n                // Not the first bite at the apple, so fill the return buffer with the data we got back.\n                var intView = new Int8Array(transmitBuff);\n                intView.set(new Int8Array(readBuff), totalBytes);\n              } // If there are no bytes to read, just break out and be done.\n\n\n              if (0 === pulledBytes) {\n                break;\n              }\n\n              totalBytes += pulledBytes;\n            }\n\n            return PromiseHelper.fromResult({\n              buffer: transmitBuff.slice(0, totalBytes),\n              isEnd: _this5.privIsClosed || totalBytes === 0,\n              timeReceived: Date.now()\n            });\n          }\n        };\n      });\n    }\n  }, {\n    key: \"detach\",\n    value: function detach(audioNodeId) {\n      this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n    }\n  }, {\n    key: \"turnOff\",\n    value: function turnOff() {\n      return PromiseHelper.fromResult(false);\n    }\n  }, {\n    key: \"events\",\n    get: function get() {\n      return this.privEvents;\n    }\n  }, {\n    key: \"deviceInfo\",\n    get: function get() {\n      return PromiseHelper.fromResult({\n        bitspersample: this.privFormat.bitsPerSample,\n        channelcount: this.privFormat.channels,\n        connectivity: connectivity.Unknown,\n        manufacturer: \"Speech SDK\",\n        model: \"PullStream\",\n        samplerate: this.privFormat.samplesPerSec,\n        type: type.Stream\n      });\n    }\n  }]);\n\n  return PullAudioInputStreamImpl;\n}(PullAudioInputStream);","map":{"version":3,"sources":["src/sdk/Audio/AudioInputStream.ts"],"names":[],"mappings":";;;;AAAA;AACA;AAEA,SACI,YADJ,EAGI,IAHJ,QAIO,6BAJP;AAKA,SAEI,4BAFJ,EAGI,qBAHJ,EAII,4BAJJ,EAKI,6BALJ,EAMI,4BANJ,EAOI,wBAPJ,EASI,MATJ,EAUI,WAVJ,EAeI,aAfJ,QAkBO,sBAlBP;AAmBA,SAAS,gBAAT,QAAiC,mBAAjC;AACA,SAAS,iBAAT,QAAgE,YAAhE;AACA,SAAS,qBAAT,QAAsC,qBAAtC;AAEA;;;AAGG;;AACH,WAAsB,gBAAtB;AAEI;;;AAGG;AACH,8BAAA;AAAA;AAA2B;AAE3B;;;;;;;;AAQG;;;AAhBP;AAAA;AAAA,WAiBW,0BAAwB,MAAxB,EAAkD;AACrD,aAAO,oBAAoB,CAAC,MAArB,CAA4B,MAA5B,CAAP;AACH;AAED;;;;;;;;;;;AAWG;;AAhCP;AAAA;AAAA,WAiCW,0BAAwB,QAAxB,EAAgE,MAAhE,EAA0F;AAC7F,aAAO,oBAAoB,CAAC,MAArB,CAA4B,QAA5B,EAAsC,MAAtC,CAAP,CAD6F,CAE7F;AACH;AApCL;;AAAA;AAAA;AA+CA;;;AAGG;AACH;;AACA,WAAsB,oBAAtB;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAEI;;;;;;;;AAQG;AACI,oBAAc,MAAd,EAAwC;AAC3C,aAAO,IAAI,wBAAJ,CAA6B,MAA7B,CAAP;AACH;AAbL;;AAAA;AAAA,EAAmD,gBAAnD;AAiCA;;;;AAIG;AACH;;AACA,WAAa,wBAAb;AAAA;;AAAA;;AAOI;;;;AAIG;AACH,oCAAmB,MAAnB,EAA6C;AAAA;;AAAA;;AACzC;;AAoII,UAAA,OAAA,GAAU,UAAC,KAAD,EAAkC;AAChD,YAAK,UAAL,CAAgB,OAAhB,CAAwB,KAAxB;;AACA,MAAA,MAAM,CAAC,QAAP,CAAgB,OAAhB,CAAwB,KAAxB;AACH,KAHO;;AAnIJ,QAAI,MAAM,KAAK,SAAf,EAA0B;AACtB,YAAK,UAAL,GAAkB,qBAAqB,CAAC,qBAAtB,EAAlB;AACH,KAFD,MAEO;AACH,YAAK,UAAL,GAAkB,MAAlB;AACH;;AACD,UAAK,UAAL,GAAkB,IAAI,WAAJ,EAAlB;AACA,UAAK,MAAL,GAAc,gBAAgB,EAA9B;AACA,UAAK,UAAL,GAAkB,IAAI,wBAAJ,CAA6B,MAAK,UAAL,CAAgB,cAAhB,GAAiC,EAA9D,CAAlB;AATyC;AAU5C;AAED;;AAEG;;;AA1BP;AAAA;AAAA,SA2BI,eAAiB;AACb,aAAO,aAAa,CAAC,UAAd,CAAyB,KAAK,UAA9B,CAAP;AACH;AAED;;;;;;AAMG;;AArCP;AAAA;AAAA,WAsCW,eAAM,UAAN,EAA6B;AAChC,WAAK,UAAL,CAAgB,gBAAhB,CAAiC;AAC7B,QAAA,MAAM,EAAE,UADqB;AAE7B,QAAA,KAAK,EAAE,KAFsB;AAG7B,QAAA,YAAY,EAAE,IAAI,CAAC,GAAL;AAHe,OAAjC;AAKH;AAED;;;;;AAKG;;AAnDP;AAAA;AAAA,WAoDW,iBAAK;AACR,WAAK,UAAL,CAAgB,KAAhB;AACH;AAtDL;AAAA;AAAA,WAwDW,cAAE;AACL,aAAO,KAAK,MAAZ;AACH;AA1DL;AAAA;AAAA,SA4DI,eAAe;AAAA;;AACX,aAAO,KAAK,MAAL,CAAY,IAAZ,EAAkB,4BAAlB,CAA8D,UAAC,SAAD,EAAgC;AACjG,YAAM,IAAI,GAAkB,EAA5B;AACA,YAAI,UAAU,GAAG,MAAM,CAAC,IAAP,CAAY,EAAZ,CAAjB;;AACA,YAAM,SAAS,GAAG,SAAZ,SAAY,GAA6B;AAC3C,iBAAO,SAAS,CAAC,IAAV,GAAiB,4BAAjB,CAA6D,UAAC,gBAAD,EAAgD;AAChH,gBAAI,CAAC,gBAAD,IAAqB,gBAAgB,CAAC,KAA1C,EAAiD;AAC7C,kBAAI,OAAQ,cAAR,KAA4B,WAAhC,EAA6C;AACzC,uBAAO,aAAa,CAAC,UAAd,CAAyB,IAAI,IAAJ,CAAS,IAAT,CAAzB,CAAP;AACH,eAFD,MAEO;AACH,uBAAO,aAAa,CAAC,UAAd,CAAyB,MAAM,CAAC,IAAP,CAAY,UAAZ,CAAzB,CAAP;AACH;AACJ,aAND,MAMO;AACH,kBAAI,OAAQ,IAAR,KAAkB,WAAtB,EAAmC;AAC/B,gBAAA,IAAI,CAAC,IAAL,CAAU,gBAAgB,CAAC,MAA3B;AACH,eAFD,MAEO;AACH,gBAAA,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,CAAC,UAAD,EAAa,MAAI,CAAC,QAAL,CAAc,gBAAgB,CAAC,MAA/B,CAAb,CAAd,CAAb;AACH;;AACD,qBAAO,SAAS,EAAhB;AACH;AACJ,WAfM,CAAP;AAgBH,SAjBD;;AAkBA,eAAO,SAAS,EAAhB;AACH,OAtBM,CAAP;AAuBH;AApFL;AAAA;AAAA,WAsFW,kBAAM;AACT,WAAK,OAAL,CAAa,IAAI,4BAAJ,CAAiC,KAAK,MAAtC,CAAb,EADS,CACoD;;AAC7D,WAAK,OAAL,CAAa,IAAI,qBAAJ,CAA0B,KAAK,MAA/B,CAAb;AACA,aAAO,aAAa,CAAC,UAAd,CAAyB,IAAzB,CAAP;AACH;AA1FL;AAAA;AAAA,WA4FW,gBAAO,WAAP,EAA0B;AAAA;;AAC7B,WAAK,OAAL,CAAa,IAAI,6BAAJ,CAAkC,KAAK,MAAvC,EAA+C,WAA/C,CAAb;AAEA,aAAO,KAAK,MAAL,GACF,qBADE,CACyC,UAAC,CAAD,EAAe;AACvD;AACA;AAEA,eAAO,MAAI,CAAC,UAAZ;AACH,OANE,EAOF,qBAPE,CAOoB,UAAC,MAAD,EAAgC;AACnD,QAAA,MAAI,CAAC,OAAL,CAAa,IAAI,4BAAJ,CAAiC,MAAI,CAAC,MAAtC,EAA8C,WAA9C,CAAb;;AAEA,eAAO;AACH,UAAA,MAAM,EAAE,kBAAK;AACT,YAAA,MAAM,CAAC,SAAP;;AACA,YAAA,MAAI,CAAC,OAAL,CAAa,IAAI,4BAAJ,CAAiC,MAAI,CAAC,MAAtC,EAA8C,WAA9C,CAAb;;AACA,YAAA,MAAI,CAAC,OAAL;AACH,WALE;AAMH,UAAA,EAAE,EAAE,cAAK;AACL,mBAAO,WAAP;AACH,WARE;AASH,UAAA,IAAI,EAAE,gBAAK;AACP,mBAAO,MAAM,CAAC,IAAP,EAAP;AACH;AAXE,SAAP;AAaH,OAvBE,CAAP;AAwBH;AAvHL;AAAA;AAAA,WAyHW,gBAAO,WAAP,EAA0B;AAC7B,WAAK,OAAL,CAAa,IAAI,4BAAJ,CAAiC,KAAK,MAAtC,EAA8C,WAA9C,CAAb;AACH;AA3HL;AAAA;AAAA,WA6HW,mBAAO;AACV,aAAO,aAAa,CAAC,UAAd,CAAyB,KAAzB,CAAP;AACH;AA/HL;AAAA;AAAA,SAiII,eAAiB;AACb,aAAO,KAAK,UAAZ;AACH;AAnIL;AAAA;AAAA,SAqII,eAAqB;AACjB,aAAO,aAAa,CAAC,UAAd,CAAyB;AAC5B,QAAA,aAAa,EAAE,KAAK,UAAL,CAAgB,aADH;AAE5B,QAAA,YAAY,EAAE,KAAK,UAAL,CAAgB,QAFF;AAG5B,QAAA,YAAY,EAAE,YAAY,CAAC,OAHC;AAI5B,QAAA,YAAY,EAAE,YAJc;AAK5B,QAAA,KAAK,EAAE,YALqB;AAM5B,QAAA,UAAU,EAAE,KAAK,UAAL,CAAgB,aANA;AAO5B,QAAA,IAAI,EAAE,IAAI,CAAC;AAPiB,OAAzB,CAAP;AASH;AA/IL;AAAA;AAAA,WAsJY,kBAAS,WAAT,EAAiC;AACrC,UAAM,GAAG,GAAW,MAAM,CAAC,KAAP,CAAa,WAAW,CAAC,UAAzB,CAApB;AACA,UAAM,IAAI,GAAe,IAAI,UAAJ,CAAe,WAAf,CAAzB;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAAG,CAAC,MAAxB,EAAgC,EAAE,CAAlC,EAAqC;AACjC,QAAA,GAAG,CAAC,CAAD,CAAH,GAAS,IAAI,CAAC,CAAD,CAAb;AACH;;AACD,aAAO,GAAP;AACH;AA7JL;;AAAA;AAAA,EAA8C,oBAA9C;AAgKA;;;AAGG;AACH;;AACA,WAAsB,oBAAtB;AAAA;;AAAA;;AACI;;;AAGG;AACH,kCAAA;AAAA;;AAAA;AAAoC;AAEpC;;;;;;;;;;;AAWG;;;AAlBP;AAAA;AAAA,WAmBW,gBAAc,QAAd,EAAsD,MAAtD,EAAgF;AACnF,aAAO,IAAI,wBAAJ,CAA6B,QAA7B,EAAuC,MAAvC,CAAP;AACH;AArBL;;AAAA;AAAA,EAAmD,gBAAnD;AAiCA;;;;AAIG;AACH;;AACA,WAAa,wBAAb;AAAA;;AAAA;;AASI;;;;;;;;AAQG;AACH,oCAAmB,QAAnB,EAA2D,MAA3D,EAAyF;AAAA;;AAAA;;AACrF;;AA6HI,WAAA,OAAA,GAAU,UAAC,KAAD,EAAkC;AAChD,aAAK,UAAL,CAAgB,OAAhB,CAAwB,KAAxB;;AACA,MAAA,MAAM,CAAC,QAAP,CAAgB,OAAhB,CAAwB,KAAxB;AACH,KAHO;;AA5HJ,QAAI,SAAS,KAAK,MAAlB,EAA0B;AACtB,aAAK,UAAL,GAAkB,iBAAiB,CAAC,qBAAlB,EAAlB;AACH,KAFD,MAEO;AACH,aAAK,UAAL,GAAkB,MAAlB;AACH;;AACD,WAAK,UAAL,GAAkB,IAAI,WAAJ,EAAlB;AACA,WAAK,MAAL,GAAc,gBAAgB,EAA9B;AACA,WAAK,YAAL,GAAoB,QAApB;AACA,WAAK,YAAL,GAAoB,KAApB;AACA,WAAK,cAAL,GAAsB,OAAK,UAAL,CAAgB,cAAhB,GAAiC,EAAvD;AAXqF;AAYxF;AAED;;AAEG;;;AAlCP;AAAA;AAAA,SAmCI,eAAiB;AACb,aAAO,aAAa,CAAC,UAAd,CAAyB,KAAK,UAA9B,CAAP;AACH;AAED;;;;;AAKG;;AA5CP;AAAA;AAAA,WA6CW,iBAAK;AACR,WAAK,YAAL,GAAoB,IAApB;AACA,WAAK,YAAL,CAAkB,KAAlB;AACH;AAhDL;AAAA;AAAA,WAkDW,cAAE;AACL,aAAO,KAAK,MAAZ;AACH;AApDL;AAAA;AAAA,SAsDI,eAAe;AACX,aAAO,aAAa,CAAC,SAAd,CAAwB,iBAAxB,CAAP;AACH;AAxDL;AAAA;AAAA,WA0DW,kBAAM;AACT,WAAK,OAAL,CAAa,IAAI,4BAAJ,CAAiC,KAAK,MAAtC,CAAb,EADS,CACoD;;AAC7D,WAAK,OAAL,CAAa,IAAI,qBAAJ,CAA0B,KAAK,MAA/B,CAAb;AACA,aAAO,aAAa,CAAC,UAAd,CAAyB,IAAzB,CAAP;AACH;AA9DL;AAAA;AAAA,WAgEW,gBAAO,WAAP,EAA0B;AAAA;;AAC7B,WAAK,OAAL,CAAa,IAAI,6BAAJ,CAAkC,KAAK,MAAvC,EAA+C,WAA/C,CAAb;AAEA,aAAO,KAAK,MAAL,GACF,qBADE,CACoB,UAAC,MAAD,EAAoB;AACvC,QAAA,MAAI,CAAC,OAAL,CAAa,IAAI,4BAAJ,CAAiC,MAAI,CAAC,MAAtC,EAA8C,WAA9C,CAAb;;AAEA,eAAO;AACH,UAAA,MAAM,EAAE,kBAAK;AACT,YAAA,MAAI,CAAC,YAAL,CAAkB,KAAlB;;AACA,YAAA,MAAI,CAAC,OAAL,CAAa,IAAI,4BAAJ,CAAiC,MAAI,CAAC,MAAtC,EAA8C,WAA9C,CAAb;;AACA,YAAA,MAAI,CAAC,OAAL;AACH,WALE;AAMH,UAAA,EAAE,EAAE,cAAK;AACL,mBAAO,WAAP;AACH,WARE;AASH,UAAA,IAAI,EAAE,gBAAyC;AAC3C,gBAAI,UAAU,GAAW,CAAzB;AACA,gBAAI,YAAJ,CAF2C,CAI3C;;AACA,mBAAO,UAAU,GAAG,MAAI,CAAC,cAAzB,EAAyC;AACrC;AACA;AACA,kBAAM,QAAQ,GAAgB,IAAI,WAAJ,CAAgB,MAAI,CAAC,cAAL,GAAsB,UAAtC,CAA9B;;AACA,kBAAM,WAAW,GAAW,MAAI,CAAC,YAAL,CAAkB,IAAlB,CAAuB,QAAvB,CAA5B,CAJqC,CAMrC;AACA;AACA;;;AACA,kBAAI,SAAS,KAAK,YAAlB,EAAgC;AAC5B,gBAAA,YAAY,GAAG,QAAf;AACH,eAFD,MAEO;AACH;AACA,oBAAM,OAAO,GAAc,IAAI,SAAJ,CAAc,YAAd,CAA3B;AACA,gBAAA,OAAO,CAAC,GAAR,CAAY,IAAI,SAAJ,CAAc,QAAd,CAAZ,EAAqC,UAArC;AACH,eAfoC,CAiBrC;;;AACA,kBAAI,MAAM,WAAV,EAAuB;AACnB;AACH;;AAED,cAAA,UAAU,IAAI,WAAd;AACH;;AAED,mBAAO,aAAa,CAAC,UAAd,CAAoD;AACvD,cAAA,MAAM,EAAE,YAAY,CAAC,KAAb,CAAmB,CAAnB,EAAsB,UAAtB,CAD+C;AAEvD,cAAA,KAAK,EAAE,MAAI,CAAC,YAAL,IAAqB,UAAU,KAAK,CAFY;AAGvD,cAAA,YAAY,EAAE,IAAI,CAAC,GAAL;AAHyC,aAApD,CAAP;AAKH;AA5CE,SAAP;AA8CH,OAlDE,CAAP;AAmDH;AAtHL;AAAA;AAAA,WAwHW,gBAAO,WAAP,EAA0B;AAC7B,WAAK,OAAL,CAAa,IAAI,4BAAJ,CAAiC,KAAK,MAAtC,EAA8C,WAA9C,CAAb;AACH;AA1HL;AAAA;AAAA,WA4HW,mBAAO;AACV,aAAO,aAAa,CAAC,UAAd,CAAyB,KAAzB,CAAP;AACH;AA9HL;AAAA;AAAA,SAgII,eAAiB;AACb,aAAO,KAAK,UAAZ;AACH;AAlIL;AAAA;AAAA,SAoII,eAAqB;AACjB,aAAO,aAAa,CAAC,UAAd,CAAyB;AAC5B,QAAA,aAAa,EAAE,KAAK,UAAL,CAAgB,aADH;AAE5B,QAAA,YAAY,EAAE,KAAK,UAAL,CAAgB,QAFF;AAG5B,QAAA,YAAY,EAAE,YAAY,CAAC,OAHC;AAI5B,QAAA,YAAY,EAAE,YAJc;AAK5B,QAAA,KAAK,EAAE,YALqB;AAM5B,QAAA,UAAU,EAAE,KAAK,UAAL,CAAgB,aANA;AAO5B,QAAA,IAAI,EAAE,IAAI,CAAC;AAPiB,OAAzB,CAAP;AASH;AA9IL;;AAAA;AAAA,EAA8C,oBAA9C","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type,\r\n} from \"../../common.speech/Exports\";\r\nimport {\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    ChunkedArrayBufferStream,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n    Promise,\r\n    PromiseHelper,\r\n    PromiseResult,\r\n    Stream,\r\n} from \"../../common/Exports\";\r\nimport { createNoDashGuid } from \"../../common/Guid\";\r\nimport { AudioStreamFormat, PullAudioInputStreamCallback } from \"../Exports\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class AudioInputStream\r\n */\r\nexport abstract class AudioInputStream {\r\n\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() { }\r\n\r\n    /**\r\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n     * @member AudioInputStream.createPushStream\r\n     * @function\r\n     * @public\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     *        written to the push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PushAudioInputStream} The audio input stream being created.\r\n     */\r\n    public static createPushStream(format?: AudioStreamFormat): PushAudioInputStream {\r\n        return PushAudioInputStream.create(format);\r\n    }\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for read()\r\n     * and close() methods.\r\n     * @member AudioInputStream.createPullStream\r\n     * @function\r\n     * @public\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object, derived from\r\n     *        PullAudioInputStreamCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be returned from\r\n     *        the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PullAudioInputStream} The audio input stream being created.\r\n     */\r\n    public static createPullStream(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\r\n        return PullAudioInputStream.create(callback, format);\r\n        // throw new Error(\"Oops\");\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @class PushAudioInputStream\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport abstract class PushAudioInputStream extends AudioInputStream {\r\n\r\n    /**\r\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n     * @member PushAudioInputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be written to the\r\n     *        push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PushAudioInputStream} The push audio input stream being created.\r\n     */\r\n    public static create(format?: AudioStreamFormat): PushAudioInputStream {\r\n        return new PushAudioInputStreamImpl(format);\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PushAudioInputStream.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public abstract write(dataBuffer: ArrayBuffer): void;\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PushAudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PushAudioInputStreamImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class PushAudioInputStreamImpl extends PushAudioInputStream implements IAudioSource {\r\n\r\n    private privFormat: AudioStreamFormatImpl;\r\n    private privId: string;\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n    private privStream: Stream<ArrayBuffer>;\r\n\r\n    /**\r\n     * Creates and initalizes an instance with the given values.\r\n     * @constructor\r\n     * @param {AudioStreamFormat} format - The audio stream format.\r\n     */\r\n    public constructor(format?: AudioStreamFormat) {\r\n        super();\r\n        if (format === undefined) {\r\n            this.privFormat = AudioStreamFormatImpl.getDefaultInputFormat();\r\n        } else {\r\n            this.privFormat = format as AudioStreamFormatImpl;\r\n        }\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privId = createNoDashGuid();\r\n        this.privStream = new ChunkedArrayBufferStream(this.privFormat.avgBytesPerSec / 10);\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return PromiseHelper.fromResult(this.privFormat);\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PushAudioInputStreamImpl.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public write(dataBuffer: ArrayBuffer): void {\r\n        this.privStream.writeStreamChunk({\r\n            buffer: dataBuffer,\r\n            isEnd: false,\r\n            timeReceived: Date.now()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PushAudioInputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privStream.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public get blob(): Promise<Blob | Buffer> {\r\n        return this.attach(\"id\").onSuccessContinueWithPromise<Blob | Buffer>((audioNode: IAudioStreamNode) => {\r\n            const data: ArrayBuffer[] = [];\r\n            let bufferData = Buffer.from(\"\");\r\n            const readCycle = (): Promise<Blob | Buffer> => {\r\n                return audioNode.read().onSuccessContinueWithPromise<Blob | Buffer>((audioStreamChunk: IStreamChunk<ArrayBuffer>) => {\r\n                    if (!audioStreamChunk || audioStreamChunk.isEnd) {\r\n                        if (typeof (XMLHttpRequest) !== \"undefined\") {\r\n                            return PromiseHelper.fromResult(new Blob(data));\r\n                        } else {\r\n                            return PromiseHelper.fromResult(Buffer.from(bufferData));\r\n                        }\r\n                    } else {\r\n                        if (typeof (Blob) !== \"undefined\") {\r\n                            data.push(audioStreamChunk.buffer);\r\n                        } else {\r\n                            bufferData = Buffer.concat([bufferData, this.toBuffer(audioStreamChunk.buffer)]);\r\n                        }\r\n                        return readCycle();\r\n                    }\r\n                });\r\n            };\r\n            return readCycle();\r\n        });\r\n    }\r\n\r\n    public turnOn(): Promise<boolean> {\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return PromiseHelper.fromResult(true);\r\n    }\r\n\r\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        return this.turnOn()\r\n            .onSuccessContinueWith<Stream<ArrayBuffer>>((_: boolean) => {\r\n                // For now we support a single parallel reader of the pushed stream.\r\n                // So we can simiply hand the stream to the recognizer and let it recognize.\r\n\r\n                return this.privStream;\r\n            })\r\n            .onSuccessContinueWith((stream: Stream<ArrayBuffer>) => {\r\n                this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n\r\n                return {\r\n                    detach: () => {\r\n                        stream.readEnded();\r\n                        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                        this.turnOff();\r\n                    },\r\n                    id: () => {\r\n                        return audioNodeId;\r\n                    },\r\n                    read: () => {\r\n                        return stream.read();\r\n                    },\r\n                };\r\n            });\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n    }\r\n\r\n    public turnOff(): Promise<boolean> {\r\n        return PromiseHelper.fromResult(false);\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return PromiseHelper.fromResult({\r\n            bitspersample: this.privFormat.bitsPerSample,\r\n            channelcount: this.privFormat.channels,\r\n            connectivity: connectivity.Unknown,\r\n            manufacturer: \"Speech SDK\",\r\n            model: \"PushStream\",\r\n            samplerate: this.privFormat.samplesPerSec,\r\n            type: type.Stream,\r\n        });\r\n    }\r\n\r\n    private onEvent = (event: AudioSourceEvent): void => {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private toBuffer(arrayBuffer: ArrayBuffer): Buffer {\r\n        const buf: Buffer = Buffer.alloc(arrayBuffer.byteLength);\r\n        const view: Uint8Array = new Uint8Array(arrayBuffer);\r\n        for (let i = 0; i < buf.length; ++i) {\r\n            buf[i] = view[i];\r\n        }\r\n        return buf;\r\n    }\r\n}\r\n\r\n/*\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class PullAudioInputStream\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport abstract class PullAudioInputStream extends AudioInputStream {\r\n    /**\r\n     * Creates and initializes and instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() { super(); }\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\r\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n     * @member PullAudioInputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\r\n     *        derived from PullAudioInputStreamCustomCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     *        returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PullAudioInputStream} The push audio input stream being created.\r\n     */\r\n    public static create(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\r\n        return new PullAudioInputStreamImpl(callback, format as AudioStreamFormatImpl);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member PullAudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PullAudioInputStreamImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class PullAudioInputStreamImpl extends PullAudioInputStream implements IAudioSource {\r\n\r\n    private privCallback: PullAudioInputStreamCallback;\r\n    private privFormat: AudioStreamFormatImpl;\r\n    private privId: string;\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n    private privIsClosed: boolean;\r\n    private privBufferSize: number;\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\r\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n     * @constructor\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\r\n     *        derived from PullAudioInputStreamCustomCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     *        returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     */\r\n    public constructor(callback: PullAudioInputStreamCallback, format?: AudioStreamFormatImpl) {\r\n        super();\r\n        if (undefined === format) {\r\n            this.privFormat = AudioStreamFormat.getDefaultInputFormat() as AudioStreamFormatImpl;\r\n        } else {\r\n            this.privFormat = format;\r\n        }\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privId = createNoDashGuid();\r\n        this.privCallback = callback;\r\n        this.privIsClosed = false;\r\n        this.privBufferSize = this.privFormat.avgBytesPerSec / 10;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return PromiseHelper.fromResult(this.privFormat);\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioInputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privIsClosed = true;\r\n        this.privCallback.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public get blob(): Promise<Blob | Buffer> {\r\n        return PromiseHelper.fromError(\"Not implemented\");\r\n    }\r\n\r\n    public turnOn(): Promise<boolean> {\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return PromiseHelper.fromResult(true);\r\n    }\r\n\r\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        return this.turnOn()\r\n            .onSuccessContinueWith((result: boolean) => {\r\n                this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n\r\n                return {\r\n                    detach: () => {\r\n                        this.privCallback.close();\r\n                        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                        this.turnOff();\r\n                    },\r\n                    id: () => {\r\n                        return audioNodeId;\r\n                    },\r\n                    read: (): Promise<IStreamChunk<ArrayBuffer>> => {\r\n                        let totalBytes: number = 0;\r\n                        let transmitBuff: ArrayBuffer;\r\n\r\n                        // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\r\n                        while (totalBytes < this.privBufferSize) {\r\n                            // Sizing the read buffer to the delta between the perfect size and what's left means we won't ever get too much\r\n                            // data back.\r\n                            const readBuff: ArrayBuffer = new ArrayBuffer(this.privBufferSize - totalBytes);\r\n                            const pulledBytes: number = this.privCallback.read(readBuff);\r\n\r\n                            // If there is no return buffer yet defined, set the return buffer to the that was just populated.\r\n                            // This was, if we have enough data there's no copy penalty, but if we don't we have a buffer that's the\r\n                            // preferred size allocated.\r\n                            if (undefined === transmitBuff) {\r\n                                transmitBuff = readBuff;\r\n                            } else {\r\n                                // Not the first bite at the apple, so fill the return buffer with the data we got back.\r\n                                const intView: Int8Array = new Int8Array(transmitBuff);\r\n                                intView.set(new Int8Array(readBuff), totalBytes);\r\n                            }\r\n\r\n                            // If there are no bytes to read, just break out and be done.\r\n                            if (0 === pulledBytes) {\r\n                                break;\r\n                            }\r\n\r\n                            totalBytes += pulledBytes;\r\n                        }\r\n\r\n                        return PromiseHelper.fromResult<IStreamChunk<ArrayBuffer>>({\r\n                            buffer: transmitBuff.slice(0, totalBytes),\r\n                            isEnd: this.privIsClosed || totalBytes === 0,\r\n                            timeReceived: Date.now(),\r\n                        });\r\n                    },\r\n                };\r\n            });\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n    }\r\n\r\n    public turnOff(): Promise<boolean> {\r\n        return PromiseHelper.fromResult(false);\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return PromiseHelper.fromResult({\r\n            bitspersample: this.privFormat.bitsPerSample,\r\n            channelcount: this.privFormat.channels,\r\n            connectivity: connectivity.Unknown,\r\n            manufacturer: \"Speech SDK\",\r\n            model: \"PullStream\",\r\n            samplerate: this.privFormat.samplesPerSec,\r\n            type: type.Stream,\r\n        });\r\n    }\r\n\r\n    private onEvent = (event: AudioSourceEvent): void => {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}