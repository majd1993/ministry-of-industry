{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = sendFilesToPostActivitySaga;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _effects = require(\"redux-saga/effects\");\n\nvar _sendFiles = require(\"../actions/sendFiles\");\n\nvar _mimeWrapper = _interopRequireDefault(require(\"../utils/mime-wrapper\"));\n\nvar _postActivity = _interopRequireDefault(require(\"../actions/postActivity\"));\n\nvar _whileConnected = _interopRequireDefault(require(\"./effects/whileConnected\"));\n\nvar _marked = /*#__PURE__*/_regenerator[\"default\"].mark(postActivityWithFiles),\n    _marked2 = /*#__PURE__*/_regenerator[\"default\"].mark(sendFilesToPostActivity),\n    _marked3 = /*#__PURE__*/_regenerator[\"default\"].mark(sendFilesToPostActivitySaga);\n\nvar getType = _mimeWrapper[\"default\"].getType.bind(_mimeWrapper[\"default\"]);\n\nfunction postActivityWithFiles(_ref) {\n  var files;\n  return _regenerator[\"default\"].wrap(function postActivityWithFiles$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          files = _ref.payload.files;\n          _context.next = 3;\n          return (0, _effects.put)((0, _postActivity[\"default\"])({\n            attachments: [].map.call(files, function (_ref2) {\n              var name = _ref2.name,\n                  thumbnail = _ref2.thumbnail,\n                  url = _ref2.url;\n              return {\n                contentType: getType(name) || 'application/octet-stream',\n                contentUrl: url,\n                name: name,\n                thumbnailUrl: thumbnail\n              };\n            }),\n            channelData: {\n              attachmentSizes: [].map.call(files, function (_ref3) {\n                var size = _ref3.size;\n                return size;\n              })\n            },\n            type: 'message'\n          }));\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction sendFilesToPostActivity() {\n  return _regenerator[\"default\"].wrap(function sendFilesToPostActivity$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return (0, _effects.takeEvery)(function (_ref4) {\n            var payload = _ref4.payload,\n                type = _ref4.type;\n            return type === _sendFiles.SEND_FILES && payload.files.length;\n          }, postActivityWithFiles);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction sendFilesToPostActivitySaga() {\n  return _regenerator[\"default\"].wrap(function sendFilesToPostActivitySaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return (0, _whileConnected[\"default\"])(sendFilesToPostActivity);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["../../src/sagas/sendFilesToPostActivitySaga.js"],"names":["getType","mime","postActivityWithFiles","files","attachments","name","thumbnail","url","contentType","contentUrl","thumbnailUrl","channelData","attachmentSizes","size","type","sendFilesToPostActivity","payload","SEND_FILES","sendFilesToPostActivitySaga"],"mappings":"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","sourcesContent":["import { put, takeEvery } from 'redux-saga/effects';\n\nimport { SEND_FILES } from '../actions/sendFiles';\nimport mime from '../utils/mime-wrapper';\nimport postActivity from '../actions/postActivity';\nimport whileConnected from './effects/whileConnected';\n\nconst getType = mime.getType.bind(mime);\n\nfunction* postActivityWithFiles({ payload: { files } }) {\n  yield put(\n    postActivity({\n      attachments: [].map.call(files, ({ name, thumbnail, url }) => ({\n        contentType: getType(name) || 'application/octet-stream',\n        contentUrl: url,\n        name,\n        thumbnailUrl: thumbnail\n      })),\n      channelData: {\n        attachmentSizes: [].map.call(files, ({ size }) => size)\n      },\n      type: 'message'\n    })\n  );\n}\n\nfunction* sendFilesToPostActivity() {\n  yield takeEvery(({ payload, type }) => type === SEND_FILES && payload.files.length, postActivityWithFiles);\n}\n\nexport default function* sendFilesToPostActivitySaga() {\n  yield whileConnected(sendFilesToPostActivity);\n}\n"],"sourceRoot":"core:///"},"metadata":{},"sourceType":"script"}