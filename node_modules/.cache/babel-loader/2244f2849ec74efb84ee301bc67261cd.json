{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Exports_1 = require(\"../common/Exports\"); // Node.JS specific web socket / browser support.\n\n\nvar ws_1 = __importDefault(require(\"ws\"));\n\nvar CertChecks_1 = require(\"./CertChecks\");\n\nvar WebsocketMessageAdapter =\n/** @class */\nfunction () {\n  function WebsocketMessageAdapter(uri, connectionId, messageFormatter, proxyInfo, headers) {\n    var _this = this;\n\n    this.open = function () {\n      if (_this.privConnectionState === Exports_1.ConnectionState.Disconnected) {\n        return Exports_1.PromiseHelper.fromError(\"Cannot open a connection that is in \" + _this.privConnectionState + \" state\");\n      }\n\n      if (_this.privConnectionEstablishDeferral) {\n        return _this.privConnectionEstablishDeferral.promise();\n      }\n\n      _this.privConnectionEstablishDeferral = new Exports_1.Deferred();\n      _this.privCertificateValidatedDeferral = new Exports_1.Deferred();\n      _this.privConnectionState = Exports_1.ConnectionState.Connecting;\n\n      try {\n        if (typeof WebSocket !== \"undefined\" && !WebsocketMessageAdapter.forceNpmWebSocket) {\n          // Browser handles cert checks.\n          _this.privCertificateValidatedDeferral.resolve(true);\n\n          _this.privWebsocketClient = new WebSocket(_this.privUri);\n        } else {\n          var options = {\n            headers: _this.privHeaders\n          }; // The ocsp library will handle validation for us and fail the connection if needed.\n\n          _this.privCertificateValidatedDeferral.resolve(true);\n\n          var checkAgent = new CertChecks_1.CertCheckAgent(_this.proxyInfo);\n          options.agent = checkAgent.GetAgent();\n          _this.privWebsocketClient = new ws_1.default(_this.privUri, options);\n        }\n\n        _this.privWebsocketClient.binaryType = \"arraybuffer\";\n        _this.privReceivingMessageQueue = new Exports_1.Queue();\n        _this.privDisconnectDeferral = new Exports_1.Deferred();\n        _this.privSendMessageQueue = new Exports_1.Queue();\n\n        _this.processSendQueue();\n      } catch (error) {\n        _this.privConnectionEstablishDeferral.resolve(new Exports_1.ConnectionOpenResponse(500, error));\n\n        return _this.privConnectionEstablishDeferral.promise();\n      }\n\n      _this.onEvent(new Exports_1.ConnectionStartEvent(_this.privConnectionId, _this.privUri));\n\n      _this.privWebsocketClient.onopen = function (e) {\n        _this.privCertificateValidatedDeferral.promise().on(function () {\n          _this.privConnectionState = Exports_1.ConnectionState.Connected;\n\n          _this.onEvent(new Exports_1.ConnectionEstablishedEvent(_this.privConnectionId));\n\n          _this.privConnectionEstablishDeferral.resolve(new Exports_1.ConnectionOpenResponse(200, \"\"));\n        }, function (error) {\n          _this.privConnectionEstablishDeferral.reject(error);\n        });\n      };\n\n      _this.privWebsocketClient.onerror = function (e) {\n        _this.onEvent(new Exports_1.ConnectionErrorEvent(_this.privConnectionId, e.message, e.type));\n\n        _this.privLastErrorReceived = e.message;\n      };\n\n      _this.privWebsocketClient.onclose = function (e) {\n        if (_this.privConnectionState === Exports_1.ConnectionState.Connecting) {\n          _this.privConnectionState = Exports_1.ConnectionState.Disconnected; // this.onEvent(new ConnectionEstablishErrorEvent(this.connectionId, e.code, e.reason));\n\n          _this.privConnectionEstablishDeferral.resolve(new Exports_1.ConnectionOpenResponse(e.code, e.reason + \" \" + _this.privLastErrorReceived));\n        } else {\n          _this.privConnectionState = Exports_1.ConnectionState.Disconnected;\n\n          _this.onEvent(new Exports_1.ConnectionClosedEvent(_this.privConnectionId, e.code, e.reason));\n        }\n\n        _this.onClose(e.code, e.reason);\n      };\n\n      _this.privWebsocketClient.onmessage = function (e) {\n        var networkReceivedTime = new Date().toISOString();\n\n        if (_this.privConnectionState === Exports_1.ConnectionState.Connected) {\n          var deferred_1 = new Exports_1.Deferred(); // let id = ++this.idCounter;\n\n          _this.privReceivingMessageQueue.enqueueFromPromise(deferred_1.promise());\n\n          if (e.data instanceof ArrayBuffer) {\n            var rawMessage = new Exports_1.RawWebsocketMessage(Exports_1.MessageType.Binary, e.data);\n\n            _this.privMessageFormatter.toConnectionMessage(rawMessage).on(function (connectionMessage) {\n              _this.onEvent(new Exports_1.ConnectionMessageReceivedEvent(_this.privConnectionId, networkReceivedTime, connectionMessage));\n\n              deferred_1.resolve(connectionMessage);\n            }, function (error) {\n              // TODO: Events for these ?\n              deferred_1.reject(\"Invalid binary message format. Error: \" + error);\n            });\n          } else {\n            var rawMessage = new Exports_1.RawWebsocketMessage(Exports_1.MessageType.Text, e.data);\n\n            _this.privMessageFormatter.toConnectionMessage(rawMessage).on(function (connectionMessage) {\n              _this.onEvent(new Exports_1.ConnectionMessageReceivedEvent(_this.privConnectionId, networkReceivedTime, connectionMessage));\n\n              deferred_1.resolve(connectionMessage);\n            }, function (error) {\n              // TODO: Events for these ?\n              deferred_1.reject(\"Invalid text message format. Error: \" + error);\n            });\n          }\n        }\n      };\n\n      return _this.privConnectionEstablishDeferral.promise();\n    };\n\n    this.send = function (message) {\n      if (_this.privConnectionState !== Exports_1.ConnectionState.Connected) {\n        return Exports_1.PromiseHelper.fromError(\"Cannot send on connection that is in \" + _this.privConnectionState + \" state\");\n      }\n\n      var messageSendStatusDeferral = new Exports_1.Deferred();\n      var messageSendDeferral = new Exports_1.Deferred();\n\n      _this.privSendMessageQueue.enqueueFromPromise(messageSendDeferral.promise());\n\n      _this.privMessageFormatter.fromConnectionMessage(message).on(function (rawMessage) {\n        messageSendDeferral.resolve({\n          Message: message,\n          RawWebsocketMessage: rawMessage,\n          sendStatusDeferral: messageSendStatusDeferral\n        });\n      }, function (error) {\n        messageSendDeferral.reject(\"Error formatting the message. \" + error);\n      });\n\n      return messageSendStatusDeferral.promise();\n    };\n\n    this.read = function () {\n      if (_this.privConnectionState !== Exports_1.ConnectionState.Connected) {\n        return Exports_1.PromiseHelper.fromError(\"Cannot read on connection that is in \" + _this.privConnectionState + \" state\");\n      }\n\n      return _this.privReceivingMessageQueue.dequeue();\n    };\n\n    this.close = function (reason) {\n      if (_this.privWebsocketClient) {\n        if (_this.privConnectionState !== Exports_1.ConnectionState.Disconnected) {\n          _this.privWebsocketClient.close(1000, reason ? reason : \"Normal closure by client\");\n        }\n      } else {\n        var deferral = new Exports_1.Deferred();\n        deferral.resolve(true);\n        return deferral.promise();\n      }\n\n      return _this.privDisconnectDeferral.promise();\n    };\n\n    this.sendRawMessage = function (sendItem) {\n      try {\n        // indicates we are draining the queue and it came with no message;\n        if (!sendItem) {\n          return Exports_1.PromiseHelper.fromResult(true);\n        }\n\n        _this.onEvent(new Exports_1.ConnectionMessageSentEvent(_this.privConnectionId, new Date().toISOString(), sendItem.Message)); // add a check for the ws readystate in order to stop the red console error 'WebSocket is already in CLOSING or CLOSED state' appearing\n\n\n        if (_this.isWebsocketOpen) {\n          _this.privWebsocketClient.send(sendItem.RawWebsocketMessage.payload);\n        } else {\n          return Exports_1.PromiseHelper.fromError(\"websocket send error: Websocket not ready\");\n        }\n\n        return Exports_1.PromiseHelper.fromResult(true);\n      } catch (e) {\n        return Exports_1.PromiseHelper.fromError(\"websocket send error: \" + e);\n      }\n    };\n\n    this.onClose = function (code, reason) {\n      var closeReason = \"Connection closed. \" + code + \": \" + reason;\n      _this.privConnectionState = Exports_1.ConnectionState.Disconnected;\n\n      _this.privDisconnectDeferral.resolve(true);\n\n      _this.privReceivingMessageQueue.dispose(reason);\n\n      _this.privReceivingMessageQueue.drainAndDispose(function (pendingReceiveItem) {// TODO: Events for these ?\n        // Logger.instance.onEvent(new LoggingEvent(LogType.Warning, null, `Failed to process received message. Reason: ${closeReason}, Message: ${JSON.stringify(pendingReceiveItem)}`));\n      }, closeReason);\n\n      _this.privSendMessageQueue.drainAndDispose(function (pendingSendItem) {\n        pendingSendItem.sendStatusDeferral.reject(closeReason);\n      }, closeReason);\n    };\n\n    this.processSendQueue = function () {\n      _this.privSendMessageQueue.dequeue().on(function (sendItem) {\n        // indicates we are draining the queue and it came with no message;\n        if (!sendItem) {\n          return;\n        }\n\n        _this.sendRawMessage(sendItem).on(function (result) {\n          sendItem.sendStatusDeferral.resolve(result);\n\n          _this.processSendQueue();\n        }, function (sendError) {\n          sendItem.sendStatusDeferral.reject(sendError);\n\n          _this.processSendQueue();\n        });\n      }, function (error) {// do nothing\n      });\n    };\n\n    this.onEvent = function (event) {\n      _this.privConnectionEvents.onEvent(event);\n\n      Exports_1.Events.instance.onEvent(event);\n    };\n\n    if (!uri) {\n      throw new Exports_1.ArgumentNullError(\"uri\");\n    }\n\n    if (!messageFormatter) {\n      throw new Exports_1.ArgumentNullError(\"messageFormatter\");\n    }\n\n    this.proxyInfo = proxyInfo;\n    this.privConnectionEvents = new Exports_1.EventSource();\n    this.privConnectionId = connectionId;\n    this.privMessageFormatter = messageFormatter;\n    this.privConnectionState = Exports_1.ConnectionState.None;\n    this.privUri = uri;\n    this.privHeaders = headers; // Add the connection ID to the headers\n\n    this.privHeaders[\"X-ConnectionId\"] = this.privConnectionId;\n    this.privLastErrorReceived = \"\";\n  }\n\n  Object.defineProperty(WebsocketMessageAdapter.prototype, \"state\", {\n    get: function get() {\n      return this.privConnectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WebsocketMessageAdapter.prototype, \"events\", {\n    get: function get() {\n      return this.privConnectionEvents;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WebsocketMessageAdapter.prototype, \"isWebsocketOpen\", {\n    get: function get() {\n      return this.privWebsocketClient && this.privWebsocketClient.readyState === this.privWebsocketClient.OPEN;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  WebsocketMessageAdapter.forceNpmWebSocket = false;\n  return WebsocketMessageAdapter;\n}();\n\nexports.WebsocketMessageAdapter = WebsocketMessageAdapter;","map":{"version":3,"sources":["src/common.browser/WebsocketMessageAdapter.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;;;;;;;AAEA,IAAA,SAAA,GAAA,OAAA,CAAA,mBAAA,CAAA,C,CAwBA;;;AACA,IAAA,IAAA,GAAA,eAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAQA,IAAA,uBAAA;AAAA;AAAA,YAAA;AAmBI,WAAA,uBAAA,CACI,GADJ,EAEI,YAFJ,EAGI,gBAHJ,EAII,SAJJ,EAKI,OALJ,EAKuC;AALvC,QAAA,KAAA,GAAA,IAAA;;AAiCO,SAAA,IAAA,GAAO,YAAA;AACV,UAAI,KAAI,CAAC,mBAAL,KAA6B,SAAA,CAAA,eAAA,CAAgB,YAAjD,EAA+D;AAC3D,eAAO,SAAA,CAAA,aAAA,CAAc,SAAd,CAAgD,yCAAuC,KAAI,CAAC,mBAA5C,GAA+D,QAA/G,CAAP;AACH;;AAED,UAAI,KAAI,CAAC,+BAAT,EAA0C;AACtC,eAAO,KAAI,CAAC,+BAAL,CAAqC,OAArC,EAAP;AACH;;AAED,MAAA,KAAI,CAAC,+BAAL,GAAuC,IAAI,SAAA,CAAA,QAAJ,EAAvC;AACA,MAAA,KAAI,CAAC,gCAAL,GAAwC,IAAI,SAAA,CAAA,QAAJ,EAAxC;AAEA,MAAA,KAAI,CAAC,mBAAL,GAA2B,SAAA,CAAA,eAAA,CAAgB,UAA3C;;AAEA,UAAI;AAEA,YAAI,OAAO,SAAP,KAAqB,WAArB,IAAoC,CAAC,uBAAuB,CAAC,iBAAjE,EAAoF;AAChF;AACA,UAAA,KAAI,CAAC,gCAAL,CAAsC,OAAtC,CAA8C,IAA9C;;AAEA,UAAA,KAAI,CAAC,mBAAL,GAA2B,IAAI,SAAJ,CAAc,KAAI,CAAC,OAAnB,CAA3B;AACH,SALD,MAKO;AACH,cAAM,OAAO,GAAqB;AAAE,YAAA,OAAO,EAAE,KAAI,CAAC;AAAhB,WAAlC,CADG,CAEH;;AACA,UAAA,KAAI,CAAC,gCAAL,CAAsC,OAAtC,CAA8C,IAA9C;;AACA,cAAM,UAAU,GAAmB,IAAI,YAAA,CAAA,cAAJ,CAAmB,KAAI,CAAC,SAAxB,CAAnC;AAEA,UAAA,OAAO,CAAC,KAAR,GAAgB,UAAU,CAAC,QAAX,EAAhB;AACA,UAAA,KAAI,CAAC,mBAAL,GAA2B,IAAI,IAAA,CAAA,OAAJ,CAAO,KAAI,CAAC,OAAZ,EAAqB,OAArB,CAA3B;AACH;;AAED,QAAA,KAAI,CAAC,mBAAL,CAAyB,UAAzB,GAAsC,aAAtC;AACA,QAAA,KAAI,CAAC,yBAAL,GAAiC,IAAI,SAAA,CAAA,KAAJ,EAAjC;AACA,QAAA,KAAI,CAAC,sBAAL,GAA8B,IAAI,SAAA,CAAA,QAAJ,EAA9B;AACA,QAAA,KAAI,CAAC,oBAAL,GAA4B,IAAI,SAAA,CAAA,KAAJ,EAA5B;;AACA,QAAA,KAAI,CAAC,gBAAL;AACH,OAtBD,CAsBE,OAAO,KAAP,EAAc;AACZ,QAAA,KAAI,CAAC,+BAAL,CAAqC,OAArC,CAA6C,IAAI,SAAA,CAAA,sBAAJ,CAA2B,GAA3B,EAAgC,KAAhC,CAA7C;;AACA,eAAO,KAAI,CAAC,+BAAL,CAAqC,OAArC,EAAP;AACH;;AAED,MAAA,KAAI,CAAC,OAAL,CAAa,IAAI,SAAA,CAAA,oBAAJ,CAAyB,KAAI,CAAC,gBAA9B,EAAgD,KAAI,CAAC,OAArD,CAAb;;AAEA,MAAA,KAAI,CAAC,mBAAL,CAAyB,MAAzB,GAAkC,UAAC,CAAD,EAA8B;AAC5D,QAAA,KAAI,CAAC,gCAAL,CAAsC,OAAtC,GAAgD,EAAhD,CAAmD,YAAA;AAC/C,UAAA,KAAI,CAAC,mBAAL,GAA2B,SAAA,CAAA,eAAA,CAAgB,SAA3C;;AACA,UAAA,KAAI,CAAC,OAAL,CAAa,IAAI,SAAA,CAAA,0BAAJ,CAA+B,KAAI,CAAC,gBAApC,CAAb;;AACA,UAAA,KAAI,CAAC,+BAAL,CAAqC,OAArC,CAA6C,IAAI,SAAA,CAAA,sBAAJ,CAA2B,GAA3B,EAAgC,EAAhC,CAA7C;AACH,SAJD,EAIG,UAAC,KAAD,EAAc;AACb,UAAA,KAAI,CAAC,+BAAL,CAAqC,MAArC,CAA4C,KAA5C;AACH,SAND;AAOH,OARD;;AAUA,MAAA,KAAI,CAAC,mBAAL,CAAyB,OAAzB,GAAmC,UAAC,CAAD,EAAyE;AACxG,QAAA,KAAI,CAAC,OAAL,CAAa,IAAI,SAAA,CAAA,oBAAJ,CAAyB,KAAI,CAAC,gBAA9B,EAAgD,CAAC,CAAC,OAAlD,EAA2D,CAAC,CAAC,IAA7D,CAAb;;AACA,QAAA,KAAI,CAAC,qBAAL,GAA6B,CAAC,CAAC,OAA/B;AACH,OAHD;;AAKA,MAAA,KAAI,CAAC,mBAAL,CAAyB,OAAzB,GAAmC,UAAC,CAAD,EAA+E;AAC9G,YAAI,KAAI,CAAC,mBAAL,KAA6B,SAAA,CAAA,eAAA,CAAgB,UAAjD,EAA6D;AACzD,UAAA,KAAI,CAAC,mBAAL,GAA2B,SAAA,CAAA,eAAA,CAAgB,YAA3C,CADyD,CAEzD;;AACA,UAAA,KAAI,CAAC,+BAAL,CAAqC,OAArC,CAA6C,IAAI,SAAA,CAAA,sBAAJ,CAA2B,CAAC,CAAC,IAA7B,EAAmC,CAAC,CAAC,MAAF,GAAW,GAAX,GAAiB,KAAI,CAAC,qBAAzD,CAA7C;AACH,SAJD,MAIO;AACH,UAAA,KAAI,CAAC,mBAAL,GAA2B,SAAA,CAAA,eAAA,CAAgB,YAA3C;;AACA,UAAA,KAAI,CAAC,OAAL,CAAa,IAAI,SAAA,CAAA,qBAAJ,CAA0B,KAAI,CAAC,gBAA/B,EAAiD,CAAC,CAAC,IAAnD,EAAyD,CAAC,CAAC,MAA3D,CAAb;AACH;;AAED,QAAA,KAAI,CAAC,OAAL,CAAa,CAAC,CAAC,IAAf,EAAqB,CAAC,CAAC,MAAvB;AACH,OAXD;;AAaA,MAAA,KAAI,CAAC,mBAAL,CAAyB,SAAzB,GAAqC,UAAC,CAAD,EAA2D;AAC5F,YAAM,mBAAmB,GAAG,IAAI,IAAJ,GAAW,WAAX,EAA5B;;AACA,YAAI,KAAI,CAAC,mBAAL,KAA6B,SAAA,CAAA,eAAA,CAAgB,SAAjD,EAA4D;AACxD,cAAM,UAAQ,GAAG,IAAI,SAAA,CAAA,QAAJ,EAAjB,CADwD,CAExD;;AACA,UAAA,KAAI,CAAC,yBAAL,CAA+B,kBAA/B,CAAkD,UAAQ,CAAC,OAAT,EAAlD;;AACA,cAAI,CAAC,CAAC,IAAF,YAAkB,WAAtB,EAAmC;AAC/B,gBAAM,UAAU,GAAG,IAAI,SAAA,CAAA,mBAAJ,CAAwB,SAAA,CAAA,WAAA,CAAY,MAApC,EAA4C,CAAC,CAAC,IAA9C,CAAnB;;AACA,YAAA,KAAI,CAAC,oBAAL,CACK,mBADL,CACyB,UADzB,EAEK,EAFL,CAEQ,UAAC,iBAAD,EAAqC;AACrC,cAAA,KAAI,CAAC,OAAL,CAAa,IAAI,SAAA,CAAA,8BAAJ,CAAmC,KAAI,CAAC,gBAAxC,EAA0D,mBAA1D,EAA+E,iBAA/E,CAAb;;AACA,cAAA,UAAQ,CAAC,OAAT,CAAiB,iBAAjB;AACH,aALL,EAKO,UAAC,KAAD,EAAc;AACb;AACA,cAAA,UAAQ,CAAC,MAAT,CAAgB,2CAAyC,KAAzD;AACH,aARL;AASH,WAXD,MAWO;AACH,gBAAM,UAAU,GAAG,IAAI,SAAA,CAAA,mBAAJ,CAAwB,SAAA,CAAA,WAAA,CAAY,IAApC,EAA0C,CAAC,CAAC,IAA5C,CAAnB;;AACA,YAAA,KAAI,CAAC,oBAAL,CACK,mBADL,CACyB,UADzB,EAEK,EAFL,CAEQ,UAAC,iBAAD,EAAqC;AACrC,cAAA,KAAI,CAAC,OAAL,CAAa,IAAI,SAAA,CAAA,8BAAJ,CAAmC,KAAI,CAAC,gBAAxC,EAA0D,mBAA1D,EAA+E,iBAA/E,CAAb;;AACA,cAAA,UAAQ,CAAC,OAAT,CAAiB,iBAAjB;AACH,aALL,EAKO,UAAC,KAAD,EAAc;AACb;AACA,cAAA,UAAQ,CAAC,MAAT,CAAgB,yCAAuC,KAAvD;AACH,aARL;AASH;AACJ;AACJ,OA9BD;;AAgCA,aAAO,KAAI,CAAC,+BAAL,CAAqC,OAArC,EAAP;AACH,KAxGM;;AA0GA,SAAA,IAAA,GAAO,UAAC,OAAD,EAA2B;AACrC,UAAI,KAAI,CAAC,mBAAL,KAA6B,SAAA,CAAA,eAAA,CAAgB,SAAjD,EAA4D;AACxD,eAAO,SAAA,CAAA,aAAA,CAAc,SAAd,CAAiC,0CAAwC,KAAI,CAAC,mBAA7C,GAAgE,QAAjG,CAAP;AACH;;AAED,UAAM,yBAAyB,GAAG,IAAI,SAAA,CAAA,QAAJ,EAAlC;AACA,UAAM,mBAAmB,GAAG,IAAI,SAAA,CAAA,QAAJ,EAA5B;;AAEA,MAAA,KAAI,CAAC,oBAAL,CAA0B,kBAA1B,CAA6C,mBAAmB,CAAC,OAApB,EAA7C;;AAEA,MAAA,KAAI,CAAC,oBAAL,CACK,qBADL,CAC2B,OAD3B,EAEK,EAFL,CAEQ,UAAC,UAAD,EAAgC;AAChC,QAAA,mBAAmB,CAAC,OAApB,CAA4B;AACxB,UAAA,OAAO,EAAE,OADe;AAExB,UAAA,mBAAmB,EAAE,UAFG;AAGxB,UAAA,kBAAkB,EAAE;AAHI,SAA5B;AAKH,OARL,EAQO,UAAC,KAAD,EAAc;AACb,QAAA,mBAAmB,CAAC,MAApB,CAA2B,mCAAiC,KAA5D;AACH,OAVL;;AAYA,aAAO,yBAAyB,CAAC,OAA1B,EAAP;AACH,KAvBM;;AAyBA,SAAA,IAAA,GAAO,YAAA;AACV,UAAI,KAAI,CAAC,mBAAL,KAA6B,SAAA,CAAA,eAAA,CAAgB,SAAjD,EAA4D;AACxD,eAAO,SAAA,CAAA,aAAA,CAAc,SAAd,CAA2C,0CAAwC,KAAI,CAAC,mBAA7C,GAAgE,QAA3G,CAAP;AACH;;AAED,aAAO,KAAI,CAAC,yBAAL,CAA+B,OAA/B,EAAP;AACH,KANM;;AAQA,SAAA,KAAA,GAAQ,UAAC,MAAD,EAAgB;AAC3B,UAAI,KAAI,CAAC,mBAAT,EAA8B;AAC1B,YAAI,KAAI,CAAC,mBAAL,KAA6B,SAAA,CAAA,eAAA,CAAgB,YAAjD,EAA+D;AAC3D,UAAA,KAAI,CAAC,mBAAL,CAAyB,KAAzB,CAA+B,IAA/B,EAAqC,MAAM,GAAG,MAAH,GAAY,0BAAvD;AACH;AACJ,OAJD,MAIO;AACH,YAAM,QAAQ,GAAG,IAAI,SAAA,CAAA,QAAJ,EAAjB;AACA,QAAA,QAAQ,CAAC,OAAT,CAAiB,IAAjB;AACA,eAAO,QAAQ,CAAC,OAAT,EAAP;AACH;;AAED,aAAO,KAAI,CAAC,sBAAL,CAA4B,OAA5B,EAAP;AACH,KAZM;;AAkBC,SAAA,cAAA,GAAiB,UAAC,QAAD,EAAoB;AACzC,UAAI;AACA;AACA,YAAI,CAAC,QAAL,EAAe;AACX,iBAAO,SAAA,CAAA,aAAA,CAAc,UAAd,CAAyB,IAAzB,CAAP;AACH;;AAED,QAAA,KAAI,CAAC,OAAL,CAAa,IAAI,SAAA,CAAA,0BAAJ,CAA+B,KAAI,CAAC,gBAApC,EAAsD,IAAI,IAAJ,GAAW,WAAX,EAAtD,EAAgF,QAAQ,CAAC,OAAzF,CAAb,EANA,CAQA;;;AACA,YAAI,KAAI,CAAC,eAAT,EAA0B;AACtB,UAAA,KAAI,CAAC,mBAAL,CAAyB,IAAzB,CAA8B,QAAQ,CAAC,mBAAT,CAA6B,OAA3D;AACH,SAFD,MAEO;AACH,iBAAO,SAAA,CAAA,aAAA,CAAc,SAAd,CAAiC,2CAAjC,CAAP;AACH;;AACD,eAAO,SAAA,CAAA,aAAA,CAAc,UAAd,CAAyB,IAAzB,CAAP;AAEH,OAhBD,CAgBE,OAAO,CAAP,EAAU;AACR,eAAO,SAAA,CAAA,aAAA,CAAc,SAAd,CAAiC,2BAAyB,CAA1D,CAAP;AACH;AACJ,KApBO;;AAsBA,SAAA,OAAA,GAAU,UAAC,IAAD,EAAe,MAAf,EAA6B;AAC3C,UAAM,WAAW,GAAG,wBAAsB,IAAtB,GAA0B,IAA1B,GAA+B,MAAnD;AACA,MAAA,KAAI,CAAC,mBAAL,GAA2B,SAAA,CAAA,eAAA,CAAgB,YAA3C;;AACA,MAAA,KAAI,CAAC,sBAAL,CAA4B,OAA5B,CAAoC,IAApC;;AACA,MAAA,KAAI,CAAC,yBAAL,CAA+B,OAA/B,CAAuC,MAAvC;;AACA,MAAA,KAAI,CAAC,yBAAL,CAA+B,eAA/B,CAA+C,UAAC,kBAAD,EAAsC,CACjF;AACA;AACH,OAHD,EAGG,WAHH;;AAKA,MAAA,KAAI,CAAC,oBAAL,CAA0B,eAA1B,CAA0C,UAAC,eAAD,EAA2B;AACjE,QAAA,eAAe,CAAC,kBAAhB,CAAmC,MAAnC,CAA0C,WAA1C;AACH,OAFD,EAEG,WAFH;AAGH,KAbO;;AAeA,SAAA,gBAAA,GAAmB,YAAA;AACvB,MAAA,KAAI,CAAC,oBAAL,CACK,OADL,GAEK,EAFL,CAEQ,UAAC,QAAD,EAAoB;AACpB;AACA,YAAI,CAAC,QAAL,EAAe;AACX;AACH;;AAED,QAAA,KAAI,CAAC,cAAL,CAAoB,QAApB,EACK,EADL,CACQ,UAAC,MAAD,EAAgB;AAChB,UAAA,QAAQ,CAAC,kBAAT,CAA4B,OAA5B,CAAoC,MAApC;;AACA,UAAA,KAAI,CAAC,gBAAL;AACH,SAJL,EAIO,UAAC,SAAD,EAAkB;AACjB,UAAA,QAAQ,CAAC,kBAAT,CAA4B,MAA5B,CAAmC,SAAnC;;AACA,UAAA,KAAI,CAAC,gBAAL;AACH,SAPL;AAQH,OAhBL,EAgBO,UAAC,KAAD,EAAc,CACb;AACH,OAlBL;AAmBH,KApBO;;AAsBA,SAAA,OAAA,GAAU,UAAC,KAAD,EAAuB;AACrC,MAAA,KAAI,CAAC,oBAAL,CAA0B,OAA1B,CAAkC,KAAlC;;AACA,MAAA,SAAA,CAAA,MAAA,CAAO,QAAP,CAAgB,OAAhB,CAAwB,KAAxB;AACH,KAHO;;AAlPJ,QAAI,CAAC,GAAL,EAAU;AACN,YAAM,IAAI,SAAA,CAAA,iBAAJ,CAAsB,KAAtB,CAAN;AACH;;AAED,QAAI,CAAC,gBAAL,EAAuB;AACnB,YAAM,IAAI,SAAA,CAAA,iBAAJ,CAAsB,kBAAtB,CAAN;AACH;;AAED,SAAK,SAAL,GAAiB,SAAjB;AACA,SAAK,oBAAL,GAA4B,IAAI,SAAA,CAAA,WAAJ,EAA5B;AACA,SAAK,gBAAL,GAAwB,YAAxB;AACA,SAAK,oBAAL,GAA4B,gBAA5B;AACA,SAAK,mBAAL,GAA2B,SAAA,CAAA,eAAA,CAAgB,IAA3C;AACA,SAAK,OAAL,GAAe,GAAf;AACA,SAAK,WAAL,GAAmB,OAAnB,CAhBmC,CAkBnC;;AACA,SAAK,WAAL,CAAiB,gBAAjB,IAAqC,KAAK,gBAA1C;AAEA,SAAK,qBAAL,GAA6B,EAA7B;AACH;;AAED,EAAA,MAAA,CAAA,cAAA,CAAW,uBAAA,CAAA,SAAX,EAAW,OAAX,EAAgB;SAAhB,eAAA;AACI,aAAO,KAAK,mBAAZ;AACH,KAFe;oBAAA;;AAAA,GAAhB;AA6JA,EAAA,MAAA,CAAA,cAAA,CAAW,uBAAA,CAAA,SAAX,EAAW,QAAX,EAAiB;SAAjB,eAAA;AACI,aAAO,KAAK,oBAAZ;AACH,KAFgB;oBAAA;;AAAA,GAAjB;AAoEA,EAAA,MAAA,CAAA,cAAA,CAAY,uBAAA,CAAA,SAAZ,EAAY,iBAAZ,EAA2B;SAA3B,eAAA;AACI,aAAO,KAAK,mBAAL,IAA4B,KAAK,mBAAL,CAAyB,UAAzB,KAAwC,KAAK,mBAAL,CAAyB,IAApG;AACH,KAF0B;oBAAA;;AAAA,GAA3B;AAhQc,EAAA,uBAAA,CAAA,iBAAA,GAA6B,KAA7B;AAoQlB,SAAA,uBAAA;AAAC,CArRD,EAAA;;AAAa,OAAA,CAAA,uBAAA,GAAA,uBAAA","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionErrorEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionMessageSentEvent,\r\n    ConnectionOpenResponse,\r\n    ConnectionStartEvent,\r\n    ConnectionState,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    Promise,\r\n    PromiseHelper,\r\n    Queue,\r\n    RawWebsocketMessage,\r\n} from \"../common/Exports\";\r\nimport { ProxyInfo } from \"./ProxyInfo\";\r\n\r\n// Node.JS specific web socket / browser support.\r\nimport ws from \"ws\";\r\nimport { CertCheckAgent } from \"./CertChecks\";\r\n\r\ninterface ISendItem {\r\n    Message: ConnectionMessage;\r\n    RawWebsocketMessage: RawWebsocketMessage;\r\n    sendStatusDeferral: Deferred<boolean>;\r\n}\r\n\r\nexport class WebsocketMessageAdapter {\r\n    private privConnectionState: ConnectionState;\r\n    private privMessageFormatter: IWebsocketMessageFormatter;\r\n    private privWebsocketClient: WebSocket | ws;\r\n\r\n    private privSendMessageQueue: Queue<ISendItem>;\r\n    private privReceivingMessageQueue: Queue<ConnectionMessage>;\r\n    private privConnectionEstablishDeferral: Deferred<ConnectionOpenResponse>;\r\n    private privCertificateValidatedDeferral: Deferred<boolean>;\r\n    private privDisconnectDeferral: Deferred<boolean>;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privConnectionId: string;\r\n    private privUri: string;\r\n    private proxyInfo: ProxyInfo;\r\n    private privHeaders: { [key: string]: string; };\r\n    private privLastErrorReceived: string;\r\n\r\n    public static forceNpmWebSocket: boolean = false;\r\n\r\n    public constructor(\r\n        uri: string,\r\n        connectionId: string,\r\n        messageFormatter: IWebsocketMessageFormatter,\r\n        proxyInfo: ProxyInfo,\r\n        headers: { [key: string]: string; }) {\r\n\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n\r\n        this.proxyInfo = proxyInfo;\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privConnectionId = connectionId;\r\n        this.privMessageFormatter = messageFormatter;\r\n        this.privConnectionState = ConnectionState.None;\r\n        this.privUri = uri;\r\n        this.privHeaders = headers;\r\n\r\n        // Add the connection ID to the headers\r\n        this.privHeaders[\"X-ConnectionId\"] = this.privConnectionId;\r\n\r\n        this.privLastErrorReceived = \"\";\r\n    }\r\n\r\n    public get state(): ConnectionState {\r\n        return this.privConnectionState;\r\n    }\r\n\r\n    public open = (): Promise<ConnectionOpenResponse> => {\r\n        if (this.privConnectionState === ConnectionState.Disconnected) {\r\n            return PromiseHelper.fromError<ConnectionOpenResponse>(`Cannot open a connection that is in ${this.privConnectionState} state`);\r\n        }\r\n\r\n        if (this.privConnectionEstablishDeferral) {\r\n            return this.privConnectionEstablishDeferral.promise();\r\n        }\r\n\r\n        this.privConnectionEstablishDeferral = new Deferred<ConnectionOpenResponse>();\r\n        this.privCertificateValidatedDeferral = new Deferred<boolean>();\r\n\r\n        this.privConnectionState = ConnectionState.Connecting;\r\n\r\n        try {\r\n\r\n            if (typeof WebSocket !== \"undefined\" && !WebsocketMessageAdapter.forceNpmWebSocket) {\r\n                // Browser handles cert checks.\r\n                this.privCertificateValidatedDeferral.resolve(true);\r\n\r\n                this.privWebsocketClient = new WebSocket(this.privUri);\r\n            } else {\r\n                const options: ws.ClientOptions = { headers: this.privHeaders };\r\n                // The ocsp library will handle validation for us and fail the connection if needed.\r\n                this.privCertificateValidatedDeferral.resolve(true);\r\n                const checkAgent: CertCheckAgent = new CertCheckAgent(this.proxyInfo);\r\n\r\n                options.agent = checkAgent.GetAgent();\r\n                this.privWebsocketClient = new ws(this.privUri, options);\r\n            }\r\n\r\n            this.privWebsocketClient.binaryType = \"arraybuffer\";\r\n            this.privReceivingMessageQueue = new Queue<ConnectionMessage>();\r\n            this.privDisconnectDeferral = new Deferred<boolean>();\r\n            this.privSendMessageQueue = new Queue<ISendItem>();\r\n            this.processSendQueue();\r\n        } catch (error) {\r\n            this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(500, error));\r\n            return this.privConnectionEstablishDeferral.promise();\r\n        }\r\n\r\n        this.onEvent(new ConnectionStartEvent(this.privConnectionId, this.privUri));\r\n\r\n        this.privWebsocketClient.onopen = (e: { target: WebSocket | ws }) => {\r\n            this.privCertificateValidatedDeferral.promise().on((): void => {\r\n                this.privConnectionState = ConnectionState.Connected;\r\n                this.onEvent(new ConnectionEstablishedEvent(this.privConnectionId));\r\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(200, \"\"));\r\n            }, (error: string): void => {\r\n                this.privConnectionEstablishDeferral.reject(error);\r\n            });\r\n        };\r\n\r\n        this.privWebsocketClient.onerror = (e: { error: any; message: string; type: string; target: WebSocket | ws }) => {\r\n            this.onEvent(new ConnectionErrorEvent(this.privConnectionId, e.message, e.type));\r\n            this.privLastErrorReceived = e.message;\r\n        };\r\n\r\n        this.privWebsocketClient.onclose = (e: { wasClean: boolean; code: number; reason: string; target: WebSocket | ws }) => {\r\n            if (this.privConnectionState === ConnectionState.Connecting) {\r\n                this.privConnectionState = ConnectionState.Disconnected;\r\n                // this.onEvent(new ConnectionEstablishErrorEvent(this.connectionId, e.code, e.reason));\r\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(e.code, e.reason + \" \" + this.privLastErrorReceived));\r\n            } else {\r\n                this.privConnectionState = ConnectionState.Disconnected;\r\n                this.onEvent(new ConnectionClosedEvent(this.privConnectionId, e.code, e.reason));\r\n            }\r\n\r\n            this.onClose(e.code, e.reason);\r\n        };\r\n\r\n        this.privWebsocketClient.onmessage = (e: { data: ws.Data; type: string; target: WebSocket | ws }) => {\r\n            const networkReceivedTime = new Date().toISOString();\r\n            if (this.privConnectionState === ConnectionState.Connected) {\r\n                const deferred = new Deferred<ConnectionMessage>();\r\n                // let id = ++this.idCounter;\r\n                this.privReceivingMessageQueue.enqueueFromPromise(deferred.promise());\r\n                if (e.data instanceof ArrayBuffer) {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Binary, e.data);\r\n                    this.privMessageFormatter\r\n                        .toConnectionMessage(rawMessage)\r\n                        .on((connectionMessage: ConnectionMessage) => {\r\n                            this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.resolve(connectionMessage);\r\n                        }, (error: string) => {\r\n                            // TODO: Events for these ?\r\n                            deferred.reject(`Invalid binary message format. Error: ${error}`);\r\n                        });\r\n                } else {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Text, e.data);\r\n                    this.privMessageFormatter\r\n                        .toConnectionMessage(rawMessage)\r\n                        .on((connectionMessage: ConnectionMessage) => {\r\n                            this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.resolve(connectionMessage);\r\n                        }, (error: string) => {\r\n                            // TODO: Events for these ?\r\n                            deferred.reject(`Invalid text message format. Error: ${error}`);\r\n                        });\r\n                }\r\n            }\r\n        };\r\n\r\n        return this.privConnectionEstablishDeferral.promise();\r\n    }\r\n\r\n    public send = (message: ConnectionMessage): Promise<boolean> => {\r\n        if (this.privConnectionState !== ConnectionState.Connected) {\r\n            return PromiseHelper.fromError<boolean>(`Cannot send on connection that is in ${this.privConnectionState} state`);\r\n        }\r\n\r\n        const messageSendStatusDeferral = new Deferred<boolean>();\r\n        const messageSendDeferral = new Deferred<ISendItem>();\r\n\r\n        this.privSendMessageQueue.enqueueFromPromise(messageSendDeferral.promise());\r\n\r\n        this.privMessageFormatter\r\n            .fromConnectionMessage(message)\r\n            .on((rawMessage: RawWebsocketMessage) => {\r\n                messageSendDeferral.resolve({\r\n                    Message: message,\r\n                    RawWebsocketMessage: rawMessage,\r\n                    sendStatusDeferral: messageSendStatusDeferral,\r\n                });\r\n            }, (error: string) => {\r\n                messageSendDeferral.reject(`Error formatting the message. ${error}`);\r\n            });\r\n\r\n        return messageSendStatusDeferral.promise();\r\n    }\r\n\r\n    public read = (): Promise<ConnectionMessage> => {\r\n        if (this.privConnectionState !== ConnectionState.Connected) {\r\n            return PromiseHelper.fromError<ConnectionMessage>(`Cannot read on connection that is in ${this.privConnectionState} state`);\r\n        }\r\n\r\n        return this.privReceivingMessageQueue.dequeue();\r\n    }\r\n\r\n    public close = (reason?: string): Promise<boolean> => {\r\n        if (this.privWebsocketClient) {\r\n            if (this.privConnectionState !== ConnectionState.Disconnected) {\r\n                this.privWebsocketClient.close(1000, reason ? reason : \"Normal closure by client\");\r\n            }\r\n        } else {\r\n            const deferral = new Deferred<boolean>();\r\n            deferral.resolve(true);\r\n            return deferral.promise();\r\n        }\r\n\r\n        return this.privDisconnectDeferral.promise();\r\n    }\r\n\r\n    public get events(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    private sendRawMessage = (sendItem: ISendItem): Promise<boolean> => {\r\n        try {\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!sendItem) {\r\n                return PromiseHelper.fromResult(true);\r\n            }\r\n\r\n            this.onEvent(new ConnectionMessageSentEvent(this.privConnectionId, new Date().toISOString(), sendItem.Message));\r\n\r\n            // add a check for the ws readystate in order to stop the red console error 'WebSocket is already in CLOSING or CLOSED state' appearing\r\n            if (this.isWebsocketOpen) {\r\n                this.privWebsocketClient.send(sendItem.RawWebsocketMessage.payload);\r\n            } else {\r\n                return PromiseHelper.fromError<boolean>(\"websocket send error: Websocket not ready\");\r\n            }\r\n            return PromiseHelper.fromResult(true);\r\n\r\n        } catch (e) {\r\n            return PromiseHelper.fromError<boolean>(`websocket send error: ${e}`);\r\n        }\r\n    }\r\n\r\n    private onClose = (code: number, reason: string): void => {\r\n        const closeReason = `Connection closed. ${code}: ${reason}`;\r\n        this.privConnectionState = ConnectionState.Disconnected;\r\n        this.privDisconnectDeferral.resolve(true);\r\n        this.privReceivingMessageQueue.dispose(reason);\r\n        this.privReceivingMessageQueue.drainAndDispose((pendingReceiveItem: ConnectionMessage) => {\r\n            // TODO: Events for these ?\r\n            // Logger.instance.onEvent(new LoggingEvent(LogType.Warning, null, `Failed to process received message. Reason: ${closeReason}, Message: ${JSON.stringify(pendingReceiveItem)}`));\r\n        }, closeReason);\r\n\r\n        this.privSendMessageQueue.drainAndDispose((pendingSendItem: ISendItem) => {\r\n            pendingSendItem.sendStatusDeferral.reject(closeReason);\r\n        }, closeReason);\r\n    }\r\n\r\n    private processSendQueue = (): void => {\r\n        this.privSendMessageQueue\r\n            .dequeue()\r\n            .on((sendItem: ISendItem) => {\r\n                // indicates we are draining the queue and it came with no message;\r\n                if (!sendItem) {\r\n                    return;\r\n                }\r\n\r\n                this.sendRawMessage(sendItem)\r\n                    .on((result: boolean) => {\r\n                        sendItem.sendStatusDeferral.resolve(result);\r\n                        this.processSendQueue();\r\n                    }, (sendError: string) => {\r\n                        sendItem.sendStatusDeferral.reject(sendError);\r\n                        this.processSendQueue();\r\n                    });\r\n            }, (error: string) => {\r\n                // do nothing\r\n            });\r\n    }\r\n\r\n    private onEvent = (event: ConnectionEvent): void => {\r\n        this.privConnectionEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private get isWebsocketOpen(): boolean {\r\n        return this.privWebsocketClient && this.privWebsocketClient.readyState === this.privWebsocketClient.OPEN;\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"script"}