{"ast":null,"code":"import _classCallCheck from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport * as fs from \"fs\";\nimport { Contracts } from \"../Contracts\";\nexport var AudioFileWriter = /*#__PURE__*/function () {\n  function AudioFileWriter(filename) {\n    var _this = this;\n\n    _classCallCheck(this, AudioFileWriter);\n\n    this.id = function () {\n      return _this.privId;\n    };\n\n    this.privFd = fs.openSync(filename, \"w\");\n  }\n\n  _createClass(AudioFileWriter, [{\n    key: \"format\",\n    set: function set(format) {\n      Contracts.throwIfNotUndefined(this.privAudioFormat, \"format is already set\");\n      this.privAudioFormat = format;\n      var headerOffset = 0;\n\n      if (this.privAudioFormat.hasHeader) {\n        headerOffset = this.privAudioFormat.header.byteLength;\n      }\n\n      if (this.privFd !== undefined) {\n        this.privWriteStream = fs.createWriteStream(\"\", {\n          fd: this.privFd,\n          start: headerOffset,\n          autoClose: false\n        });\n      }\n    }\n  }, {\n    key: \"write\",\n    value: function write(buffer) {\n      Contracts.throwIfNullOrUndefined(this.privAudioFormat, \"must set format before writing.\");\n\n      if (this.privWriteStream !== undefined) {\n        this.privWriteStream.write(new Uint8Array(buffer.slice(0)));\n      }\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _this2 = this;\n\n      if (this.privFd !== undefined) {\n        this.privWriteStream.on(\"finish\", function () {\n          if (_this2.privAudioFormat.hasHeader) {\n            _this2.privAudioFormat.updateHeader(_this2.privWriteStream.bytesWritten);\n\n            fs.writeSync(_this2.privFd, new Int8Array(_this2.privAudioFormat.header), 0, _this2.privAudioFormat.header.byteLength, 0);\n          }\n\n          fs.closeSync(_this2.privFd);\n          _this2.privFd = undefined;\n        });\n        this.privWriteStream.end();\n      }\n    }\n  }]);\n\n  return AudioFileWriter;\n}();","map":{"version":3,"sources":["src/sdk/Audio/AudioFileWriter.ts"],"names":[],"mappings":";;AAAA;AACA;AAEA,OAAO,KAAK,EAAZ,MAAoB,IAApB;AAEA,SAAS,SAAT,QAA0B,cAA1B;AAIA,WAAa,eAAb;AAMI,2BAAmB,QAAnB,EAAwC;AAAA;;AAAA;;AAyCjC,SAAA,EAAA,GAAK,YAAa;AACrB,aAAO,KAAI,CAAC,MAAZ;AACH,KAFM;;AAxCH,SAAK,MAAL,GAAc,EAAE,CAAC,QAAH,CAAY,QAAZ,EAAsB,GAAtB,CAAd;AACH;;AARL;AAAA;AAAA,SAUI,aAAkB,MAAlB,EAA2C;AACvC,MAAA,SAAS,CAAC,mBAAV,CAA8B,KAAK,eAAnC,EAAoD,uBAApD;AACA,WAAK,eAAL,GAAuB,MAAvB;AACA,UAAI,YAAY,GAAW,CAA3B;;AACA,UAAI,KAAK,eAAL,CAAqB,SAAzB,EAAoC;AAChC,QAAA,YAAY,GAAG,KAAK,eAAL,CAAqB,MAArB,CAA4B,UAA3C;AACH;;AACD,UAAI,KAAK,MAAL,KAAgB,SAApB,EAA+B;AAC3B,aAAK,eAAL,GAAuB,EAAE,CAAC,iBAAH,CAAqB,EAArB,EAAyB;AAAC,UAAA,EAAE,EAAE,KAAK,MAAV;AAAkB,UAAA,KAAK,EAAE,YAAzB;AAAuC,UAAA,SAAS,EAAE;AAAlD,SAAzB,CAAvB;AACH;AACJ;AApBL;AAAA;AAAA,WAsBW,eAAM,MAAN,EAAyB;AAC5B,MAAA,SAAS,CAAC,sBAAV,CAAiC,KAAK,eAAtC,EAAuD,iCAAvD;;AACA,UAAI,KAAK,eAAL,KAAyB,SAA7B,EAAwC;AACpC,aAAK,eAAL,CAAqB,KAArB,CAA2B,IAAI,UAAJ,CAAe,MAAM,CAAC,KAAP,CAAa,CAAb,CAAf,CAA3B;AACH;AACJ;AA3BL;AAAA;AAAA,WA6BW,iBAAK;AAAA;;AACR,UAAI,KAAK,MAAL,KAAgB,SAApB,EAA+B;AAC3B,aAAK,eAAL,CAAqB,EAArB,CAAwB,QAAxB,EAAkC,YAAK;AACnC,cAAI,MAAI,CAAC,eAAL,CAAqB,SAAzB,EAAoC;AAChC,YAAA,MAAI,CAAC,eAAL,CAAqB,YAArB,CAAkC,MAAI,CAAC,eAAL,CAAqB,YAAvD;;AACA,YAAA,EAAE,CAAC,SAAH,CAAa,MAAI,CAAC,MAAlB,EACI,IAAI,SAAJ,CAAc,MAAI,CAAC,eAAL,CAAqB,MAAnC,CADJ,EAEI,CAFJ,EAGI,MAAI,CAAC,eAAL,CAAqB,MAArB,CAA4B,UAHhC,EAII,CAJJ;AAKH;;AACD,UAAA,EAAE,CAAC,SAAH,CAAa,MAAI,CAAC,MAAlB;AACA,UAAA,MAAI,CAAC,MAAL,GAAc,SAAd;AACH,SAXD;AAYA,aAAK,eAAL,CAAqB,GAArB;AACH;AACJ;AA7CL;;AAAA;AAAA","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport * as fs from \"fs\";\r\nimport { IAudioDestination } from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport { AudioStreamFormat } from \"../Exports\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat\";\r\n\r\nexport class AudioFileWriter implements IAudioDestination {\r\n    private privAudioFormat: AudioOutputFormatImpl;\r\n    private privFd: number;\r\n    private privId: string;\r\n    private privWriteStream: fs.WriteStream;\r\n\r\n    public constructor(filename: fs.PathLike) {\r\n        this.privFd = fs.openSync(filename, \"w\");\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        Contracts.throwIfNotUndefined(this.privAudioFormat, \"format is already set\");\r\n        this.privAudioFormat = format as AudioOutputFormatImpl;\r\n        let headerOffset: number = 0;\r\n        if (this.privAudioFormat.hasHeader) {\r\n            headerOffset = this.privAudioFormat.header.byteLength;\r\n        }\r\n        if (this.privFd !== undefined) {\r\n            this.privWriteStream = fs.createWriteStream(\"\", {fd: this.privFd, start: headerOffset, autoClose: false});\r\n        }\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        Contracts.throwIfNullOrUndefined(this.privAudioFormat, \"must set format before writing.\");\r\n        if (this.privWriteStream !== undefined) {\r\n            this.privWriteStream.write(new Uint8Array(buffer.slice(0)));\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        if (this.privFd !== undefined) {\r\n            this.privWriteStream.on(\"finish\", () => {\r\n                if (this.privAudioFormat.hasHeader) {\r\n                    this.privAudioFormat.updateHeader(this.privWriteStream.bytesWritten);\r\n                    fs.writeSync(this.privFd,\r\n                        new Int8Array(this.privAudioFormat.header),\r\n                        0,\r\n                        this.privAudioFormat.header.byteLength,\r\n                        0);\r\n                }\r\n                fs.closeSync(this.privFd);\r\n                this.privFd = undefined;\r\n            });\r\n            this.privWriteStream.end();\r\n        }\r\n    }\r\n\r\n    public id = (): string => {\r\n        return this.privId;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}