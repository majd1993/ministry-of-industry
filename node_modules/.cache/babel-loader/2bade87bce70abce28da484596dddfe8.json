{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useForceRenderAtInterval;\n\nvar _react = require(\"react\");\n\nvar _mathRandom = _interopRequireDefault(require(\"math-random\"));\n\nvar _useTimer = _interopRequireDefault(require(\"./useTimer\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n} // The `nextTimer` function calculates the next absolute time that the timer should be fired based on the origin (original time received), interval, and current time.\n// If the origin is t=260, and we are currently at t=1000, nextTimer must return t=60260.\n// If the origin is t=260, and we are currently at t=60260 (exact landing), we must return t=120260, not t=60260.\n// This is for fixing bug #2103: https://github.com/microsoft/BotFramework-WebChat/issues/2103.\n\n\nfunction nextTimer(origin, interval) {\n  var time = new Date(origin).getTime();\n  var now = Date.now();\n  return time > now ? time : now + interval - (now - time) % interval;\n}\n\nfunction useForceRenderAtInterval(origin, interval, fn) {\n  var _useState = (0, _react.useState)(nextTimer(origin, interval)),\n      _useState2 = _slicedToArray(_useState, 2),\n      timer = _useState2[0],\n      setTimer = _useState2[1];\n\n  var handler = (0, _react.useCallback)(function () {\n    fn && fn(); // Chrome may fire the setTimeout callback 1 ms before its original schedule.\n    // Thus, when we calculate the \"next\" value, it will have the same value as before.\n    // Sending the same value to useTimer(), it will not do another schedule because the value did not change.\n    // So, we are adding a bit randomness, so useTimer() should pick up the newer scheduled time.\n\n    setTimer(nextTimer(origin, interval) + (0, _mathRandom.default)());\n  }, [fn, origin, interval]);\n  (0, _useTimer.default)(timer, handler);\n  return [timer, setTimer];\n}","map":{"version":3,"sources":["../../../src/hooks/internal/useForceRenderAtInterval.js"],"names":["time","now","Date","timer","setTimer","nextTimer","handler","fn"],"mappings":";;;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AACA,IAAA,WAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,aAAA,CAAA,CAAA;;AAEA,IAAA,SAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAEA;AACA;AACA;AACA;;;AAEA,SAAA,SAAA,CAAA,MAAA,EAAA,QAAA,EAAqC;AACnC,MAAMA,IAAI,GAAG,IAAA,IAAA,CAAA,MAAA,EAAb,OAAa,EAAb;AACA,MAAMC,GAAG,GAAGC,IAAI,CAAhB,GAAYA,EAAZ;AAEA,SAAOF,IAAI,GAAJA,GAAAA,GAAAA,IAAAA,GAAoBC,GAAG,GAAHA,QAAAA,GAAkB,CAACA,GAAG,GAAJ,IAAA,IAA7C,QAAA;AACD;;AAEc,SAAA,wBAAA,CAAA,MAAA,EAAA,QAAA,EAAA,EAAA,EAAwD;AAAA,MAAA,SAAA,GAC3C,CAAA,GAAA,MAAA,CAAA,QAAA,EAASI,SAAS,CAAA,MAAA,EADyB,QACzB,CAAlB,CAD2C;AAAA,MAAA,UAAA,GAAA,cAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAA,MAC9DF,KAD8D,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MACvDC,QADuD,GAAA,UAAA,CAAA,CAAA,CAAA;;AAErE,MAAME,OAAO,GAAG,CAAA,GAAA,MAAA,CAAA,WAAA,EAAY,YAAM;AAChCC,IAAAA,EAAE,IAAIA,EAD0B,EAChCA,CADgC,CAGhC;AACA;AACA;AACA;;AAEAH,IAAAA,QAAQ,CAACC,SAAS,CAAA,MAAA,EAATA,QAAS,CAATA,GAA8B,CAAA,GAAA,WAAA,CAAvCD,OAAuC,GAA/B,CAARA;AARc,GAAA,EASb,CAAA,EAAA,EAAA,MAAA,EATH,QASG,CATa,CAAhB;AAWA,GAAA,GAAA,SAAA,CAAA,OAAA,EAAA,KAAA,EAAA,OAAA;AAEA,SAAO,CAAA,KAAA,EAAP,QAAO,CAAP;AACD","sourcesContent":["import { useCallback, useState } from 'react';\nimport random from 'math-random';\n\nimport useTimer from './useTimer';\n\n// The `nextTimer` function calculates the next absolute time that the timer should be fired based on the origin (original time received), interval, and current time.\n// If the origin is t=260, and we are currently at t=1000, nextTimer must return t=60260.\n// If the origin is t=260, and we are currently at t=60260 (exact landing), we must return t=120260, not t=60260.\n// This is for fixing bug #2103: https://github.com/microsoft/BotFramework-WebChat/issues/2103.\n\nfunction nextTimer(origin, interval) {\n  const time = new Date(origin).getTime();\n  const now = Date.now();\n\n  return time > now ? time : now + interval - ((now - time) % interval);\n}\n\nexport default function useForceRenderAtInterval(origin, interval, fn) {\n  const [timer, setTimer] = useState(nextTimer(origin, interval));\n  const handler = useCallback(() => {\n    fn && fn();\n\n    // Chrome may fire the setTimeout callback 1 ms before its original schedule.\n    // Thus, when we calculate the \"next\" value, it will have the same value as before.\n    // Sending the same value to useTimer(), it will not do another schedule because the value did not change.\n    // So, we are adding a bit randomness, so useTimer() should pick up the newer scheduled time.\n\n    setTimer(nextTimer(origin, interval) + random());\n  }, [fn, origin, interval]);\n\n  useTimer(timer, handler);\n\n  return [timer, setTimer];\n}\n"],"sourceRoot":"component:///"},"metadata":{},"sourceType":"script"}