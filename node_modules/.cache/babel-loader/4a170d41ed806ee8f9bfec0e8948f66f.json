{"ast":null,"code":"import _classCallCheck from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\nimport { ArgumentNullError, ConnectionState, createNoDashGuid, Deferred, EventSource, MessageType, PromiseHelper, ServiceEvent, Timeout } from \"../common/Exports\";\nimport { CancellationErrorCode, CancellationReason, PropertyId, RecognitionEventArgs, SessionEventArgs } from \"../sdk/Exports\";\nimport { AgentConfig, DynamicGrammarBuilder, RequestSession, SpeechContext, SpeechDetected } from \"./Exports\";\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\nexport var ServiceRecognizerBase = /*#__PURE__*/function () {\n  function ServiceRecognizerBase(authentication, connectionFactory, audioSource, recognizerConfig, recognizer) {\n    var _this = this;\n\n    _classCallCheck(this, ServiceRecognizerBase);\n\n    this.privSetTimeout = setTimeout;\n    this.recognizeOverride = undefined;\n    this.disconnectOverride = undefined;\n\n    this.sendTelemetryData = function () {\n      var telemetryData = _this.privRequestSession.getTelemetry();\n\n      if (ServiceRecognizerBase.telemetryDataEnabled !== true || _this.privIsDisposed || null === telemetryData) {\n        return PromiseHelper.fromResult(true);\n      }\n\n      if (!!ServiceRecognizerBase.telemetryData) {\n        try {\n          ServiceRecognizerBase.telemetryData(telemetryData);\n          /* tslint:disable:no-empty */\n        } catch (_a) {}\n      }\n\n      return _this.fetchConnection().onSuccessContinueWith(function (connection) {\n        return connection.send(new SpeechConnectionMessage(MessageType.Text, \"telemetry\", _this.privRequestSession.requestId, \"application/json\", telemetryData));\n      });\n    };\n\n    this.receiveMessageOverride = undefined;\n\n    this.receiveMessage = function () {\n      return _this.fetchConnection().on(function (connection) {\n        return connection.read().onSuccessContinueWithPromise(function (message) {\n          if (_this.receiveMessageOverride !== undefined) {\n            return _this.receiveMessageOverride();\n          }\n\n          if (_this.privIsDisposed) {\n            // We're done.\n            return PromiseHelper.fromResult(undefined);\n          } // indicates we are draining the queue and it came with no message;\n\n\n          if (!message) {\n            if (!_this.privRequestSession.isRecognizing) {\n              return PromiseHelper.fromResult(true);\n            } else {\n              return _this.receiveMessage();\n            }\n          }\n\n          _this.privServiceHasSentMessage = true;\n          var connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\n\n          if (connectionMessage.requestId.toLowerCase() === _this.privRequestSession.requestId.toLowerCase()) {\n            switch (connectionMessage.path.toLowerCase()) {\n              case \"turn.start\":\n                _this.privMustReportEndOfStream = true;\n\n                _this.privRequestSession.onServiceTurnStartResponse();\n\n                break;\n\n              case \"speech.startdetected\":\n                var speechStartDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\n                var speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, _this.privRequestSession.sessionId);\n\n                if (!!_this.privRecognizer.speechStartDetected) {\n                  _this.privRecognizer.speechStartDetected(_this.privRecognizer, speechStartEventArgs);\n                }\n\n                break;\n\n              case \"speech.enddetected\":\n                var json;\n\n                if (connectionMessage.textBody.length > 0) {\n                  json = connectionMessage.textBody;\n                } else {\n                  // If the request was empty, the JSON returned is empty.\n                  json = \"{ Offset: 0 }\";\n                }\n\n                var speechStopDetected = SpeechDetected.fromJSON(json); // Only shrink the buffers for continuous recognition.\n                // For single shot, the speech.phrase message will come after the speech.end and it should own buffer shrink.\n\n                if (_this.privRecognizerConfig.isContinuousRecognition) {\n                  _this.privRequestSession.onServiceRecognized(speechStopDetected.Offset + _this.privRequestSession.currentTurnAudioOffset);\n                }\n\n                var speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + _this.privRequestSession.currentTurnAudioOffset, _this.privRequestSession.sessionId);\n\n                if (!!_this.privRecognizer.speechEndDetected) {\n                  _this.privRecognizer.speechEndDetected(_this.privRecognizer, speechStopEventArgs);\n                }\n\n                break;\n\n              case \"turn.end\":\n                _this.sendTelemetryData();\n\n                if (_this.privRequestSession.isSpeechEnded && _this.privMustReportEndOfStream) {\n                  _this.privMustReportEndOfStream = false;\n\n                  _this.cancelRecognitionLocal(CancellationReason.EndOfStream, CancellationErrorCode.NoError, undefined);\n                }\n\n                var sessionStopEventArgs = new SessionEventArgs(_this.privRequestSession.sessionId);\n\n                _this.privRequestSession.onServiceTurnEndResponse(_this.privRecognizerConfig.isContinuousRecognition);\n\n                if (!_this.privRecognizerConfig.isContinuousRecognition || _this.privRequestSession.isSpeechEnded || !_this.privRequestSession.isRecognizing) {\n                  if (!!_this.privRecognizer.sessionStopped) {\n                    _this.privRecognizer.sessionStopped(_this.privRecognizer, sessionStopEventArgs);\n                  }\n\n                  return PromiseHelper.fromResult(true);\n                } else {\n                  _this.fetchConnection().onSuccessContinueWith(function (connection) {\n                    _this.sendSpeechContext(connection);\n\n                    _this.sendWaveHeader(connection);\n                  });\n                }\n\n                break;\n\n              default:\n                if (!_this.processTypeSpecificMessages(connectionMessage)) {\n                  // here are some messages that the derived class has not processed, dispatch them to connect class\n                  if (!!_this.privServiceEvents) {\n                    _this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\n                  }\n                }\n\n            }\n          }\n\n          return _this.receiveMessage();\n        });\n      }, function (error) {});\n    };\n\n    this.sendSpeechContext = function (connection) {\n      var speechContextJson = _this.speechContext.toJSON();\n\n      if (speechContextJson) {\n        return connection.send(new SpeechConnectionMessage(MessageType.Text, \"speech.context\", _this.privRequestSession.requestId, \"application/json\", speechContextJson));\n      }\n\n      return PromiseHelper.fromResult(true);\n    };\n\n    this.connectImplOverride = undefined;\n    this.configConnectionOverride = undefined;\n    this.fetchConnectionOverride = undefined;\n\n    this.sendSpeechServiceConfig = function (connection, requestSession, SpeechServiceConfigJson) {\n      // filter out anything that is not required for the service to work.\n      if (ServiceRecognizerBase.telemetryDataEnabled !== true) {\n        var withTelemetry = JSON.parse(SpeechServiceConfigJson);\n        var replacement = {\n          context: {\n            system: withTelemetry.context.system\n          }\n        };\n        SpeechServiceConfigJson = JSON.stringify(replacement);\n      }\n\n      if (SpeechServiceConfigJson) {\n        // && this.privConnectionId !== this.privSpeechServiceConfigConnectionId) {\n        //  this.privSpeechServiceConfigConnectionId = this.privConnectionId;\n        return connection.send(new SpeechConnectionMessage(MessageType.Text, \"speech.config\", requestSession.requestId, \"application/json\", SpeechServiceConfigJson));\n      }\n\n      return PromiseHelper.fromResult(true);\n    };\n\n    this.sendAudio = function (audioStreamNode) {\n      return _this.audioSource.format.onSuccessContinueWithPromise(function (audioFormat) {\n        // NOTE: Home-baked promises crash ios safari during the invocation\n        // of the error callback chain (looks like the recursion is way too deep, and\n        // it blows up the stack). The following construct is a stop-gap that does not\n        // bubble the error up the callback chain and hence circumvents this problem.\n        // TODO: rewrite with ES6 promises.\n        var deferred = new Deferred(); // The time we last sent data to the service.\n\n        var nextSendTime = Date.now(); // Max amount to send before we start to throttle\n\n        var fastLaneSizeMs = _this.privRecognizerConfig.parameters.getProperty(\"SPEECH-TransmitLengthBeforThrottleMs\", \"5000\");\n\n        var maxSendUnthrottledBytes = audioFormat.avgBytesPerSec / 1000 * parseInt(fastLaneSizeMs, 10);\n        var startRecogNumber = _this.privRequestSession.recogNumber;\n\n        var readAndUploadCycle = function readAndUploadCycle() {\n          // If speech is done, stop sending audio.\n          if (!_this.privIsDisposed && !_this.privRequestSession.isSpeechEnded && _this.privRequestSession.isRecognizing && _this.privRequestSession.recogNumber === startRecogNumber) {\n            _this.fetchConnection().on(function (connection) {\n              audioStreamNode.read().on(function (audioStreamChunk) {\n                // we have a new audio chunk to upload.\n                if (_this.privRequestSession.isSpeechEnded) {\n                  // If service already recognized audio end then don't send any more audio\n                  deferred.resolve(true);\n                  return;\n                }\n\n                var payload;\n                var sendDelay;\n\n                if (!audioStreamChunk || audioStreamChunk.isEnd) {\n                  payload = null;\n                  sendDelay = 0;\n                } else {\n                  payload = audioStreamChunk.buffer;\n\n                  _this.privRequestSession.onAudioSent(payload.byteLength);\n\n                  if (maxSendUnthrottledBytes >= _this.privRequestSession.bytesSent) {\n                    sendDelay = 0;\n                  } else {\n                    sendDelay = Math.max(0, nextSendTime - Date.now());\n                  }\n                } // Are we ready to send, or need we delay more?\n\n\n                _this.privSetTimeout(function () {\n                  var _a;\n\n                  if (payload !== null) {\n                    nextSendTime = Date.now() + payload.byteLength * 1000 / (audioFormat.avgBytesPerSec * 2);\n                  }\n\n                  var uploaded = connection.send(new SpeechConnectionMessage(MessageType.Binary, \"audio\", _this.privRequestSession.requestId, null, payload));\n\n                  if (!((_a = audioStreamChunk) === null || _a === void 0 ? void 0 : _a.isEnd)) {\n                    uploaded.continueWith(function (_) {\n                      // this.writeBufferToConsole(payload);\n                      // Regardless of success or failure, schedule the next upload.\n                      // If the underlying connection was broken, the next cycle will\n                      // get a new connection and re-transmit missing audio automatically.\n                      readAndUploadCycle();\n                    });\n                  } else {\n                    // the audio stream has been closed, no need to schedule next\n                    // read-upload cycle.\n                    _this.privRequestSession.onSpeechEnded();\n\n                    deferred.resolve(true);\n                  }\n                }, sendDelay);\n              }, function (error) {\n                if (_this.privRequestSession.isSpeechEnded) {\n                  // For whatever reason, Reject is used to remove queue subscribers inside\n                  // the Queue.DrainAndDispose invoked from DetachAudioNode down below, which\n                  // means that sometimes things can be rejected in normal circumstances, without\n                  // any errors.\n                  deferred.resolve(true); // TODO: remove the argument, it's is completely meaningless.\n                } else {\n                  // Only reject, if there was a proper error.\n                  deferred.reject(error);\n                }\n              });\n            }, function (error) {\n              deferred.reject(error);\n            });\n          }\n        };\n\n        readAndUploadCycle();\n        return deferred.promise();\n      });\n    };\n\n    this.fetchConnection = function () {\n      if (_this.fetchConnectionOverride !== undefined) {\n        return _this.fetchConnectionOverride();\n      }\n\n      return _this.configureConnection();\n    };\n\n    if (!authentication) {\n      throw new ArgumentNullError(\"authentication\");\n    }\n\n    if (!connectionFactory) {\n      throw new ArgumentNullError(\"connectionFactory\");\n    }\n\n    if (!audioSource) {\n      throw new ArgumentNullError(\"audioSource\");\n    }\n\n    if (!recognizerConfig) {\n      throw new ArgumentNullError(\"recognizerConfig\");\n    }\n\n    this.privMustReportEndOfStream = false;\n    this.privAuthentication = authentication;\n    this.privConnectionFactory = connectionFactory;\n    this.privAudioSource = audioSource;\n    this.privRecognizerConfig = recognizerConfig;\n    this.privIsDisposed = false;\n    this.privRecognizer = recognizer;\n    this.privRequestSession = new RequestSession(this.privAudioSource.id());\n    this.privConnectionEvents = new EventSource();\n    this.privServiceEvents = new EventSource();\n    this.privDynamicGrammar = new DynamicGrammarBuilder();\n    this.privSpeechContext = new SpeechContext(this.privDynamicGrammar);\n    this.privAgentConfig = new AgentConfig();\n\n    if (typeof Blob !== \"undefined\" && typeof Worker !== \"undefined\") {\n      this.privSetTimeout = Timeout.setTimeout;\n    }\n  }\n\n  _createClass(ServiceRecognizerBase, [{\n    key: \"audioSource\",\n    get: function get() {\n      return this.privAudioSource;\n    }\n  }, {\n    key: \"speechContext\",\n    get: function get() {\n      return this.privSpeechContext;\n    }\n  }, {\n    key: \"dynamicGrammar\",\n    get: function get() {\n      return this.privDynamicGrammar;\n    }\n  }, {\n    key: \"agentConfig\",\n    get: function get() {\n      return this.privAgentConfig;\n    }\n  }, {\n    key: \"conversationTranslatorToken\",\n    set: function set(token) {\n      this.privRecognizerConfig.parameters.setProperty(PropertyId.ConversationTranslator_Token, token);\n    }\n  }, {\n    key: \"isDisposed\",\n    value: function isDisposed() {\n      return this.privIsDisposed;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose(reason) {\n      this.privIsDisposed = true;\n\n      if (this.privConnectionConfigurationPromise) {\n        this.privConnectionConfigurationPromise.onSuccessContinueWith(function (connection) {\n          connection.dispose(reason);\n        });\n      }\n    }\n  }, {\n    key: \"connectionEvents\",\n    get: function get() {\n      return this.privConnectionEvents;\n    }\n  }, {\n    key: \"serviceEvents\",\n    get: function get() {\n      return this.privServiceEvents;\n    }\n  }, {\n    key: \"recognitionMode\",\n    get: function get() {\n      return this.privRecognizerConfig.recognitionMode;\n    }\n  }, {\n    key: \"recognize\",\n    value: function recognize(recoMode, successCallback, errorCallBack) {\n      var _this2 = this;\n\n      if (this.recognizeOverride !== undefined) {\n        return this.recognizeOverride(recoMode, successCallback, errorCallBack);\n      } // Clear the existing configuration promise to force a re-transmission of config and context.\n\n\n      this.privConnectionConfigurationPromise = null;\n      this.privRecognizerConfig.recognitionMode = recoMode;\n      this.privSuccessCallback = successCallback;\n      this.privErrorCallback = errorCallBack;\n      this.privRequestSession.startNewRecognition();\n      this.privRequestSession.listenForServiceTelemetry(this.privAudioSource.events); // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\n\n      this.connectImpl();\n      return this.audioSource.attach(this.privRequestSession.audioNodeId).onSuccessContinueWithPromise(function (result) {\n        var audioNode;\n        return _this2.audioSource.format.onSuccessContinueWithPromise(function (format) {\n          audioNode = new ReplayableAudioNode(result, format.avgBytesPerSec);\n\n          _this2.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\n\n          return _this2.audioSource.deviceInfo.onSuccessContinueWithPromise(function (deviceInfo) {\n            _this2.privRecognizerConfig.SpeechServiceConfig.Context.audio = {\n              source: deviceInfo\n            };\n            return _this2.configureConnection().continueWithPromise(function (result) {\n              if (result.isError) {\n                _this2.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, result.error);\n\n                return PromiseHelper.fromError(result.error);\n              }\n\n              var sessionStartEventArgs = new SessionEventArgs(_this2.privRequestSession.sessionId);\n\n              if (!!_this2.privRecognizer.sessionStarted) {\n                _this2.privRecognizer.sessionStarted(_this2.privRecognizer, sessionStartEventArgs);\n              }\n\n              var messageRetrievalPromise = _this2.receiveMessage();\n\n              var audioSendPromise = _this2.sendAudio(audioNode);\n              /* tslint:disable:no-empty */\n\n\n              audioSendPromise.on(function (_) {}, function (error) {\n                _this2.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\n              });\n              return PromiseHelper.fromResult(true);\n            });\n          });\n        });\n      });\n    }\n  }, {\n    key: \"stopRecognizing\",\n    value: function stopRecognizing() {\n      var _this3 = this;\n\n      if (this.privRequestSession.isRecognizing) {\n        this.audioSource.turnOff();\n        return this.sendFinalAudio().onSuccessContinueWithPromise(function (_) {\n          _this3.privRequestSession.onStopRecognizing();\n\n          return _this3.privRequestSession.turnCompletionPromise.onSuccessContinueWith(function (_) {\n            _this3.privRequestSession.onStopRecognizing();\n\n            _this3.privRequestSession.dispose();\n\n            return true;\n          });\n        });\n      }\n\n      return PromiseHelper.fromResult(true);\n    }\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      this.connectImpl().result();\n    }\n  }, {\n    key: \"connectAsync\",\n    value: function connectAsync(cb, err) {\n      this.connectImpl().continueWith(function (promiseResult) {\n        try {\n          if (promiseResult.isError) {\n            if (!!err) {\n              err(promiseResult.error);\n            }\n          } else if (promiseResult.isCompleted) {\n            if (!!cb) {\n              cb();\n            }\n          }\n        } catch (e) {\n          if (!!err) {\n            err(e);\n          }\n        }\n      });\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      if (this.disconnectOverride !== undefined) {\n        this.disconnectOverride();\n        return;\n      }\n\n      this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.NoError, \"Disconnecting\");\n\n      if (this.privConnectionPromise.result().isCompleted) {\n        if (!this.privConnectionPromise.result().isError) {\n          this.privConnectionPromise.result().result.dispose();\n          this.privConnectionPromise = null;\n        }\n      } else {\n        this.privConnectionPromise.onSuccessContinueWith(function (connection) {\n          connection.dispose();\n        });\n      }\n    }\n  }, {\n    key: \"disconnectAsync\",\n    value: function disconnectAsync(cb, err) {\n      try {\n        if (this.disconnectOverride !== undefined) {\n          this.disconnectOverride();\n\n          if (!!cb) {\n            cb();\n          }\n\n          return;\n        }\n\n        this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.NoError, \"Disconnecting\");\n        this.privConnectionPromise.continueWith(function (result) {\n          try {\n            if (result.isError) {\n              if (!!err) {\n                err(result.error);\n              }\n            } else if (result.isCompleted) {\n              result.result.dispose();\n\n              if (!!cb) {\n                cb();\n              }\n            }\n          } catch (e) {\n            if (!!err) {\n              err(e);\n            }\n          }\n        });\n      } catch (e) {\n        if (!!err) {\n          err(e);\n        }\n      }\n    }\n  }, {\n    key: \"sendMessage\",\n    value: function sendMessage(message) {}\n  }, {\n    key: \"sendNetworkMessage\",\n    value: function sendNetworkMessage(path, payload, success, err) {\n      var _this4 = this;\n\n      var type = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\n      var contentType = typeof payload === \"string\" ? \"application/json\" : \"\";\n      this.fetchConnection().on(function (connection) {\n        connection.send(new SpeechConnectionMessage(type, path, _this4.privRequestSession.requestId, contentType, payload)).on(function () {\n          if (!!success) {\n            success();\n          }\n        }, function (error) {\n          if (!!err) {\n            err(error);\n          }\n        });\n      }, function (error) {\n        if (!!err) {\n          err(error);\n        }\n      });\n    }\n  }, {\n    key: \"activityTemplate\",\n    get: function get() {\n      return this.privActivityTemplate;\n    } // Cancels recognition.\n    ,\n    set: function set(messagePayload) {\n      this.privActivityTemplate = messagePayload;\n    }\n  }, {\n    key: \"cancelRecognitionLocal\",\n    value: function cancelRecognitionLocal(cancellationReason, errorCode, error) {\n      if (!!this.privRequestSession.isRecognizing) {\n        this.privRequestSession.onStopRecognizing();\n        this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, cancellationReason, errorCode, error);\n      }\n    }\n  }, {\n    key: \"sendWaveHeader\",\n    value: function sendWaveHeader(connection) {\n      var _this5 = this;\n\n      return this.audioSource.format.onSuccessContinueWithPromise(function (format) {\n        // this.writeBufferToConsole(format.header);\n        return connection.send(new SpeechConnectionMessage(MessageType.Binary, \"audio\", _this5.privRequestSession.requestId, \"audio/x-wav\", format.header));\n      });\n    } // Establishes a websocket connection to the end point.\n\n  }, {\n    key: \"connectImpl\",\n    value: function connectImpl() {\n      var _this6 = this;\n\n      var isUnAuthorized = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (this.connectImplOverride !== undefined) {\n        return this.connectImplOverride(isUnAuthorized);\n      }\n\n      if (this.privConnectionPromise) {\n        if (this.privConnectionPromise.result().isCompleted && (this.privConnectionPromise.result().isError || this.privConnectionPromise.result().result.state() === ConnectionState.Disconnected) && this.privServiceHasSentMessage === true) {\n          this.privConnectionId = null;\n          this.privConnectionPromise = null;\n          this.privServiceHasSentMessage = false;\n          return this.connectImpl();\n        } else {\n          return this.privConnectionPromise;\n        }\n      }\n\n      this.privAuthFetchEventId = createNoDashGuid();\n      this.privConnectionId = createNoDashGuid();\n      this.privRequestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\n      var authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\n      this.privConnectionPromise = authPromise.continueWithPromise(function (result) {\n        if (result.isError) {\n          _this6.privRequestSession.onAuthCompleted(true, result.error);\n\n          throw new Error(result.error);\n        } else {\n          _this6.privRequestSession.onAuthCompleted(false);\n        }\n\n        var connection = _this6.privConnectionFactory.create(_this6.privRecognizerConfig, result.result, _this6.privConnectionId);\n\n        _this6.privRequestSession.listenForServiceTelemetry(connection.events); // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\n        // it'll stop sending events.\n\n\n        connection.events.attach(function (event) {\n          _this6.connectionEvents.onEvent(event);\n        });\n        return connection.open().onSuccessContinueWithPromise(function (response) {\n          if (response.statusCode === 200) {\n            _this6.privRequestSession.onPreConnectionStart(_this6.privAuthFetchEventId, _this6.privConnectionId);\n\n            _this6.privRequestSession.onConnectionEstablishCompleted(response.statusCode);\n\n            return PromiseHelper.fromResult(connection);\n          } else if (response.statusCode === 403 && !isUnAuthorized) {\n            return _this6.connectImpl(true);\n          } else {\n            _this6.privRequestSession.onConnectionEstablishCompleted(response.statusCode, response.reason);\n\n            return PromiseHelper.fromError(\"Unable to contact server. StatusCode: \".concat(response.statusCode, \", \").concat(_this6.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint), \" Reason: \").concat(response.reason));\n          }\n        });\n      });\n      return this.privConnectionPromise;\n    }\n  }, {\n    key: \"writeBufferToConsole\",\n    value: function writeBufferToConsole(buffer) {\n      var out = \"Buffer Size: \";\n\n      if (null === buffer) {\n        out += \"null\";\n      } else {\n        var readView = new Uint8Array(buffer);\n        out += buffer.byteLength + \"\\r\\n\";\n\n        for (var i = 0; i < buffer.byteLength; i++) {\n          out += readView[i].toString(16).padStart(2, \"0\") + \" \";\n        }\n      } // tslint:disable-next-line:no-console\n\n\n      console.info(out);\n    }\n  }, {\n    key: \"sendFinalAudio\",\n    value: function sendFinalAudio() {\n      var _this7 = this;\n\n      var deferred = new Deferred();\n      this.fetchConnection().on(function (connection) {\n        connection.send(new SpeechConnectionMessage(MessageType.Binary, \"audio\", _this7.privRequestSession.requestId, null, null)).on(function (_) {\n          deferred.resolve(true);\n        }, function (error) {\n          deferred.reject(error);\n        });\n      }, function (error) {\n        deferred.reject(error);\n      });\n      return deferred.promise();\n    } // Takes an established websocket connection to the endpoint and sends speech configuration information.\n\n  }, {\n    key: \"configureConnection\",\n    value: function configureConnection() {\n      var _this8 = this;\n\n      if (this.configConnectionOverride !== undefined) {\n        return this.configConnectionOverride();\n      }\n\n      if (this.privConnectionConfigurationPromise) {\n        if (this.privConnectionConfigurationPromise.result().isCompleted && (this.privConnectionConfigurationPromise.result().isError || this.privConnectionConfigurationPromise.result().result.state() === ConnectionState.Disconnected)) {\n          this.privConnectionConfigurationPromise = null;\n          return this.configureConnection();\n        } else {\n          return this.privConnectionConfigurationPromise;\n        }\n      }\n\n      this.privConnectionConfigurationPromise = this.connectImpl().onSuccessContinueWithPromise(function (connection) {\n        return _this8.sendSpeechServiceConfig(connection, _this8.privRequestSession, _this8.privRecognizerConfig.SpeechServiceConfig.serialize()).onSuccessContinueWithPromise(function (_) {\n          return _this8.sendSpeechContext(connection).onSuccessContinueWithPromise(function (_) {\n            return _this8.sendWaveHeader(connection).onSuccessContinueWith(function (_) {\n              return connection;\n            });\n          });\n        });\n      });\n      return this.privConnectionConfigurationPromise;\n    }\n  }]);\n\n  return ServiceRecognizerBase;\n}();\nServiceRecognizerBase.telemetryDataEnabled = true;","map":{"version":3,"sources":["src/common.speech/ServiceRecognizerBase.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionOpenResponse,\r\n    ConnectionState,\r\n    createGuid,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    IDisposable,\r\n    IStreamChunk,\r\n    MessageType,\r\n    Promise,\r\n    PromiseHelper,\r\n    PromiseResult,\r\n    ServiceEvent,\r\n    Timeout\r\n} from \"../common/Exports\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"../sdk/Exports\";\r\nimport { Callback } from \"../sdk/Transcription/IConversation\";\r\nimport {\r\n    AgentConfig,\r\n    DynamicGrammarBuilder,\r\n    ISpeechConfigAudio,\r\n    ISpeechConfigAudioDevice,\r\n    RecognitionMode,\r\n    RequestSession,\r\n    SpeechContext,\r\n    SpeechDetected,\r\n} from \"./Exports\";\r\nimport {\r\n    AuthInfo,\r\n    IAuthentication,\r\n} from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\nexport abstract class ServiceRecognizerBase implements IDisposable {\r\n    private privAuthentication: IAuthentication;\r\n    private privConnectionFactory: IConnectionFactory;\r\n    private privAudioSource: IAudioSource;\r\n\r\n    // A promise for a configured connection.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionConfigurationPromise: Promise<IConnection>;\r\n\r\n    // A promise for a connection, but one that has not had the speech context sent yet.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionPromise: Promise<IConnection>;\r\n    private privAuthFetchEventId: string;\r\n    private privIsDisposed: boolean;\r\n    private privMustReportEndOfStream: boolean;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privServiceEvents: EventSource<ServiceEvent>;\r\n    private privDynamicGrammar: DynamicGrammarBuilder;\r\n    private privAgentConfig: AgentConfig;\r\n    private privServiceHasSentMessage: boolean;\r\n    private privActivityTemplate: string;\r\n    private privSetTimeout: (cb: () => void, delay: number) => number = setTimeout;\r\n    protected privSpeechContext: SpeechContext;\r\n    protected privRequestSession: RequestSession;\r\n    protected privConnectionId: string;\r\n    protected privRecognizerConfig: RecognizerConfig;\r\n    protected privRecognizer: Recognizer;\r\n    protected privSuccessCallback: (e: SpeechRecognitionResult) => void;\r\n    protected privErrorCallback: (e: string) => void;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: Recognizer) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!audioSource) {\r\n            throw new ArgumentNullError(\"audioSource\");\r\n        }\r\n\r\n        if (!recognizerConfig) {\r\n            throw new ArgumentNullError(\"recognizerConfig\");\r\n        }\r\n\r\n        this.privMustReportEndOfStream = false;\r\n        this.privAuthentication = authentication;\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.privAudioSource = audioSource;\r\n        this.privRecognizerConfig = recognizerConfig;\r\n        this.privIsDisposed = false;\r\n        this.privRecognizer = recognizer;\r\n        this.privRequestSession = new RequestSession(this.privAudioSource.id());\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privServiceEvents = new EventSource<ServiceEvent>();\r\n        this.privDynamicGrammar = new DynamicGrammarBuilder();\r\n        this.privSpeechContext = new SpeechContext(this.privDynamicGrammar);\r\n        this.privAgentConfig = new AgentConfig();\r\n        if (typeof (Blob) !== \"undefined\" && typeof (Worker) !== \"undefined\") {\r\n            this.privSetTimeout = Timeout.setTimeout;\r\n        }\r\n    }\r\n\r\n    public get audioSource(): IAudioSource {\r\n        return this.privAudioSource;\r\n    }\r\n\r\n    public get speechContext(): SpeechContext {\r\n        return this.privSpeechContext;\r\n    }\r\n\r\n    public get dynamicGrammar(): DynamicGrammarBuilder {\r\n        return this.privDynamicGrammar;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n\r\n    public set conversationTranslatorToken(token: string) {\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.ConversationTranslator_Token, token);\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(reason?: string): void {\r\n        this.privIsDisposed = true;\r\n        if (this.privConnectionConfigurationPromise) {\r\n            this.privConnectionConfigurationPromise.onSuccessContinueWith((connection: IConnection) => {\r\n                connection.dispose(reason);\r\n            });\r\n        }\r\n    }\r\n\r\n    public get connectionEvents(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    public get serviceEvents(): EventSource<ServiceEvent> {\r\n        return this.privServiceEvents;\r\n    }\r\n\r\n    public get recognitionMode(): RecognitionMode {\r\n        return this.privRecognizerConfig.recognitionMode;\r\n    }\r\n\r\n    protected recognizeOverride: (recoMode: RecognitionMode, sc: (e: SpeechRecognitionResult) => void, ec: (e: string) => void) => any = undefined;\r\n\r\n    public recognize(\r\n        recoMode: RecognitionMode,\r\n        successCallback: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n    ): Promise<boolean> {\r\n\r\n        if (this.recognizeOverride !== undefined) {\r\n            return this.recognizeOverride(recoMode, successCallback, errorCallBack);\r\n        }\r\n\r\n        // Clear the existing configuration promise to force a re-transmission of config and context.\r\n        this.privConnectionConfigurationPromise = null;\r\n        this.privRecognizerConfig.recognitionMode = recoMode;\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallBack;\r\n\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privAudioSource.events);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        this.connectImpl();\r\n\r\n        return this.audioSource\r\n            .attach(this.privRequestSession.audioNodeId)\r\n            .onSuccessContinueWithPromise<boolean>((result: IAudioStreamNode) => {\r\n                let audioNode: ReplayableAudioNode;\r\n\r\n                return this.audioSource.format.onSuccessContinueWithPromise((format: AudioStreamFormatImpl) => {\r\n                    audioNode = new ReplayableAudioNode(result, format.avgBytesPerSec);\r\n                    this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n\r\n                    return this.audioSource.deviceInfo.onSuccessContinueWithPromise<boolean>((deviceInfo: ISpeechConfigAudioDevice): Promise<boolean> => {\r\n                        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n                        return this.configureConnection()\r\n                            .continueWithPromise<boolean>((result: PromiseResult<IConnection>): Promise<boolean> => {\r\n                                if (result.isError) {\r\n                                    this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, result.error);\r\n                                    return PromiseHelper.fromError(result.error);\r\n                                }\r\n\r\n                                const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n                                if (!!this.privRecognizer.sessionStarted) {\r\n                                    this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n                                }\r\n\r\n                                const messageRetrievalPromise = this.receiveMessage();\r\n                                const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n                                /* tslint:disable:no-empty */\r\n                                audioSendPromise.on((_: boolean) => { }, (error: string) => {\r\n                                    this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n                                });\r\n                                return PromiseHelper.fromResult(true);\r\n                            });\r\n                    });\r\n                });\r\n            });\r\n    }\r\n\r\n    public stopRecognizing(): Promise<boolean> {\r\n        if (this.privRequestSession.isRecognizing) {\r\n            this.audioSource.turnOff();\r\n            return this.sendFinalAudio().onSuccessContinueWithPromise((_: boolean) => {\r\n                this.privRequestSession.onStopRecognizing();\r\n                return this.privRequestSession.turnCompletionPromise.onSuccessContinueWith((_: boolean) => {\r\n                    this.privRequestSession.onStopRecognizing();\r\n                    this.privRequestSession.dispose();\r\n                    return true;\r\n                });\r\n            });\r\n        }\r\n\r\n        return PromiseHelper.fromResult(true);\r\n    }\r\n\r\n    public connect(): void {\r\n        this.connectImpl().result();\r\n    }\r\n\r\n    public connectAsync(cb?: Callback, err?: Callback): void {\r\n        this.connectImpl().continueWith((promiseResult: PromiseResult<IConnection>) => {\r\n            try {\r\n                if (promiseResult.isError) {\r\n                    if (!!err) {\r\n                        err(promiseResult.error);\r\n                    }\r\n                } else if (promiseResult.isCompleted) {\r\n                    if (!!cb) {\r\n                        cb();\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    protected disconnectOverride: () => any = undefined;\r\n\r\n    public disconnect(): void {\r\n        if (this.disconnectOverride !== undefined) {\r\n            this.disconnectOverride();\r\n            return;\r\n        }\r\n\r\n        this.cancelRecognitionLocal(CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\");\r\n\r\n        if (this.privConnectionPromise.result().isCompleted) {\r\n            if (!this.privConnectionPromise.result().isError) {\r\n                this.privConnectionPromise.result().result.dispose();\r\n                this.privConnectionPromise = null;\r\n            }\r\n        } else {\r\n            this.privConnectionPromise.onSuccessContinueWith((connection: IConnection) => {\r\n                connection.dispose();\r\n            });\r\n        }\r\n    }\r\n\r\n    public disconnectAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            if (this.disconnectOverride !== undefined) {\r\n                this.disconnectOverride();\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n                return;\r\n            }\r\n\r\n            this.cancelRecognitionLocal(CancellationReason.Error,\r\n                CancellationErrorCode.NoError,\r\n                \"Disconnecting\");\r\n\r\n            this.privConnectionPromise.continueWith((result: PromiseResult<IConnection>): void => {\r\n                try {\r\n                    if (result.isError) {\r\n                        if (!!err) {\r\n                            err(result.error);\r\n                        }\r\n                    } else if (result.isCompleted) {\r\n                        result.result.dispose();\r\n\r\n                        if (!!cb) {\r\n                            cb();\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    if (!!err) {\r\n                        err(e);\r\n                    }\r\n                }\r\n            });\r\n        } catch (e) {\r\n            if (!!err) {\r\n                err(e);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Called when telemetry data is sent to the service.\r\n    // Used for testing Telemetry capture.\r\n    public static telemetryData: (json: string) => void;\r\n    public static telemetryDataEnabled: boolean = true;\r\n\r\n    public sendMessage(message: string): void { }\r\n\r\n    public sendNetworkMessage(path: string, payload: string | ArrayBuffer, success?: () => void, err?: (error: string) => void): void {\r\n        const type: MessageType = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\r\n        const contentType: string = typeof payload === \"string\" ? \"application/json\" : \"\";\r\n\r\n        this.fetchConnection().on((connection: IConnection) => {\r\n            connection.send(new SpeechConnectionMessage(type, path, this.privRequestSession.requestId, contentType, payload)).on(() => {\r\n                if (!!success) {\r\n                    success();\r\n                }\r\n            }, (error: string) => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        }, (error: string) => {\r\n            if (!!err) {\r\n                err(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    public set activityTemplate(messagePayload: string) { this.privActivityTemplate = messagePayload; }\r\n    public get activityTemplate(): string { return this.privActivityTemplate; }\r\n\r\n    protected abstract processTypeSpecificMessages(\r\n        connectionMessage: SpeechConnectionMessage,\r\n        successCallback?: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack?: (e: string) => void): boolean;\r\n\r\n    protected sendTelemetryData = () => {\r\n        const telemetryData = this.privRequestSession.getTelemetry();\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true ||\r\n            this.privIsDisposed ||\r\n            null === telemetryData) {\r\n            return PromiseHelper.fromResult(true);\r\n        }\r\n\r\n        if (!!ServiceRecognizerBase.telemetryData) {\r\n            try {\r\n                ServiceRecognizerBase.telemetryData(telemetryData);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        return this.fetchConnection().onSuccessContinueWith((connection: IConnection): Promise<boolean> => {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"telemetry\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                telemetryData));\r\n        });\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected abstract cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void;\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognitionLocal(\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            this.privRequestSession.onStopRecognizing();\r\n\r\n            this.cancelRecognition(\r\n                this.privRequestSession.sessionId,\r\n                this.privRequestSession.requestId,\r\n                cancellationReason,\r\n                errorCode,\r\n                error);\r\n        }\r\n    }\r\n\r\n    protected receiveMessageOverride: () => any = undefined;\r\n\r\n    protected receiveMessage = (): Promise<IConnection> => {\r\n        return this.fetchConnection().on((connection: IConnection): Promise<IConnection> => {\r\n            return connection.read()\r\n                .onSuccessContinueWithPromise((message: ConnectionMessage) => {\r\n\r\n                    if (this.receiveMessageOverride !== undefined) {\r\n                        return this.receiveMessageOverride();\r\n                    }\r\n                    if (this.privIsDisposed) {\r\n                        // We're done.\r\n                        return PromiseHelper.fromResult(undefined);\r\n                    }\r\n\r\n                    // indicates we are draining the queue and it came with no message;\r\n                    if (!message) {\r\n                        if (!this.privRequestSession.isRecognizing) {\r\n                            return PromiseHelper.fromResult(true);\r\n                        } else {\r\n                            return this.receiveMessage();\r\n                        }\r\n                    }\r\n\r\n                    this.privServiceHasSentMessage = true;\r\n\r\n                    const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n                    if (connectionMessage.requestId.toLowerCase() === this.privRequestSession.requestId.toLowerCase()) {\r\n                        switch (connectionMessage.path.toLowerCase()) {\r\n                            case \"turn.start\":\r\n                                this.privMustReportEndOfStream = true;\r\n                                this.privRequestSession.onServiceTurnStartResponse();\r\n                                break;\r\n                            case \"speech.startdetected\":\r\n                                const speechStartDetected: SpeechDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\r\n\r\n                                const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\r\n\r\n                                if (!!this.privRecognizer.speechStartDetected) {\r\n                                    this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\r\n                                }\r\n\r\n                                break;\r\n                            case \"speech.enddetected\":\r\n\r\n                                let json: string;\r\n\r\n                                if (connectionMessage.textBody.length > 0) {\r\n                                    json = connectionMessage.textBody;\r\n                                } else {\r\n                                    // If the request was empty, the JSON returned is empty.\r\n                                    json = \"{ Offset: 0 }\";\r\n                                }\r\n\r\n                                const speechStopDetected: SpeechDetected = SpeechDetected.fromJSON(json);\r\n\r\n                                // Only shrink the buffers for continuous recognition.\r\n                                // For single shot, the speech.phrase message will come after the speech.end and it should own buffer shrink.\r\n                                if (this.privRecognizerConfig.isContinuousRecognition) {\r\n                                    this.privRequestSession.onServiceRecognized(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset);\r\n                                }\r\n\r\n                                const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n\r\n                                if (!!this.privRecognizer.speechEndDetected) {\r\n                                    this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\r\n                                }\r\n                                break;\r\n                            case \"turn.end\":\r\n                                this.sendTelemetryData();\r\n\r\n                                if (this.privRequestSession.isSpeechEnded && this.privMustReportEndOfStream) {\r\n                                    this.privMustReportEndOfStream = false;\r\n                                    this.cancelRecognitionLocal(CancellationReason.EndOfStream, CancellationErrorCode.NoError, undefined);\r\n                                }\r\n\r\n                                const sessionStopEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n                                this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition);\r\n\r\n                                if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {\r\n                                    if (!!this.privRecognizer.sessionStopped) {\r\n                                        this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\r\n                                    }\r\n\r\n                                    return PromiseHelper.fromResult(true);\r\n                                } else {\r\n                                    this.fetchConnection().onSuccessContinueWith((connection: IConnection) => {\r\n                                        this.sendSpeechContext(connection);\r\n                                        this.sendWaveHeader(connection);\r\n                                    });\r\n                                }\r\n                                break;\r\n\r\n                            default:\r\n\r\n                                if (!this.processTypeSpecificMessages(connectionMessage)) {\r\n                                    // here are some messages that the derived class has not processed, dispatch them to connect class\r\n                                    if (!!this.privServiceEvents) {\r\n                                        this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                                    }\r\n                                }\r\n\r\n                        }\r\n                    }\r\n\r\n                    return this.receiveMessage();\r\n                });\r\n        }, (error: string) => {\r\n        });\r\n    }\r\n\r\n    protected sendSpeechContext = (connection: IConnection): Promise<boolean> => {\r\n        const speechContextJson = this.speechContext.toJSON();\r\n\r\n        if (speechContextJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.context\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                speechContextJson));\r\n        }\r\n        return PromiseHelper.fromResult(true);\r\n    }\r\n\r\n    protected sendWaveHeader(connection: IConnection): Promise<boolean> {\r\n        return this.audioSource.format.onSuccessContinueWithPromise((format: AudioStreamFormatImpl) => {\r\n            // this.writeBufferToConsole(format.header);\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Binary,\r\n                \"audio\",\r\n                this.privRequestSession.requestId,\r\n                \"audio/x-wav\",\r\n                format.header\r\n            ));\r\n        });\r\n    }\r\n\r\n    protected connectImplOverride: (isUnAuthorized: boolean) => any = undefined;\r\n\r\n    // Establishes a websocket connection to the end point.\r\n    protected connectImpl(isUnAuthorized: boolean = false): Promise<IConnection> {\r\n\r\n        if (this.connectImplOverride !== undefined) {\r\n            return this.connectImplOverride(isUnAuthorized);\r\n        }\r\n\r\n        if (this.privConnectionPromise) {\r\n            if (this.privConnectionPromise.result().isCompleted &&\r\n                (this.privConnectionPromise.result().isError\r\n                    || this.privConnectionPromise.result().result.state() === ConnectionState.Disconnected) &&\r\n                this.privServiceHasSentMessage === true) {\r\n                this.privConnectionId = null;\r\n                this.privConnectionPromise = null;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.connectImpl();\r\n            } else {\r\n                return this.privConnectionPromise;\r\n            }\r\n        }\r\n\r\n        this.privAuthFetchEventId = createNoDashGuid();\r\n        this.privConnectionId = createNoDashGuid();\r\n\r\n        this.privRequestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\r\n\r\n        const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\r\n\r\n        this.privConnectionPromise = authPromise\r\n            .continueWithPromise((result: PromiseResult<AuthInfo>) => {\r\n                if (result.isError) {\r\n                    this.privRequestSession.onAuthCompleted(true, result.error);\r\n                    throw new Error(result.error);\r\n                } else {\r\n                    this.privRequestSession.onAuthCompleted(false);\r\n                }\r\n\r\n                const connection: IConnection = this.privConnectionFactory.create(this.privRecognizerConfig, result.result, this.privConnectionId);\r\n\r\n                this.privRequestSession.listenForServiceTelemetry(connection.events);\r\n\r\n                // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n                // it'll stop sending events.\r\n                connection.events.attach((event: ConnectionEvent) => {\r\n                    this.connectionEvents.onEvent(event);\r\n                });\r\n\r\n                return connection.open().onSuccessContinueWithPromise((response: ConnectionOpenResponse): Promise<IConnection> => {\r\n                    if (response.statusCode === 200) {\r\n                        this.privRequestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\r\n                        this.privRequestSession.onConnectionEstablishCompleted(response.statusCode);\r\n\r\n                        return PromiseHelper.fromResult<IConnection>(connection);\r\n                    } else if (response.statusCode === 403 && !isUnAuthorized) {\r\n                        return this.connectImpl(true);\r\n                    } else {\r\n                        this.privRequestSession.onConnectionEstablishCompleted(response.statusCode, response.reason);\r\n                        return PromiseHelper.fromError<IConnection>(`Unable to contact server. StatusCode: ${response.statusCode}, ${this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${response.reason}`);\r\n                    }\r\n                });\r\n            });\r\n\r\n        return this.privConnectionPromise;\r\n    }\r\n\r\n    protected configConnectionOverride: () => any = undefined;\r\n\r\n    protected fetchConnectionOverride: () => any = undefined;\r\n\r\n    protected sendSpeechServiceConfig = (connection: IConnection, requestSession: RequestSession, SpeechServiceConfigJson: string): Promise<boolean> => {\r\n        // filter out anything that is not required for the service to work.\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true) {\r\n            const withTelemetry = JSON.parse(SpeechServiceConfigJson);\r\n\r\n            const replacement: any = {\r\n                context: {\r\n                    system: withTelemetry.context.system,\r\n                },\r\n            };\r\n\r\n            SpeechServiceConfigJson = JSON.stringify(replacement);\r\n        }\r\n\r\n        if (SpeechServiceConfigJson) { // && this.privConnectionId !== this.privSpeechServiceConfigConnectionId) {\r\n            //  this.privSpeechServiceConfigConnectionId = this.privConnectionId;\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.config\",\r\n                requestSession.requestId,\r\n                \"application/json\",\r\n                SpeechServiceConfigJson));\r\n        }\r\n\r\n        return PromiseHelper.fromResult(true);\r\n    }\r\n\r\n    protected sendAudio = (\r\n        audioStreamNode: IAudioStreamNode): Promise<boolean> => {\r\n        return this.audioSource.format.onSuccessContinueWithPromise((audioFormat: AudioStreamFormatImpl) => {\r\n            // NOTE: Home-baked promises crash ios safari during the invocation\r\n            // of the error callback chain (looks like the recursion is way too deep, and\r\n            // it blows up the stack). The following construct is a stop-gap that does not\r\n            // bubble the error up the callback chain and hence circumvents this problem.\r\n            // TODO: rewrite with ES6 promises.\r\n            const deferred = new Deferred<boolean>();\r\n\r\n            // The time we last sent data to the service.\r\n            let nextSendTime: number = Date.now();\r\n\r\n            // Max amount to send before we start to throttle\r\n            const fastLaneSizeMs: string = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-TransmitLengthBeforThrottleMs\", \"5000\");\r\n            const maxSendUnthrottledBytes: number = audioFormat.avgBytesPerSec / 1000 * parseInt(fastLaneSizeMs, 10);\r\n            const startRecogNumber: number = this.privRequestSession.recogNumber;\r\n\r\n            const readAndUploadCycle = () => {\r\n\r\n                // If speech is done, stop sending audio.\r\n                if (!this.privIsDisposed &&\r\n                    !this.privRequestSession.isSpeechEnded &&\r\n                    this.privRequestSession.isRecognizing &&\r\n                    this.privRequestSession.recogNumber === startRecogNumber) {\r\n                    this.fetchConnection().on((connection: IConnection) => {\r\n                        audioStreamNode.read().on(\r\n                            (audioStreamChunk: IStreamChunk<ArrayBuffer>) => {\r\n                                // we have a new audio chunk to upload.\r\n                                if (this.privRequestSession.isSpeechEnded) {\r\n                                    // If service already recognized audio end then don't send any more audio\r\n                                    deferred.resolve(true);\r\n                                    return;\r\n                                }\r\n\r\n                                let payload: ArrayBuffer;\r\n                                let sendDelay: number;\r\n\r\n                                if (!audioStreamChunk || audioStreamChunk.isEnd) {\r\n                                    payload = null;\r\n                                    sendDelay = 0;\r\n                                } else {\r\n                                    payload = audioStreamChunk.buffer;\r\n                                    this.privRequestSession.onAudioSent(payload.byteLength);\r\n\r\n                                    if (maxSendUnthrottledBytes >= this.privRequestSession.bytesSent) {\r\n                                        sendDelay = 0;\r\n                                    } else {\r\n                                        sendDelay = Math.max(0, nextSendTime - Date.now());\r\n                                    }\r\n                                }\r\n\r\n                                // Are we ready to send, or need we delay more?\r\n                                this.privSetTimeout(() => {\r\n                                    if (payload !== null) {\r\n                                        nextSendTime = Date.now() + (payload.byteLength * 1000 / (audioFormat.avgBytesPerSec * 2));\r\n                                    }\r\n\r\n                                    const uploaded: Promise<boolean> = connection.send(\r\n                                        new SpeechConnectionMessage(\r\n                                            MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, payload));\r\n\r\n                                    if (!audioStreamChunk?.isEnd) {\r\n                                        uploaded.continueWith((_: PromiseResult<boolean>) => {\r\n                                            // this.writeBufferToConsole(payload);\r\n                                            // Regardless of success or failure, schedule the next upload.\r\n                                            // If the underlying connection was broken, the next cycle will\r\n                                            // get a new connection and re-transmit missing audio automatically.\r\n                                            readAndUploadCycle();\r\n                                        });\r\n                                    } else {\r\n                                        // the audio stream has been closed, no need to schedule next\r\n                                        // read-upload cycle.\r\n                                        this.privRequestSession.onSpeechEnded();\r\n                                        deferred.resolve(true);\r\n                                    }\r\n                                }, sendDelay);\r\n                            },\r\n                            (error: string) => {\r\n                                if (this.privRequestSession.isSpeechEnded) {\r\n                                    // For whatever reason, Reject is used to remove queue subscribers inside\r\n                                    // the Queue.DrainAndDispose invoked from DetachAudioNode down below, which\r\n                                    // means that sometimes things can be rejected in normal circumstances, without\r\n                                    // any errors.\r\n                                    deferred.resolve(true); // TODO: remove the argument, it's is completely meaningless.\r\n                                } else {\r\n                                    // Only reject, if there was a proper error.\r\n                                    deferred.reject(error);\r\n                                }\r\n                            });\r\n                    }, (error: string) => {\r\n                        deferred.reject(error);\r\n                    });\r\n                }\r\n            };\r\n\r\n            readAndUploadCycle();\r\n\r\n            return deferred.promise();\r\n        });\r\n    }\r\n\r\n    private writeBufferToConsole(buffer: ArrayBuffer): void {\r\n        let out: string = \"Buffer Size: \";\r\n        if (null === buffer) {\r\n            out += \"null\";\r\n        } else {\r\n            const readView: Uint8Array = new Uint8Array(buffer);\r\n            out += buffer.byteLength + \"\\r\\n\";\r\n            for (let i: number = 0; i < buffer.byteLength; i++) {\r\n                out += readView[i].toString(16).padStart(2, \"0\") + \" \";\r\n            }\r\n        }\r\n        // tslint:disable-next-line:no-console\r\n        console.info(out);\r\n    }\r\n\r\n    private sendFinalAudio(): Promise<boolean> {\r\n        const deferred = new Deferred<boolean>();\r\n\r\n        this.fetchConnection().on((connection: IConnection) => {\r\n            connection.send(new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, null)).on((_: boolean) => {\r\n                deferred.resolve(true);\r\n            }, (error: string) => {\r\n                deferred.reject(error);\r\n            });\r\n        }, (error: string) => {\r\n            deferred.reject(error);\r\n        });\r\n\r\n        return deferred.promise();\r\n    }\r\n\r\n    private fetchConnection = (): Promise<IConnection> => {\r\n        if (this.fetchConnectionOverride !== undefined) {\r\n            return this.fetchConnectionOverride();\r\n        }\r\n\r\n        return this.configureConnection();\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private configureConnection(): Promise<IConnection> {\r\n        if (this.configConnectionOverride !== undefined) {\r\n            return this.configConnectionOverride();\r\n        }\r\n\r\n        if (this.privConnectionConfigurationPromise) {\r\n            if (this.privConnectionConfigurationPromise.result().isCompleted &&\r\n                (this.privConnectionConfigurationPromise.result().isError\r\n                    || this.privConnectionConfigurationPromise.result().result.state() === ConnectionState.Disconnected)) {\r\n\r\n                this.privConnectionConfigurationPromise = null;\r\n                return this.configureConnection();\r\n            } else {\r\n                return this.privConnectionConfigurationPromise;\r\n            }\r\n        }\r\n\r\n        this.privConnectionConfigurationPromise = this.connectImpl().onSuccessContinueWithPromise((connection: IConnection): Promise<IConnection> => {\r\n            return this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize())\r\n                .onSuccessContinueWithPromise((_: boolean) => {\r\n                    return this.sendSpeechContext(connection).onSuccessContinueWithPromise((_: boolean) => {\r\n                        return this.sendWaveHeader(connection).onSuccessContinueWith((_: boolean) => {\r\n                            return connection;\r\n                        });\r\n                    });\r\n                });\r\n        });\r\n\r\n        return this.privConnectionConfigurationPromise;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}