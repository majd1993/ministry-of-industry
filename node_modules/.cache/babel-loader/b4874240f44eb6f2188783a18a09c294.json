{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _botframeworkWebchatApi = require(\"botframework-webchat-api\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _simpleUpdateIn = _interopRequireDefault(require(\"simple-update-in\"));\n\nvar _createCustomEvent = _interopRequireDefault(require(\"./createCustomEvent\"));\n\nvar _randomId = _interopRequireDefault(require(\"./randomId\"));\n\nvar _useInternalMarkdownIt = _interopRequireDefault(require(\"../hooks/internal/useInternalMarkdownIt\"));\n\nvar _useStyleToEmotionObject = _interopRequireDefault(require(\"../hooks/internal/useStyleToEmotionObject\"));\n\nvar _walkMarkdownTokens = _interopRequireDefault(require(\"./walkMarkdownTokens\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar useStyleOptions = _botframeworkWebchatApi.hooks.useStyleOptions;\n\nfunction replaceAnchorWithButton(markdownTokens) {\n  return (0, _walkMarkdownTokens.default)(markdownTokens, function (markdownToken) {\n    markdownToken = _objectSpread({}, markdownToken);\n\n    switch (markdownToken.type) {\n      case 'link_open':\n        markdownToken.tag = 'button';\n        markdownToken.attrs = [].concat(_toConsumableArray((0, _simpleUpdateIn.default)(markdownToken.attrs, [function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n              name = _ref2[0],\n              value = _ref2[1];\n\n          return name === 'href' && value.startsWith('#');\n        }], function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 2),\n              value = _ref4[1];\n\n          return ['data-markdown-href', value.substr(1)];\n        })), [['type', 'button']]);\n        break;\n\n      case 'link_close':\n        markdownToken.tag = 'button';\n        break;\n\n      default:\n        break;\n    }\n\n    return markdownToken;\n  });\n}\n\nvar InlineMarkdown = function InlineMarkdown(_ref5) {\n  var children = _ref5.children,\n      onReference = _ref5.onReference,\n      references = _ref5.references;\n\n  if (typeof children !== 'string') {\n    console.warn('botframework-webchat: \"children\" prop passed to <InlineMarkdown> must be of type string.');\n    children = '';\n  }\n\n  var _useInternalMarkdownI = (0, _useInternalMarkdownIt.default)(),\n      _useInternalMarkdownI2 = _slicedToArray(_useInternalMarkdownI, 1),\n      markdownIt = _useInternalMarkdownI2[0];\n\n  var _useStyleOptions = useStyleOptions(),\n      _useStyleOptions2 = _slicedToArray(_useStyleOptions, 1),\n      accent = _useStyleOptions2[0].accent;\n\n  var styleToClassName = (0, _useStyleToEmotionObject.default)(); // We inlined the style here because this style is:\n  // 1. Internal to Web Chat\n  // 2. Not customizable from developers (other than setting `styleOptions.accent`)\n\n  var className = (0, _react.useMemo)(function () {\n    return styleToClassName({\n      '& button[data-markdown-href]': {\n        appearance: 'none',\n        backgroundColor: 'transparent',\n        border: 0,\n        color: accent,\n        cursor: 'pointer',\n        fontFamily: 'inherit',\n        fontSize: 'inherit',\n        padding: 0\n      }\n    }) + '';\n  }, [accent, styleToClassName]); // Markdown-It only support references in uppercase.\n\n  references = references.map(function (reference) {\n    return reference.toUpperCase();\n  });\n\n  var _references$reduce = references.reduce(function (_ref6, ref) {\n    var hrefToRef = _ref6.hrefToRef,\n        refToHref = _ref6.refToHref;\n    var href = (0, _randomId.default)();\n    return {\n      hrefToRef: _objectSpread(_objectSpread({}, hrefToRef), {}, _defineProperty({}, href, ref)),\n      refToHref: _objectSpread(_objectSpread({}, refToHref), {}, _defineProperty({}, ref, href))\n    };\n  }, {\n    hrefToRef: {},\n    refToHref: {}\n  }),\n      hrefToRef = _references$reduce.hrefToRef,\n      refToHref = _references$reduce.refToHref;\n\n  var html = (0, _react.useMemo)(function () {\n    var tree = markdownIt.parseInline(children, {\n      references: references.reduce(function (references, key) {\n        return _objectSpread(_objectSpread({}, references), {}, _defineProperty({}, key, {\n          href: \"#\".concat(refToHref[key])\n        }));\n      }, {})\n    }); // Turn \"<a href=\"#retry\">Retry</a>\" into \"<button data-ref=\"retry\" type=\"button\">Retry</button>\"\n\n    var updatedTree = replaceAnchorWithButton(tree);\n    return {\n      __html: markdownIt.renderer.render(updatedTree)\n    };\n  }, [children, refToHref, markdownIt, references]);\n  var handleClick = (0, _react.useCallback)(function (event) {\n    event.stopPropagation();\n    var href = event.target.getAttribute('data-markdown-href');\n    href && onReference && onReference((0, _createCustomEvent.default)('reference', {\n      data: hrefToRef[href]\n    }));\n  }, [hrefToRef, onReference]);\n  return /*#__PURE__*/_react.default.createElement(\"span\", {\n    className: className,\n    dangerouslySetInnerHTML: html,\n    onClick: handleClick\n  });\n};\n\nInlineMarkdown.defaultProps = {\n  children: '',\n  onReference: undefined,\n  references: []\n};\nInlineMarkdown.propTypes = {\n  children: _propTypes.default.string,\n  onReference: _propTypes.default.func,\n  references: _propTypes.default.arrayOf(_propTypes.default.string)\n};\nvar _default = InlineMarkdown;\nexports.default = _default;","map":{"version":3,"sources":["../../src/Utils/InlineMarkdown.js"],"names":["useStyleOptions","hooks","markdownToken","name","value","InlineMarkdown","children","onReference","references","console","markdownIt","accent","styleToClassName","className","appearance","backgroundColor","border","color","cursor","fontFamily","fontSize","padding","reference","hrefToRef","refToHref","href","html","tree","updatedTree","replaceAnchorWithButton","__html","handleClick","event","data","PropTypes"],"mappings":"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","sourcesContent":["/* eslint react/no-danger: \"off\" */\n\nimport { hooks } from 'botframework-webchat-api';\nimport PropTypes from 'prop-types';\nimport React, { useCallback, useMemo } from 'react';\nimport updateIn from 'simple-update-in';\n\nimport createCustomEvent from './createCustomEvent';\nimport randomId from './randomId';\nimport useInternalMarkdownIt from '../hooks/internal/useInternalMarkdownIt';\nimport useStyleToEmotionObject from '../hooks/internal/useStyleToEmotionObject';\nimport walkMarkdownTokens from './walkMarkdownTokens';\n\nconst { useStyleOptions } = hooks;\n\nfunction replaceAnchorWithButton(markdownTokens) {\n  return walkMarkdownTokens(markdownTokens, markdownToken => {\n    markdownToken = { ...markdownToken };\n\n    switch (markdownToken.type) {\n      case 'link_open':\n        markdownToken.tag = 'button';\n        markdownToken.attrs = [\n          ...updateIn(\n            markdownToken.attrs,\n            [([name, value]) => name === 'href' && value.startsWith('#')],\n            ([, value]) => ['data-markdown-href', value.substr(1)]\n          ),\n          ['type', 'button']\n        ];\n        break;\n\n      case 'link_close':\n        markdownToken.tag = 'button';\n        break;\n\n      default:\n        break;\n    }\n\n    return markdownToken;\n  });\n}\n\nconst InlineMarkdown = ({ children, onReference, references }) => {\n  if (typeof children !== 'string') {\n    console.warn('botframework-webchat: \"children\" prop passed to <InlineMarkdown> must be of type string.');\n    children = '';\n  }\n\n  const [markdownIt] = useInternalMarkdownIt();\n  const [{ accent }] = useStyleOptions();\n  const styleToClassName = useStyleToEmotionObject();\n\n  // We inlined the style here because this style is:\n  // 1. Internal to Web Chat\n  // 2. Not customizable from developers (other than setting `styleOptions.accent`)\n  const className = useMemo(\n    () =>\n      styleToClassName({\n        '& button[data-markdown-href]': {\n          appearance: 'none',\n          backgroundColor: 'transparent',\n          border: 0,\n          color: accent,\n          cursor: 'pointer',\n          fontFamily: 'inherit',\n          fontSize: 'inherit',\n          padding: 0\n        }\n      }) + '',\n    [accent, styleToClassName]\n  );\n\n  // Markdown-It only support references in uppercase.\n  references = references.map(reference => reference.toUpperCase());\n\n  const { hrefToRef, refToHref } = references.reduce(\n    ({ hrefToRef, refToHref }, ref) => {\n      const href = randomId();\n\n      return {\n        hrefToRef: { ...hrefToRef, [href]: ref },\n        refToHref: { ...refToHref, [ref]: href }\n      };\n    },\n    { hrefToRef: {}, refToHref: {} }\n  );\n\n  const html = useMemo(() => {\n    const tree = markdownIt.parseInline(children, {\n      references: references.reduce((references, key) => ({ ...references, [key]: { href: `#${refToHref[key]}` } }), {})\n    });\n\n    // Turn \"<a href=\"#retry\">Retry</a>\" into \"<button data-ref=\"retry\" type=\"button\">Retry</button>\"\n    const updatedTree = replaceAnchorWithButton(tree);\n\n    return { __html: markdownIt.renderer.render(updatedTree) };\n  }, [children, refToHref, markdownIt, references]);\n\n  const handleClick = useCallback(\n    event => {\n      event.stopPropagation();\n\n      const href = event.target.getAttribute('data-markdown-href');\n\n      href && onReference && onReference(createCustomEvent('reference', { data: hrefToRef[href] }));\n    },\n    [hrefToRef, onReference]\n  );\n\n  return <span className={className} dangerouslySetInnerHTML={html} onClick={handleClick} />;\n};\n\nInlineMarkdown.defaultProps = {\n  children: '',\n  onReference: undefined,\n  references: []\n};\n\nInlineMarkdown.propTypes = {\n  children: PropTypes.string,\n  onReference: PropTypes.func,\n  references: PropTypes.arrayOf(PropTypes.string)\n};\n\nexport default InlineMarkdown;\n"],"sourceRoot":"component:///"},"metadata":{},"sourceType":"script"}