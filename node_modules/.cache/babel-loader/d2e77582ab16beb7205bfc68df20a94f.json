{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.connectSpeakActivity = exports.default = void 0;\n\nvar _botframeworkWebchatApi = require(\"botframework-webchat-api\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactSay = _interopRequireWildcard(require(\"react-say\"));\n\nvar _connectToWebChat = _interopRequireDefault(require(\"../connectToWebChat\"));\n\nvar _SayAlt = _interopRequireDefault(require(\"./SayAlt\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar useMarkActivityAsSpoken = _botframeworkWebchatApi.hooks.useMarkActivityAsSpoken,\n    useStyleOptions = _botframeworkWebchatApi.hooks.useStyleOptions,\n    useVoiceSelector = _botframeworkWebchatApi.hooks.useVoiceSelector; // TODO: [P4] Consider moving this feature into BasicActivity\n//       And it has better DOM position for showing visual spoken text\n// TODO: [P3] We should add a \"spoken\" or \"speakState\" flag to indicate whether this activity is going to speak, or spoken\n\nvar connectSpeakActivity = function connectSpeakActivity() {\n  for (var _len = arguments.length, selectors = new Array(_len), _key = 0; _key < _len; _key++) {\n    selectors[_key] = arguments[_key];\n  }\n\n  return _connectToWebChat.default.apply(void 0, [function (_ref, _ref2) {\n    var language = _ref.language,\n        markActivity = _ref.markActivity,\n        _selectVoice = _ref.selectVoice;\n    var activity = _ref2.activity;\n    return {\n      language: language,\n      markAsSpoken: function markAsSpoken() {\n        return markActivity(activity, 'speak', false);\n      },\n      selectVoice: function selectVoice(voices) {\n        return _selectVoice(voices, activity);\n      }\n    };\n  }].concat(selectors));\n};\n\nexports.connectSpeakActivity = connectSpeakActivity;\n\nvar Speak = function Speak(_ref3) {\n  var activity = _ref3.activity;\n\n  var _useStyleOptions = useStyleOptions(),\n      _useStyleOptions2 = _slicedToArray(_useStyleOptions, 1),\n      showSpokenText = _useStyleOptions2[0].showSpokenText;\n\n  var markActivityAsSpoken = useMarkActivityAsSpoken();\n  var selectVoice = useVoiceSelector(activity);\n  var markAsSpoken = (0, _react.useCallback)(function () {\n    markActivityAsSpoken(activity);\n  }, [activity, markActivityAsSpoken]);\n  var singleLine = (0, _react.useMemo)(function () {\n    var _activity$attachments = activity.attachments,\n        attachments = _activity$attachments === void 0 ? [] : _activity$attachments,\n        speak = activity.speak,\n        text = activity.text;\n    return !!activity && [speak || text].concat(_toConsumableArray(attachments.filter(function (_ref4) {\n      var contentType = _ref4.contentType;\n      return contentType === 'application/vnd.microsoft.card.adaptive';\n    }).map(function (_ref5) {\n      var _ref5$content = _ref5.content;\n      _ref5$content = _ref5$content === void 0 ? {} : _ref5$content;\n      var speak = _ref5$content.speak;\n      return speak;\n    }))).filter(function (line) {\n      return line;\n    }).join('\\r\\n');\n  }, [activity]);\n  var _activity$channelData = activity.channelData;\n  _activity$channelData = _activity$channelData === void 0 ? {} : _activity$channelData;\n  var speechSynthesisUtterance = _activity$channelData.speechSynthesisUtterance;\n  return !!activity && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, speechSynthesisUtterance ? /*#__PURE__*/_react.default.createElement(_reactSay.SayUtterance, {\n    onEnd: markAsSpoken,\n    onError: markAsSpoken,\n    utterance: speechSynthesisUtterance\n  }) : /*#__PURE__*/_react.default.createElement(_reactSay.default, {\n    onEnd: markAsSpoken,\n    onError: markAsSpoken,\n    text: singleLine,\n    voice: selectVoice\n  }), !!showSpokenText && /*#__PURE__*/_react.default.createElement(_SayAlt.default, {\n    speak: singleLine,\n    voice: selectVoice\n  }));\n};\n\nSpeak.propTypes = {\n  activity: _propTypes.default.shape({\n    attachments: _propTypes.default.arrayOf(_propTypes.default.shape({\n      speak: _propTypes.default.string,\n      subtitle: _propTypes.default.string,\n      text: _propTypes.default.string,\n      title: _propTypes.default.string\n    })),\n    channelData: _propTypes.default.shape({\n      speechSynthesisUtterance: _propTypes.default.any\n    }),\n    speak: _propTypes.default.string,\n    text: _propTypes.default.string\n  }).isRequired\n};\nvar _default = Speak;\nexports.default = _default;","map":{"version":3,"sources":["../../src/Activity/Speak.js"],"names":["useMarkActivityAsSpoken","useStyleOptions","useVoiceSelector","hooks","connectSpeakActivity","selectors","language","markActivity","selectVoice","activity","markAsSpoken","Speak","showSpokenText","markActivityAsSpoken","singleLine","attachments","speak","text","contentType","speechSynthesisUtterance","PropTypes","subtitle","title","string","channelData","any","isRequired"],"mappings":"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","sourcesContent":["import { hooks } from 'botframework-webchat-api';\nimport PropTypes from 'prop-types';\nimport React, { useCallback, useMemo } from 'react';\nimport Say, { SayUtterance } from 'react-say';\n\nimport connectToWebChat from '../connectToWebChat';\nimport SayAlt from './SayAlt';\n\nconst { useMarkActivityAsSpoken, useStyleOptions, useVoiceSelector } = hooks;\n\n// TODO: [P4] Consider moving this feature into BasicActivity\n//       And it has better DOM position for showing visual spoken text\n\n// TODO: [P3] We should add a \"spoken\" or \"speakState\" flag to indicate whether this activity is going to speak, or spoken\nconst connectSpeakActivity = (...selectors) =>\n  connectToWebChat(\n    ({ language, markActivity, selectVoice }, { activity }) => ({\n      language,\n      markAsSpoken: () => markActivity(activity, 'speak', false),\n      selectVoice: voices => selectVoice(voices, activity)\n    }),\n    ...selectors\n  );\n\nconst Speak = ({ activity }) => {\n  const [{ showSpokenText }] = useStyleOptions();\n  const markActivityAsSpoken = useMarkActivityAsSpoken();\n  const selectVoice = useVoiceSelector(activity);\n\n  const markAsSpoken = useCallback(() => {\n    markActivityAsSpoken(activity);\n  }, [activity, markActivityAsSpoken]);\n\n  const singleLine = useMemo(() => {\n    const { attachments = [], speak, text } = activity;\n\n    return (\n      !!activity &&\n      [\n        speak || text,\n        ...attachments\n          .filter(({ contentType }) => contentType === 'application/vnd.microsoft.card.adaptive')\n          .map(({ content: { speak } = {} }) => speak)\n      ]\n        .filter(line => line)\n        .join('\\r\\n')\n    );\n  }, [activity]);\n\n  const { channelData: { speechSynthesisUtterance } = {} } = activity;\n\n  return (\n    !!activity && (\n      <React.Fragment>\n        {speechSynthesisUtterance ? (\n          <SayUtterance onEnd={markAsSpoken} onError={markAsSpoken} utterance={speechSynthesisUtterance} />\n        ) : (\n          <Say onEnd={markAsSpoken} onError={markAsSpoken} text={singleLine} voice={selectVoice} />\n        )}\n        {!!showSpokenText && <SayAlt speak={singleLine} voice={selectVoice} />}\n      </React.Fragment>\n    )\n  );\n};\n\nSpeak.propTypes = {\n  activity: PropTypes.shape({\n    attachments: PropTypes.arrayOf(\n      PropTypes.shape({\n        speak: PropTypes.string,\n        subtitle: PropTypes.string,\n        text: PropTypes.string,\n        title: PropTypes.string\n      })\n    ),\n    channelData: PropTypes.shape({\n      speechSynthesisUtterance: PropTypes.any\n    }),\n    speak: PropTypes.string,\n    text: PropTypes.string\n  }).isRequired\n};\n\nexport default Speak;\n\nexport { connectSpeakActivity };\n"],"sourceRoot":"component:///"},"metadata":{},"sourceType":"script"}