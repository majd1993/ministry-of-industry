{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Exports_1 = require(\"../common/Exports\");\n\nvar ConsoleLoggingListener =\n/** @class */\nfunction () {\n  function ConsoleLoggingListener(logLevelFilter) {\n    var _this = this;\n\n    if (logLevelFilter === void 0) {\n      logLevelFilter = Exports_1.EventType.Warning;\n    }\n\n    this.onEvent = function (event) {\n      if (event.eventType >= _this.privLogLevelFilter) {\n        var log = _this.toString(event);\n\n        switch (event.eventType) {\n          case Exports_1.EventType.Debug:\n            // tslint:disable-next-line:no-console\n            console.debug(log);\n            break;\n\n          case Exports_1.EventType.Info:\n            // tslint:disable-next-line:no-console\n            console.info(log);\n            break;\n\n          case Exports_1.EventType.Warning:\n            // tslint:disable-next-line:no-console\n            console.warn(log);\n            break;\n\n          case Exports_1.EventType.Error:\n            // tslint:disable-next-line:no-console\n            console.error(log);\n            break;\n\n          default:\n            // tslint:disable-next-line:no-console\n            console.log(log);\n            break;\n        }\n      }\n    };\n\n    this.toString = function (event) {\n      var logFragments = [\"\" + event.EventTime, \"\" + event.Name];\n\n      for (var prop in event) {\n        if (prop && event.hasOwnProperty(prop) && prop !== \"eventTime\" && prop !== \"eventType\" && prop !== \"eventId\" && prop !== \"name\" && prop !== \"constructor\") {\n          var value = event[prop];\n          var valueToLog = \"<NULL>\";\n\n          if (value !== undefined && value !== null) {\n            if (typeof value === \"number\" || typeof value === \"string\") {\n              valueToLog = value.toString();\n            } else {\n              valueToLog = JSON.stringify(value);\n            }\n          }\n\n          logFragments.push(prop + \": \" + valueToLog);\n        }\n      }\n\n      return logFragments.join(\" | \");\n    };\n\n    this.privLogLevelFilter = logLevelFilter;\n  }\n\n  return ConsoleLoggingListener;\n}();\n\nexports.ConsoleLoggingListener = ConsoleLoggingListener;","map":{"version":3,"sources":["src/common.browser/ConsoleLoggingListener.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;AAEA,IAAA,SAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAEA,IAAA,sBAAA;AAAA;AAAA,YAAA;AAGI,WAAA,sBAAA,CAAmB,cAAnB,EAAgE;AAAhE,QAAA,KAAA,GAAA,IAAA;;AAAmB,QAAA,cAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,cAAA,GAA4B,SAAA,CAAA,SAAA,CAAU,OAAtC;AAA6C;;AAIzD,SAAA,OAAA,GAAU,UAAC,KAAD,EAAqB;AAClC,UAAI,KAAK,CAAC,SAAN,IAAmB,KAAI,CAAC,kBAA5B,EAAgD;AAC5C,YAAM,GAAG,GAAG,KAAI,CAAC,QAAL,CAAc,KAAd,CAAZ;;AAEA,gBAAQ,KAAK,CAAC,SAAd;AACI,eAAK,SAAA,CAAA,SAAA,CAAU,KAAf;AACI;AACA,YAAA,OAAO,CAAC,KAAR,CAAc,GAAd;AACA;;AACJ,eAAK,SAAA,CAAA,SAAA,CAAU,IAAf;AACI;AACA,YAAA,OAAO,CAAC,IAAR,CAAa,GAAb;AACA;;AACJ,eAAK,SAAA,CAAA,SAAA,CAAU,OAAf;AACI;AACA,YAAA,OAAO,CAAC,IAAR,CAAa,GAAb;AACA;;AACJ,eAAK,SAAA,CAAA,SAAA,CAAU,KAAf;AACI;AACA,YAAA,OAAO,CAAC,KAAR,CAAc,GAAd;AACA;;AACJ;AACI;AACA,YAAA,OAAO,CAAC,GAAR,CAAY,GAAZ;AACA;AApBR;AAsBH;AACJ,KA3BM;;AA6BC,SAAA,QAAA,GAAW,UAAC,KAAD,EAAW;AAC1B,UAAM,YAAY,GAAG,CACjB,KAAG,KAAK,CAAC,SADQ,EAEjB,KAAG,KAAK,CAAC,IAFQ,CAArB;;AAKA,WAAK,IAAM,IAAX,IAAmB,KAAnB,EAA0B;AACtB,YAAI,IAAI,IAAI,KAAK,CAAC,cAAN,CAAqB,IAArB,CAAR,IACA,IAAI,KAAK,WADT,IACwB,IAAI,KAAK,WADjC,IAEA,IAAI,KAAK,SAFT,IAEsB,IAAI,KAAK,MAF/B,IAGA,IAAI,KAAK,aAHb,EAG4B;AACxB,cAAM,KAAK,GAAG,KAAK,CAAC,IAAD,CAAnB;AACA,cAAI,UAAU,GAAG,QAAjB;;AACA,cAAI,KAAK,KAAK,SAAV,IAAuB,KAAK,KAAK,IAArC,EAA2C;AACvC,gBAAI,OAAQ,KAAR,KAAmB,QAAnB,IAA+B,OAAQ,KAAR,KAAmB,QAAtD,EAAgE;AAC5D,cAAA,UAAU,GAAG,KAAK,CAAC,QAAN,EAAb;AACH,aAFD,MAEO;AACH,cAAA,UAAU,GAAG,IAAI,CAAC,SAAL,CAAe,KAAf,CAAb;AACH;AACJ;;AAED,UAAA,YAAY,CAAC,IAAb,CAAqB,IAAI,GAAA,IAAJ,GAAS,UAA9B;AACH;AAEJ;;AAED,aAAO,YAAY,CAAC,IAAb,CAAkB,KAAlB,CAAP;AACH,KA3BO;;AAhCJ,SAAK,kBAAL,GAA0B,cAA1B;AACH;;AA2DL,SAAA,sBAAA;AAAC,CAhED,EAAA;;AAAa,OAAA,CAAA,sBAAA,GAAA,sBAAA","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { EventType, IEventListener, PlatformEvent } from \"../common/Exports\";\r\n\r\nexport class ConsoleLoggingListener implements IEventListener<PlatformEvent> {\r\n    private privLogLevelFilter: EventType;\r\n\r\n    public constructor(logLevelFilter: EventType = EventType.Warning) {\r\n        this.privLogLevelFilter = logLevelFilter;\r\n    }\r\n\r\n    public onEvent = (event: PlatformEvent): void => {\r\n        if (event.eventType >= this.privLogLevelFilter) {\r\n            const log = this.toString(event);\r\n\r\n            switch (event.eventType) {\r\n                case EventType.Debug:\r\n                    // tslint:disable-next-line:no-console\r\n                    console.debug(log);\r\n                    break;\r\n                case EventType.Info:\r\n                    // tslint:disable-next-line:no-console\r\n                    console.info(log);\r\n                    break;\r\n                case EventType.Warning:\r\n                    // tslint:disable-next-line:no-console\r\n                    console.warn(log);\r\n                    break;\r\n                case EventType.Error:\r\n                    // tslint:disable-next-line:no-console\r\n                    console.error(log);\r\n                    break;\r\n                default:\r\n                    // tslint:disable-next-line:no-console\r\n                    console.log(log);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private toString = (event: any): string => {\r\n        const logFragments = [\r\n            `${event.EventTime}`,\r\n            `${event.Name}`,\r\n        ];\r\n\r\n        for (const prop in event) {\r\n            if (prop && event.hasOwnProperty(prop) &&\r\n                prop !== \"eventTime\" && prop !== \"eventType\" &&\r\n                prop !== \"eventId\" && prop !== \"name\" &&\r\n                prop !== \"constructor\") {\r\n                const value = event[prop];\r\n                let valueToLog = \"<NULL>\";\r\n                if (value !== undefined && value !== null) {\r\n                    if (typeof (value) === \"number\" || typeof (value) === \"string\") {\r\n                        valueToLog = value.toString();\r\n                    } else {\r\n                        valueToLog = JSON.stringify(value);\r\n                    }\r\n                }\r\n\r\n                logFragments.push(`${prop}: ${valueToLog}`);\r\n            }\r\n\r\n        }\r\n\r\n        return logFragments.join(\" | \");\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}