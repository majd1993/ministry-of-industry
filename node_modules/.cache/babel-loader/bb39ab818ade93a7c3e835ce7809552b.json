{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @module botframework-streaming\n */\n\n/**\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nvar httpContentStream_1 = require(\"./httpContentStream\");\n\nvar subscribableStream_1 = require(\"./subscribableStream\");\n\nvar StreamingRequest =\n/** @class */\nfunction () {\n  function StreamingRequest() {\n    /**\n     * List of associated streams.\n     */\n    this.streams = [];\n  }\n  /**\n   * Creates a streaming request with the passed in method, path, and body.\n   *\n   * @param method The HTTP verb to use for this request.\n   * @param path Optional path where the resource can be found on the remote server.\n   * @param body Optional body to send to the remote server.\n   * @returns On success returns a streaming request with appropriate status code and body.\n   */\n\n\n  StreamingRequest.create = function (method, path, body) {\n    var request = new StreamingRequest();\n    request.verb = method;\n    request.path = path;\n\n    if (body) {\n      request.setBody(body);\n    }\n\n    return request;\n  };\n  /**\n   * Adds a new stream attachment to this streaming request.\n   *\n   * @param content The Http content to include in the new stream attachment.\n   */\n\n\n  StreamingRequest.prototype.addStream = function (content) {\n    if (!content) {\n      throw new Error('Argument Undefined Exception: content undefined.');\n    }\n\n    this.streams.push(new httpContentStream_1.HttpContentStream(content));\n  };\n  /**\n   * Sets the contents of the body of this streamingRequest.\n   *\n   * @param body The JSON text to write to the body of the streamingRequest.\n   */\n\n\n  StreamingRequest.prototype.setBody = function (body) {\n    if (typeof body === 'string') {\n      var stream = new subscribableStream_1.SubscribableStream();\n      stream.write(body, 'utf8');\n      this.addStream(new httpContentStream_1.HttpContent({\n        type: 'application/json; charset=utf-8',\n        contentLength: stream.length\n      }, stream));\n    } else if (typeof body === 'object') {\n      this.addStream(body);\n    }\n  };\n\n  return StreamingRequest;\n}();\n\nexports.StreamingRequest = StreamingRequest;","map":{"version":3,"sources":["../src/streamingRequest.ts"],"names":[],"mappings":";;;;;AAAA;;AAEG;;AACH;;;AAGG;;AACH,IAAA,mBAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AACA,IAAA,oBAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AAEA,IAAA,gBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,gBAAA,GAAA;AAYI;;AAEG;AACI,SAAA,OAAA,GAA+B,EAA/B;AAoDV;AAlDG;;;;;;;AAOG;;;AACW,EAAA,gBAAA,CAAA,MAAA,GAAd,UAAqB,MAArB,EAAqC,IAArC,EAAoD,IAApD,EAAsE;AAClE,QAAI,OAAO,GAAG,IAAI,gBAAJ,EAAd;AACA,IAAA,OAAO,CAAC,IAAR,GAAe,MAAf;AACA,IAAA,OAAO,CAAC,IAAR,GAAe,IAAf;;AACA,QAAI,IAAJ,EAAU;AACN,MAAA,OAAO,CAAC,OAAR,CAAgB,IAAhB;AACH;;AAED,WAAO,OAAP;AACH,GATa;AAWd;;;;AAIG;;;AACI,EAAA,gBAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,OAAjB,EAAqC;AACjC,QAAI,CAAC,OAAL,EAAc;AACV,YAAM,IAAI,KAAJ,CAAU,kDAAV,CAAN;AACH;;AAED,SAAK,OAAL,CAAa,IAAb,CAAkB,IAAI,mBAAA,CAAA,iBAAJ,CAAsB,OAAtB,CAAlB;AACH,GANM;AAQP;;;;AAIG;;;AACI,EAAA,gBAAA,CAAA,SAAA,CAAA,OAAA,GAAP,UAAe,IAAf,EAAwB;AACpB,QAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B;AAC1B,UAAI,MAAM,GAAG,IAAI,oBAAA,CAAA,kBAAJ,EAAb;AACA,MAAA,MAAM,CAAC,KAAP,CAAa,IAAb,EAAmB,MAAnB;AACA,WAAK,SAAL,CAAe,IAAI,mBAAA,CAAA,WAAJ,CAAgB;AAC3B,QAAA,IAAI,EAAE,iCADqB;AAE3B,QAAA,aAAa,EAAE,MAAM,CAAC;AAFK,OAAhB,EAIf,MAJe,CAAf;AAKH,KARD,MAQO,IAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B;AACjC,WAAK,SAAL,CAAe,IAAf;AACH;AACJ,GAZM;;AAaX,SAAA,gBAAA;AAAC,CAnED,EAAA;;AAAa,OAAA,CAAA,gBAAA,GAAA,gBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @module botframework-streaming\n */\n/**\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nvar httpContentStream_1 = require(\"./httpContentStream\");\nvar subscribableStream_1 = require(\"./subscribableStream\");\nvar StreamingRequest = /** @class */ (function () {\n    function StreamingRequest() {\n        /**\n         * List of associated streams.\n         */\n        this.streams = [];\n    }\n    /**\n     * Creates a streaming request with the passed in method, path, and body.\n     *\n     * @param method The HTTP verb to use for this request.\n     * @param path Optional path where the resource can be found on the remote server.\n     * @param body Optional body to send to the remote server.\n     * @returns On success returns a streaming request with appropriate status code and body.\n     */\n    StreamingRequest.create = function (method, path, body) {\n        var request = new StreamingRequest();\n        request.verb = method;\n        request.path = path;\n        if (body) {\n            request.setBody(body);\n        }\n        return request;\n    };\n    /**\n     * Adds a new stream attachment to this streaming request.\n     *\n     * @param content The Http content to include in the new stream attachment.\n     */\n    StreamingRequest.prototype.addStream = function (content) {\n        if (!content) {\n            throw new Error('Argument Undefined Exception: content undefined.');\n        }\n        this.streams.push(new httpContentStream_1.HttpContentStream(content));\n    };\n    /**\n     * Sets the contents of the body of this streamingRequest.\n     *\n     * @param body The JSON text to write to the body of the streamingRequest.\n     */\n    StreamingRequest.prototype.setBody = function (body) {\n        if (typeof body === 'string') {\n            var stream = new subscribableStream_1.SubscribableStream();\n            stream.write(body, 'utf8');\n            this.addStream(new httpContentStream_1.HttpContent({\n                type: 'application/json; charset=utf-8',\n                contentLength: stream.length\n            }, stream));\n        }\n        else if (typeof body === 'object') {\n            this.addStream(body);\n        }\n    };\n    return StreamingRequest;\n}());\nexports.StreamingRequest = StreamingRequest;\n//# sourceMappingURL=streamingRequest.js.map"]},"metadata":{},"sourceType":"script"}