{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = fetchJSON;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _nodeFetch = _interopRequireDefault(require(\"node-fetch\"));\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // Helper function for fetching network resource as JSON\n\n\nfunction fetchJSON(_x, _x2) {\n  return _fetchJSON.apply(this, arguments);\n}\n\nfunction _fetchJSON() {\n  _fetchJSON = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(url, options) {\n    var res;\n    return _regenerator.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return (0, _nodeFetch.default)(url, _objectSpread(_objectSpread({}, options), {}, {\n              headers: _objectSpread(_objectSpread({}, options.headers), {}, {\n                accept: 'application/json'\n              })\n            }));\n\n          case 2:\n            res = _context.sent;\n\n            if (res.ok) {\n              _context.next = 5;\n              break;\n            }\n\n            throw new Error(\"Failed to fetch JSON from server due to \".concat(res.status));\n\n          case 5:\n            return _context.abrupt(\"return\", res.json());\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchJSON.apply(this, arguments);\n}","map":{"version":3,"sources":["../../src/utils/fetchJSON.js"],"names":["fetchJSON","res","headers","options","accept"],"mappings":";;;;;;;;;;;;;;;AAAA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAEA;;;SAC8BA,S;;;;;uFAAf,SAAA,OAAA,CAAA,GAAA,EAAA,OAAA,EAAA;AAAA,QAAA,GAAA;AAAA,WAAA,YAAA,CAAA,OAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,aAAA,CAAA,EAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,eAAA,CAAA;AAAA,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,mBACK,CAAA,GAAA,UAAA,CAAA,OAAA,EAAA,GAAA,EAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,OAAA,CAAA,EAAA,EAAA,EAAA;AAEhBE,cAAAA,OAAO,EAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EACFC,OAAO,CADL,OAAA,CAAA,EAAA,EAAA,EAAA;AAELC,gBAAAA,MAAM,EAAE;AAFH,eAAA;AAFS,aAAA,CAAA,CADL;;AAAA,eAAA,CAAA;AACPH,YAAAA,GADO,GAAA,QAAA,CAAA,IACPA;;AADO,gBASRA,GAAG,CATK,EAAA,EAAA;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,kBAUL,IAAA,KAAA,CAAA,2CAAA,MAAA,CAAqDA,GAAG,CAVnD,MAUL,CAAA,CAVK;;AAAA,eAAA,CAAA;AAAA,mBAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAaNA,GAAG,CAbG,IAaNA,EAbM,CAAA;;AAAA,eAAA,CAAA;AAAA,eAAA,KAAA;AAAA,mBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,KAAA,EAAA,OAAA,CAAA","sourcesContent":["import fetch from 'node-fetch';\n\n// Helper function for fetching network resource as JSON\nexport default async function fetchJSON(url, options) {\n  const res = await fetch(url, {\n    ...options,\n    headers: {\n      ...options.headers,\n      accept: 'application/json'\n    }\n  });\n\n  if (!res.ok) {\n    throw new Error(`Failed to fetch JSON from server due to ${res.status}`);\n  }\n\n  return res.json();\n}\n"],"sourceRoot":"directlinespeech:///"},"metadata":{},"sourceType":"script"}