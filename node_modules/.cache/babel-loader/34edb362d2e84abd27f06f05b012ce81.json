{"ast":null,"code":"import _classCallCheck from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { RecognizerConfig } from \"../../common.speech/Exports\";\nimport { Contracts } from \"../../sdk/Contracts\";\nimport { Recognizer } from \"../../sdk/Exports\";\nimport { ConversationConnectionFactory } from \"./ConversationConnectionFactory\";\nimport { ConversationServiceAdapter } from \"./ConversationServiceAdapter\";\nimport { ConversationTranslatorCommandTypes, ConversationTranslatorMessageTypes } from \"./ConversationTranslatorInterfaces\";\nimport { PromiseToEmptyCallback } from \"./ConversationUtils\";\n/**\n * Sends messages to the Conversation Translator websocket and listens for incoming events containing websocket messages.\n * Based off the recognizers in the SDK folder.\n */\n\nexport var ConversationTranslatorRecognizer = /*#__PURE__*/function (_Recognizer) {\n  _inherits(ConversationTranslatorRecognizer, _Recognizer);\n\n  var _super = _createSuper(ConversationTranslatorRecognizer);\n\n  function ConversationTranslatorRecognizer(speechConfig, audioConfig) {\n    var _this;\n\n    _classCallCheck(this, ConversationTranslatorRecognizer);\n\n    var serviceConfigImpl = speechConfig;\n    Contracts.throwIfNull(serviceConfigImpl, \"speechConfig\");\n    _this = _super.call(this, audioConfig, serviceConfigImpl.properties, new ConversationConnectionFactory());\n    _this.privIsDisposed = false;\n    _this.privProperties = serviceConfigImpl.properties.clone();\n    return _this;\n  }\n\n  _createClass(ConversationTranslatorRecognizer, [{\n    key: \"conversation\",\n    set: function set(value) {\n      this.privRoom = value;\n    }\n    /**\n     * Return the speech language used by the recognizer\n     */\n\n  }, {\n    key: \"speechRecognitionLanguage\",\n    get: function get() {\n      return this.privSpeechRecognitionLanguage;\n    }\n    /**\n     * Return the properties for the recognizer\n     */\n\n  }, {\n    key: \"properties\",\n    get: function get() {\n      return this.privProperties;\n    }\n  }, {\n    key: \"isDisposed\",\n    value: function isDisposed() {\n      return this.privIsDisposed;\n    }\n    /**\n     * Connect to the recognizer\n     * @param token\n     */\n\n  }, {\n    key: \"connect\",\n    value: function connect(token, cb, err) {\n      try {\n        Contracts.throwIfDisposed(this.privIsDisposed);\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\n        this.privReco.conversationTranslatorToken = token;\n        this.privReco.connectAsync(cb, err);\n      } catch (error) {\n        if (!!err) {\n          if (error instanceof Error) {\n            var typedError = error;\n            err(typedError.name + \": \" + typedError.message);\n          } else {\n            err(error);\n          }\n        }\n      }\n    }\n    /**\n     * Disconnect from the recognizer\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect(cb, err) {\n      try {\n        Contracts.throwIfDisposed(this.privIsDisposed);\n        this.privRoom = undefined;\n        this.privReco.disconnectAsync(cb, err);\n      } catch (error) {\n        if (!!err) {\n          if (error instanceof Error) {\n            var typedError = error;\n            err(typedError.name + \": \" + typedError.message);\n          } else {\n            err(error);\n          }\n        } // Destroy the recognizer.\n\n\n        this.dispose(true);\n      }\n    }\n    /**\n     * Send the text message command to the websocket\n     * @param conversationId\n     * @param participantId\n     * @param message\n     */\n\n  }, {\n    key: \"sendMessageRequest\",\n    value: function sendMessageRequest(message, cb, err) {\n      try {\n        Contracts.throwIfDisposed(this.privIsDisposed);\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\n        Contracts.throwIfNullOrWhitespace(message, \"message\");\n        var command = {\n          // tslint:disable-next-line: object-literal-shorthand\n          participantId: this.privRoom.participantId,\n          roomId: this.privRoom.roomId,\n          text: message,\n          type: ConversationTranslatorMessageTypes.instantMessage\n        };\n        this.sendMessage(JSON.stringify(command), cb, err);\n      } catch (error) {\n        if (!!err) {\n          if (error instanceof Error) {\n            var typedError = error;\n            err(typedError.name + \": \" + typedError.message);\n          } else {\n            err(error);\n          }\n        } // Destroy the recognizer.\n\n\n        this.dispose(true);\n      }\n    }\n    /**\n     * Send the lock conversation command to the websocket\n     * @param conversationId\n     * @param participantId\n     * @param isLocked\n     */\n\n  }, {\n    key: \"sendLockRequest\",\n    value: function sendLockRequest(isLocked, cb, err) {\n      try {\n        Contracts.throwIfDisposed(this.privIsDisposed);\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\n        Contracts.throwIfNullOrUndefined(isLocked, \"isLocked\");\n        var command = {\n          command: ConversationTranslatorCommandTypes.setLockState,\n          // tslint:disable-next-line: object-literal-shorthand\n          participantId: this.privRoom.participantId,\n          roomid: this.privRoom.roomId,\n          type: ConversationTranslatorMessageTypes.participantCommand,\n          value: isLocked\n        };\n        this.sendMessage(JSON.stringify(command), cb, err);\n      } catch (error) {\n        if (!!err) {\n          if (error instanceof Error) {\n            var typedError = error;\n            err(typedError.name + \": \" + typedError.message);\n          } else {\n            err(error);\n          }\n        } // Destroy the recognizer.\n\n\n        this.dispose(true);\n      }\n    }\n    /**\n     * Send the mute all participants command to the websocket\n     * @param conversationId\n     * @param participantId\n     * @param isMuted\n     */\n\n  }, {\n    key: \"sendMuteAllRequest\",\n    value: function sendMuteAllRequest(isMuted, cb, err) {\n      try {\n        Contracts.throwIfDisposed(this.privIsDisposed);\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\n        Contracts.throwIfNullOrUndefined(isMuted, \"isMuted\");\n        var command = {\n          command: ConversationTranslatorCommandTypes.setMuteAll,\n          // tslint:disable-next-line: object-literal-shorthand\n          participantId: this.privRoom.participantId,\n          roomid: this.privRoom.roomId,\n          type: ConversationTranslatorMessageTypes.participantCommand,\n          value: isMuted\n        };\n        this.sendMessage(JSON.stringify(command), cb, err);\n      } catch (error) {\n        if (!!err) {\n          if (error instanceof Error) {\n            var typedError = error;\n            err(typedError.name + \": \" + typedError.message);\n          } else {\n            err(error);\n          }\n        } // Destroy the recognizer.\n\n\n        this.dispose(true);\n      }\n    }\n    /**\n     * Send the mute participant command to the websocket\n     * @param conversationId\n     * @param participantId\n     * @param isMuted\n     */\n\n  }, {\n    key: \"sendMuteRequest\",\n    value: function sendMuteRequest(participantId, isMuted, cb, err) {\n      try {\n        Contracts.throwIfDisposed(this.privIsDisposed);\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\n        Contracts.throwIfNullOrUndefined(isMuted, \"isMuted\");\n        var command = {\n          command: ConversationTranslatorCommandTypes.setMute,\n          // tslint:disable-next-line: object-literal-shorthand\n          participantId: participantId,\n          roomid: this.privRoom.roomId,\n          type: ConversationTranslatorMessageTypes.participantCommand,\n          value: isMuted\n        };\n        this.sendMessage(JSON.stringify(command), cb, err);\n      } catch (error) {\n        if (!!err) {\n          if (error instanceof Error) {\n            var typedError = error;\n            err(typedError.name + \": \" + typedError.message);\n          } else {\n            err(error);\n          }\n        } // Destroy the recognizer.\n\n\n        this.dispose(true);\n      }\n    }\n    /**\n     * Send the eject participant command to the websocket\n     * @param conversationId\n     * @param participantId\n     */\n\n  }, {\n    key: \"sendEjectRequest\",\n    value: function sendEjectRequest(participantId, cb, err) {\n      try {\n        Contracts.throwIfDisposed(this.privIsDisposed);\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\n        var command = {\n          command: ConversationTranslatorCommandTypes.ejectParticipant,\n          // tslint:disable-next-line: object-literal-shorthand\n          participantId: participantId,\n          roomid: this.privRoom.roomId,\n          type: ConversationTranslatorMessageTypes.participantCommand\n        };\n        this.sendMessage(JSON.stringify(command), cb, err);\n\n        if (!!cb) {\n          try {\n            cb();\n          } catch (e) {\n            if (!!err) {\n              err(e);\n            }\n          }\n        }\n      } catch (error) {\n        if (!!err) {\n          if (error instanceof Error) {\n            var typedError = error;\n            err(typedError.name + \": \" + typedError.message);\n          } else {\n            err(error);\n          }\n        } // Destroy the recognizer.\n\n\n        this.dispose(true);\n      }\n    }\n    /**\n     * Send the mute participant command to the websocket\n     * @param conversationId\n     * @param participantId\n     * @param isMuted\n     */\n\n  }, {\n    key: \"sendChangeNicknameRequest\",\n    value: function sendChangeNicknameRequest(nickname, cb, err) {\n      try {\n        Contracts.throwIfDisposed(this.privIsDisposed);\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\n        Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\n        var command = {\n          command: ConversationTranslatorCommandTypes.changeNickname,\n          nickname: nickname,\n          // tslint:disable-next-line: object-literal-shorthand\n          participantId: this.privRoom.participantId,\n          roomid: this.privRoom.roomId,\n          type: ConversationTranslatorMessageTypes.participantCommand,\n          value: nickname\n        };\n        this.sendMessage(JSON.stringify(command), cb, err);\n      } catch (error) {\n        if (!!err) {\n          if (error instanceof Error) {\n            var typedError = error;\n            err(typedError.name + \": \" + typedError.message);\n          } else {\n            err(error);\n          }\n        } // Destroy the recognizer.\n\n\n        this.dispose(true);\n      }\n    }\n    /**\n     * Close and dispose the recognizer\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n      this.dispose(true);\n    }\n    /**\n     * Dispose the recognizer\n     * @param disposing\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose(disposing) {\n      if (this.privIsDisposed) {\n        return;\n      }\n\n      if (disposing) {\n        this.privIsDisposed = true;\n\n        _get(_getPrototypeOf(ConversationTranslatorRecognizer.prototype), \"dispose\", this).call(this, disposing);\n      }\n    }\n    /**\n     * Create the config for the recognizer\n     * @param speechConfig\n     */\n\n  }, {\n    key: \"createRecognizerConfig\",\n    value: function createRecognizerConfig(speechConfig) {\n      return new RecognizerConfig(speechConfig, this.privProperties);\n    }\n    /**\n     * Create the service recognizer.\n     * The audio source is redundnant here but is required by the implementation.\n     * @param authentication\n     * @param connectionFactory\n     * @param audioConfig\n     * @param recognizerConfig\n     */\n\n  }, {\n    key: \"createServiceRecognizer\",\n    value: function createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {\n      var audioSource = audioConfig;\n      return new ConversationServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\n    }\n  }, {\n    key: \"sendMessage\",\n    value: function sendMessage(msg, cb, err) {\n      var withAsync = this.privReco;\n      PromiseToEmptyCallback(withAsync.sendMessageAsync(msg), cb, err);\n    }\n  }]);\n\n  return ConversationTranslatorRecognizer;\n}(Recognizer);","map":{"version":3,"sources":["src/common.speech/Transcription/ConversationTranslatorRecognizer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig\r\n} from \"../../common.speech/Exports\";\r\nimport { AudioConfigImpl } from \"../../sdk/Audio/AudioConfig\";\r\nimport { Contracts } from \"../../sdk/Contracts\";\r\nimport { AudioConfig,\r\n    ConversationExpirationEventArgs,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    PropertyCollection,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechTranslationConfig} from \"../../sdk/Exports\";\r\nimport { SpeechTranslationConfigImpl } from \"../../sdk/SpeechTranslationConfig\";\r\nimport { Callback } from \"../../sdk/Transcription/IConversation\";\r\nimport { ConversationConnectionFactory } from \"./ConversationConnectionFactory\";\r\nimport { ConversationServiceAdapter } from \"./ConversationServiceAdapter\";\r\nimport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs } from \"./ConversationTranslatorEventArgs\";\r\nimport {\r\n    ConversationTranslatorCommandTypes,\r\n    ConversationTranslatorMessageTypes,\r\n    IChangeNicknameCommand,\r\n    IConversationTranslatorRecognizer,\r\n    IEjectParticipantCommand,\r\n    IInstantMessageCommand,\r\n    IInternalConversation,\r\n    ILockConversationCommand,\r\n    IMuteAllCommand,\r\n    IMuteCommand} from \"./ConversationTranslatorInterfaces\";\r\nimport { PromiseToEmptyCallback } from \"./ConversationUtils\";\r\n\r\n/**\r\n * Sends messages to the Conversation Translator websocket and listens for incoming events containing websocket messages.\r\n * Based off the recognizers in the SDK folder.\r\n */\r\nexport class ConversationTranslatorRecognizer extends Recognizer implements IConversationTranslatorRecognizer {\r\n\r\n    private privIsDisposed: boolean;\r\n    private privSpeechRecognitionLanguage: string;\r\n    private privRoom: IInternalConversation;\r\n\r\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig) {\r\n        const serviceConfigImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(serviceConfigImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, serviceConfigImpl.properties, new ConversationConnectionFactory());\r\n\r\n        this.privIsDisposed = false;\r\n        this.privProperties = serviceConfigImpl.properties.clone();\r\n\r\n    }\r\n\r\n    public canceled: (sender: IConversationTranslatorRecognizer, event: ConversationTranslationCanceledEventArgs) => void;\r\n    public conversationExpiration: (sender: IConversationTranslatorRecognizer, event: ConversationExpirationEventArgs) => void;\r\n    public lockRoomCommandReceived: (sender: IConversationTranslatorRecognizer, event: LockRoomEventArgs) => void;\r\n    public muteAllCommandReceived: (sender: IConversationTranslatorRecognizer, event: MuteAllEventArgs) => void;\r\n    public participantJoinCommandReceived: (sender: IConversationTranslatorRecognizer, event: ParticipantEventArgs) => void;\r\n    public participantLeaveCommandReceived: (sender: IConversationTranslatorRecognizer, event: ParticipantEventArgs) => void;\r\n    public participantUpdateCommandReceived: (sender: IConversationTranslatorRecognizer, event: ParticipantAttributeEventArgs) => void;\r\n    public connectionOpened: (sender: IConversationTranslatorRecognizer, event: SessionEventArgs) => void;\r\n    public connectionClosed: (sender: IConversationTranslatorRecognizer, event: SessionEventArgs) => void;\r\n    public translationReceived: (sender: IConversationTranslatorRecognizer, event: ConversationReceivedTranslationEventArgs) => void;\r\n    public participantsListReceived: (sender: IConversationTranslatorRecognizer, event: ParticipantsListEventArgs) => void;\r\n    public participantsChanged: (sender: IConversationTranslatorRecognizer, event: ConversationParticipantsChangedEventArgs) => void;\r\n\r\n    public set conversation(value: IInternalConversation) {\r\n        this.privRoom = value;\r\n    }\r\n\r\n    /**\r\n     * Return the speech language used by the recognizer\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechRecognitionLanguage;\r\n    }\r\n\r\n    /**\r\n     * Return the properties for the recognizer\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    /**\r\n     * Connect to the recognizer\r\n     * @param token\r\n     */\r\n    public connect(token: string, cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n            this.privReco.conversationTranslatorToken = token;\r\n            this.privReco.connectAsync(cb, err);\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disconnect from the recognizer\r\n     */\r\n    public disconnect(cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            this.privRoom = undefined;\r\n            this.privReco.disconnectAsync(cb, err);\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n            // Destroy the recognizer.\r\n            this.dispose(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send the text message command to the websocket\r\n     * @param conversationId\r\n     * @param participantId\r\n     * @param message\r\n     */\r\n    public sendMessageRequest(message: string, cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n            Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n            Contracts.throwIfNullOrWhitespace(message, \"message\");\r\n\r\n            const command: IInstantMessageCommand = {\r\n                // tslint:disable-next-line: object-literal-shorthand\r\n                participantId: this.privRoom.participantId,\r\n                roomId: this.privRoom.roomId,\r\n                text: message,\r\n                type: ConversationTranslatorMessageTypes.instantMessage\r\n            };\r\n\r\n            this.sendMessage(JSON.stringify(command), cb, err);\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n\r\n            // Destroy the recognizer.\r\n            this.dispose(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send the lock conversation command to the websocket\r\n     * @param conversationId\r\n     * @param participantId\r\n     * @param isLocked\r\n     */\r\n    public sendLockRequest(isLocked: boolean, cb?: () => void, err?: (e: string) => void): void {\r\n\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n            Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n            Contracts.throwIfNullOrUndefined(isLocked, \"isLocked\");\r\n\r\n            const command: ILockConversationCommand = {\r\n                command: ConversationTranslatorCommandTypes.setLockState,\r\n                // tslint:disable-next-line: object-literal-shorthand\r\n                participantId: this.privRoom.participantId,\r\n                roomid: this.privRoom.roomId,\r\n                type: ConversationTranslatorMessageTypes.participantCommand,\r\n                value: isLocked\r\n            };\r\n\r\n            this.sendMessage(JSON.stringify(command), cb, err);\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n\r\n            // Destroy the recognizer.\r\n            this.dispose(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send the mute all participants command to the websocket\r\n     * @param conversationId\r\n     * @param participantId\r\n     * @param isMuted\r\n     */\r\n    public sendMuteAllRequest(isMuted: boolean, cb?: () => void, err?: (e: string) => void): void {\r\n\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n            Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n            Contracts.throwIfNullOrUndefined(isMuted, \"isMuted\");\r\n\r\n            const command: IMuteAllCommand = {\r\n                command: ConversationTranslatorCommandTypes.setMuteAll,\r\n                // tslint:disable-next-line: object-literal-shorthand\r\n                participantId: this.privRoom.participantId, // the id of the host\r\n                roomid: this.privRoom.roomId,\r\n                type: ConversationTranslatorMessageTypes.participantCommand,\r\n                value: isMuted\r\n            };\r\n\r\n            this.sendMessage(JSON.stringify(command), cb, err);\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n\r\n            // Destroy the recognizer.\r\n            this.dispose(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send the mute participant command to the websocket\r\n     * @param conversationId\r\n     * @param participantId\r\n     * @param isMuted\r\n     */\r\n    public sendMuteRequest(participantId: string, isMuted: boolean, cb?: () => void, err?: (e: string) => void): void {\r\n\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n            Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n            Contracts.throwIfNullOrUndefined(isMuted, \"isMuted\");\r\n\r\n            const command: IMuteCommand = {\r\n                command: ConversationTranslatorCommandTypes.setMute,\r\n                // tslint:disable-next-line: object-literal-shorthand\r\n                participantId: participantId, // the id of the participant\r\n                roomid: this.privRoom.roomId,\r\n                type: ConversationTranslatorMessageTypes.participantCommand,\r\n                value: isMuted\r\n            };\r\n\r\n            this.sendMessage(JSON.stringify(command), cb, err);\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n\r\n            // Destroy the recognizer.\r\n            this.dispose(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send the eject participant command to the websocket\r\n     * @param conversationId\r\n     * @param participantId\r\n     */\r\n    public sendEjectRequest(participantId: string, cb?: () => void, err?: (e: string) => void): void {\r\n\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n            Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n            const command: IEjectParticipantCommand = {\r\n                command: ConversationTranslatorCommandTypes.ejectParticipant,\r\n                // tslint:disable-next-line: object-literal-shorthand\r\n                participantId: participantId,\r\n                roomid: this.privRoom.roomId,\r\n                type: ConversationTranslatorMessageTypes.participantCommand,\r\n            };\r\n\r\n            this.sendMessage(JSON.stringify(command), cb, err);\r\n\r\n            if (!!cb) {\r\n                try {\r\n                    cb();\r\n                } catch (e) {\r\n                    if (!!err) {\r\n                        err(e);\r\n                    }\r\n                }\r\n            }\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n\r\n            // Destroy the recognizer.\r\n            this.dispose(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send the mute participant command to the websocket\r\n     * @param conversationId\r\n     * @param participantId\r\n     * @param isMuted\r\n     */\r\n    public sendChangeNicknameRequest(nickname: string, cb?: () => void, err?: (e: string) => void): void {\r\n\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n            Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\r\n\r\n            const command: IChangeNicknameCommand = {\r\n                command: ConversationTranslatorCommandTypes.changeNickname,\r\n                nickname,\r\n                // tslint:disable-next-line: object-literal-shorthand\r\n                participantId: this.privRoom.participantId, // the id of the host\r\n                roomid: this.privRoom.roomId,\r\n                type: ConversationTranslatorMessageTypes.participantCommand,\r\n                value: nickname\r\n            };\r\n\r\n            this.sendMessage(JSON.stringify(command), cb, err);\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n\r\n            // Destroy the recognizer.\r\n            this.dispose(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Close and dispose the recognizer\r\n     */\r\n    public close(): void {\r\n        Contracts.throwIfDisposed(this.privIsDisposed);\r\n        this.dispose(true);\r\n    }\r\n\r\n    /**\r\n     * Dispose the recognizer\r\n     * @param disposing\r\n     */\r\n    protected dispose(disposing: boolean): boolean {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n        if (disposing) {\r\n            this.privIsDisposed = true;\r\n            super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create the config for the recognizer\r\n     * @param speechConfig\r\n     */\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    /**\r\n     * Create the service recognizer.\r\n     * The audio source is redundnant here but is required by the implementation.\r\n     * @param authentication\r\n     * @param connectionFactory\r\n     * @param audioConfig\r\n     * @param recognizerConfig\r\n     */\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const audioSource: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new ConversationServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\r\n    }\r\n\r\n    private sendMessage(msg: string, cb?: Callback, err?: Callback): void {\r\n        const withAsync = this.privReco as ConversationServiceAdapter;\r\n        PromiseToEmptyCallback(withAsync.sendMessageAsync(msg), cb, err);\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}