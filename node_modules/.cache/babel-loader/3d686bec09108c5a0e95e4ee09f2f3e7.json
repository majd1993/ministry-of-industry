{"ast":null,"code":"import _classCallCheck from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { Context, OS, SpeakerIdMessageAdapter, SpeakerRecognitionConfig } from \"../common.speech/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport { PropertyId, ResultReason, SpeakerIdentificationModel, SpeakerRecognitionResult, SpeakerRecognitionResultType, SpeakerVerificationModel } from \"./Exports\";\n/**\n * Defines SpeakerRecognizer class for Speaker Recognition\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\n * @class SpeakerRecognizer\n */\n\nexport var SpeakerRecognizer = /*#__PURE__*/function () {\n  /**\n   * SpeakerRecognizer constructor.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - An set of initial properties for this recognizer (authentication key, region, &c)\n   */\n  function SpeakerRecognizer(speechConfig, audioConfig) {\n    _classCallCheck(this, SpeakerRecognizer);\n\n    var speechConfigImpl = speechConfig;\n    Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\n    this.privAudioConfigImpl = audioConfig;\n    Contracts.throwIfNull(this.privAudioConfigImpl, \"audioConfig\");\n    this.privProperties = speechConfigImpl.properties.clone();\n    this.implSRSetup();\n  }\n  /**\n   * Gets the authorization token used to communicate with the service.\n   * @member SpeakerRecognizer.prototype.authorizationToken\n   * @function\n   * @public\n   * @returns {string} Authorization token.\n   */\n\n\n  _createClass(SpeakerRecognizer, [{\n    key: \"authorizationToken\",\n    get: function get() {\n      return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n    }\n    /**\n     * Gets/Sets the authorization token used to communicate with the service.\n     * @member SpeakerRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} token - Authorization token.\n     */\n    ,\n    set: function set(token) {\n      Contracts.throwIfNullOrWhitespace(token, \"token\");\n      this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n    }\n    /**\n     * The collection of properties and their values defined for this SpeakerRecognizer.\n     * @member SpeakerRecognizer.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeakerRecognizer.\n     */\n\n  }, {\n    key: \"properties\",\n    get: function get() {\n      return this.privProperties;\n    }\n    /**\n     * Get recognition result for model using given audio\n     * @member SpeakerRecognizer.prototype.recognizeOnceAsync\n     * @function\n     * @public\n     * @param {SpeakerIdentificationModel} model Model containing Voice Profiles to be identified\n     * @param cb - Callback invoked once result is returned.\n     * @param err - Callback invoked in case of an error.\n     */\n\n  }, {\n    key: \"recognizeOnceAsync\",\n    value: function recognizeOnceAsync(model, cb, err) {\n      var _this = this;\n\n      if (model instanceof SpeakerIdentificationModel) {\n        this.privAdapter.identifySpeaker(model, this.privAudioConfigImpl).continueWith(function (promiseResult) {\n          _this.handleResultCallbacks(promiseResult, SpeakerRecognitionResultType.Identify, undefined, cb, err);\n        });\n      } else if (model instanceof SpeakerVerificationModel) {\n        this.privAdapter.verifySpeaker(model, this.privAudioConfigImpl).continueWith(function (promiseResult) {\n          _this.handleResultCallbacks(promiseResult, SpeakerRecognitionResultType.Verify, model.voiceProfile.profileId, cb, err);\n        });\n      } else {\n        throw new Error(\"SpeakerRecognizer.recognizeOnce: Unexpected model type\");\n      }\n    }\n    /**\n     * Included for compatibility\n     * @member SpeakerRecognizer.prototype.close\n     * @function\n     * @public\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      return;\n    } // Does class setup, swiped from Recognizer.\n\n  }, {\n    key: \"implSRSetup\",\n    value: function implSRSetup() {\n      var osPlatform = typeof window !== \"undefined\" ? \"Browser\" : \"Node\";\n      var osName = \"unknown\";\n      var osVersion = \"unknown\";\n\n      if (typeof navigator !== \"undefined\") {\n        osPlatform = osPlatform + \"/\" + navigator.platform;\n        osName = navigator.userAgent;\n        osVersion = navigator.appVersion;\n      }\n\n      var recognizerConfig = new SpeakerRecognitionConfig(new Context(new OS(osPlatform, osName, osVersion)), this.privProperties);\n      this.privAdapter = new SpeakerIdMessageAdapter(recognizerConfig);\n    }\n  }, {\n    key: \"handleResultCallbacks\",\n    value: function handleResultCallbacks(promiseResult, resultType, profileId, cb, err) {\n      try {\n        if (promiseResult.isError) {\n          if (!!err) {\n            err(promiseResult.error);\n          }\n        } else if (promiseResult.isCompleted && !!cb) {\n          cb(new SpeakerRecognitionResult(resultType, promiseResult.result.data, profileId, promiseResult.result.ok ? ResultReason.RecognizedSpeaker : ResultReason.Canceled));\n        }\n      } catch (e) {\n        if (!!err) {\n          err(e);\n        }\n      }\n    }\n  }]);\n\n  return SpeakerRecognizer;\n}();","map":{"version":3,"sources":["src/sdk/SpeakerRecognizer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IRestResponse,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    Context,\r\n    OS,\r\n    SpeakerIdMessageAdapter,\r\n    SpeakerRecognitionConfig,\r\n} from \"../common.speech/Exports\";\r\nimport { IAudioSource, PromiseResult } from \"../common/Exports\";\r\nimport { AudioConfig, AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeakerIdentificationModel,\r\n    SpeakerRecognitionResult,\r\n    SpeakerRecognitionResultType,\r\n    SpeakerVerificationModel,\r\n    VoiceProfile,\r\n} from \"./Exports\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Defines SpeakerRecognizer class for Speaker Recognition\r\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\r\n * @class SpeakerRecognizer\r\n */\r\nexport class SpeakerRecognizer {\r\n    protected privProperties: PropertyCollection;\r\n    private privAdapter: SpeakerIdMessageAdapter;\r\n    private privAudioConfigImpl: AudioConfigImpl;\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member SpeakerRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member SpeakerRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this SpeakerRecognizer.\r\n     * @member SpeakerRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeakerRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * SpeakerRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this recognizer (authentication key, region, &c)\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig: AudioConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        this.privAudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNull(this.privAudioConfigImpl, \"audioConfig\");\r\n\r\n        this.privProperties = speechConfigImpl.properties.clone();\r\n        this.implSRSetup();\r\n    }\r\n\r\n    /**\r\n     * Get recognition result for model using given audio\r\n     * @member SpeakerRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param {SpeakerIdentificationModel} model Model containing Voice Profiles to be identified\r\n     * @param cb - Callback invoked once result is returned.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(model: SpeakerIdentificationModel | SpeakerVerificationModel, cb?: (e: SpeakerRecognitionResult) => void, err?: (e: string) => void): void {\r\n        if (model instanceof SpeakerIdentificationModel) {\r\n            this.privAdapter.identifySpeaker(model, this.privAudioConfigImpl).continueWith((promiseResult: PromiseResult<IRestResponse>) => {\r\n                this.handleResultCallbacks(promiseResult, SpeakerRecognitionResultType.Identify, undefined, cb, err);\r\n            });\r\n        } else if (model instanceof SpeakerVerificationModel) {\r\n            this.privAdapter.verifySpeaker(model, this.privAudioConfigImpl).continueWith((promiseResult: PromiseResult<IRestResponse>) => {\r\n                this.handleResultCallbacks(promiseResult, SpeakerRecognitionResultType.Verify, model.voiceProfile.profileId, cb, err);\r\n            });\r\n        } else {\r\n            throw new Error(\"SpeakerRecognizer.recognizeOnce: Unexpected model type\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Included for compatibility\r\n     * @member SpeakerRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n\r\n    // Does class setup, swiped from Recognizer.\r\n    private implSRSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const recognizerConfig =\r\n            new SpeakerRecognitionConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion)),\r\n                this.privProperties);\r\n\r\n        this.privAdapter = new SpeakerIdMessageAdapter(recognizerConfig);\r\n    }\r\n\r\n    private handleResultCallbacks(promiseResult: PromiseResult<IRestResponse>, resultType: SpeakerRecognitionResultType, profileId?: string, cb?: (response: SpeakerRecognitionResult) => void, err?: (e: string) => void): void {\r\n        try {\r\n            if (promiseResult.isError) {\r\n                if (!!err) {\r\n                    err(promiseResult.error);\r\n                }\r\n            } else if (promiseResult.isCompleted && !!cb) {\r\n                cb(\r\n                    new SpeakerRecognitionResult(\r\n                        resultType,\r\n                        promiseResult.result.data,\r\n                        profileId,\r\n                        promiseResult.result.ok ? ResultReason.RecognizedSpeaker : ResultReason.Canceled,\r\n                    )\r\n                );\r\n            }\r\n        } catch (e) {\r\n            if (!!err) {\r\n                err(e);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}