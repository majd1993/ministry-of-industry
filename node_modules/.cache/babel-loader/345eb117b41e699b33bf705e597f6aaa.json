{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { MessageType, TranslationStatus } from \"../common/Exports\";\nimport { CancellationErrorCode, CancellationReason, PropertyCollection, PropertyId, ResultReason, TranslationRecognitionCanceledEventArgs, TranslationRecognitionEventArgs, TranslationRecognitionResult, Translations, TranslationSynthesisEventArgs, TranslationSynthesisResult } from \"../sdk/Exports\";\nimport { CancellationErrorCodePropertyName, EnumTranslation, RecognitionStatus, ServiceRecognizerBase, SynthesisStatus, TranslationHypothesis, TranslationPhrase, TranslationSynthesisEnd } from \"./Exports\"; // tslint:disable-next-line:max-classes-per-file\n\nexport var TranslationServiceRecognizer = /*#__PURE__*/function (_ServiceRecognizerBas) {\n  _inherits(TranslationServiceRecognizer, _ServiceRecognizerBas);\n\n  var _super = _createSuper(TranslationServiceRecognizer);\n\n  function TranslationServiceRecognizer(authentication, connectionFactory, audioSource, recognizerConfig, translationRecognizer) {\n    var _this;\n\n    _classCallCheck(this, TranslationServiceRecognizer);\n\n    _this = _super.call(this, authentication, connectionFactory, audioSource, recognizerConfig, translationRecognizer);\n    _this.privTranslationRecognizer = translationRecognizer;\n    return _this;\n  }\n\n  _createClass(TranslationServiceRecognizer, [{\n    key: \"processTypeSpecificMessages\",\n    value: function processTypeSpecificMessages(connectionMessage) {\n      var resultProps = new PropertyCollection();\n      var processed = false;\n\n      if (connectionMessage.messageType === MessageType.Text) {\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\n      }\n\n      switch (connectionMessage.path.toLowerCase()) {\n        case \"translation.hypothesis\":\n          var result = this.fireEventForResult(TranslationHypothesis.fromJSON(connectionMessage.textBody), resultProps);\n          this.privRequestSession.onHypothesis(this.privRequestSession.currentTurnAudioOffset + result.offset);\n\n          if (!!this.privTranslationRecognizer.recognizing) {\n            try {\n              this.privTranslationRecognizer.recognizing(this.privTranslationRecognizer, result);\n              /* tslint:disable:no-empty */\n            } catch (error) {// Not going to let errors in the event handler\n              // trip things up.\n            }\n          }\n\n          processed = true;\n          break;\n\n        case \"translation.phrase\":\n          var translatedPhrase = TranslationPhrase.fromJSON(connectionMessage.textBody);\n          this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset + translatedPhrase.Duration);\n\n          if (translatedPhrase.RecognitionStatus === RecognitionStatus.Success) {\n            // OK, the recognition was successful. How'd the translation do?\n            var _result = this.fireEventForResult(translatedPhrase, resultProps);\n\n            if (!!this.privTranslationRecognizer.recognized) {\n              try {\n                this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, _result);\n                /* tslint:disable:no-empty */\n              } catch (error) {// Not going to let errors in the event handler\n                // trip things up.\n              }\n            } // report result to promise.\n\n\n            if (!!this.privSuccessCallback) {\n              try {\n                this.privSuccessCallback(_result.result);\n              } catch (e) {\n                if (!!this.privErrorCallback) {\n                  this.privErrorCallback(e);\n                }\n              } // Only invoke the call back once.\n              // and if it's successful don't invoke the\n              // error after that.\n\n\n              this.privSuccessCallback = undefined;\n              this.privErrorCallback = undefined;\n            }\n\n            break;\n          } else {\n            var reason = EnumTranslation.implTranslateRecognitionResult(translatedPhrase.RecognitionStatus);\n\n            var _result2 = new TranslationRecognitionResult(undefined, this.privRequestSession.requestId, reason, translatedPhrase.Text, translatedPhrase.Duration, this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset, undefined, connectionMessage.textBody, resultProps);\n\n            if (reason === ResultReason.Canceled) {\n              var cancelReason = EnumTranslation.implTranslateCancelResult(translatedPhrase.RecognitionStatus);\n              this.cancelRecognitionLocal(cancelReason, EnumTranslation.implTranslateCancelErrorCode(translatedPhrase.RecognitionStatus), undefined);\n            } else {\n              if (!(this.privRequestSession.isSpeechEnded && reason === ResultReason.NoMatch && translatedPhrase.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\n                var ev = new TranslationRecognitionEventArgs(_result2, _result2.offset, this.privRequestSession.sessionId);\n\n                if (!!this.privTranslationRecognizer.recognized) {\n                  try {\n                    this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, ev);\n                    /* tslint:disable:no-empty */\n                  } catch (error) {// Not going to let errors in the event handler\n                    // trip things up.\n                  }\n                }\n              } // report result to promise.\n\n\n              if (!!this.privSuccessCallback) {\n                try {\n                  this.privSuccessCallback(_result2);\n                } catch (e) {\n                  if (!!this.privErrorCallback) {\n                    this.privErrorCallback(e);\n                  }\n                } // Only invoke the call back once.\n                // and if it's successful don't invoke the\n                // error after that.\n\n\n                this.privSuccessCallback = undefined;\n                this.privErrorCallback = undefined;\n              }\n            }\n          }\n\n          processed = true;\n          break;\n\n        case \"translation.synthesis\":\n          this.sendSynthesisAudio(connectionMessage.binaryBody, this.privRequestSession.sessionId);\n          processed = true;\n          break;\n\n        case \"translation.synthesis.end\":\n          var synthEnd = TranslationSynthesisEnd.fromJSON(connectionMessage.textBody);\n\n          switch (synthEnd.SynthesisStatus) {\n            case SynthesisStatus.Error:\n              if (!!this.privTranslationRecognizer.synthesizing) {\n                var _result3 = new TranslationSynthesisResult(ResultReason.Canceled, undefined);\n\n                var retEvent = new TranslationSynthesisEventArgs(_result3, this.privRequestSession.sessionId);\n\n                try {\n                  this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\n                  /* tslint:disable:no-empty */\n                } catch (error) {// Not going to let errors in the event handler\n                  // trip things up.\n                }\n              }\n\n              if (!!this.privTranslationRecognizer.canceled) {\n                // And raise a canceled event to send the rich(er) error message back.\n                var canceledResult = new TranslationRecognitionCanceledEventArgs(this.privRequestSession.sessionId, CancellationReason.Error, synthEnd.FailureReason, CancellationErrorCode.ServiceError, null);\n\n                try {\n                  this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, canceledResult);\n                  /* tslint:disable:no-empty */\n                } catch (error) {// Not going to let errors in the event handler\n                  // trip things up.\n                }\n              }\n\n              break;\n\n            case SynthesisStatus.Success:\n              this.sendSynthesisAudio(undefined, this.privRequestSession.sessionId);\n              break;\n\n            default:\n              break;\n          }\n\n          processed = true;\n          break;\n\n        default:\n          break;\n      }\n\n      return processed;\n    } // Cancels recognition.\n\n  }, {\n    key: \"cancelRecognition\",\n    value: function cancelRecognition(sessionId, requestId, cancellationReason, errorCode, error) {\n      var properties = new PropertyCollection();\n      properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\n\n      if (!!this.privTranslationRecognizer.canceled) {\n        var cancelEvent = new TranslationRecognitionCanceledEventArgs(sessionId, cancellationReason, error, errorCode, undefined);\n\n        try {\n          this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, cancelEvent);\n          /* tslint:disable:no-empty */\n        } catch (_a) {}\n      }\n\n      if (!!this.privSuccessCallback) {\n        var result = new TranslationRecognitionResult(undefined, // Translations\n        requestId, ResultReason.Canceled, undefined, // Text\n        undefined, // Druation\n        undefined, // Offset\n        error, undefined, // Json\n        properties);\n\n        try {\n          this.privSuccessCallback(result);\n          /* tslint:disable:no-empty */\n\n          this.privSuccessCallback = undefined;\n        } catch (_b) {}\n      }\n    }\n  }, {\n    key: \"fireEventForResult\",\n    value: function fireEventForResult(serviceResult, properties) {\n      var translations;\n\n      if (undefined !== serviceResult.Translation.Translations) {\n        translations = new Translations();\n\n        var _iterator = _createForOfIteratorHelper(serviceResult.Translation.Translations),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var translation = _step.value;\n            translations.set(translation.Language, translation.Text);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      var resultReason;\n\n      if (serviceResult instanceof TranslationPhrase) {\n        if (serviceResult.Translation.TranslationStatus === TranslationStatus.Success) {\n          resultReason = ResultReason.TranslatedSpeech;\n        } else {\n          resultReason = ResultReason.RecognizedSpeech;\n        }\n      } else {\n        resultReason = ResultReason.TranslatingSpeech;\n      }\n\n      var offset = serviceResult.Offset + this.privRequestSession.currentTurnAudioOffset;\n      var result = new TranslationRecognitionResult(translations, this.privRequestSession.requestId, resultReason, serviceResult.Text, serviceResult.Duration, offset, serviceResult.Translation.FailureReason, JSON.stringify(serviceResult), properties);\n      var ev = new TranslationRecognitionEventArgs(result, offset, this.privRequestSession.sessionId);\n      return ev;\n    }\n  }, {\n    key: \"sendSynthesisAudio\",\n    value: function sendSynthesisAudio(audio, sessionId) {\n      var reason = undefined === audio ? ResultReason.SynthesizingAudioCompleted : ResultReason.SynthesizingAudio;\n      var result = new TranslationSynthesisResult(reason, audio);\n      var retEvent = new TranslationSynthesisEventArgs(result, sessionId);\n\n      if (!!this.privTranslationRecognizer.synthesizing) {\n        try {\n          this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\n          /* tslint:disable:no-empty */\n        } catch (error) {// Not going to let errors in the event handler\n          // trip things up.\n        }\n      }\n    }\n  }]);\n\n  return TranslationServiceRecognizer;\n}(ServiceRecognizerBase);","map":{"version":3,"sources":["src/common.speech/TranslationServiceRecognizer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAudioSource,\r\n    MessageType,\r\n    TranslationStatus,\r\n} from \"../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionResult,\r\n    TranslationRecognitionCanceledEventArgs,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognitionResult,\r\n    TranslationRecognizer,\r\n    Translations,\r\n    TranslationSynthesisEventArgs,\r\n    TranslationSynthesisResult,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    EnumTranslation,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SynthesisStatus,\r\n    TranslationHypothesis,\r\n    TranslationPhrase,\r\n    TranslationSynthesisEnd,\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class TranslationServiceRecognizer extends ServiceRecognizerBase {\r\n    private privTranslationRecognizer: TranslationRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        translationRecognizer: TranslationRecognizer) {\r\n\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, translationRecognizer);\r\n        this.privTranslationRecognizer = translationRecognizer;\r\n\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): boolean {\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        let processed: boolean = false;\r\n\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"translation.hypothesis\":\r\n\r\n                const result: TranslationRecognitionEventArgs = this.fireEventForResult(TranslationHypothesis.fromJSON(connectionMessage.textBody), resultProps);\r\n                this.privRequestSession.onHypothesis(this.privRequestSession.currentTurnAudioOffset + result.offset);\r\n\r\n                if (!!this.privTranslationRecognizer.recognizing) {\r\n                    try {\r\n                        this.privTranslationRecognizer.recognizing(this.privTranslationRecognizer, result);\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"translation.phrase\":\r\n                const translatedPhrase: TranslationPhrase = TranslationPhrase.fromJSON(connectionMessage.textBody);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset + translatedPhrase.Duration);\r\n\r\n                if (translatedPhrase.RecognitionStatus === RecognitionStatus.Success) {\r\n\r\n                    // OK, the recognition was successful. How'd the translation do?\r\n                    const result: TranslationRecognitionEventArgs = this.fireEventForResult(translatedPhrase, resultProps);\r\n                    if (!!this.privTranslationRecognizer.recognized) {\r\n                        try {\r\n                            this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, result);\r\n                            /* tslint:disable:no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n\r\n                    // report result to promise.\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result.result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n\r\n                    break;\r\n                } else {\r\n                    const reason: ResultReason = EnumTranslation.implTranslateRecognitionResult(translatedPhrase.RecognitionStatus);\r\n\r\n                    const result = new TranslationRecognitionResult(\r\n                        undefined,\r\n                        this.privRequestSession.requestId,\r\n                        reason,\r\n                        translatedPhrase.Text,\r\n                        translatedPhrase.Duration,\r\n                        this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset,\r\n                        undefined,\r\n                        connectionMessage.textBody,\r\n                        resultProps);\r\n\r\n                    if (reason === ResultReason.Canceled) {\r\n                        const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(translatedPhrase.RecognitionStatus);\r\n\r\n                        this.cancelRecognitionLocal(\r\n                            cancelReason,\r\n                            EnumTranslation.implTranslateCancelErrorCode(translatedPhrase.RecognitionStatus),\r\n                            undefined);\r\n                    } else {\r\n                        if (!(this.privRequestSession.isSpeechEnded && reason === ResultReason.NoMatch && translatedPhrase.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                            const ev = new TranslationRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                            if (!!this.privTranslationRecognizer.recognized) {\r\n                                try {\r\n                                    this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, ev);\r\n                                    /* tslint:disable:no-empty */\r\n                                } catch (error) {\r\n                                    // Not going to let errors in the event handler\r\n                                    // trip things up.\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        // report result to promise.\r\n                        if (!!this.privSuccessCallback) {\r\n                            try {\r\n                                this.privSuccessCallback(result);\r\n                            } catch (e) {\r\n                                if (!!this.privErrorCallback) {\r\n                                    this.privErrorCallback(e);\r\n                                }\r\n                            }\r\n                            // Only invoke the call back once.\r\n                            // and if it's successful don't invoke the\r\n                            // error after that.\r\n                            this.privSuccessCallback = undefined;\r\n                            this.privErrorCallback = undefined;\r\n                        }\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n\r\n            case \"translation.synthesis\":\r\n                this.sendSynthesisAudio(connectionMessage.binaryBody, this.privRequestSession.sessionId);\r\n                processed = true;\r\n                break;\r\n\r\n            case \"translation.synthesis.end\":\r\n                const synthEnd: TranslationSynthesisEnd = TranslationSynthesisEnd.fromJSON(connectionMessage.textBody);\r\n\r\n                switch (synthEnd.SynthesisStatus) {\r\n                    case SynthesisStatus.Error:\r\n                        if (!!this.privTranslationRecognizer.synthesizing) {\r\n                            const result = new TranslationSynthesisResult(ResultReason.Canceled, undefined);\r\n                            const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, this.privRequestSession.sessionId);\r\n\r\n                            try {\r\n                                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n\r\n                        if (!!this.privTranslationRecognizer.canceled) {\r\n                            // And raise a canceled event to send the rich(er) error message back.\r\n                            const canceledResult: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\r\n                                this.privRequestSession.sessionId,\r\n                                CancellationReason.Error,\r\n                                synthEnd.FailureReason,\r\n                                CancellationErrorCode.ServiceError,\r\n                                null);\r\n\r\n                            try {\r\n                                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, canceledResult);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                        break;\r\n                    case SynthesisStatus.Success:\r\n                        this.sendSynthesisAudio(undefined, this.privRequestSession.sessionId);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privTranslationRecognizer.canceled) {\r\n\r\n            const cancelEvent: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\r\n                sessionId,\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined);\r\n\r\n            try {\r\n                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, cancelEvent);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: TranslationRecognitionResult = new TranslationRecognitionResult(\r\n                undefined, // Translations\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Druation\r\n                undefined, // Offset\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                /* tslint:disable:no-empty */\r\n                this.privSuccessCallback = undefined;\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    private fireEventForResult(serviceResult: TranslationHypothesis | TranslationPhrase, properties: PropertyCollection): TranslationRecognitionEventArgs {\r\n        let translations: Translations;\r\n\r\n        if (undefined !== serviceResult.Translation.Translations) {\r\n            translations = new Translations();\r\n            for (const translation of serviceResult.Translation.Translations) {\r\n                translations.set(translation.Language, translation.Text);\r\n            }\r\n        }\r\n\r\n        let resultReason: ResultReason;\r\n        if (serviceResult instanceof TranslationPhrase) {\r\n            if (serviceResult.Translation.TranslationStatus === TranslationStatus.Success) {\r\n                resultReason = ResultReason.TranslatedSpeech;\r\n            } else {\r\n                resultReason = ResultReason.RecognizedSpeech;\r\n            }\r\n        } else {\r\n            resultReason = ResultReason.TranslatingSpeech;\r\n        }\r\n\r\n        const offset: number = serviceResult.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n        const result = new TranslationRecognitionResult(\r\n            translations,\r\n            this.privRequestSession.requestId,\r\n            resultReason,\r\n            serviceResult.Text,\r\n            serviceResult.Duration,\r\n            offset,\r\n            serviceResult.Translation.FailureReason,\r\n            JSON.stringify(serviceResult),\r\n            properties);\r\n\r\n        const ev = new TranslationRecognitionEventArgs(result, offset, this.privRequestSession.sessionId);\r\n        return ev;\r\n    }\r\n\r\n    private sendSynthesisAudio(audio: ArrayBuffer, sessionId: string): void {\r\n        const reason = (undefined === audio) ? ResultReason.SynthesizingAudioCompleted : ResultReason.SynthesizingAudio;\r\n        const result = new TranslationSynthesisResult(reason, audio);\r\n        const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, sessionId);\r\n\r\n        if (!!this.privTranslationRecognizer.synthesizing) {\r\n            try {\r\n                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\r\n                /* tslint:disable:no-empty */\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}