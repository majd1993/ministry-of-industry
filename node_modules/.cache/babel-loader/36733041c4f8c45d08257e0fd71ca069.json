{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = activities;\n\nvar _simpleUpdateIn = _interopRequireDefault(require(\"simple-update-in\"));\n\nvar _deleteActivity = require(\"../actions/deleteActivity\");\n\nvar _incomingActivity = require(\"../actions/incomingActivity\");\n\nvar _markActivity = require(\"../actions/markActivity\");\n\nvar _postActivity = require(\"../actions/postActivity\");\n\nvar _ActivityClientState = require(\"../constants/ActivityClientState\");\n/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, -1] }] */\n\n\nvar DEFAULT_STATE = [];\nvar DIRECT_LINE_PLACEHOLDER_URL = 'https://docs.botframework.com/static/devportal/client/images/bot-framework-default-placeholder.png';\n\nfunction getClientActivityID(_ref) {\n  var _ref$channelData = _ref.channelData;\n  _ref$channelData = _ref$channelData === void 0 ? {} : _ref$channelData;\n  var clientActivityID = _ref$channelData.clientActivityID;\n  return clientActivityID;\n}\n\nfunction findByClientActivityID(clientActivityID) {\n  return function (activity) {\n    return getClientActivityID(activity) === clientActivityID;\n  };\n}\n\nfunction patchActivity(activity) {\n  // Direct Line channel will return a placeholder image for the user-uploaded image.\n  // As observed, the URL for the placeholder image is https://docs.botframework.com/static/devportal/client/images/bot-framework-default-placeholder.png.\n  // To make our code simpler, we are removing the value if \"contentUrl\" is pointing to a placeholder image.\n  // TODO: [P2] #2869 This \"contentURL\" removal code should be moved to DirectLineJS adapter.\n  // Also, if the \"contentURL\" starts with \"blob:\", this means the user is uploading a file (the URL is constructed by URL.createObjectURL)\n  // Although the copy/reference of the file is temporary in-memory, to make the UX consistent across page refresh, we do not allow the user to re-download the file either.\n  return (0, _simpleUpdateIn[\"default\"])(activity, ['attachments', function () {\n    return true;\n  }, 'contentUrl'], function (contentUrl) {\n    if (contentUrl !== DIRECT_LINE_PLACEHOLDER_URL && !/^blob:/i.test(contentUrl)) {\n      return contentUrl;\n    }\n  });\n}\n\nfunction upsertActivityWithSort(activities, nextActivity) {\n  nextActivity = patchActivity(nextActivity);\n  var _nextActivity = nextActivity,\n      _nextActivity$channel = _nextActivity.channelData;\n  _nextActivity$channel = _nextActivity$channel === void 0 ? {} : _nextActivity$channel;\n  var nextClientActivityID = _nextActivity$channel.clientActivityID;\n  var nextTimestamp = Date.parse(nextActivity.timestamp);\n  var nextActivities = activities.filter(function (_ref2) {\n    var _ref2$channelData = _ref2.channelData;\n    _ref2$channelData = _ref2$channelData === void 0 ? {} : _ref2$channelData;\n    var clientActivityID = _ref2$channelData.clientActivityID,\n        id = _ref2.id;\n    return (// We will remove all \"sending messages\" activities and activities with same ID\n      // \"clientActivityID\" is unique and used to track if the message has been sent and echoed back from the server\n      !(nextClientActivityID && clientActivityID === nextClientActivityID) && !(id && id === nextActivity.id)\n    );\n  }); // Then, find the right (sorted) place to insert the new activity at, based on timestamp\n  // Since clockskew might happen, we will ignore timestamp on messages that are sending\n\n  var indexToInsert = nextActivities.findIndex(function (_ref3) {\n    var _ref3$channelData = _ref3.channelData;\n    _ref3$channelData = _ref3$channelData === void 0 ? {} : _ref3$channelData;\n    var state = _ref3$channelData.state,\n        timestamp = _ref3.timestamp;\n    return Date.parse(timestamp) > nextTimestamp && state !== _ActivityClientState.SENDING && state !== _ActivityClientState.SEND_FAILED;\n  }); // If no right place are found, append it\n\n  nextActivities.splice(~indexToInsert ? indexToInsert : nextActivities.length, 0, nextActivity);\n  return nextActivities;\n}\n\nfunction activities() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_STATE;\n\n  var _ref4 = arguments.length > 1 ? arguments[1] : undefined,\n      meta = _ref4.meta,\n      payload = _ref4.payload,\n      type = _ref4.type;\n\n  switch (type) {\n    case _deleteActivity.DELETE_ACTIVITY:\n      state = (0, _simpleUpdateIn[\"default\"])(state, [function (_ref5) {\n        var id = _ref5.id;\n        return id === payload.activityID;\n      }]);\n      break;\n\n    case _markActivity.MARK_ACTIVITY:\n      state = (0, _simpleUpdateIn[\"default\"])(state, [function (_ref6) {\n        var id = _ref6.id;\n        return id === payload.activityID;\n      }, 'channelData', payload.name], function () {\n        return payload.value;\n      });\n      break;\n\n    case _postActivity.POST_ACTIVITY_PENDING:\n      state = upsertActivityWithSort(state, (0, _simpleUpdateIn[\"default\"])(payload.activity, ['channelData', 'state'], function () {\n        return _ActivityClientState.SENDING;\n      }));\n      break;\n\n    case _postActivity.POST_ACTIVITY_REJECTED:\n      state = (0, _simpleUpdateIn[\"default\"])(state, [findByClientActivityID(meta.clientActivityID), 'channelData', 'state'], function () {\n        return _ActivityClientState.SEND_FAILED;\n      });\n      break;\n\n    case _postActivity.POST_ACTIVITY_FULFILLED:\n      state = (0, _simpleUpdateIn[\"default\"])(state, [findByClientActivityID(meta.clientActivityID)], function () {\n        return (// We will replace the activity with the version from the server\n          (0, _simpleUpdateIn[\"default\"])(patchActivity(payload.activity), ['channelData', 'state'], function () {\n            return _ActivityClientState.SENT;\n          })\n        );\n      });\n      break;\n\n    case _incomingActivity.INCOMING_ACTIVITY:\n      // TODO: [P4] #2100 Move \"typing\" into Constants.ActivityType\n      state = upsertActivityWithSort(state, payload.activity);\n      break;\n\n    default:\n      break;\n  }\n\n  return state;\n}","map":{"version":3,"sources":["../../src/reducers/activities.js"],"names":["DEFAULT_STATE","DIRECT_LINE_PLACEHOLDER_URL","channelData","clientActivityID","getClientActivityID","contentUrl","nextActivity","patchActivity","nextClientActivityID","nextTimestamp","Date","nextActivities","id","indexToInsert","state","timestamp","SENDING","SEND_FAILED","meta","payload","type","DELETE_ACTIVITY","MARK_ACTIVITY","POST_ACTIVITY_PENDING","upsertActivityWithSort","POST_ACTIVITY_REJECTED","findByClientActivityID","POST_ACTIVITY_FULFILLED","SENT","INCOMING_ACTIVITY"],"mappings":"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","sourcesContent":["/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, -1] }] */\n\nimport updateIn from 'simple-update-in';\n\nimport { DELETE_ACTIVITY } from '../actions/deleteActivity';\nimport { INCOMING_ACTIVITY } from '../actions/incomingActivity';\nimport { MARK_ACTIVITY } from '../actions/markActivity';\n\nimport { POST_ACTIVITY_FULFILLED, POST_ACTIVITY_PENDING, POST_ACTIVITY_REJECTED } from '../actions/postActivity';\n\nimport { SEND_FAILED, SENDING, SENT } from '../constants/ActivityClientState';\n\nconst DEFAULT_STATE = [];\nconst DIRECT_LINE_PLACEHOLDER_URL =\n  'https://docs.botframework.com/static/devportal/client/images/bot-framework-default-placeholder.png';\n\nfunction getClientActivityID({ channelData: { clientActivityID } = {} }) {\n  return clientActivityID;\n}\n\nfunction findByClientActivityID(clientActivityID) {\n  return activity => getClientActivityID(activity) === clientActivityID;\n}\n\nfunction patchActivity(activity) {\n  // Direct Line channel will return a placeholder image for the user-uploaded image.\n  // As observed, the URL for the placeholder image is https://docs.botframework.com/static/devportal/client/images/bot-framework-default-placeholder.png.\n  // To make our code simpler, we are removing the value if \"contentUrl\" is pointing to a placeholder image.\n\n  // TODO: [P2] #2869 This \"contentURL\" removal code should be moved to DirectLineJS adapter.\n\n  // Also, if the \"contentURL\" starts with \"blob:\", this means the user is uploading a file (the URL is constructed by URL.createObjectURL)\n  // Although the copy/reference of the file is temporary in-memory, to make the UX consistent across page refresh, we do not allow the user to re-download the file either.\n\n  return updateIn(activity, ['attachments', () => true, 'contentUrl'], contentUrl => {\n    if (contentUrl !== DIRECT_LINE_PLACEHOLDER_URL && !/^blob:/iu.test(contentUrl)) {\n      return contentUrl;\n    }\n  });\n}\n\nfunction upsertActivityWithSort(activities, nextActivity) {\n  nextActivity = patchActivity(nextActivity);\n\n  const { channelData: { clientActivityID: nextClientActivityID } = {} } = nextActivity;\n\n  const nextTimestamp = Date.parse(nextActivity.timestamp);\n  const nextActivities = activities.filter(\n    ({ channelData: { clientActivityID } = {}, id }) =>\n      // We will remove all \"sending messages\" activities and activities with same ID\n      // \"clientActivityID\" is unique and used to track if the message has been sent and echoed back from the server\n      !(nextClientActivityID && clientActivityID === nextClientActivityID) && !(id && id === nextActivity.id)\n  );\n\n  // Then, find the right (sorted) place to insert the new activity at, based on timestamp\n  // Since clockskew might happen, we will ignore timestamp on messages that are sending\n\n  const indexToInsert = nextActivities.findIndex(\n    ({ channelData: { state } = {}, timestamp }) =>\n      Date.parse(timestamp) > nextTimestamp && state !== SENDING && state !== SEND_FAILED\n  );\n\n  // If no right place are found, append it\n  nextActivities.splice(~indexToInsert ? indexToInsert : nextActivities.length, 0, nextActivity);\n\n  return nextActivities;\n}\n\nexport default function activities(state = DEFAULT_STATE, { meta, payload, type }) {\n  switch (type) {\n    case DELETE_ACTIVITY:\n      state = updateIn(state, [({ id }) => id === payload.activityID]);\n      break;\n\n    case MARK_ACTIVITY:\n      state = updateIn(\n        state,\n        [({ id }) => id === payload.activityID, 'channelData', payload.name],\n        () => payload.value\n      );\n      break;\n\n    case POST_ACTIVITY_PENDING:\n      state = upsertActivityWithSort(\n        state,\n        updateIn(payload.activity, ['channelData', 'state'], () => SENDING)\n      );\n      break;\n\n    case POST_ACTIVITY_REJECTED:\n      state = updateIn(\n        state,\n        [findByClientActivityID(meta.clientActivityID), 'channelData', 'state'],\n        () => SEND_FAILED\n      );\n      break;\n\n    case POST_ACTIVITY_FULFILLED:\n      state = updateIn(state, [findByClientActivityID(meta.clientActivityID)], () =>\n        // We will replace the activity with the version from the server\n        updateIn(patchActivity(payload.activity), ['channelData', 'state'], () => SENT)\n      );\n\n      break;\n\n    case INCOMING_ACTIVITY:\n      // TODO: [P4] #2100 Move \"typing\" into Constants.ActivityType\n      state = upsertActivityWithSort(state, payload.activity);\n      break;\n\n    default:\n      break;\n  }\n\n  return state;\n}\n"],"sourceRoot":"core:///"},"metadata":{},"sourceType":"script"}