{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Web socket based transport.\n */\n\nvar WebSocketTransport =\n/** @class */\nfunction () {\n  /**\n   * Creates a new instance of the [WebSocketTransport](xref:botframework-streaming.WebSocketTransport) class.\n   *\n   * @param ws The ISocket to build this transport on top of.\n   */\n  function WebSocketTransport(ws) {\n    var _this = this;\n\n    this._socket = ws;\n    this._queue = [];\n    this._activeOffset = 0;\n    this._activeReceiveCount = 0;\n\n    this._socket.setOnMessageHandler(function (data) {\n      _this.onReceive(data);\n    });\n\n    this._socket.setOnErrorHandler(function (err) {\n      _this.onError(err);\n    });\n\n    this._socket.setOnCloseHandler(function () {\n      _this.onClose();\n    });\n  }\n  /**\n   * Sends the given buffer out over the socket's connection.\n   *\n   * @param buffer The buffered data to send out over the connection.\n   */\n\n\n  WebSocketTransport.prototype.send = function (buffer) {\n    if (this._socket && this._socket.isConnected) {\n      this._socket.write(buffer);\n\n      return buffer.length;\n    }\n\n    return 0;\n  };\n\n  Object.defineProperty(WebSocketTransport.prototype, \"isConnected\", {\n    /**\n     * Returns true if the transport is connected to a socket.\n     */\n    get: function get() {\n      return this._socket.isConnected;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Close the socket this transport is connected to.\n   */\n\n  WebSocketTransport.prototype.close = function () {\n    if (this._socket && this._socket.isConnected) {\n      this._socket.close();\n    }\n  };\n  /**\n   * Attempt to receive incoming data from the connected socket.\n   *\n   * @param count The number of bytes to attempt to receive.\n   * @returns A buffer populated with the received data.\n   */\n\n\n  WebSocketTransport.prototype.receive = function (count) {\n    return __awaiter(this, void 0, void 0, function () {\n      var promise;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        if (this._activeReceiveResolve) {\n          throw new Error('Cannot call receive more than once before it has returned.');\n        }\n\n        this._activeReceiveCount = count;\n        promise = new Promise(function (resolve, reject) {\n          _this._activeReceiveResolve = resolve;\n          _this._activeReceiveReject = reject;\n        });\n        this.trySignalData();\n        return [2\n        /*return*/\n        , promise];\n      });\n    });\n  };\n  /**\n   * Sets the transport to attempt to receive incoming data that has not yet arrived.\n   *\n   * @param data A buffer to store incoming data in.\n   */\n\n\n  WebSocketTransport.prototype.onReceive = function (data) {\n    if (this._queue && data && data.byteLength > 0) {\n      this._queue.push(Buffer.from(data));\n\n      this.trySignalData();\n    }\n  };\n\n  WebSocketTransport.prototype.onClose = function () {\n    if (this._activeReceiveReject) {\n      this._activeReceiveReject(new Error('Socket was closed.'));\n    }\n\n    this._active = null;\n    this._activeOffset = 0;\n    this._activeReceiveResolve = null;\n    this._activeReceiveReject = null;\n    this._activeReceiveCount = 0;\n    this._socket = null;\n  };\n\n  WebSocketTransport.prototype.onError = function (err) {\n    if (this._activeReceiveReject) {\n      this._activeReceiveReject(err);\n    }\n\n    this.onClose();\n  };\n\n  WebSocketTransport.prototype.trySignalData = function () {\n    if (this._activeReceiveResolve) {\n      if (!this._active && this._queue.length > 0) {\n        this._active = this._queue.shift();\n        this._activeOffset = 0;\n      }\n\n      if (this._active) {\n        if (this._activeOffset === 0 && this._active.length === this._activeReceiveCount) {\n          // can send the entire _active buffer\n          var buffer = this._active;\n          this._active = null;\n\n          this._activeReceiveResolve(buffer);\n        } else {\n          // create a Buffer.from and copy some of the contents into it\n          var available = Math.min(this._activeReceiveCount, this._active.length - this._activeOffset);\n          var buffer = Buffer.alloc(available);\n\n          this._active.copy(buffer, 0, this._activeOffset, this._activeOffset + available);\n\n          this._activeOffset += available; // if we used all of active, set it to undefined\n\n          if (this._activeOffset >= this._active.length) {\n            this._active = null;\n            this._activeOffset = 0;\n          }\n\n          this._activeReceiveResolve(buffer);\n        }\n\n        this._activeReceiveCount = 0;\n        this._activeReceiveReject = null;\n        this._activeReceiveResolve = null;\n      }\n    }\n  };\n\n  return WebSocketTransport;\n}();\n\nexports.WebSocketTransport = WebSocketTransport;","map":{"version":3,"sources":["../../src/webSocket/webSocketTransport.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Web socket based transport.\n */\nvar WebSocketTransport = /** @class */ (function () {\n    /**\n     * Creates a new instance of the [WebSocketTransport](xref:botframework-streaming.WebSocketTransport) class.\n     *\n     * @param ws The ISocket to build this transport on top of.\n     */\n    function WebSocketTransport(ws) {\n        var _this = this;\n        this._socket = ws;\n        this._queue = [];\n        this._activeOffset = 0;\n        this._activeReceiveCount = 0;\n        this._socket.setOnMessageHandler(function (data) {\n            _this.onReceive(data);\n        });\n        this._socket.setOnErrorHandler(function (err) {\n            _this.onError(err);\n        });\n        this._socket.setOnCloseHandler(function () {\n            _this.onClose();\n        });\n    }\n    /**\n     * Sends the given buffer out over the socket's connection.\n     *\n     * @param buffer The buffered data to send out over the connection.\n     */\n    WebSocketTransport.prototype.send = function (buffer) {\n        if (this._socket && this._socket.isConnected) {\n            this._socket.write(buffer);\n            return buffer.length;\n        }\n        return 0;\n    };\n    Object.defineProperty(WebSocketTransport.prototype, \"isConnected\", {\n        /**\n         * Returns true if the transport is connected to a socket.\n         */\n        get: function () {\n            return this._socket.isConnected;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Close the socket this transport is connected to.\n     */\n    WebSocketTransport.prototype.close = function () {\n        if (this._socket && this._socket.isConnected) {\n            this._socket.close();\n        }\n    };\n    /**\n     * Attempt to receive incoming data from the connected socket.\n     *\n     * @param count The number of bytes to attempt to receive.\n     * @returns A buffer populated with the received data.\n     */\n    WebSocketTransport.prototype.receive = function (count) {\n        return __awaiter(this, void 0, void 0, function () {\n            var promise;\n            var _this = this;\n            return __generator(this, function (_a) {\n                if (this._activeReceiveResolve) {\n                    throw new Error('Cannot call receive more than once before it has returned.');\n                }\n                this._activeReceiveCount = count;\n                promise = new Promise(function (resolve, reject) {\n                    _this._activeReceiveResolve = resolve;\n                    _this._activeReceiveReject = reject;\n                });\n                this.trySignalData();\n                return [2 /*return*/, promise];\n            });\n        });\n    };\n    /**\n     * Sets the transport to attempt to receive incoming data that has not yet arrived.\n     *\n     * @param data A buffer to store incoming data in.\n     */\n    WebSocketTransport.prototype.onReceive = function (data) {\n        if (this._queue && data && data.byteLength > 0) {\n            this._queue.push(Buffer.from(data));\n            this.trySignalData();\n        }\n    };\n    WebSocketTransport.prototype.onClose = function () {\n        if (this._activeReceiveReject) {\n            this._activeReceiveReject(new Error('Socket was closed.'));\n        }\n        this._active = null;\n        this._activeOffset = 0;\n        this._activeReceiveResolve = null;\n        this._activeReceiveReject = null;\n        this._activeReceiveCount = 0;\n        this._socket = null;\n    };\n    WebSocketTransport.prototype.onError = function (err) {\n        if (this._activeReceiveReject) {\n            this._activeReceiveReject(err);\n        }\n        this.onClose();\n    };\n    WebSocketTransport.prototype.trySignalData = function () {\n        if (this._activeReceiveResolve) {\n            if (!this._active && this._queue.length > 0) {\n                this._active = this._queue.shift();\n                this._activeOffset = 0;\n            }\n            if (this._active) {\n                if (this._activeOffset === 0 && this._active.length === this._activeReceiveCount) {\n                    // can send the entire _active buffer\n                    var buffer = this._active;\n                    this._active = null;\n                    this._activeReceiveResolve(buffer);\n                }\n                else {\n                    // create a Buffer.from and copy some of the contents into it\n                    var available = Math.min(this._activeReceiveCount, this._active.length - this._activeOffset);\n                    var buffer = Buffer.alloc(available);\n                    this._active.copy(buffer, 0, this._activeOffset, this._activeOffset + available);\n                    this._activeOffset += available;\n                    // if we used all of active, set it to undefined\n                    if (this._activeOffset >= this._active.length) {\n                        this._active = null;\n                        this._activeOffset = 0;\n                    }\n                    this._activeReceiveResolve(buffer);\n                }\n                this._activeReceiveCount = 0;\n                this._activeReceiveReject = null;\n                this._activeReceiveResolve = null;\n            }\n        }\n    };\n    return WebSocketTransport;\n}());\nexports.WebSocketTransport = WebSocketTransport;\n//# sourceMappingURL=webSocketTransport.js.map"]},"metadata":{},"sourceType":"script"}