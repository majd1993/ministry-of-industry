{"ast":null,"code":"'use strict';\n\nmodule.exports = block;\nvar lineFeed = '\\n';\nvar blank = lineFeed + lineFeed;\nvar triple = blank + lineFeed;\nvar comment = blank + '<!---->' + blank; // Stringify a block node with block children (e.g., `root` or `blockquote`).\n// Knows about code following a list, or adjacent lists with similar bullets,\n// and places an extra line feed between them.\n\nfunction block(node) {\n  var self = this;\n  var options = self.options;\n  var fences = options.fences;\n  var gap = options.commonmark ? comment : triple;\n  var values = [];\n  var children = node.children;\n  var length = children.length;\n  var index = -1;\n  var prev;\n  var child;\n\n  while (++index < length) {\n    prev = child;\n    child = children[index];\n\n    if (prev) {\n      // A list preceding another list that are equally ordered, or a\n      // list preceding an indented code block, need a gap between them,\n      // so as not to see them as one list, or content of the list,\n      // respectively.\n      //\n      // In commonmark, only something that breaks both up can do that,\n      // so we opt for an empty, invisible comment.  In other flavours,\n      // two blank lines are fine.\n      if (prev.type === 'list' && (child.type === 'list' && prev.ordered === child.ordered || child.type === 'code' && !child.lang && !fences)) {\n        values.push(gap);\n      } else {\n        values.push(blank);\n      }\n    }\n\n    values.push(self.visit(child, node));\n  }\n\n  return values.join('');\n}","map":{"version":3,"sources":["/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/remark-stringify/lib/macro/block.js"],"names":["module","exports","block","lineFeed","blank","triple","comment","node","self","options","fences","gap","commonmark","values","children","length","index","prev","child","type","ordered","lang","push","visit","join"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,KAAjB;AAEA,IAAIC,QAAQ,GAAG,IAAf;AAEA,IAAIC,KAAK,GAAGD,QAAQ,GAAGA,QAAvB;AACA,IAAIE,MAAM,GAAGD,KAAK,GAAGD,QAArB;AACA,IAAIG,OAAO,GAAGF,KAAK,GAAG,SAAR,GAAoBA,KAAlC,C,CAEA;AACA;AACA;;AACA,SAASF,KAAT,CAAeK,IAAf,EAAqB;AACnB,MAAIC,IAAI,GAAG,IAAX;AACA,MAAIC,OAAO,GAAGD,IAAI,CAACC,OAAnB;AACA,MAAIC,MAAM,GAAGD,OAAO,CAACC,MAArB;AACA,MAAIC,GAAG,GAAGF,OAAO,CAACG,UAAR,GAAqBN,OAArB,GAA+BD,MAAzC;AACA,MAAIQ,MAAM,GAAG,EAAb;AACA,MAAIC,QAAQ,GAAGP,IAAI,CAACO,QAApB;AACA,MAAIC,MAAM,GAAGD,QAAQ,CAACC,MAAtB;AACA,MAAIC,KAAK,GAAG,CAAC,CAAb;AACA,MAAIC,IAAJ;AACA,MAAIC,KAAJ;;AAEA,SAAO,EAAEF,KAAF,GAAUD,MAAjB,EAAyB;AACvBE,IAAAA,IAAI,GAAGC,KAAP;AACAA,IAAAA,KAAK,GAAGJ,QAAQ,CAACE,KAAD,CAAhB;;AAEA,QAAIC,IAAJ,EAAU;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UACEA,IAAI,CAACE,IAAL,KAAc,MAAd,KACED,KAAK,CAACC,IAAN,KAAe,MAAf,IAAyBF,IAAI,CAACG,OAAL,KAAiBF,KAAK,CAACE,OAAjD,IACEF,KAAK,CAACC,IAAN,KAAe,MAAf,IAA0B,CAACD,KAAK,CAACG,IAAP,IAAe,CAACX,MAF7C,CADF,EAIE;AACAG,QAAAA,MAAM,CAACS,IAAP,CAAYX,GAAZ;AACD,OAND,MAMO;AACLE,QAAAA,MAAM,CAACS,IAAP,CAAYlB,KAAZ;AACD;AACF;;AAEDS,IAAAA,MAAM,CAACS,IAAP,CAAYd,IAAI,CAACe,KAAL,CAAWL,KAAX,EAAkBX,IAAlB,CAAZ;AACD;;AAED,SAAOM,MAAM,CAACW,IAAP,CAAY,EAAZ,CAAP;AACD","sourcesContent":["'use strict'\n\nmodule.exports = block\n\nvar lineFeed = '\\n'\n\nvar blank = lineFeed + lineFeed\nvar triple = blank + lineFeed\nvar comment = blank + '<!---->' + blank\n\n// Stringify a block node with block children (e.g., `root` or `blockquote`).\n// Knows about code following a list, or adjacent lists with similar bullets,\n// and places an extra line feed between them.\nfunction block(node) {\n  var self = this\n  var options = self.options\n  var fences = options.fences\n  var gap = options.commonmark ? comment : triple\n  var values = []\n  var children = node.children\n  var length = children.length\n  var index = -1\n  var prev\n  var child\n\n  while (++index < length) {\n    prev = child\n    child = children[index]\n\n    if (prev) {\n      // A list preceding another list that are equally ordered, or a\n      // list preceding an indented code block, need a gap between them,\n      // so as not to see them as one list, or content of the list,\n      // respectively.\n      //\n      // In commonmark, only something that breaks both up can do that,\n      // so we opt for an empty, invisible comment.  In other flavours,\n      // two blank lines are fine.\n      if (\n        prev.type === 'list' &&\n        ((child.type === 'list' && prev.ordered === child.ordered) ||\n          (child.type === 'code' && (!child.lang && !fences)))\n      ) {\n        values.push(gap)\n      } else {\n        values.push(blank)\n      }\n    }\n\n    values.push(self.visit(child, node))\n  }\n\n  return values.join('')\n}\n"]},"metadata":{},"sourceType":"script"}