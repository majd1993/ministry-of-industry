{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useFocusAccessKeyEffect;\n\nvar _react = require(\"react\");\n\nvar _useContext = _interopRequireDefault(require(\"./internal/useContext\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction removeInline(array, item) {\n  var index = array.indexOf(item);\n  ~index && array.splice(index, 1);\n}\n\nfunction useFocusAccessKeyEffect(key, ref) {\n  if (key && typeof key !== 'string') {\n    throw new Error('useFocusAccessKeyEffect: If defined, \"key\" must be of type \"string\".');\n  } else if (!ref || !('current' in ref)) {\n    throw new Error('useFocusAccessKeyEffect: \"ref\" must be defined and has \"current\" property.');\n  }\n\n  var context = (0, _useContext.default)();\n  (0, _react.useEffect)(function () {\n    if (key) {\n      var entry = {\n        keys: key.split(/[\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]+/g),\n        ref: ref\n      };\n      context.focii.push(entry);\n      return function () {\n        return removeInline(context.focii, entry);\n      };\n    }\n  }, [context, key, ref]);\n}","map":{"version":3,"sources":["../../../src/Utils/AccessKeySink/useFocusAccessKeyEffect.js"],"names":["index","array","key","context","entry","keys","ref","removeInline"],"mappings":";;;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAEA,IAAA,WAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,uBAAA,CAAA,CAAA;;;;;;;;AAEA,SAAA,YAAA,CAAA,KAAA,EAAA,IAAA,EAAmC;AACjC,MAAMA,KAAK,GAAGC,KAAK,CAALA,OAAAA,CAAd,IAAcA,CAAd;AAEA,GAAA,KAAA,IAAUA,KAAK,CAALA,MAAAA,CAAAA,KAAAA,EAAV,CAAUA,CAAV;AACD;;AAEc,SAAA,uBAAA,CAAA,GAAA,EAAA,GAAA,EAA2C;AACxD,MAAIC,GAAG,IAAI,OAAA,GAAA,KAAX,QAAA,EAAoC;AAClC,UAAM,IAAA,KAAA,CAAN,sEAAM,CAAN;AADF,GAAA,MAEO,IAAI,CAAA,GAAA,IAAQ,EAAE,aAAd,GAAY,CAAZ,EAAiC;AACtC,UAAM,IAAA,KAAA,CAAN,4EAAM,CAAN;AACD;;AAED,MAAMC,OAAO,GAAG,CAAA,GAAA,WAAA,CAAhB,OAAgB,GAAhB;AAEA,GAAA,GAAA,MAAA,CAAA,SAAA,EAAU,YAAM;AACd,QAAA,GAAA,EAAS;AACP,UAAMC,KAAK,GAAG;AAAEC,QAAAA,IAAI,EAAEH,GAAG,CAAHA,KAAAA,CAAR,uEAAQA,CAAR;AAA4BI,QAAAA,GAAG,EAAHA;AAA5B,OAAd;AAEAH,MAAAA,OAAO,CAAPA,KAAAA,CAAAA,IAAAA,CAAAA,KAAAA;AAEA,aAAO,YAAA;AAAA,eAAMI,YAAY,CAACJ,OAAO,CAAR,KAAA,EAAlB,KAAkB,CAAlB;AAAP,OAAA;AACD;AAPH,GAAA,EAQG,CAAA,OAAA,EAAA,GAAA,EARH,GAQG,CARH;AASD","sourcesContent":["import { useEffect } from 'react';\n\nimport useAccessKeySinkContext from './internal/useContext';\n\nfunction removeInline(array, item) {\n  const index = array.indexOf(item);\n\n  ~index && array.splice(index, 1);\n}\n\nexport default function useFocusAccessKeyEffect(key, ref) {\n  if (key && typeof key !== 'string') {\n    throw new Error('useFocusAccessKeyEffect: If defined, \"key\" must be of type \"string\".');\n  } else if (!ref || !('current' in ref)) {\n    throw new Error('useFocusAccessKeyEffect: \"ref\" must be defined and has \"current\" property.');\n  }\n\n  const context = useAccessKeySinkContext();\n\n  useEffect(() => {\n    if (key) {\n      const entry = { keys: key.split(/\\s+/gu), ref };\n\n      context.focii.push(entry);\n\n      return () => removeInline(context.focii, entry);\n    }\n  }, [context, key, ref]);\n}\n"],"sourceRoot":"component:///"},"metadata":{},"sourceType":"script"}