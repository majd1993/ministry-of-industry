{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useCreateActivityStatusRenderer;\n\nvar _botframeworkWebchatCore = require(\"botframework-webchat-core\");\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _useGetSendTimeoutForActivity = _interopRequireDefault(require(\"./useGetSendTimeoutForActivity\"));\n\nvar _useTimePassed = _interopRequireDefault(require(\"./internal/useTimePassed\"));\n\nvar _useWebChatAPIContext2 = _interopRequireDefault(require(\"./internal/useWebChatAPIContext\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n/* eslint react/prop-types: \"off\"*/\n\n\nvar _Constants$ActivityCl = _botframeworkWebchatCore.Constants.ActivityClientState,\n    SEND_FAILED = _Constants$ActivityCl.SEND_FAILED,\n    SENDING = _Constants$ActivityCl.SENDING,\n    SENT = _Constants$ActivityCl.SENT;\n\nvar ActivityStatusContainer = function ActivityStatusContainer(_ref) {\n  var activity = _ref.activity,\n      hideTimestamp = _ref.hideTimestamp,\n      nextVisibleActivity = _ref.nextVisibleActivity;\n\n  var _useWebChatAPIContext = (0, _useWebChatAPIContext2.default)(),\n      createActivityStatusRenderer = _useWebChatAPIContext.activityStatusRenderer;\n\n  var getSendTimeoutForActivity = (0, _useGetSendTimeoutForActivity.default)(); // SEND_FAILED from the activity is ignored, and is instead based on styleOptions.sendTimeout.\n  // Note that the derived state is time-sensitive. The useTimePassed() hook is used to make sure it changes over time.\n\n  var _activity$channelData = activity.channelData;\n  _activity$channelData = _activity$channelData === void 0 ? {} : _activity$channelData;\n  var _activity$channelData2 = _activity$channelData.clientTimestamp,\n      clientTimestamp = _activity$channelData2 === void 0 ? 0 : _activity$channelData2,\n      state = _activity$channelData.state,\n      role = activity.from.role;\n  var activitySent = state !== SENDING && state !== SEND_FAILED;\n  var fromUser = role === 'user';\n  var sendTimeout = getSendTimeoutForActivity({\n    activity: activity\n  });\n  var pastTimeout = (0, _useTimePassed.default)(fromUser && !activitySent ? new Date(clientTimestamp).getTime() + sendTimeout : 0);\n  var sendState = activitySent || !fromUser ? SENT : pastTimeout ? SEND_FAILED : SENDING;\n  return (0, _react.useMemo)(function () {\n    return createActivityStatusRenderer({\n      activity: activity,\n      hideTimestamp: hideTimestamp,\n      nextVisibleActivity: nextVisibleActivity,\n      // \"nextVisibleActivity\" is for backward compatibility, please remove this line on or after 2022-07-22.\n      sameTimestampGroup: hideTimestamp,\n      // \"sameTimestampGroup\" is for backward compatibility, please remove this line on or after 2022-07-22.\n      sendState: sendState\n    });\n  }, [activity, createActivityStatusRenderer, hideTimestamp, nextVisibleActivity, sendState]);\n};\n\nfunction useCreateActivityStatusRenderer() {\n  return (0, _react.useMemo)(function () {\n    return function (_ref2) {\n      var activity = _ref2.activity,\n          nextVisibleActivity = _ref2.nextVisibleActivity;\n      return function () {\n        var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n            hideTimestamp = _ref3.hideTimestamp;\n\n        return /*#__PURE__*/_react.default.createElement(ActivityStatusContainer, {\n          activity: activity,\n          hideTimestamp: hideTimestamp,\n          nextVisibleActivity: nextVisibleActivity\n        });\n      };\n    };\n  }, []);\n}","map":{"version":3,"sources":["../../src/hooks/useCreateActivityStatusRenderer.js"],"names":["ActivityClientState","SEND_FAILED","SENDING","SENT","Constants","ActivityStatusContainer","activity","hideTimestamp","nextVisibleActivity","createActivityStatusRenderer","getSendTimeoutForActivity","clientTimestamp","state","role","activitySent","fromUser","sendTimeout","pastTimeout","sendState","sameTimestampGroup"],"mappings":"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","sourcesContent":["/* eslint react/prop-types: \"off\"*/\n\nimport { Constants } from 'botframework-webchat-core';\nimport React, { useMemo } from 'react';\n\nimport useGetSendTimeoutForActivity from './useGetSendTimeoutForActivity';\nimport useTimePassed from './internal/useTimePassed';\nimport useWebChatAPIContext from './internal/useWebChatAPIContext';\n\nconst {\n  ActivityClientState: { SEND_FAILED, SENDING, SENT }\n} = Constants;\n\nconst ActivityStatusContainer = ({ activity, hideTimestamp, nextVisibleActivity }) => {\n  const { activityStatusRenderer: createActivityStatusRenderer } = useWebChatAPIContext();\n  const getSendTimeoutForActivity = useGetSendTimeoutForActivity();\n\n  // SEND_FAILED from the activity is ignored, and is instead based on styleOptions.sendTimeout.\n  // Note that the derived state is time-sensitive. The useTimePassed() hook is used to make sure it changes over time.\n  const {\n    channelData: { clientTimestamp = 0, state } = {},\n    from: { role }\n  } = activity;\n\n  const activitySent = state !== SENDING && state !== SEND_FAILED;\n  const fromUser = role === 'user';\n  const sendTimeout = getSendTimeoutForActivity({ activity });\n\n  const pastTimeout = useTimePassed(fromUser && !activitySent ? new Date(clientTimestamp).getTime() + sendTimeout : 0);\n\n  const sendState = activitySent || !fromUser ? SENT : pastTimeout ? SEND_FAILED : SENDING;\n\n  return useMemo(\n    () =>\n      createActivityStatusRenderer({\n        activity,\n        hideTimestamp,\n        nextVisibleActivity, // \"nextVisibleActivity\" is for backward compatibility, please remove this line on or after 2022-07-22.\n        sameTimestampGroup: hideTimestamp, // \"sameTimestampGroup\" is for backward compatibility, please remove this line on or after 2022-07-22.\n        sendState\n      }),\n    [activity, createActivityStatusRenderer, hideTimestamp, nextVisibleActivity, sendState]\n  );\n};\n\nexport default function useCreateActivityStatusRenderer() {\n  return useMemo(\n    () => ({ activity, nextVisibleActivity }) => ({ hideTimestamp } = {}) => (\n      <ActivityStatusContainer\n        activity={activity}\n        hideTimestamp={hideTimestamp}\n        nextVisibleActivity={nextVisibleActivity}\n      />\n    ),\n    []\n  );\n}\n"],"sourceRoot":"component:///"},"metadata":{},"sourceType":"script"}