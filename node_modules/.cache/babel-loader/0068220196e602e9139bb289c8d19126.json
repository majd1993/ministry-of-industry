{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n// Multi-device Conversation is a Preview feature.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Exports_1 = require(\"../../common.speech/Exports\");\n\nvar Contracts_1 = require(\"../Contracts\");\n\nvar Exports_2 = require(\"../Exports\");\n\nvar Conversation_1 = require(\"./Conversation\");\n\nvar Exports_3 = require(\"./Exports\");\n\nvar SpeechState;\n\n(function (SpeechState) {\n  SpeechState[SpeechState[\"Inactive\"] = 0] = \"Inactive\";\n  SpeechState[SpeechState[\"Connecting\"] = 1] = \"Connecting\";\n  SpeechState[SpeechState[\"Connected\"] = 2] = \"Connected\";\n})(SpeechState = exports.SpeechState || (exports.SpeechState = {}));\n/***\n * Join, leave or connect to a conversation.\n */\n\n\nvar ConversationTranslator =\n/** @class */\nfunction () {\n  function ConversationTranslator(audioConfig) {\n    var _this = this;\n\n    this.privIsDisposed = false;\n    this.privIsSpeaking = false;\n    this.privSpeechState = SpeechState.Inactive;\n    this.privErrors = Exports_1.ConversationConnectionConfig.restErrors;\n    this.privPlaceholderKey = \"abcdefghijklmnopqrstuvwxyz012345\";\n    this.privPlaceholderRegion = \"westus\";\n    /** Recognizer callbacks */\n\n    this.onSpeechConnected = function (e) {\n      _this.privSpeechState = SpeechState.Connected;\n    };\n\n    this.onSpeechDisconnected = function (e) {\n      _this.privSpeechState = SpeechState.Inactive;\n\n      _this.cancelSpeech();\n    };\n\n    this.onSpeechRecognized = function (r, e) {\n      // TODO: add support for getting recognitions from here if own speech\n      var _a; // if there is an error connecting to the conversation service from the speech service the error will be returned in the ErrorDetails field.\n\n\n      if ((_a = e.result) === null || _a === void 0 ? void 0 : _a.errorDetails) {\n        _this.cancelSpeech(); // TODO: format the error message contained in 'errorDetails'\n\n\n        _this.fireCancelEvent(e.result.errorDetails);\n      }\n    };\n\n    this.onSpeechRecognizing = function (r, e) {// TODO: add support for getting recognitions from here if own speech\n    };\n\n    this.onSpeechCanceled = function (r, e) {\n      if (_this.privSpeechState !== SpeechState.Inactive) {\n        try {\n          _this.cancelSpeech();\n        } catch (error) {\n          _this.privSpeechState = SpeechState.Inactive;\n        }\n      }\n    };\n\n    this.onSpeechSessionStarted = function (r, e) {\n      _this.privSpeechState = SpeechState.Connected;\n    };\n\n    this.onSpeechSessionStopped = function (r, e) {\n      _this.privSpeechState = SpeechState.Inactive;\n    };\n\n    this.privProperties = new Exports_2.PropertyCollection();\n    this.privAudioConfig = audioConfig;\n  }\n\n  Object.defineProperty(ConversationTranslator.prototype, \"properties\", {\n    get: function get() {\n      return this.privProperties;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ConversationTranslator.prototype, \"speechRecognitionLanguage\", {\n    get: function get() {\n      return this.privSpeechRecognitionLanguage;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ConversationTranslator.prototype, \"participants\", {\n    get: function get() {\n      var _a;\n\n      return (_a = this.privConversation) === null || _a === void 0 ? void 0 : _a.participants;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ConversationTranslator.prototype.joinConversationAsync = function (conversation, nickname, param1, param2, param3) {\n    var _this = this;\n\n    try {\n      if (typeof conversation === \"string\") {\n        Contracts_1.Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\n        Contracts_1.Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\n\n        if (!!this.privConversation) {\n          this.handleError(new Error(this.privErrors.permissionDeniedStart), param3);\n        }\n\n        var lang = param1;\n\n        if (lang === undefined || lang === null || lang === \"\") {\n          lang = Exports_1.ConversationConnectionConfig.defaultLanguageCode;\n        } // create a placecholder config\n\n\n        this.privSpeechTranslationConfig = Exports_2.SpeechTranslationConfig.fromSubscription(this.privPlaceholderKey, this.privPlaceholderRegion);\n        this.privSpeechTranslationConfig.setProfanity(Exports_2.ProfanityOption.Masked);\n        this.privSpeechTranslationConfig.addTargetLanguage(lang);\n        this.privSpeechTranslationConfig.setProperty(Exports_2.PropertyId[Exports_2.PropertyId.SpeechServiceConnection_RecoLanguage], lang);\n        this.privSpeechTranslationConfig.setProperty(Exports_2.PropertyId[Exports_2.PropertyId.ConversationTranslator_Name], nickname);\n        var endpoint = this.privProperties.getProperty(Exports_2.PropertyId.ConversationTranslator_Host);\n\n        if (endpoint) {\n          this.privSpeechTranslationConfig.setProperty(Exports_2.PropertyId[Exports_2.PropertyId.ConversationTranslator_Host], endpoint);\n        }\n\n        var speechEndpointHost = this.privProperties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_Host);\n\n        if (speechEndpointHost) {\n          this.privSpeechTranslationConfig.setProperty(Exports_2.PropertyId[Exports_2.PropertyId.SpeechServiceConnection_Host], speechEndpointHost);\n        } // join the conversation\n\n\n        this.privConversation = new Conversation_1.ConversationImpl(this.privSpeechTranslationConfig);\n        this.privConversation.conversationTranslator = this;\n        this.privConversation.joinConversationAsync(conversation, nickname, lang, function (result) {\n          if (!result) {\n            _this.handleError(new Error(_this.privErrors.permissionDeniedConnect), param3);\n          }\n\n          _this.privSpeechTranslationConfig.authorizationToken = result; // connect to the ws\n\n          _this.privConversation.startConversationAsync(function () {\n            _this.handleCallback(param2, param3);\n          }, function (error) {\n            _this.handleError(error, param3);\n          });\n        }, function (error) {\n          _this.handleError(error, param3);\n        });\n      } else if (typeof conversation === \"object\") {\n        Contracts_1.Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\n        Contracts_1.Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\")); // save the nickname\n\n        this.privProperties.setProperty(Exports_2.PropertyId.ConversationTranslator_Name, nickname); // ref the conversation object\n\n        this.privConversation = conversation; // ref the conversation translator object\n\n        this.privConversation.conversationTranslator = this;\n        Contracts_1.Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedConnect);\n        Contracts_1.Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\n        this.privSpeechTranslationConfig = conversation.config;\n        this.handleCallback(param1, param2);\n      } else {\n        this.handleError(new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"invalid conversation type\")), param2);\n      }\n    } catch (error) {\n      this.handleError(error, typeof param1 === \"string\" ? param3 : param2);\n    }\n  };\n  /**\n   * Leave the conversation\n   * @param cb\n   * @param err\n   */\n\n\n  ConversationTranslator.prototype.leaveConversationAsync = function (cb, err) {\n    var _this = this;\n\n    try {\n      // stop the speech websocket\n      this.cancelSpeech(); // stop the websocket\n\n      this.privConversation.endConversationAsync(function () {\n        // https delete request\n        _this.privConversation.deleteConversationAsync(function () {\n          _this.handleCallback(cb, err);\n\n          _this.dispose();\n        }, function (error) {\n          _this.handleError(error, err);\n        });\n      }, function (error) {\n        _this.handleError(error, err);\n      });\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  };\n  /**\n   * Send a text message\n   * @param message\n   * @param cb\n   * @param err\n   */\n\n\n  ConversationTranslator.prototype.sendTextMessageAsync = function (message, cb, err) {\n    var _a;\n\n    try {\n      Contracts_1.Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\n      Contracts_1.Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", message));\n      (_a = this.privConversation) === null || _a === void 0 ? void 0 : _a.sendTextMessageAsync(message, cb, err);\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  };\n  /**\n   * Start speaking\n   * @param cb\n   * @param err\n   */\n\n\n  ConversationTranslator.prototype.startTranscribingAsync = function (cb, err) {\n    var _this = this;\n\n    try {\n      Contracts_1.Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\n      Contracts_1.Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\n\n      if (!this.canSpeak) {\n        this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\n      }\n\n      if (this.privTranslationRecognizer === undefined) {\n        this.connectTranslatorRecognizer(function () {\n          _this.startContinuousRecognition(function () {\n            _this.privIsSpeaking = true;\n\n            _this.handleCallback(cb, err);\n          }, function (error) {\n            _this.privIsSpeaking = false; // this.fireCancelEvent(error);\n\n            _this.cancelSpeech();\n\n            _this.handleError(error, err);\n          });\n        }, function (error) {\n          _this.handleError(error, err);\n        });\n      } else {\n        this.startContinuousRecognition(function () {\n          _this.privIsSpeaking = true;\n\n          _this.handleCallback(cb, err);\n        }, function (error) {\n          _this.privIsSpeaking = false; // this.fireCancelEvent(error);\n\n          _this.cancelSpeech();\n\n          _this.handleError(error, err);\n        });\n      }\n    } catch (error) {\n      this.handleError(error, err);\n      this.cancelSpeech();\n    }\n  };\n  /**\n   * Stop speaking\n   * @param cb\n   * @param err\n   */\n\n\n  ConversationTranslator.prototype.stopTranscribingAsync = function (cb, err) {\n    var _this = this;\n\n    var _a;\n\n    try {\n      if (!this.privIsSpeaking) {\n        // stop speech\n        this.cancelSpeech();\n        this.handleCallback(cb, err);\n        return;\n      } // stop the recognition but leave the websocket open\n\n\n      this.privIsSpeaking = false;\n      (_a = this.privTranslationRecognizer) === null || _a === void 0 ? void 0 : _a.stopContinuousRecognitionAsync(function () {\n        _this.handleCallback(cb, err);\n      }, function (error) {\n        _this.handleError(error, err);\n\n        _this.cancelSpeech();\n      });\n    } catch (error) {\n      this.handleError(error, err);\n      this.cancelSpeech();\n    }\n  };\n\n  ConversationTranslator.prototype.isDisposed = function () {\n    return this.privIsDisposed;\n  };\n\n  ConversationTranslator.prototype.dispose = function (reason) {\n    var _a, _b;\n\n    if (this.isDisposed && !this.privIsSpeaking) {\n      return;\n    }\n\n    this.cancelSpeech();\n    this.privIsDisposed = true;\n    (_a = this.privSpeechTranslationConfig) === null || _a === void 0 ? void 0 : _a.close();\n    this.privSpeechRecognitionLanguage = undefined;\n    this.privProperties = undefined;\n    this.privAudioConfig = undefined;\n    this.privSpeechTranslationConfig = undefined;\n    (_b = this.privConversation) === null || _b === void 0 ? void 0 : _b.dispose();\n    this.privConversation = undefined;\n  };\n  /**\n   * Connect to the speech translation recognizer.\n   * Currently there is no language validation performed before sending the SpeechLanguage code to the service.\n   * If it's an invalid language the raw error will be: 'Error during WebSocket handshake: Unexpected response code: 400'\n   * e.g. pass in 'fr' instead of 'fr-FR', or a text-only language 'cy'\n   * @param cb\n   * @param err\n   */\n\n\n  ConversationTranslator.prototype.connectTranslatorRecognizer = function (cb, err) {\n    try {\n      if (this.privAudioConfig === undefined) {\n        this.privAudioConfig = Exports_2.AudioConfig.fromDefaultMicrophoneInput();\n      } // clear the temp subscription key if it's a participant joining\n\n\n      if (this.privSpeechTranslationConfig.getProperty(Exports_2.PropertyId[Exports_2.PropertyId.SpeechServiceConnection_Key]) === this.privPlaceholderKey) {\n        this.privSpeechTranslationConfig.setProperty(Exports_2.PropertyId[Exports_2.PropertyId.SpeechServiceConnection_Key], \"\");\n      } // TODO\n\n\n      var token = encodeURIComponent(this.privConversation.room.token);\n      var endpointHost = this.privSpeechTranslationConfig.getProperty(Exports_2.PropertyId[Exports_2.PropertyId.SpeechServiceConnection_Host], Exports_1.ConversationConnectionConfig.speechHost);\n      endpointHost = endpointHost.replace(\"{region}\", this.privConversation.room.cognitiveSpeechRegion);\n      var url = \"wss://\" + endpointHost + Exports_1.ConversationConnectionConfig.speechPath + \"?\" + Exports_1.ConversationConnectionConfig.configParams.token + \"=\" + token;\n      this.privSpeechTranslationConfig.setProperty(Exports_2.PropertyId[Exports_2.PropertyId.SpeechServiceConnection_Endpoint], url);\n      this.privTranslationRecognizer = new Exports_2.TranslationRecognizer(this.privSpeechTranslationConfig, this.privAudioConfig);\n      this.privTranslationRecognizerConnection = Exports_2.Connection.fromRecognizer(this.privTranslationRecognizer);\n      this.privTranslationRecognizerConnection.connected = this.onSpeechConnected;\n      this.privTranslationRecognizerConnection.disconnected = this.onSpeechDisconnected;\n      this.privTranslationRecognizer.recognized = this.onSpeechRecognized;\n      this.privTranslationRecognizer.recognizing = this.onSpeechRecognizing;\n      this.privTranslationRecognizer.canceled = this.onSpeechCanceled;\n      this.privTranslationRecognizer.sessionStarted = this.onSpeechSessionStarted;\n      this.privTranslationRecognizer.sessionStopped = this.onSpeechSessionStopped;\n      this.handleCallback(cb, err);\n    } catch (error) {\n      this.handleError(error, err);\n      this.cancelSpeech(); // this.fireCancelEvent(error); ?\n    }\n  };\n  /**\n   * Handle the start speaking request\n   * @param cb\n   * @param err\n   */\n\n\n  ConversationTranslator.prototype.startContinuousRecognition = function (cb, err) {\n    this.privTranslationRecognizer.startContinuousRecognitionAsync(cb, err);\n  };\n  /**\n   * Fire a cancel event\n   * @param error\n   */\n\n\n  ConversationTranslator.prototype.fireCancelEvent = function (error) {\n    var _a, _b, _c, _d, _e, _f, _g;\n\n    try {\n      if (!!this.canceled) {\n        var cancelEvent = new Exports_3.ConversationTranslationCanceledEventArgs((_b = (_a = error) === null || _a === void 0 ? void 0 : _a.reason, _b !== null && _b !== void 0 ? _b : Exports_2.CancellationReason.Error), (_d = (_c = error) === null || _c === void 0 ? void 0 : _c.errorDetails, _d !== null && _d !== void 0 ? _d : error), (_f = (_e = error) === null || _e === void 0 ? void 0 : _e.errorCode, _f !== null && _f !== void 0 ? _f : Exports_2.CancellationErrorCode.RuntimeError), undefined, (_g = error) === null || _g === void 0 ? void 0 : _g.sessionId);\n        this.canceled(this, cancelEvent);\n      }\n    } catch (e) {//\n    }\n  };\n  /**\n   * Cancel the speech websocket\n   */\n\n\n  ConversationTranslator.prototype.cancelSpeech = function () {\n    var _a, _b;\n\n    try {\n      this.privIsSpeaking = false;\n      (_a = this.privTranslationRecognizer) === null || _a === void 0 ? void 0 : _a.stopContinuousRecognitionAsync();\n      (_b = this.privTranslationRecognizerConnection) === null || _b === void 0 ? void 0 : _b.closeConnection();\n      this.privTranslationRecognizerConnection = undefined;\n      this.privTranslationRecognizer = undefined;\n      this.privSpeechState = SpeechState.Inactive;\n    } catch (e) {// ignore the error\n    }\n  };\n\n  Object.defineProperty(ConversationTranslator.prototype, \"canSpeak\", {\n    get: function get() {\n      // is there a Conversation websocket available\n      if (!this.privConversation.isConnected) {\n        return false;\n      } // is the user already speaking\n\n\n      if (this.privIsSpeaking || this.privSpeechState === SpeechState.Connected || this.privSpeechState === SpeechState.Connecting) {\n        return false;\n      } // is the user muted\n\n\n      if (this.privConversation.isMutedByHost) {\n        return false;\n      }\n\n      return true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ConversationTranslator.prototype.handleCallback = function (cb, err) {\n    if (!!cb) {\n      try {\n        cb();\n      } catch (e) {\n        if (!!err) {\n          err(e);\n        }\n      }\n\n      cb = undefined;\n    }\n  };\n\n  ConversationTranslator.prototype.handleError = function (error, err) {\n    if (!!err) {\n      if (error instanceof Error) {\n        var typedError = error;\n        err(typedError.name + \": \" + typedError.message);\n      } else {\n        err(error);\n      }\n    }\n  };\n\n  return ConversationTranslator;\n}();\n\nexports.ConversationTranslator = ConversationTranslator;","map":{"version":3,"sources":["src/sdk/Transcription/ConversationTranslator.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { ConversationConnectionConfig } from \"../../common.speech/Exports\";\r\nimport { IDisposable, IErrorMessages } from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    Connection,\r\n    ConnectionEventArgs,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechTranslationConfig,\r\n    TranslationRecognitionCanceledEventArgs,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognizer\r\n} from \"../Exports\";\r\nimport { ConversationImpl } from \"./Conversation\";\r\nimport {\r\n    ConversationExpirationEventArgs,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    Participant,\r\n} from \"./Exports\";\r\nimport { Callback, IConversation } from \"./IConversation\";\r\nimport { IConversationTranslator } from \"./IConversationTranslator\";\r\n\r\nexport enum SpeechState {\r\n    Inactive, Connecting, Connected\r\n}\r\n\r\n/***\r\n * Join, leave or connect to a conversation.\r\n */\r\nexport class ConversationTranslator implements IConversationTranslator, IDisposable {\r\n\r\n    private privSpeechRecognitionLanguage: string;\r\n    private privProperties: PropertyCollection;\r\n    private privAudioConfig: AudioConfig;\r\n    private privSpeechTranslationConfig: SpeechTranslationConfig;\r\n    private privTranslationRecognizerConnection: Connection;\r\n    private privIsDisposed: boolean = false;\r\n    private privTranslationRecognizer: TranslationRecognizer;\r\n    private privIsSpeaking: boolean = false;\r\n    private privConversation: ConversationImpl;\r\n    private privSpeechState: SpeechState = SpeechState.Inactive;\r\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\r\n    private privPlaceholderKey: string = \"abcdefghijklmnopqrstuvwxyz012345\";\r\n    private privPlaceholderRegion: string = \"westus\";\r\n\r\n    public constructor(audioConfig?: AudioConfig) {\r\n        this.privProperties = new PropertyCollection();\r\n        this.privAudioConfig = audioConfig;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechRecognitionLanguage;\r\n    }\r\n\r\n    public get participants(): Participant[] {\r\n        return this.privConversation?.participants;\r\n    }\r\n\r\n    public canceled: (sender: IConversationTranslator, event: ConversationTranslationCanceledEventArgs) => void;\r\n    public conversationExpiration: (sender: IConversationTranslator, event: ConversationExpirationEventArgs) => void;\r\n    public participantsChanged: (sender: IConversationTranslator, event: ConversationParticipantsChangedEventArgs) => void;\r\n    public sessionStarted: (sender: IConversationTranslator, event: SessionEventArgs) => void;\r\n    public sessionStopped: (sender: IConversationTranslator, event: SessionEventArgs) => void;\r\n    public textMessageReceived: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n    public transcribed: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n    public transcribing: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n\r\n    /**\r\n     * Join a conversation. If this is the host, pass in the previously created Conversation object.\r\n     * @param conversation\r\n     * @param nickname\r\n     * @param lang\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public joinConversationAsync(conversation: IConversation, nickname: string, cb?: Callback, err?: Callback): void;\r\n    public joinConversationAsync(conversationId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void;\r\n    public joinConversationAsync(conversation: any, nickname: string, param1?: string | Callback, param2?: Callback, param3?: Callback): void {\r\n\r\n        try {\r\n\r\n            if (typeof conversation === \"string\") {\r\n\r\n                Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\r\n                Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n\r\n                if (!!this.privConversation) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedStart), param3);\r\n                }\r\n\r\n                let lang: string = param1 as string;\r\n                if (lang === undefined || lang === null || lang === \"\") { lang = ConversationConnectionConfig.defaultLanguageCode; }\r\n\r\n                // create a placecholder config\r\n                this.privSpeechTranslationConfig = SpeechTranslationConfig.fromSubscription(\r\n                    this.privPlaceholderKey,\r\n                    this.privPlaceholderRegion);\r\n                this.privSpeechTranslationConfig.setProfanity(ProfanityOption.Masked);\r\n                this.privSpeechTranslationConfig.addTargetLanguage(lang);\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], lang);\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Name], nickname);\r\n\r\n                const endpoint: string = this.privProperties.getProperty(PropertyId.ConversationTranslator_Host);\r\n                if (endpoint) {\r\n                    this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Host], endpoint);\r\n                }\r\n                const speechEndpointHost: string = this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Host);\r\n                if (speechEndpointHost) {\r\n                    this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Host], speechEndpointHost);\r\n                }\r\n\r\n                // join the conversation\r\n                this.privConversation = new ConversationImpl(this.privSpeechTranslationConfig);\r\n                this.privConversation.conversationTranslator = this;\r\n\r\n                this.privConversation.joinConversationAsync(\r\n                    conversation,\r\n                    nickname,\r\n                    lang,\r\n                    ((result: string) => {\r\n\r\n                        if (!result) {\r\n                            this.handleError(new Error(this.privErrors.permissionDeniedConnect), param3);\r\n                        }\r\n\r\n                        this.privSpeechTranslationConfig.authorizationToken = result;\r\n\r\n                        // connect to the ws\r\n                        this.privConversation.startConversationAsync(\r\n                            (() => {\r\n                                this.handleCallback(param2, param3);\r\n                            }),\r\n                            ((error: any) => {\r\n                                this.handleError(error, param3);\r\n                            }));\r\n\r\n                    }),\r\n                    ((error: any) => {\r\n                        this.handleError(error, param3);\r\n                    }));\r\n\r\n            } else if (typeof conversation === \"object\") {\r\n\r\n                Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\r\n                Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n\r\n                // save the nickname\r\n                this.privProperties.setProperty(PropertyId.ConversationTranslator_Name, nickname);\r\n                // ref the conversation object\r\n                this.privConversation = conversation as ConversationImpl;\r\n                // ref the conversation translator object\r\n                this.privConversation.conversationTranslator = this;\r\n\r\n                Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedConnect);\r\n                Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\r\n\r\n                this.privSpeechTranslationConfig = conversation.config;\r\n\r\n                this.handleCallback(param1 as Callback, param2);\r\n            } else {\r\n                this.handleError(\r\n                    new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"invalid conversation type\")),\r\n                    param2);\r\n            }\r\n\r\n        } catch (error) {\r\n            this.handleError(error, typeof param1 === \"string\" ? param3 : param2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Leave the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public leaveConversationAsync(cb?: Callback, err?: Callback): void {\r\n\r\n        try {\r\n\r\n            // stop the speech websocket\r\n            this.cancelSpeech();\r\n\r\n            // stop the websocket\r\n            this.privConversation.endConversationAsync(\r\n                (() => {\r\n                    // https delete request\r\n                    this.privConversation.deleteConversationAsync(\r\n                        (() => {\r\n                            this.handleCallback(cb, err);\r\n                            this.dispose();\r\n                        }),\r\n                        ((error: any) => {\r\n                            this.handleError(error, err);\r\n                        }));\r\n                }),\r\n                ((error: any) => {\r\n                    this.handleError(error, err);\r\n                }));\r\n\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send a text message\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\r\n\r\n        try {\r\n            Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\r\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", message));\r\n\r\n            this.privConversation?.sendTextMessageAsync(message, cb, err);\r\n        } catch (error) {\r\n\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start speaking\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public startTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n\r\n        try {\r\n            Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\r\n            Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\r\n\r\n            if (!this.canSpeak) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n\r\n            if (this.privTranslationRecognizer === undefined) {\r\n                this.connectTranslatorRecognizer(\r\n                    (() => {\r\n                        this.startContinuousRecognition(\r\n                            (() => {\r\n                                this.privIsSpeaking = true;\r\n                                this.handleCallback(cb, err);\r\n                            }),\r\n                            ((error: any) => {\r\n\r\n                                this.privIsSpeaking = false;\r\n                                // this.fireCancelEvent(error);\r\n                                this.cancelSpeech();\r\n                                this.handleError(error, err);\r\n                            }));\r\n                    }),\r\n                    ((error: any) => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            } else {\r\n                this.startContinuousRecognition(\r\n                    (() => {\r\n                        this.privIsSpeaking = true;\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any) => {\r\n                        this.privIsSpeaking = false;\r\n                        // this.fireCancelEvent(error);\r\n                        this.cancelSpeech();\r\n\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n\r\n        } catch (error) {\r\n\r\n            this.handleError(error, err);\r\n\r\n            this.cancelSpeech();\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stop speaking\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public stopTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n\r\n        try {\r\n            if (!this.privIsSpeaking) {\r\n                // stop speech\r\n                this.cancelSpeech();\r\n                this.handleCallback(cb, err);\r\n                return;\r\n            }\r\n\r\n            // stop the recognition but leave the websocket open\r\n            this.privIsSpeaking = false;\r\n            this.privTranslationRecognizer?.stopContinuousRecognitionAsync(() => {\r\n                this.handleCallback(cb, err);\r\n            }, (error: any) => {\r\n                this.handleError(error, err);\r\n                this.cancelSpeech();\r\n            });\r\n\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n            this.cancelSpeech();\r\n        }\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(reason?: string): void {\r\n        if (this.isDisposed && !this.privIsSpeaking) {\r\n            return;\r\n        }\r\n        this.cancelSpeech();\r\n        this.privIsDisposed = true;\r\n        this.privSpeechTranslationConfig?.close();\r\n        this.privSpeechRecognitionLanguage = undefined;\r\n        this.privProperties = undefined;\r\n        this.privAudioConfig = undefined;\r\n        this.privSpeechTranslationConfig = undefined;\r\n        this.privConversation?.dispose();\r\n        this.privConversation = undefined;\r\n    }\r\n\r\n    /**\r\n     * Connect to the speech translation recognizer.\r\n     * Currently there is no language validation performed before sending the SpeechLanguage code to the service.\r\n     * If it's an invalid language the raw error will be: 'Error during WebSocket handshake: Unexpected response code: 400'\r\n     * e.g. pass in 'fr' instead of 'fr-FR', or a text-only language 'cy'\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    private connectTranslatorRecognizer(cb?: Callback, err?: Callback): void {\r\n\r\n        try {\r\n\r\n            if (this.privAudioConfig === undefined) {\r\n                this.privAudioConfig = AudioConfig.fromDefaultMicrophoneInput();\r\n            }\r\n\r\n            // clear the temp subscription key if it's a participant joining\r\n            if (this.privSpeechTranslationConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key])\r\n                === this.privPlaceholderKey) {\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Key], \"\");\r\n            }\r\n\r\n            // TODO\r\n            const token: string = encodeURIComponent(this.privConversation.room.token);\r\n\r\n            let endpointHost: string = this.privSpeechTranslationConfig.getProperty(\r\n                PropertyId[PropertyId.SpeechServiceConnection_Host], ConversationConnectionConfig.speechHost);\r\n            endpointHost = endpointHost.replace(\"{region}\", this.privConversation.room.cognitiveSpeechRegion);\r\n\r\n            const url: string = `wss://${endpointHost}${ConversationConnectionConfig.speechPath}?${ConversationConnectionConfig.configParams.token}=${token}`;\r\n\r\n            this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Endpoint], url);\r\n\r\n            this.privTranslationRecognizer = new TranslationRecognizer(this.privSpeechTranslationConfig, this.privAudioConfig);\r\n            this.privTranslationRecognizerConnection = Connection.fromRecognizer(this.privTranslationRecognizer);\r\n            this.privTranslationRecognizerConnection.connected = this.onSpeechConnected;\r\n            this.privTranslationRecognizerConnection.disconnected = this.onSpeechDisconnected;\r\n            this.privTranslationRecognizer.recognized = this.onSpeechRecognized;\r\n            this.privTranslationRecognizer.recognizing = this.onSpeechRecognizing;\r\n            this.privTranslationRecognizer.canceled = this.onSpeechCanceled;\r\n            this.privTranslationRecognizer.sessionStarted = this.onSpeechSessionStarted;\r\n            this.privTranslationRecognizer.sessionStopped = this.onSpeechSessionStopped;\r\n\r\n            this.handleCallback(cb, err);\r\n\r\n        } catch (error) {\r\n\r\n            this.handleError(error, err);\r\n\r\n            this.cancelSpeech();\r\n            // this.fireCancelEvent(error); ?\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle the start speaking request\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    private startContinuousRecognition(cb?: Callback, err?: Callback): void {\r\n        this.privTranslationRecognizer.startContinuousRecognitionAsync(cb, err);\r\n    }\r\n\r\n    /** Recognizer callbacks */\r\n    private onSpeechConnected = (e: ConnectionEventArgs) => {\r\n        this.privSpeechState = SpeechState.Connected;\r\n    }\r\n\r\n    private onSpeechDisconnected = (e: ConnectionEventArgs) => {\r\n        this.privSpeechState = SpeechState.Inactive;\r\n        this.cancelSpeech();\r\n    }\r\n\r\n    private onSpeechRecognized = (r: TranslationRecognizer, e: TranslationRecognitionEventArgs) => {\r\n        // TODO: add support for getting recognitions from here if own speech\r\n\r\n        // if there is an error connecting to the conversation service from the speech service the error will be returned in the ErrorDetails field.\r\n        if (e.result?.errorDetails) {\r\n            this.cancelSpeech();\r\n            // TODO: format the error message contained in 'errorDetails'\r\n            this.fireCancelEvent(e.result.errorDetails);\r\n        }\r\n    }\r\n\r\n    private onSpeechRecognizing = (r: TranslationRecognizer, e: TranslationRecognitionEventArgs) => {\r\n        // TODO: add support for getting recognitions from here if own speech\r\n    }\r\n\r\n    private onSpeechCanceled = (r: TranslationRecognizer, e: TranslationRecognitionCanceledEventArgs) => {\r\n        if (this.privSpeechState !== SpeechState.Inactive) {\r\n            try {\r\n                this.cancelSpeech();\r\n            } catch (error) {\r\n                this.privSpeechState = SpeechState.Inactive;\r\n            }\r\n        }\r\n    }\r\n\r\n    private onSpeechSessionStarted = (r: Recognizer, e: SessionEventArgs) => {\r\n        this.privSpeechState = SpeechState.Connected;\r\n\r\n    }\r\n\r\n    private onSpeechSessionStopped = (r: Recognizer, e: SessionEventArgs) => {\r\n        this.privSpeechState = SpeechState.Inactive;\r\n    }\r\n\r\n    /**\r\n     * Fire a cancel event\r\n     * @param error\r\n     */\r\n    private fireCancelEvent(error: any): void {\r\n        try {\r\n            if (!!this.canceled) {\r\n                const cancelEvent: ConversationTranslationCanceledEventArgs = new ConversationTranslationCanceledEventArgs(\r\n                    error?.reason ?? CancellationReason.Error,\r\n                    error?.errorDetails ?? error,\r\n                    error?.errorCode ?? CancellationErrorCode.RuntimeError,\r\n                    undefined,\r\n                    error?.sessionId);\r\n\r\n                this.canceled(this, cancelEvent);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Cancel the speech websocket\r\n     */\r\n    private cancelSpeech(): void {\r\n        try {\r\n            this.privIsSpeaking = false;\r\n            this.privTranslationRecognizer?.stopContinuousRecognitionAsync();\r\n            this.privTranslationRecognizerConnection?.closeConnection();\r\n            this.privTranslationRecognizerConnection = undefined;\r\n            this.privTranslationRecognizer = undefined;\r\n            this.privSpeechState = SpeechState.Inactive;\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n    }\r\n\r\n    private get canSpeak(): boolean {\r\n\r\n        // is there a Conversation websocket available\r\n        if (!this.privConversation.isConnected) {\r\n            return false;\r\n        }\r\n\r\n        // is the user already speaking\r\n        if (this.privIsSpeaking || this.privSpeechState === SpeechState.Connected || this.privSpeechState === SpeechState.Connecting) {\r\n            return false;\r\n        }\r\n\r\n        // is the user muted\r\n        if (this.privConversation.isMutedByHost) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private handleCallback(cb: Callback, err: Callback): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }\r\n            cb = undefined;\r\n        }\r\n    }\r\n\r\n    private handleError(error: any, err: Callback): void {\r\n        if (!!err) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error as Error;\r\n                err(typedError.name + \": \" + typedError.message);\r\n\r\n            } else {\r\n                err(error);\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}