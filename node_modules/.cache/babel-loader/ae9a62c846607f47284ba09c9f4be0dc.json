{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Exports_1 = require(\"../common/Exports\");\n\nvar ReplayableAudioNode =\n/** @class */\nfunction () {\n  function ReplayableAudioNode(audioSource, bytesPerSecond) {\n    var _this = this;\n\n    this.privBuffers = [];\n    this.privReplayOffset = 0;\n    this.privLastShrinkOffset = 0;\n    this.privBufferStartOffset = 0;\n    this.privBufferSerial = 0;\n    this.privBufferedBytes = 0;\n    this.privReplay = false;\n    this.privLastChunkAcquiredTime = 0;\n\n    this.id = function () {\n      return _this.privAudioNode.id();\n    };\n\n    this.privAudioNode = audioSource;\n    this.privBytesPerSecond = bytesPerSecond;\n  } // Reads and returns the next chunk of audio buffer.\n  // If replay of existing buffers are needed, read() will first seek and replay\n  // existing content, and upoin completion it will read new content from the underlying\n  // audio node, saving that content into the replayable buffers.\n\n\n  ReplayableAudioNode.prototype.read = function () {\n    var _this = this; // if there is a replay request to honor.\n\n\n    if (!!this.privReplay && this.privBuffers.length !== 0) {\n      // Find the start point in the buffers.\n      // Offsets are in 100ns increments.\n      // So how many bytes do we need to seek to get the right offset?\n      var offsetToSeek = this.privReplayOffset - this.privBufferStartOffset;\n      var bytesToSeek = Math.round(offsetToSeek * this.privBytesPerSecond * 1e-7);\n\n      if (0 !== bytesToSeek % 2) {\n        bytesToSeek++;\n      }\n\n      var i = 0;\n\n      while (i < this.privBuffers.length && bytesToSeek >= this.privBuffers[i].chunk.buffer.byteLength) {\n        bytesToSeek -= this.privBuffers[i++].chunk.buffer.byteLength;\n      }\n\n      var retVal = this.privBuffers[i].chunk.buffer.slice(bytesToSeek);\n      this.privReplayOffset += retVal.byteLength / this.privBytesPerSecond * 1e+7; // If we've reached the end of the buffers, stop replaying.\n\n      if (i === this.privBuffers.length - 1) {\n        this.privReplay = false;\n      }\n\n      return Exports_1.PromiseHelper.fromResult({\n        buffer: retVal,\n        isEnd: false,\n        timeReceived: this.privBuffers[i].chunk.timeReceived\n      });\n    }\n\n    return this.privAudioNode.read().onSuccessContinueWith(function (result) {\n      if (result && result.buffer) {\n        _this.privBuffers.push(new BufferEntry(result, _this.privBufferSerial++, _this.privBufferedBytes));\n\n        _this.privBufferedBytes += result.buffer.byteLength;\n      }\n\n      return result;\n    });\n  };\n\n  ReplayableAudioNode.prototype.detach = function () {\n    this.privAudioNode.detach();\n    this.privBuffers = undefined;\n  };\n\n  ReplayableAudioNode.prototype.replay = function () {\n    if (this.privBuffers && 0 !== this.privBuffers.length) {\n      this.privReplay = true;\n      this.privReplayOffset = this.privLastShrinkOffset;\n    }\n  }; // Shrinks the existing audio buffers to start at the new offset, or at the\n  // beginning of the buffer closest to the requested offset.\n  // A replay request will start from the last shrink point.\n\n\n  ReplayableAudioNode.prototype.shrinkBuffers = function (offset) {\n    if (this.privBuffers === undefined) {\n      return;\n    }\n\n    this.privLastShrinkOffset = offset; // Find the start point in the buffers.\n    // Offsets are in 100ns increments.\n    // So how many bytes do we need to seek to get the right offset?\n\n    var offsetToSeek = offset - this.privBufferStartOffset;\n    var bytesToSeek = Math.round(offsetToSeek * this.privBytesPerSecond * 1e-7);\n    var i = 0;\n\n    while (i < this.privBuffers.length && bytesToSeek >= this.privBuffers[i].chunk.buffer.byteLength) {\n      bytesToSeek -= this.privBuffers[i++].chunk.buffer.byteLength;\n    }\n\n    this.privBufferStartOffset = Math.round(offset - bytesToSeek / this.privBytesPerSecond * 1e+7);\n    this.privBuffers = this.privBuffers.slice(i);\n  }; // Finds the time a buffer of audio was first seen by offset.\n\n\n  ReplayableAudioNode.prototype.findTimeAtOffset = function (offset) {\n    if (offset < this.privBufferStartOffset || this.privBuffers === undefined) {\n      return 0;\n    }\n\n    for (var _i = 0, _a = this.privBuffers; _i < _a.length; _i++) {\n      var value = _a[_i];\n      var startOffset = value.byteOffset / this.privBytesPerSecond * 1e7;\n      var endOffset = startOffset + value.chunk.buffer.byteLength / this.privBytesPerSecond * 1e7;\n\n      if (offset >= startOffset && offset <= endOffset) {\n        return value.chunk.timeReceived;\n      }\n    }\n\n    return 0;\n  };\n\n  return ReplayableAudioNode;\n}();\n\nexports.ReplayableAudioNode = ReplayableAudioNode; // Primary use of this class is to help debugging problems with the replay\n// code. If the memory cost of alloc / dealloc gets too much, drop it and just use\n// the ArrayBuffer directly.\n// tslint:disable-next-line:max-classes-per-file\n\nvar BufferEntry =\n/** @class */\nfunction () {\n  function BufferEntry(chunk, serial, byteOffset) {\n    this.chunk = chunk;\n    this.serial = serial;\n    this.byteOffset = byteOffset;\n  }\n\n  return BufferEntry;\n}();","map":{"version":3,"sources":["src/common.browser/ReplayableAudioNode.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AudioStreamFormatImpl } from \"../../src/sdk/Audio/AudioStreamFormat\";\r\nimport {\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n    Promise,\r\n    PromiseHelper,\r\n} from \"../common/Exports\";\r\n\r\nexport class ReplayableAudioNode implements IAudioStreamNode {\r\n    private privAudioNode: IAudioStreamNode;\r\n    private privBytesPerSecond: number;\r\n    private privBuffers: BufferEntry[] = [];\r\n    private privReplayOffset: number = 0;\r\n    private privLastShrinkOffset: number = 0;\r\n    private privBufferStartOffset: number = 0;\r\n    private privBufferSerial: number = 0;\r\n    private privBufferedBytes: number = 0;\r\n    private privReplay: boolean = false;\r\n    private privLastChunkAcquiredTime: number = 0;\r\n\r\n    public constructor(audioSource: IAudioStreamNode, bytesPerSecond: number) {\r\n        this.privAudioNode = audioSource;\r\n        this.privBytesPerSecond = bytesPerSecond;\r\n    }\r\n\r\n    public id = (): string => {\r\n        return this.privAudioNode.id();\r\n    }\r\n\r\n    // Reads and returns the next chunk of audio buffer.\r\n    // If replay of existing buffers are needed, read() will first seek and replay\r\n    // existing content, and upoin completion it will read new content from the underlying\r\n    // audio node, saving that content into the replayable buffers.\r\n    public read(): Promise<IStreamChunk<ArrayBuffer>> {\r\n        // if there is a replay request to honor.\r\n        if (!!this.privReplay && this.privBuffers.length !== 0) {\r\n            // Find the start point in the buffers.\r\n            // Offsets are in 100ns increments.\r\n            // So how many bytes do we need to seek to get the right offset?\r\n            const offsetToSeek: number = this.privReplayOffset - this.privBufferStartOffset;\r\n\r\n            let bytesToSeek: number = Math.round(offsetToSeek * this.privBytesPerSecond * 1e-7);\r\n            if (0 !== (bytesToSeek % 2)) {\r\n                bytesToSeek++;\r\n            }\r\n\r\n            let i: number = 0;\r\n\r\n            while (i < this.privBuffers.length && bytesToSeek >= this.privBuffers[i].chunk.buffer.byteLength) {\r\n                bytesToSeek -= this.privBuffers[i++].chunk.buffer.byteLength;\r\n            }\r\n\r\n            const retVal: ArrayBuffer = this.privBuffers[i].chunk.buffer.slice(bytesToSeek);\r\n\r\n            this.privReplayOffset += (retVal.byteLength / this.privBytesPerSecond) * 1e+7;\r\n\r\n            // If we've reached the end of the buffers, stop replaying.\r\n            if (i === this.privBuffers.length - 1) {\r\n                this.privReplay = false;\r\n            }\r\n\r\n            return PromiseHelper.fromResult<IStreamChunk<ArrayBuffer>>({\r\n                buffer: retVal,\r\n                isEnd: false,\r\n                timeReceived: this.privBuffers[i].chunk.timeReceived,\r\n            });\r\n        }\r\n\r\n        return this.privAudioNode.read()\r\n            .onSuccessContinueWith((result: IStreamChunk<ArrayBuffer>) => {\r\n                if (result && result.buffer) {\r\n                    this.privBuffers.push(new BufferEntry(result, this.privBufferSerial++, this.privBufferedBytes));\r\n                    this.privBufferedBytes += result.buffer.byteLength;\r\n                }\r\n                return result;\r\n            });\r\n    }\r\n\r\n    public detach(): void {\r\n        this.privAudioNode.detach();\r\n        this.privBuffers = undefined;\r\n    }\r\n\r\n    public replay(): void {\r\n        if (this.privBuffers && 0 !== this.privBuffers.length) {\r\n            this.privReplay = true;\r\n            this.privReplayOffset = this.privLastShrinkOffset;\r\n        }\r\n    }\r\n\r\n    // Shrinks the existing audio buffers to start at the new offset, or at the\r\n    // beginning of the buffer closest to the requested offset.\r\n    // A replay request will start from the last shrink point.\r\n    public shrinkBuffers(offset: number): void {\r\n        if (this.privBuffers === undefined) {\r\n            return;\r\n        }\r\n\r\n        this.privLastShrinkOffset = offset;\r\n\r\n        // Find the start point in the buffers.\r\n        // Offsets are in 100ns increments.\r\n        // So how many bytes do we need to seek to get the right offset?\r\n        const offsetToSeek: number = offset - this.privBufferStartOffset;\r\n\r\n        let bytesToSeek: number = Math.round(offsetToSeek * this.privBytesPerSecond * 1e-7);\r\n\r\n        let i: number = 0;\r\n\r\n        while (i < this.privBuffers.length && bytesToSeek >= this.privBuffers[i].chunk.buffer.byteLength) {\r\n            bytesToSeek -= this.privBuffers[i++].chunk.buffer.byteLength;\r\n        }\r\n        this.privBufferStartOffset = Math.round(offset - ((bytesToSeek / this.privBytesPerSecond) * 1e+7));\r\n        this.privBuffers = this.privBuffers.slice(i);\r\n    }\r\n\r\n    // Finds the time a buffer of audio was first seen by offset.\r\n    public findTimeAtOffset(offset: number): number {\r\n        if (offset < this.privBufferStartOffset || this.privBuffers === undefined) {\r\n            return 0;\r\n        }\r\n\r\n        for (const value of this.privBuffers) {\r\n            const startOffset: number = (value.byteOffset / this.privBytesPerSecond) * 1e7;\r\n            const endOffset: number = startOffset + ((value.chunk.buffer.byteLength / this.privBytesPerSecond) * 1e7);\r\n\r\n            if (offset >= startOffset && offset <= endOffset) {\r\n                return value.chunk.timeReceived;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n}\r\n\r\n// Primary use of this class is to help debugging problems with the replay\r\n// code. If the memory cost of alloc / dealloc gets too much, drop it and just use\r\n// the ArrayBuffer directly.\r\n// tslint:disable-next-line:max-classes-per-file\r\nclass BufferEntry {\r\n    public chunk: IStreamChunk<ArrayBuffer>;\r\n    public serial: number;\r\n    public byteOffset: number;\r\n\r\n    public constructor(chunk: IStreamChunk<ArrayBuffer>, serial: number, byteOffset: number) {\r\n        this.chunk = chunk;\r\n        this.serial = serial;\r\n        this.byteOffset = byteOffset;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}