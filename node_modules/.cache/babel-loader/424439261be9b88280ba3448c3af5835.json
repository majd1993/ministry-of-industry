{"ast":null,"code":"'use strict';\n\nmodule.exports = indentation;\nvar tab = '\\t';\nvar space = ' ';\nvar spaceSize = 1;\nvar tabSize = 4; // Gets indentation information for a line.\n\nfunction indentation(value) {\n  var index = 0;\n  var indent = 0;\n  var character = value.charAt(index);\n  var stops = {};\n  var size;\n\n  while (character === tab || character === space) {\n    size = character === tab ? tabSize : spaceSize;\n    indent += size;\n\n    if (size > 1) {\n      indent = Math.floor(indent / size) * size;\n    }\n\n    stops[indent] = index;\n    character = value.charAt(++index);\n  }\n\n  return {\n    indent: indent,\n    stops: stops\n  };\n}","map":{"version":3,"sources":["/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/remark-parse/lib/util/get-indentation.js"],"names":["module","exports","indentation","tab","space","spaceSize","tabSize","value","index","indent","character","charAt","stops","size","Math","floor"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,WAAjB;AAEA,IAAIC,GAAG,GAAG,IAAV;AACA,IAAIC,KAAK,GAAG,GAAZ;AAEA,IAAIC,SAAS,GAAG,CAAhB;AACA,IAAIC,OAAO,GAAG,CAAd,C,CAEA;;AACA,SAASJ,WAAT,CAAqBK,KAArB,EAA4B;AAC1B,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,MAAM,GAAG,CAAb;AACA,MAAIC,SAAS,GAAGH,KAAK,CAACI,MAAN,CAAaH,KAAb,CAAhB;AACA,MAAII,KAAK,GAAG,EAAZ;AACA,MAAIC,IAAJ;;AAEA,SAAOH,SAAS,KAAKP,GAAd,IAAqBO,SAAS,KAAKN,KAA1C,EAAiD;AAC/CS,IAAAA,IAAI,GAAGH,SAAS,KAAKP,GAAd,GAAoBG,OAApB,GAA8BD,SAArC;AAEAI,IAAAA,MAAM,IAAII,IAAV;;AAEA,QAAIA,IAAI,GAAG,CAAX,EAAc;AACZJ,MAAAA,MAAM,GAAGK,IAAI,CAACC,KAAL,CAAWN,MAAM,GAAGI,IAApB,IAA4BA,IAArC;AACD;;AAEDD,IAAAA,KAAK,CAACH,MAAD,CAAL,GAAgBD,KAAhB;AACAE,IAAAA,SAAS,GAAGH,KAAK,CAACI,MAAN,CAAa,EAAEH,KAAf,CAAZ;AACD;;AAED,SAAO;AAACC,IAAAA,MAAM,EAAEA,MAAT;AAAiBG,IAAAA,KAAK,EAAEA;AAAxB,GAAP;AACD","sourcesContent":["'use strict'\n\nmodule.exports = indentation\n\nvar tab = '\\t'\nvar space = ' '\n\nvar spaceSize = 1\nvar tabSize = 4\n\n// Gets indentation information for a line.\nfunction indentation(value) {\n  var index = 0\n  var indent = 0\n  var character = value.charAt(index)\n  var stops = {}\n  var size\n\n  while (character === tab || character === space) {\n    size = character === tab ? tabSize : spaceSize\n\n    indent += size\n\n    if (size > 1) {\n      indent = Math.floor(indent / size) * size\n    }\n\n    stops[indent] = index\n    character = value.charAt(++index)\n  }\n\n  return {indent: indent, stops: stops}\n}\n"]},"metadata":{},"sourceType":"script"}