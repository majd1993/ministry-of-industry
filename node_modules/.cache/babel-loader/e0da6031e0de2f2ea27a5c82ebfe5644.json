{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getLocaleString = getLocaleString;\nexports.localize = localize;\nObject.defineProperty(exports, \"getRTLList\", {\n  enumerable: true,\n  get: function get() {\n    return _getRTLList.default;\n  }\n});\nexports.default = void 0;\n\nvar _getLocaleString = _interopRequireDefault(require(\"./getLocaleString\"));\n\nvar _getAllLocalizedStrings = _interopRequireDefault(require(\"./getAllLocalizedStrings\"));\n\nvar _getRTLList = _interopRequireDefault(require(\"./getRTLList\"));\n\nvar _normalizeLanguage = _interopRequireDefault(require(\"../utils/normalizeLanguage\"));\n\nvar _useLocalizer = _interopRequireDefault(require(\"../hooks/useLocalizer\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar deprecationNotesShown;\n\nfunction localize(id, language) {\n  if (!deprecationNotesShown) {\n    console.warn('botframework-webchat: localize() is deprecated. Please use the useLocalizer() hooks instead. This function will be removed on or after 2022-02-12.');\n    deprecationNotesShown = true;\n  }\n\n  var allStrings = (0, _getAllLocalizedStrings.default)();\n  var normalizedLanguage = (0, _normalizeLanguage.default)(language);\n  var localizedStrings = allStrings[normalizedLanguage];\n\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  return Object.entries(args).reduce(function (str, _ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        index = _ref2[0],\n        arg = _ref2[1];\n\n    return str.replace(\"$\".concat(+index + 1), arg);\n  }, localizedStrings && localizedStrings[id] || allStrings['en-US'][id] || '');\n}\n\nfunction getLocaleString() {\n  if (!deprecationNotesShown) {\n    console.warn('botframework-webchat: localize() is deprecated. Please use the useLocalizer() hooks instead. This function will be removed on or after 2022-02-12.');\n    deprecationNotesShown = true;\n  }\n\n  return _getLocaleString.default.apply(void 0, arguments);\n}\n\nvar _default = function _default(_ref3) {\n  var args = _ref3.args,\n      text = _ref3.text;\n\n  if (!deprecationNotesShown) {\n    console.warn('botframework-webchat: <Localize> is deprecated. Please use the useLocalizer() hooks instead. This function will be removed on or after 2022-02-12.');\n    deprecationNotesShown = true;\n  }\n\n  return (0, _useLocalizer.default)().apply(void 0, [text].concat(_toConsumableArray(args || [])));\n};\n\nexports.default = _default;","map":{"version":3,"sources":["../../src/localization/Localize.js"],"names":["args","console","deprecationNotesShown","allStrings","normalizedLanguage","localizedStrings","index","arg","str","deprecatingGetLocaleString","text"],"mappings":";;;;;;;;;;;;;;;AAGA,IAAA,gBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,mBAAA,CAAA,CAAA;;AACA,IAAA,uBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,0BAAA,CAAA,CAAA;;AACA,IAAA,WAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;;AACA,IAAA,kBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,4BAAA,CAAA,CAAA;;AACA,IAAA,aAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,uBAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAA,qBAAA;;AAEA,SAAA,QAAA,CAAA,EAAA,EAAA,QAAA,EAAyC;AACvC,MAAI,CAAJ,qBAAA,EAA4B;AAC1BC,IAAAA,OAAO,CAAPA,IAAAA,CAAAA,oJAAAA;AAIAC,IAAAA,qBAAqB,GAArBA,IAAAA;AACD;;AAED,MAAMC,UAAU,GAAG,CAAA,GAAA,uBAAA,CAAnB,OAAmB,GAAnB;AACA,MAAMC,kBAAkB,GAAG,CAAA,GAAA,kBAAA,CAAA,OAAA,EAA3B,QAA2B,CAA3B;AACA,MAAMC,gBAAgB,GAAGF,UAAU,CAAnC,kBAAmC,CAAnC;;AAXuC,OAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAANH,IAAM,GAAA,IAAA,KAAA,CAAA,IAAA,GAAA,CAAA,GAAA,IAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAANA,IAAAA,IAAM,CAAA,IAAA,GAAA,CAAA,CAANA,GAAM,SAAA,CAAA,IAAA,CAANA;AAAM;;AAavC,SAAO,MAAM,CAAN,OAAA,CAAA,IAAA,EAAA,MAAA,CACL,UAAA,GAAA,EAAA,IAAA,EAAA;AAAA,QAAA,KAAA,GAAA,cAAA,CAAA,IAAA,EAAA,CAAA,CAAA;AAAA,QAAOM,KAAP,GAAA,KAAA,CAAA,CAAA,CAAA;AAAA,QAAcC,GAAd,GAAA,KAAA,CAAA,CAAA,CAAA;;AAAA,WAAuBC,GAAG,CAAHA,OAAAA,CAAAA,IAAAA,MAAAA,CAAgB,CAAA,KAAA,GAAhBA,CAAAA,CAAAA,EAAvB,GAAuBA,CAAvB;AADK,GAAA,EAEJH,gBAAgB,IAAIA,gBAAgB,CAArC,EAAqC,CAApCA,IAA6CF,UAAU,CAAVA,OAAU,CAAVA,CAA9C,EAA8CA,CAA7CE,IAFH,EAAO,CAAP;AAID;;AAED,SAAA,eAAA,GAAkC;AAChC,MAAI,CAAJ,qBAAA,EAA4B;AAC1BJ,IAAAA,OAAO,CAAPA,IAAAA,CAAAA,oJAAAA;AAIAC,IAAAA,qBAAqB,GAArBA,IAAAA;AACD;;AAED,SAAOO,gBAAAA,CAAAA,OAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,EAAP,SAAOA,CAAP;AACD;;eAEc,SAAA,QAAA,CAAA,KAAA,EAAoB;AAAA,MAAjBT,IAAiB,GAAA,KAAA,CAAjBA,IAAiB;AAAA,MAAXU,IAAW,GAAA,KAAA,CAAXA,IAAW;;AACjC,MAAI,CAAJ,qBAAA,EAA4B;AAC1BT,IAAAA,OAAO,CAAPA,IAAAA,CAAAA,oJAAAA;AAIAC,IAAAA,qBAAqB,GAArBA,IAAAA;AACD;;AAED,SAAO,CAAA,GAAA,aAAA,CAAA,OAAA,IAAA,KAAA,CAAA,KAAA,CAAA,EAAA,CAAA,IAAA,EAAA,MAAA,CAAA,kBAAA,CAAyBF,IAAI,IAApC,EAAO,CAAA,CAAA,CAAP","sourcesContent":["// Localize is designed to be elaboratively return multiple results and possibly exceeding complexity requirement\n/* eslint complexity: \"off\" */\n\nimport deprecatingGetLocaleString from './getLocaleString';\nimport getAllLocalizedStrings from './getAllLocalizedStrings';\nimport getRTLList from './getRTLList';\nimport normalizeLanguage from '../utils/normalizeLanguage';\nimport useLocalizer from '../hooks/useLocalizer';\n\nlet deprecationNotesShown;\n\nfunction localize(id, language, ...args) {\n  if (!deprecationNotesShown) {\n    console.warn(\n      'botframework-webchat: localize() is deprecated. Please use the useLocalizer() hooks instead. This function will be removed on or after 2022-02-12.'\n    );\n\n    deprecationNotesShown = true;\n  }\n\n  const allStrings = getAllLocalizedStrings();\n  const normalizedLanguage = normalizeLanguage(language);\n  const localizedStrings = allStrings[normalizedLanguage];\n\n  return Object.entries(args).reduce(\n    (str, [index, arg]) => str.replace(`$${+index + 1}`, arg),\n    (localizedStrings && localizedStrings[id]) || allStrings['en-US'][id] || ''\n  );\n}\n\nfunction getLocaleString(...args) {\n  if (!deprecationNotesShown) {\n    console.warn(\n      'botframework-webchat: localize() is deprecated. Please use the useLocalizer() hooks instead. This function will be removed on or after 2022-02-12.'\n    );\n\n    deprecationNotesShown = true;\n  }\n\n  return deprecatingGetLocaleString(...args);\n}\n\nexport default ({ args, text }) => {\n  if (!deprecationNotesShown) {\n    console.warn(\n      'botframework-webchat: <Localize> is deprecated. Please use the useLocalizer() hooks instead. This function will be removed on or after 2022-02-12.'\n    );\n\n    deprecationNotesShown = true;\n  }\n\n  return useLocalizer()(text, ...(args || []));\n};\n\nexport { getLocaleString, getRTLList, localize };\n"],"sourceRoot":"component:///"},"metadata":{},"sourceType":"script"}