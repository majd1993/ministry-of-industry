{"ast":null,"code":"import _classCallCheck from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ProxyInfo, WebsocketConnection } from \"../common.browser/Exports\";\nimport { OutputFormat, PropertyId } from \"../sdk/Exports\";\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\nimport { WebsocketMessageFormatter } from \"./Exports\";\nimport { QueryParameterNames } from \"./QueryParameterNames\";\nvar baseUrl = \"convai.speech\";\nvar botFramework = {\n  authHeader: \"X-DLS-Secret\",\n  resourcePath: \"\",\n  version: \"v3\"\n};\nvar customCommands = {\n  authHeader: \"X-CommandsAppId\",\n  resourcePath: \"commands\",\n  version: \"v1\"\n};\nvar pathSuffix = \"api\";\n\nfunction getDialogSpecificValues(dialogType) {\n  switch (dialogType) {\n    case \"custom_commands\":\n      {\n        return customCommands;\n      }\n\n    case \"bot_framework\":\n      {\n        return botFramework;\n      }\n  }\n\n  throw new Error(\"Invalid dialog type '\".concat(dialogType, \"'\"));\n}\n\nexport var DialogConnectionFactory = /*#__PURE__*/function (_ConnectionFactoryBas) {\n  _inherits(DialogConnectionFactory, _ConnectionFactoryBas);\n\n  var _super = _createSuper(DialogConnectionFactory);\n\n  function DialogConnectionFactory() {\n    var _this;\n\n    _classCallCheck(this, DialogConnectionFactory);\n\n    _this = _super.apply(this, arguments);\n\n    _this.create = function (config, authInfo, connectionId) {\n      var applicationId = config.parameters.getProperty(PropertyId.Conversation_ApplicationId, \"\");\n      var dialogType = config.parameters.getProperty(PropertyId.Conversation_DialogType);\n      var region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\n      var language = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-US\");\n      var queryParams = {};\n      queryParams[QueryParameterNames.LanguageParamName] = language;\n      queryParams[QueryParameterNames.FormatParamName] = config.parameters.getProperty(PropertyId.SpeechServiceResponse_OutputFormatOption, OutputFormat[OutputFormat.Simple]).toLowerCase();\n\n      var _getDialogSpecificVal = getDialogSpecificValues(dialogType),\n          resourcePath = _getDialogSpecificVal.resourcePath,\n          version = _getDialogSpecificVal.version,\n          authHeader = _getDialogSpecificVal.authHeader;\n\n      var headers = {};\n\n      if (authInfo.token != null && authInfo.token !== \"\") {\n        headers[authInfo.headerName] = authInfo.token;\n      }\n\n      headers[QueryParameterNames.ConnectionIdHeader] = connectionId;\n\n      if (applicationId !== \"\") {\n        headers[authHeader] = applicationId;\n      }\n\n      var endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, \"\");\n\n      if (endpoint === \"\") {\n        var hostSuffix = region && region.toLowerCase().startsWith(\"china\") ? \".azure.cn\" : \".microsoft.com\"; // ApplicationId is only required for CustomCommands, so we're using that to determine default endpoint\n\n        if (applicationId === \"\") {\n          endpoint = \"wss://\".concat(region, \".\").concat(baseUrl).concat(hostSuffix, \"/\").concat(pathSuffix, \"/\").concat(version);\n        } else {\n          endpoint = \"wss://\".concat(region, \".\").concat(baseUrl).concat(hostSuffix, \"/\").concat(resourcePath, \"/\").concat(pathSuffix, \"/\").concat(version);\n        }\n      }\n\n      _this.setCommonUrlParams(config, queryParams, endpoint);\n\n      return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), connectionId);\n    };\n\n    return _this;\n  }\n\n  return DialogConnectionFactory;\n}(ConnectionFactoryBase);","map":{"version":3,"sources":["src/common.speech/DialogConnectorFactory.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport { OutputFormatPropertyName } from \"../common.speech/Exports\";\r\nimport { IConnection, IStringDictionary } from \"../common/Exports\";\r\nimport { OutputFormat, PropertyId } from \"../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\r\nimport { AuthInfo, RecognizerConfig, WebsocketMessageFormatter } from \"./Exports\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames\";\r\n\r\nconst baseUrl: string = \"convai.speech\";\r\n\r\ninterface IBackendValues {\r\n    authHeader: string;\r\n    resourcePath: string;\r\n    version: string;\r\n}\r\n\r\nconst botFramework: IBackendValues = {\r\n    authHeader: \"X-DLS-Secret\",\r\n    resourcePath: \"\",\r\n    version: \"v3\"\r\n};\r\n\r\nconst customCommands: IBackendValues = {\r\n    authHeader: \"X-CommandsAppId\",\r\n    resourcePath: \"commands\",\r\n    version: \"v1\"\r\n};\r\n\r\nconst pathSuffix: string = \"api\";\r\n\r\nfunction getDialogSpecificValues(dialogType: string): IBackendValues {\r\n    switch (dialogType) {\r\n        case \"custom_commands\": {\r\n            return customCommands;\r\n        }\r\n        case \"bot_framework\": {\r\n            return botFramework;\r\n        }\r\n    }\r\n    throw new Error(`Invalid dialog type '${dialogType}'`);\r\n}\r\n\r\nexport class DialogConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    public create = (\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection => {\r\n\r\n        const applicationId: string = config.parameters.getProperty(PropertyId.Conversation_ApplicationId, \"\");\r\n        const dialogType: string = config.parameters.getProperty(PropertyId.Conversation_DialogType);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-US\");\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        queryParams[QueryParameterNames.LanguageParamName] = language;\r\n        queryParams[QueryParameterNames.FormatParamName] = config.parameters.getProperty(PropertyId.SpeechServiceResponse_OutputFormatOption, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n\r\n        const {resourcePath, version, authHeader} = getDialogSpecificValues(dialogType);\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (authInfo.token != null && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[QueryParameterNames.ConnectionIdHeader] = connectionId;\r\n\r\n        if (applicationId !== \"\") {\r\n            headers[authHeader] = applicationId;\r\n        }\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, \"\");\r\n        if (endpoint === \"\") {\r\n            const hostSuffix = (region && region.toLowerCase().startsWith(\"china\")) ? \".azure.cn\" : \".microsoft.com\";\r\n            // ApplicationId is only required for CustomCommands, so we're using that to determine default endpoint\r\n            if (applicationId === \"\") {\r\n                endpoint = `wss://${region}.${baseUrl}${hostSuffix}/${pathSuffix}/${version}`;\r\n            } else {\r\n                endpoint = `wss://${region}.${baseUrl}${hostSuffix}/${resourcePath}/${pathSuffix}/${version}`;\r\n            }\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), connectionId);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}