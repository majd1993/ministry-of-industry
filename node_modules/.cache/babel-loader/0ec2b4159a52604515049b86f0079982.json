{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar PREVENT_DEFAULT_HANDLER = function PREVENT_DEFAULT_HANDLER(event) {\n  return event.preventDefault();\n}; // Differences between <button> and <AccessibleButton>:\n// - Disable behavior\n//   - When the widget is disabled\n//     - Set \"aria-disabled\" attribute to \"true\"\n//     - Set \"readonly\" attribute\n//     - Set \"tabIndex\" to -1\n//     - Remove \"onClick\" handler\n//   - Why this is needed\n//     - Browser compatibility: when the widget is disabled, different browser send focus to different places\n//     - When the widget become disabled, it's reasonable to keep the focus on the same widget for an extended period of time\n//       - When the user presses TAB after the current widget is disabled, it should jump to the next non-disabled widget\n// Developers using this accessible widget will need to:\n// - Style the disabled widget themselves, using CSS query `:disabled, [aria-disabled=\"true\"] {}`\n// - Modify all code that check disabled through \"disabled\" attribute to use aria-disabled=\"true\" instead\n//   - aria-disabled=\"true\" is the source of truth\n// - If the widget is contained by a <form>, the developer need to filter out some `onSubmit` event caused by this widget\n\n\nvar AccessibleButton = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, forwardedRef) {\n  var disabled = _ref.disabled,\n      onClick = _ref.onClick,\n      tabIndex = _ref.tabIndex,\n      props = _objectWithoutProperties(_ref, [\"disabled\", \"onClick\", \"tabIndex\"]);\n\n  var targetRef = (0, _react.useRef)();\n  var ref = forwardedRef || targetRef;\n  return /*#__PURE__*/_react.default.createElement(\"button\", _extends({\n    \"aria-disabled\": disabled || undefined,\n    onClick: disabled ? PREVENT_DEFAULT_HANDLER : onClick,\n    ref: ref,\n    tabIndex: disabled ? -1 : tabIndex\n  }, props, {\n    type: \"button\"\n  }));\n});\nAccessibleButton.defaultProps = {\n  disabled: undefined,\n  onClick: undefined,\n  tabIndex: undefined\n};\nAccessibleButton.displayName = 'AccessibleButton';\nAccessibleButton.propTypes = {\n  disabled: _propTypes.default.bool,\n  onClick: _propTypes.default.func,\n  tabIndex: _propTypes.default.number,\n  type: _propTypes.default.oneOf(['button']).isRequired\n};\nvar _default = AccessibleButton;\nexports.default = _default;","map":{"version":3,"sources":["../../src/Utils/AccessibleButton.js"],"names":["PREVENT_DEFAULT_HANDLER","event","AccessibleButton","disabled","onClick","tabIndex","props","targetRef","ref","forwardedRef","undefined","PropTypes","type","isRequired"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;AACA,IAAA,MAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAA,KAAA,EAAK;AAAA,SAAIC,KAAK,CAAT,cAAIA,EAAJ;AAArC,CAAA,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAEA,IAAMC,gBAAgB,GAAA,aAAG,CAAA,GAAA,MAAA,CAAA,UAAA,EAAW,UAAA,IAAA,EAAA,YAAA,EAA6D;AAAA,MAA1DC,QAA0D,GAAA,IAAA,CAA1DA,QAA0D;AAAA,MAAhDC,OAAgD,GAAA,IAAA,CAAhDA,OAAgD;AAAA,MAAvCC,QAAuC,GAAA,IAAA,CAAvCA,QAAuC;AAAA,MAA1BC,KAA0B,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,UAAA,EAAA,SAAA,EAAA,UAAA,CAAA,CAAA;;AAC/F,MAAMC,SAAS,GAAG,CAAA,GAAA,MAAA,CAAlB,MAAkB,GAAlB;AAEA,MAAMC,GAAG,GAAGC,YAAY,IAAxB,SAAA;AAEA,SAAA,aACE,MAAA,CAAA,OAAA,CAAA,aAAA,CAAA,QAAA,EAAA,QAAA,CAAA;AACE,qBAAeN,QAAQ,IADzB,SAAA;AAEE,IAAA,OAAO,EAAEA,QAAQ,GAAA,uBAAA,GAFnB,OAAA;AAGE,IAAA,GAAG,EAHL,GAAA;AAIE,IAAA,QAAQ,EAAEA,QAAQ,GAAG,CAAH,CAAA,GAAQE;AAJ5B,GAAA,EAAA,KAAA,EAAA;AAME,IAAA,IAAI,EAAC;AANP,GAAA,CAAA,CADF;AALF,CAAyB,CAAzB;AAiBAH,gBAAgB,CAAhBA,YAAAA,GAAgC;AAC9BC,EAAAA,QAAQ,EADsB,SAAA;AAE9BC,EAAAA,OAAO,EAFuB,SAAA;AAG9BC,EAAAA,QAAQ,EAAEK;AAHoB,CAAhCR;AAMAA,gBAAgB,CAAhBA,WAAAA,GAAAA,kBAAAA;AAEAA,gBAAgB,CAAhBA,SAAAA,GAA6B;AAC3BC,EAAAA,QAAQ,EAAEQ,UAAAA,CAAAA,OAAAA,CADiB,IAAA;AAE3BP,EAAAA,OAAO,EAAEO,UAAAA,CAAAA,OAAAA,CAFkB,IAAA;AAG3BN,EAAAA,QAAQ,EAAEM,UAAAA,CAAAA,OAAAA,CAHiB,MAAA;AAI3BC,EAAAA,IAAI,EAAED,UAAAA,CAAAA,OAAAA,CAAAA,KAAAA,CAAgB,CAAhBA,QAAgB,CAAhBA,EAA4BE;AAJP,CAA7BX;eAOeA,gB","sourcesContent":["/* eslint no-magic-numbers: [\"error\", { \"ignore\": [-1] }] */\n\nimport PropTypes from 'prop-types';\nimport React, { forwardRef, useRef } from 'react';\n\nconst PREVENT_DEFAULT_HANDLER = event => event.preventDefault();\n\n// Differences between <button> and <AccessibleButton>:\n// - Disable behavior\n//   - When the widget is disabled\n//     - Set \"aria-disabled\" attribute to \"true\"\n//     - Set \"readonly\" attribute\n//     - Set \"tabIndex\" to -1\n//     - Remove \"onClick\" handler\n//   - Why this is needed\n//     - Browser compatibility: when the widget is disabled, different browser send focus to different places\n//     - When the widget become disabled, it's reasonable to keep the focus on the same widget for an extended period of time\n//       - When the user presses TAB after the current widget is disabled, it should jump to the next non-disabled widget\n\n// Developers using this accessible widget will need to:\n// - Style the disabled widget themselves, using CSS query `:disabled, [aria-disabled=\"true\"] {}`\n// - Modify all code that check disabled through \"disabled\" attribute to use aria-disabled=\"true\" instead\n//   - aria-disabled=\"true\" is the source of truth\n// - If the widget is contained by a <form>, the developer need to filter out some `onSubmit` event caused by this widget\n\nconst AccessibleButton = forwardRef(({ disabled, onClick, tabIndex, ...props }, forwardedRef) => {\n  const targetRef = useRef();\n\n  const ref = forwardedRef || targetRef;\n\n  return (\n    <button\n      aria-disabled={disabled || undefined}\n      onClick={disabled ? PREVENT_DEFAULT_HANDLER : onClick}\n      ref={ref}\n      tabIndex={disabled ? -1 : tabIndex}\n      {...props}\n      type=\"button\"\n    />\n  );\n});\n\nAccessibleButton.defaultProps = {\n  disabled: undefined,\n  onClick: undefined,\n  tabIndex: undefined\n};\n\nAccessibleButton.displayName = 'AccessibleButton';\n\nAccessibleButton.propTypes = {\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  tabIndex: PropTypes.number,\n  type: PropTypes.oneOf(['button']).isRequired\n};\n\nexport default AccessibleButton;\n"],"sourceRoot":"component:///"},"metadata":{},"sourceType":"script"}