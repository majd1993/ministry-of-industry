{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Contracts_1 = require(\"./Contracts\");\n\nvar DialogServiceConfig_1 = require(\"./DialogServiceConfig\");\n\nvar Exports_1 = require(\"./Exports\");\n/**\n * Class that defines configurations for the dialog service connector object for using a Bot Framework backend.\n * @class BotFrameworkConfig\n */\n\n\nvar BotFrameworkConfig =\n/** @class */\nfunction (_super) {\n  __extends(BotFrameworkConfig, _super);\n  /**\n   * Creates an instance of BotFrameworkConfig.\n   */\n\n\n  function BotFrameworkConfig() {\n    return _super.call(this) || this;\n  }\n  /**\n   * Creates an instance of the bot framework config with the specified subscription and region.\n   * @member BotFrameworkConfig.fromSubscription\n   * @function\n   * @public\n   * @param subscription Subscription key associated with the bot\n   * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n   * @param botId Optional, ID for using a specific bot.\n   * @returns {BotFrameworkConfig} A new bot framework config.\n   */\n\n\n  BotFrameworkConfig.fromSubscription = function (subscription, region, botId) {\n    Contracts_1.Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\n    Contracts_1.Contracts.throwIfNullOrWhitespace(region, \"region\");\n    var botFrameworkConfig = new DialogServiceConfig_1.DialogServiceConfigImpl();\n    botFrameworkConfig.setProperty(Exports_1.PropertyId.Conversation_DialogType, \"bot_framework\");\n    botFrameworkConfig.setProperty(Exports_1.PropertyId.SpeechServiceConnection_Key, subscription);\n    botFrameworkConfig.setProperty(Exports_1.PropertyId.SpeechServiceConnection_Region, region);\n\n    if (botId) {\n      botFrameworkConfig.setProperty(Exports_1.PropertyId.Conversation_ApplicationId, botId);\n    }\n\n    return botFrameworkConfig;\n  };\n  /**\n   * Creates an instance of the bot framework config with the specified authorization token and region.\n   * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\n   * expires, the caller needs to refresh it by calling this setter with a new valid token.\n   * As configuration values are copied when creating a new recognizer, the new token value will not apply to recognizers that have already been created.\n   * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\n   * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\n   * @member BotFrameworkConfig.fromAuthorizationToken\n   * @function\n   * @public\n   * @param authorizationToken The authorization token associated with the bot\n   * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n   * @returns {BotFrameworkConfig} A new bot framework config.\n   */\n\n\n  BotFrameworkConfig.fromAuthorizationToken = function (authorizationToken, region) {\n    Contracts_1.Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\n    Contracts_1.Contracts.throwIfNullOrWhitespace(region, \"region\");\n    var botFrameworkConfig = new DialogServiceConfig_1.DialogServiceConfigImpl();\n    botFrameworkConfig.setProperty(Exports_1.PropertyId.Conversation_DialogType, \"bot_framework\");\n    botFrameworkConfig.setProperty(Exports_1.PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\n    botFrameworkConfig.setProperty(Exports_1.PropertyId.SpeechServiceConnection_Region, region);\n    return botFrameworkConfig;\n  };\n\n  return BotFrameworkConfig;\n}(DialogServiceConfig_1.DialogServiceConfigImpl);\n\nexports.BotFrameworkConfig = BotFrameworkConfig;","map":{"version":3,"sources":["src/sdk/BotFrameworkConfig.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,IAAA,qBAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;AAEA;;;AAGG;;;AACH,IAAA,kBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAwC,EAAA,SAAA,CAAA,kBAAA,EAAA,MAAA,CAAA;AAEpC;;AAEG;;;AACH,WAAA,kBAAA,GAAA;WACI,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,I;AACV;AAED;;;;;;;;;AASG;;;AACW,EAAA,kBAAA,CAAA,gBAAA,GAAd,UAA+B,YAA/B,EAAqD,MAArD,EAAqE,KAArE,EAAmF;AAC/E,IAAA,WAAA,CAAA,SAAA,CAAU,uBAAV,CAAkC,YAAlC,EAAgD,cAAhD;AACA,IAAA,WAAA,CAAA,SAAA,CAAU,uBAAV,CAAkC,MAAlC,EAA0C,QAA1C;AAEA,QAAM,kBAAkB,GAAuB,IAAI,qBAAA,CAAA,uBAAJ,EAA/C;AACA,IAAA,kBAAkB,CAAC,WAAnB,CAA+B,SAAA,CAAA,UAAA,CAAW,uBAA1C,EAAmE,eAAnE;AACA,IAAA,kBAAkB,CAAC,WAAnB,CAA+B,SAAA,CAAA,UAAA,CAAW,2BAA1C,EAAuE,YAAvE;AACA,IAAA,kBAAkB,CAAC,WAAnB,CAA+B,SAAA,CAAA,UAAA,CAAW,8BAA1C,EAA0E,MAA1E;;AAEA,QAAI,KAAJ,EAAW;AACP,MAAA,kBAAkB,CAAC,WAAnB,CAA+B,SAAA,CAAA,UAAA,CAAW,0BAA1C,EAAsE,KAAtE;AACH;;AAED,WAAO,kBAAP;AACH,GAda;AAgBd;;;;;;;;;;;;;AAaG;;;AACW,EAAA,kBAAA,CAAA,sBAAA,GAAd,UAAqC,kBAArC,EAAiE,MAAjE,EAA+E;AAC3E,IAAA,WAAA,CAAA,SAAA,CAAU,uBAAV,CAAkC,kBAAlC,EAAsD,oBAAtD;AACA,IAAA,WAAA,CAAA,SAAA,CAAU,uBAAV,CAAkC,MAAlC,EAA0C,QAA1C;AAEA,QAAM,kBAAkB,GAAuB,IAAI,qBAAA,CAAA,uBAAJ,EAA/C;AACA,IAAA,kBAAkB,CAAC,WAAnB,CAA+B,SAAA,CAAA,UAAA,CAAW,uBAA1C,EAAmE,eAAnE;AACA,IAAA,kBAAkB,CAAC,WAAnB,CAA+B,SAAA,CAAA,UAAA,CAAW,gCAA1C,EAA4E,kBAA5E;AACA,IAAA,kBAAkB,CAAC,WAAnB,CAA+B,SAAA,CAAA,UAAA,CAAW,8BAA1C,EAA0E,MAA1E;AACA,WAAO,kBAAP;AACH,GATa;;AAUlB,SAAA,kBAAA;AAAC,CA3DD,CAAwC,qBAAA,CAAA,uBAAxC,CAAA;;AAAa,OAAA,CAAA,kBAAA,GAAA,kBAAA","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\nimport { DialogServiceConfigImpl } from \"./DialogServiceConfig\";\r\nimport { PropertyId } from \"./Exports\";\r\n\r\n/**\r\n * Class that defines configurations for the dialog service connector object for using a Bot Framework backend.\r\n * @class BotFrameworkConfig\r\n */\r\nexport class BotFrameworkConfig extends DialogServiceConfigImpl {\r\n\r\n    /**\r\n     * Creates an instance of BotFrameworkConfig.\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the bot framework config with the specified subscription and region.\r\n     * @member BotFrameworkConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param subscription Subscription key associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @param botId Optional, ID for using a specific bot.\r\n     * @returns {BotFrameworkConfig} A new bot framework config.\r\n     */\r\n    public static fromSubscription(subscription: string, region: string, botId?: string): BotFrameworkConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(PropertyId.Conversation_DialogType, \"bot_framework\");\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n\r\n        if (botId) {\r\n            botFrameworkConfig.setProperty(PropertyId.Conversation_ApplicationId, botId);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the bot framework config with the specified authorization token and region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * As configuration values are copied when creating a new recognizer, the new token value will not apply to recognizers that have already been created.\r\n     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member BotFrameworkConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param authorizationToken The authorization token associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {BotFrameworkConfig} A new bot framework config.\r\n     */\r\n    public static fromAuthorizationToken(authorizationToken: string, region: string): BotFrameworkConfig {\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(PropertyId.Conversation_DialogType, \"bot_framework\");\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return botFrameworkConfig;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}