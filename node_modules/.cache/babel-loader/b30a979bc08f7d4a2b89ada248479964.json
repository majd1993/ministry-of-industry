{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _observable = _interopRequireDefault(require(\"core-js/features/observable\"));\n\nvar _mathRandom = _interopRequireDefault(require(\"math-random\"));\n\nvar _shareObservable = _interopRequireDefault(require(\"./shareObservable\"));\n\nvar _SpeechSynthesisAudioStreamUtterance = _interopRequireDefault(require(\"./SpeechSynthesisAudioStreamUtterance\"));\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction randomActivityId() {\n  return (0, _mathRandom.default)().toString(36).substr(2);\n}\n\nvar DirectLineSpeech = /*#__PURE__*/function () {\n  function DirectLineSpeech(_ref) {\n    var _this = this;\n\n    var dialogServiceConnector = _ref.dialogServiceConnector;\n    (0, _classCallCheck2.default)(this, DirectLineSpeech);\n    var connectionStatusObserver;\n    this.dialogServiceConnector = dialogServiceConnector;\n    this.activity$ = (0, _shareObservable.default)(new _observable.default(function (observer) {\n      _this._activityObserver = observer;\n      connectionStatusObserver.next(0);\n      connectionStatusObserver.next(1);\n      connectionStatusObserver.next(2);\n    }));\n    this.connectionStatus$ = (0, _shareObservable.default)(new _observable.default(function (observer) {\n      connectionStatusObserver = observer;\n    }));\n\n    dialogServiceConnector.activityReceived = function (_, _ref2) {\n      var activity = _ref2.activity,\n          audioStream = _ref2.audioStream;\n\n      try {\n        _this._activityObserver && _this._activityObserver.next(_objectSpread(_objectSpread({}, activity), {}, {\n          channelData: _objectSpread(_objectSpread({}, activity.channelData), {}, {\n            speechSynthesisUtterance: new _SpeechSynthesisAudioStreamUtterance.default(audioStream)\n          }),\n          from: _objectSpread(_objectSpread({}, activity.from), {}, {\n            // Since DLSpeech service never ACK our outgoing activity, this activity must be from bot.\n            role: 'bot'\n          }),\n          // Direct Line Speech server currently do not timestamp outgoing activities.\n          // Thus, it will be easier to just re-timestamp every incoming/outgoing activities using local time.\n          timestamp: new Date().toISOString()\n        }));\n      } catch (error) {\n        console.error(error);\n      }\n    };\n  }\n\n  (0, _createClass2.default)(DirectLineSpeech, [{\n    key: \"end\",\n    value: function end() {\n      try {\n        this.dialogServiceConnector.close();\n      } catch (err) {\n        if (!~err.message.indexOf('already disposed')) {\n          throw err;\n        }\n      }\n    }\n  }, {\n    key: \"postActivity\",\n    value: function postActivity(activity) {\n      // Currently, Web Chat set user ID on all outgoing activities.\n      // As Direct Line Speech maintains its own user ID, Web Chat should not set the user ID.\n      // TODO: [P2] We should move user ID into options of DirectLineJS, instead of Web Chat.\n      activity = _objectSpread(_objectSpread({}, activity), {}, {\n        from: {\n          role: 'user'\n        }\n      });\n\n      try {\n        // TODO: [P1] Direct Line Speech server currently do not ack the outgoing activities with any activity ID or timestamp.\n        var pseudoActivityId = randomActivityId();\n        var isSpeech = !!(activity.channelData && activity.channelData.speech); // Do not send the activity if it was from speech.\n\n        if (!isSpeech) {\n          // Starting from Speech SDK 1.13.0, they accept JSON text instead of JavaScript object.\n          // https://github.com/microsoft/cognitive-services-speech-sdk-js/commit/2f3a35446692b6d492a6c68e3237a48de67e293f\n          this.dialogServiceConnector.sendActivityAsync(JSON.stringify(activity));\n        }\n\n        this._activityObserver && this._activityObserver.next(_objectSpread(_objectSpread({}, activity), {}, {\n          id: pseudoActivityId,\n          timestamp: new Date().toISOString()\n        }));\n        return _observable.default.of(pseudoActivityId);\n      } catch (err) {\n        return new _observable.default(function (observer) {\n          return observer.error(err);\n        });\n      }\n    }\n  }]);\n  return DirectLineSpeech;\n}(); // Interfaces not yet implemented in Web Chat:\n// referenceGrammarId?: string,\n// getSessionId? : () => Observable<string>\n\n\nexports.default = DirectLineSpeech;","map":{"version":3,"sources":["../src/DirectLineSpeech.js"],"names":["DirectLineSpeech","dialogServiceConnector","Observable","connectionStatusObserver","activity","audioStream","channelData","speechSynthesisUtterance","SpeechSynthesisAudioStreamUtterance","from","role","timestamp","console","err","pseudoActivityId","randomActivityId","isSpeech","JSON","id","observer"],"mappings":";;;;;;;;;;;;;;;AAEA,IAAA,WAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,6BAAA,CAAA,CAAA;;AACA,IAAA,WAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,aAAA,CAAA,CAAA;;AAEA,IAAA,gBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,mBAAA,CAAA,CAAA;;AACA,IAAA,oCAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,uCAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAAA,gBAAA,GAA4B;AAC1B,SAAO,CAAA,GAAA,WAAA,CAAA,OAAA,IAAA,QAAA,CAAA,EAAA,EAAA,MAAA,CAAP,CAAO,CAAP;AAGD;;IAEoBA,gB;AACnB,WAAA,gBAAA,CAAA,IAAA,EAAwC;AAAA,QAAA,KAAA,GAAA,IAAA;;AAAA,QAA1BC,sBAA0B,GAAA,IAAA,CAA1BA,sBAA0B;AAAA,KAAA,GAAA,gBAAA,CAAA,OAAA,EAAA,IAAA,EAAA,gBAAA;AACtC,QAAA,wBAAA;AAEA,SAAA,sBAAA,GAAA,sBAAA;AAEA,SAAA,SAAA,GAAiB,CAAA,GAAA,gBAAA,CAAA,OAAA,EACf,IAAIC,WAAAA,CAAJ,OAAA,CAAe,UAAA,QAAA,EAAY;AACzB,MAAA,KAAI,CAAJ,iBAAA,GAAA,QAAA;AAEAC,MAAAA,wBAAwB,CAAxBA,IAAAA,CAAAA,CAAAA;AACAA,MAAAA,wBAAwB,CAAxBA,IAAAA,CAAAA,CAAAA;AACAA,MAAAA,wBAAwB,CAAxBA,IAAAA,CAAAA,CAAAA;AANJ,KACE,CADe,CAAjB;AAUA,SAAA,iBAAA,GAAyB,CAAA,GAAA,gBAAA,CAAA,OAAA,EACvB,IAAID,WAAAA,CAAJ,OAAA,CAAe,UAAA,QAAA,EAAY;AACzBC,MAAAA,wBAAwB,GAAxBA,QAAAA;AAFJ,KACE,CADuB,CAAzB;;AAMAF,IAAAA,sBAAsB,CAAtBA,gBAAAA,GAA0C,UAAA,CAAA,EAAA,KAAA,EAAkC;AAAA,UAA5BG,QAA4B,GAAA,KAAA,CAA5BA,QAA4B;AAAA,UAAlBC,WAAkB,GAAA,KAAA,CAAlBA,WAAkB;;AAC1E,UAAI;AACF,QAAA,KAAI,CAAJ,iBAAA,IACE,KAAI,CAAJ,iBAAA,CAAA,IAAA,CAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,QAAA,CAAA,EAAA,EAAA,EAAA;AAEEC,UAAAA,WAAW,EAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EACNF,QAAQ,CADF,WAAA,CAAA,EAAA,EAAA,EAAA;AAETG,YAAAA,wBAAwB,EAAE,IAAIC,oCAAAA,CAAJ,OAAA,CAAA,WAAA;AAFjB,WAAA,CAFb;AAMEC,UAAAA,IAAI,EAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EACCL,QAAQ,CADT,IAAA,CAAA,EAAA,EAAA,EAAA;AAEF;AACAM,YAAAA,IAAI,EAAE;AAHJ,WAAA,CANN;AAWE;AACA;AACAC,UAAAA,SAAS,EAAE,IAAA,IAAA,GAAA,WAAA;AAbb,SAAA,CAAA,CADF;AADF,OAAA,CAiBE,OAAA,KAAA,EAAc;AACdC,QAAAA,OAAO,CAAPA,KAAAA,CAAAA,KAAAA;AACD;AApBHX,KAAAA;AAsBD;;;;0BAEK;AACJ,UAAI;AACF,aAAA,sBAAA,CAAA,KAAA;AADF,OAAA,CAEE,OAAA,GAAA,EAAY;AACZ,YAAI,CAAC,CAACY,GAAG,CAAHA,OAAAA,CAAAA,OAAAA,CAAN,kBAAMA,CAAN,EAA+C;AAC7C,gBAAA,GAAA;AACD;AACF;AACF;;;iCAEYT,Q,EAAU;AACrB;AACA;AACA;AACAA,MAAAA,QAAQ,GAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,QAAA,CAAA,EAAA,EAAA,EAAA;AAENK,QAAAA,IAAI,EAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR;AAFA,OAAA,CAARN;;AAKA,UAAI;AACF;AACA,YAAMU,gBAAgB,GAAGC,gBAAzB,EAAA;AACA,YAAMC,QAAQ,GAAG,CAAC,EAAEZ,QAAQ,CAARA,WAAAA,IAAwBA,QAAQ,CAARA,WAAAA,CAH1C,MAGgB,CAAlB,CAHE,CAKF;;AACA,YAAI,CAAJ,QAAA,EAAe;AACb;AACA;AACA,eAAA,sBAAA,CAAA,iBAAA,CAA8Ca,IAAI,CAAJA,SAAAA,CAA9C,QAA8CA,CAA9C;AACD;;AAED,aAAA,iBAAA,IACE,KAAA,iBAAA,CAAA,IAAA,CAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,QAAA,CAAA,EAAA,EAAA,EAAA;AAEEC,UAAAA,EAAE,EAFJ,gBAAA;AAGEP,UAAAA,SAAS,EAAE,IAAA,IAAA,GAAA,WAAA;AAHb,SAAA,CAAA,CADF;AAOA,eAAOT,WAAAA,CAAAA,OAAAA,CAAAA,EAAAA,CAAP,gBAAOA,CAAP;AAnBF,OAAA,CAoBE,OAAA,GAAA,EAAY;AACZ,eAAO,IAAIA,WAAAA,CAAJ,OAAA,CAAe,UAAA,QAAA,EAAQ;AAAA,iBAAIiB,QAAQ,CAARA,KAAAA,CAAJ,GAAIA,CAAJ;AAA9B,SAAO,CAAP;AACD;AACF;;;KAGH;AACA;AACA","sourcesContent":["/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 1, 2, 36] }] */\n\nimport Observable from 'core-js/features/observable';\nimport random from 'math-random';\n\nimport shareObservable from './shareObservable';\nimport SpeechSynthesisAudioStreamUtterance from './SpeechSynthesisAudioStreamUtterance';\n\nfunction randomActivityId() {\n  return random()\n    .toString(36)\n    .substr(2);\n}\n\nexport default class DirectLineSpeech {\n  constructor({ dialogServiceConnector }) {\n    let connectionStatusObserver;\n\n    this.dialogServiceConnector = dialogServiceConnector;\n\n    this.activity$ = shareObservable(\n      new Observable(observer => {\n        this._activityObserver = observer;\n\n        connectionStatusObserver.next(0);\n        connectionStatusObserver.next(1);\n        connectionStatusObserver.next(2);\n      })\n    );\n\n    this.connectionStatus$ = shareObservable(\n      new Observable(observer => {\n        connectionStatusObserver = observer;\n      })\n    );\n\n    dialogServiceConnector.activityReceived = (_, { activity, audioStream }) => {\n      try {\n        this._activityObserver &&\n          this._activityObserver.next({\n            ...activity,\n            channelData: {\n              ...activity.channelData,\n              speechSynthesisUtterance: new SpeechSynthesisAudioStreamUtterance(audioStream)\n            },\n            from: {\n              ...activity.from,\n              // Since DLSpeech service never ACK our outgoing activity, this activity must be from bot.\n              role: 'bot'\n            },\n            // Direct Line Speech server currently do not timestamp outgoing activities.\n            // Thus, it will be easier to just re-timestamp every incoming/outgoing activities using local time.\n            timestamp: new Date().toISOString()\n          });\n      } catch (error) {\n        console.error(error);\n      }\n    };\n  }\n\n  end() {\n    try {\n      this.dialogServiceConnector.close();\n    } catch (err) {\n      if (!~err.message.indexOf('already disposed')) {\n        throw err;\n      }\n    }\n  }\n\n  postActivity(activity) {\n    // Currently, Web Chat set user ID on all outgoing activities.\n    // As Direct Line Speech maintains its own user ID, Web Chat should not set the user ID.\n    // TODO: [P2] We should move user ID into options of DirectLineJS, instead of Web Chat.\n    activity = {\n      ...activity,\n      from: { role: 'user' }\n    };\n\n    try {\n      // TODO: [P1] Direct Line Speech server currently do not ack the outgoing activities with any activity ID or timestamp.\n      const pseudoActivityId = randomActivityId();\n      const isSpeech = !!(activity.channelData && activity.channelData.speech);\n\n      // Do not send the activity if it was from speech.\n      if (!isSpeech) {\n        // Starting from Speech SDK 1.13.0, they accept JSON text instead of JavaScript object.\n        // https://github.com/microsoft/cognitive-services-speech-sdk-js/commit/2f3a35446692b6d492a6c68e3237a48de67e293f\n        this.dialogServiceConnector.sendActivityAsync(JSON.stringify(activity));\n      }\n\n      this._activityObserver &&\n        this._activityObserver.next({\n          ...activity,\n          id: pseudoActivityId,\n          timestamp: new Date().toISOString()\n        });\n\n      return Observable.of(pseudoActivityId);\n    } catch (err) {\n      return new Observable(observer => observer.error(err));\n    }\n  }\n}\n\n// Interfaces not yet implemented in Web Chat:\n// referenceGrammarId?: string,\n// getSessionId? : () => Observable<string>\n"],"sourceRoot":"directlinespeech:///"},"metadata":{},"sourceType":"script"}