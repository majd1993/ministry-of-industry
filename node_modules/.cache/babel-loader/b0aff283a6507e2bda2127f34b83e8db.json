{"ast":null,"code":"import _classCallCheck from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { RestConfigBase, RestMessageAdapter, RestRequestType } from \"../common.browser/Exports\";\nimport { Deferred } from \"../common/Exports\";\nimport { PropertyId, VoiceProfileType } from \"../sdk/Exports\";\n/**\n * Implements methods for speaker recognition classes, sending requests to endpoint\n * and parsing response into expected format\n * @class SpeakerIdMessageAdapter\n */\n\nexport var SpeakerIdMessageAdapter = /*#__PURE__*/function () {\n  function SpeakerIdMessageAdapter(config) {\n    _classCallCheck(this, SpeakerIdMessageAdapter);\n\n    var endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n\n    if (!endpoint) {\n      var region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"westus\");\n      var hostSuffix = region && region.toLowerCase().startsWith(\"china\") ? \".azure.cn\" : \".microsoft.com\";\n      var host = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"https://\" + region + \".api.cognitive\" + hostSuffix + \"/speaker/{mode}/v2.0/{dependency}\");\n      endpoint = host + \"/profiles\";\n    }\n\n    this.privUri = endpoint;\n    var options = RestConfigBase.requestOptions;\n    options.headers[RestConfigBase.configParams.subscriptionKey] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\n    this.privRestAdapter = new RestMessageAdapter(options);\n  }\n  /**\n   * Sends create profile request to endpoint.\n   * @function\n   * @param {VoiceProfileType} profileType - type of voice profile to create.\n   * @param {string} lang - language/locale of voice profile\n   * @public\n   * @returns {Promise<IRestResponse>} promised rest response containing id of created profile.\n   */\n\n\n  _createClass(SpeakerIdMessageAdapter, [{\n    key: \"createProfile\",\n    value: function createProfile(profileType, lang) {\n      var uri = this.getOperationUri(profileType);\n      this.privRestAdapter.setHeaders(RestConfigBase.configParams.contentTypeKey, \"application/json\");\n      return this.privRestAdapter.request(RestRequestType.Post, uri, {}, {\n        locale: lang\n      });\n    }\n    /**\n     * Sends create enrollment request to endpoint.\n     * @function\n     * @param {VoiceProfile} profileType - voice profile for which to create new enrollment.\n     * @param {IAudioSource} audioSource - audioSource from which to pull data to send\n     * @public\n     * @returns {Promise<IRestResponse>} rest response to enrollment request.\n     */\n\n  }, {\n    key: \"createEnrollment\",\n    value: function createEnrollment(profile, audioSource) {\n      var _this = this;\n\n      this.privRestAdapter.setHeaders(RestConfigBase.configParams.contentTypeKey, \"multipart/form-data\");\n      var uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId + \"/enrollments\";\n      return audioSource.blob.onSuccessContinueWithPromise(function (result) {\n        return _this.privRestAdapter.request(RestRequestType.File, uri, {\n          ignoreMinLength: \"true\"\n        }, null, result);\n      });\n    }\n    /**\n     * Sends verification request to endpoint.\n     * @function\n     * @param {SpeakerVerificationModel} model - voice model to verify against.\n     * @param {IAudioSource} audioSource - audioSource from which to pull data to send\n     * @public\n     * @returns {Promise<IRestResponse>} rest response to enrollment request.\n     */\n\n  }, {\n    key: \"verifySpeaker\",\n    value: function verifySpeaker(model, audioSource) {\n      var _this2 = this;\n\n      this.privRestAdapter.setHeaders(RestConfigBase.configParams.contentTypeKey, \"multipart/form-data\");\n      var uri = this.getOperationUri(model.voiceProfile.profileType) + \"/\" + model.voiceProfile.profileId + \"/verify\";\n      return audioSource.blob.continueWithPromise(function (result) {\n        if (result.isError) {\n          var response = new Deferred();\n          response.resolve({\n            data: result.error\n          });\n          return response.promise();\n        }\n\n        return _this2.privRestAdapter.request(RestRequestType.File, uri, {\n          ignoreMinLength: \"true\"\n        }, null, result.result);\n      });\n    }\n    /**\n     * Sends identification request to endpoint.\n     * @function\n     * @param {SpeakerIdentificationModel} model - voice profiles against which to identify.\n     * @param {IAudioSource} audioSource - audioSource from which to pull data to send\n     * @public\n     * @returns {Promise<IRestResponse>} rest response to enrollment request.\n     */\n\n  }, {\n    key: \"identifySpeaker\",\n    value: function identifySpeaker(model, audioSource) {\n      var _this3 = this;\n\n      this.privRestAdapter.setHeaders(RestConfigBase.configParams.contentTypeKey, \"multipart/form-data\");\n      var uri = this.getOperationUri(VoiceProfileType.TextIndependentIdentification) + \"/identifySingleSpeaker\";\n      return audioSource.blob.continueWithPromise(function (result) {\n        if (result.isError) {\n          var response = new Deferred();\n          response.resolve({\n            data: result.error\n          });\n          return response.promise();\n        }\n\n        return _this3.privRestAdapter.request(RestRequestType.File, uri, {\n          profileIds: model.voiceProfileIds,\n          ignoreMinLength: \"true\"\n        }, null, result.result);\n      });\n    }\n    /**\n     * Sends delete profile request to endpoint.\n     * @function\n     * @param {VoiceProfile} profile - voice profile to delete.\n     * @public\n     * @returns {Promise<IRestResponse>} rest response to deletion request\n     */\n\n  }, {\n    key: \"deleteProfile\",\n    value: function deleteProfile(profile) {\n      var uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId;\n      return this.privRestAdapter.request(RestRequestType.Delete, uri, {});\n    }\n    /**\n     * Sends reset profile request to endpoint.\n     * @function\n     * @param {VoiceProfile} profile - voice profile to reset enrollments for.\n     * @public\n     * @returns {Promise<IRestResponse>} rest response to reset request\n     */\n\n  }, {\n    key: \"resetProfile\",\n    value: function resetProfile(profile) {\n      var uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId + \"/reset\";\n      return this.privRestAdapter.request(RestRequestType.Post, uri, {});\n    }\n  }, {\n    key: \"getOperationUri\",\n    value: function getOperationUri(profileType) {\n      var mode = profileType === VoiceProfileType.TextIndependentIdentification ? \"identification\" : \"verification\";\n      var dependency = profileType === VoiceProfileType.TextDependentVerification ? \"text-dependent\" : \"text-independent\";\n      return this.privUri.replace(\"{mode}\", mode).replace(\"{dependency}\", dependency);\n    }\n  }]);\n\n  return SpeakerIdMessageAdapter;\n}();","map":{"version":3,"sources":["src/common.speech/SpeakerIdMessageAdapter.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n    IRequestOptions,\r\n    IRestResponse,\r\n    RestConfigBase,\r\n    RestMessageAdapter,\r\n    RestRequestType,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    IAudioSource,\r\n    Promise,\r\n    PromiseResult,\r\n} from \"../common/Exports\";\r\nimport {\r\n    PropertyId,\r\n    SpeakerIdentificationModel,\r\n    SpeakerVerificationModel,\r\n    VoiceProfile,\r\n    VoiceProfileType,\r\n} from \"../sdk/Exports\";\r\nimport { SpeakerRecognitionConfig } from \"./Exports\";\r\n\r\n/**\r\n * Implements methods for speaker recognition classes, sending requests to endpoint\r\n * and parsing response into expected format\r\n * @class SpeakerIdMessageAdapter\r\n */\r\nexport class SpeakerIdMessageAdapter {\r\n    private privRestAdapter: RestMessageAdapter;\r\n    private privUri: string;\r\n\r\n    public constructor(config: SpeakerRecognitionConfig) {\r\n\r\n        let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"westus\");\r\n            const hostSuffix: string = (region && region.toLowerCase().startsWith(\"china\")) ? \".azure.cn\" : \".microsoft.com\";\r\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"https://\" + region + \".api.cognitive\" + hostSuffix + \"/speaker/{mode}/v2.0/{dependency}\");\r\n            endpoint = host + \"/profiles\";\r\n        }\r\n        this.privUri = endpoint;\r\n\r\n        const options: IRequestOptions = RestConfigBase.requestOptions;\r\n        options.headers[RestConfigBase.configParams.subscriptionKey] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n\r\n        this.privRestAdapter = new RestMessageAdapter(options);\r\n    }\r\n\r\n    /**\r\n     * Sends create profile request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfileType} profileType - type of voice profile to create.\r\n     * @param {string} lang - language/locale of voice profile\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} promised rest response containing id of created profile.\r\n     */\r\n    public createProfile(profileType: VoiceProfileType, lang: string):\r\n        Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(profileType);\r\n        this.privRestAdapter.setHeaders(RestConfigBase.configParams.contentTypeKey, \"application/json\");\r\n        return this.privRestAdapter.request(RestRequestType.Post, uri, {}, { locale: lang });\r\n    }\r\n\r\n    /**\r\n     * Sends create enrollment request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfile} profileType - voice profile for which to create new enrollment.\r\n     * @param {IAudioSource} audioSource - audioSource from which to pull data to send\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to enrollment request.\r\n     */\r\n    public createEnrollment(profile: VoiceProfile, audioSource: IAudioSource):\r\n        Promise<IRestResponse> {\r\n\r\n        this.privRestAdapter.setHeaders(RestConfigBase.configParams.contentTypeKey, \"multipart/form-data\");\r\n        const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId + \"/enrollments\";\r\n        return audioSource.blob.onSuccessContinueWithPromise<IRestResponse>((result: Blob | Buffer): Promise<IRestResponse> => {\r\n            return this.privRestAdapter.request(RestRequestType.File, uri, { ignoreMinLength: \"true\" }, null, result);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends verification request to endpoint.\r\n     * @function\r\n     * @param {SpeakerVerificationModel} model - voice model to verify against.\r\n     * @param {IAudioSource} audioSource - audioSource from which to pull data to send\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to enrollment request.\r\n     */\r\n    public verifySpeaker(model: SpeakerVerificationModel, audioSource: IAudioSource):\r\n        Promise<IRestResponse> {\r\n\r\n        this.privRestAdapter.setHeaders(RestConfigBase.configParams.contentTypeKey, \"multipart/form-data\");\r\n        const uri = this.getOperationUri(model.voiceProfile.profileType) + \"/\" + model.voiceProfile.profileId + \"/verify\";\r\n        return audioSource.blob.continueWithPromise<IRestResponse>((result: PromiseResult<Blob | Buffer>): Promise<IRestResponse> => {\r\n            if (result.isError) {\r\n                const response: Deferred<IRestResponse> = new Deferred<IRestResponse>();\r\n                response.resolve({ data: result.error } as IRestResponse);\r\n                return response.promise();\r\n            }\r\n            return this.privRestAdapter.request(RestRequestType.File, uri, { ignoreMinLength: \"true\" }, null, result.result);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends identification request to endpoint.\r\n     * @function\r\n     * @param {SpeakerIdentificationModel} model - voice profiles against which to identify.\r\n     * @param {IAudioSource} audioSource - audioSource from which to pull data to send\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to enrollment request.\r\n     */\r\n    public identifySpeaker(model: SpeakerIdentificationModel, audioSource: IAudioSource):\r\n        Promise<IRestResponse> {\r\n\r\n        this.privRestAdapter.setHeaders(RestConfigBase.configParams.contentTypeKey, \"multipart/form-data\");\r\n        const uri = this.getOperationUri(VoiceProfileType.TextIndependentIdentification) + \"/identifySingleSpeaker\";\r\n        return audioSource.blob.continueWithPromise<IRestResponse>((result: PromiseResult<Blob | Buffer>): Promise<IRestResponse> => {\r\n            if (result.isError) {\r\n                const response: Deferred<IRestResponse> = new Deferred<IRestResponse>();\r\n                response.resolve({ data: result.error } as IRestResponse);\r\n                return response.promise();\r\n            }\r\n            return this.privRestAdapter.request(RestRequestType.File, uri, { profileIds: model.voiceProfileIds, ignoreMinLength: \"true\" }, null, result.result);\r\n        });\r\n    }\r\n    /**\r\n     * Sends delete profile request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfile} profile - voice profile to delete.\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to deletion request\r\n     */\r\n    public deleteProfile(profile: VoiceProfile): Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId;\r\n        return this.privRestAdapter.request(RestRequestType.Delete, uri, {});\r\n    }\r\n\r\n    /**\r\n     * Sends reset profile request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfile} profile - voice profile to reset enrollments for.\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to reset request\r\n     */\r\n    public resetProfile(profile: VoiceProfile): Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId + \"/reset\";\r\n        return this.privRestAdapter.request(RestRequestType.Post, uri, {});\r\n    }\r\n\r\n    private getOperationUri(profileType: VoiceProfileType): string {\r\n\r\n        const mode = profileType === VoiceProfileType.TextIndependentIdentification ? \"identification\" : \"verification\";\r\n        const dependency = profileType === VoiceProfileType.TextDependentVerification ? \"text-dependent\" : \"text-independent\";\r\n        return this.privUri.replace(\"{mode}\", mode).replace(\"{dependency}\", dependency);\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}