{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _botframeworkWebchatApi = require(\"botframework-webchat-api\");\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _ErrorNotificationIcon = _interopRequireDefault(require(\"./Assets/ErrorNotificationIcon\"));\n\nvar _ScreenReaderText = _interopRequireDefault(require(\"../ScreenReaderText\"));\n\nvar _useStyleSet3 = _interopRequireDefault(require(\"../hooks/useStyleSet\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar useDirection = _botframeworkWebchatApi.hooks.useDirection,\n    useLocalizer = _botframeworkWebchatApi.hooks.useLocalizer;\n\nvar ConnectivityStatusFailedToConnect = function ConnectivityStatusFailedToConnect() {\n  var _useStyleSet = (0, _useStyleSet3.default)(),\n      _useStyleSet2 = _slicedToArray(_useStyleSet, 1),\n      errorNotificationStyleSet = _useStyleSet2[0].errorNotification;\n\n  var _useDirection = useDirection(),\n      _useDirection2 = _slicedToArray(_useDirection, 1),\n      direction = _useDirection2[0];\n\n  var localize = useLocalizer();\n  var failedConnectionText = localize('CONNECTIVITY_STATUS_ALT_FATAL');\n  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_ScreenReaderText.default, {\n    text: localize('CONNECTIVITY_STATUS_ALT', failedConnectionText)\n  }), /*#__PURE__*/_react.default.createElement(\"div\", {\n    \"aria-hidden\": true,\n    className: (0, _classnames.default)('webchat__connectivityStatus', errorNotificationStyleSet + ''),\n    dir: direction\n  }, /*#__PURE__*/_react.default.createElement(_ErrorNotificationIcon.default, null), failedConnectionText));\n};\n\nvar _default = ConnectivityStatusFailedToConnect;\nexports.default = _default;","map":{"version":3,"sources":["../../src/ConnectivityStatus/FailedToConnect.js"],"names":["useDirection","useLocalizer","hooks","ConnectivityStatusFailedToConnect","errorNotificationStyleSet","direction","localize","failedConnectionText"],"mappings":";;;;;;;AAAA,IAAA,uBAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;;AACA,IAAA,WAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;AACA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAEA,IAAA,sBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,gCAAA,CAAA,CAAA;;AACA,IAAA,iBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,qBAAA,CAAA,CAAA;;AACA,IAAA,aAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,sBAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEQA,Y,GAA+BE,uBAAAA,CAAAA,KAAAA,CAA/BF,Y;IAAcC,Y,GAAiBC,uBAAAA,CAAAA,KAAAA,CAAjBD,Y;;AAEtB,IAAME,iCAAiC,GAAG,SAApCA,iCAAoC,GAAM;AAAA,MAAA,YAAA,GACa,CAAA,GAAA,aAAA,CADb,OACa,GADb;AAAA,MAAA,aAAA,GAAA,cAAA,CAAA,YAAA,EAAA,CAAA,CAAA;AAAA,MAClBC,yBADkB,GAAA,aAAA,CAAA,CAAA,CAAA,CAAA,iBAAA;;AAAA,MAAA,aAAA,GAE1BJ,YAF0B,EAAA;AAAA,MAAA,cAAA,GAAA,cAAA,CAAA,aAAA,EAAA,CAAA,CAAA;AAAA,MAEvCK,SAFuC,GAAA,cAAA,CAAA,CAAA,CAAA;;AAG9C,MAAMC,QAAQ,GAAGL,YAAjB,EAAA;AAEA,MAAMM,oBAAoB,GAAGD,QAAQ,CAArC,+BAAqC,CAArC;AAEA,SAAA,aACE,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,MAAA,CAAD,OAAC,CAAD,QAAA,EAAA,IAAA,EAAA,aACE,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,iBAAA,CAAD,OAAA,EAAA;AAAkB,IAAA,IAAI,EAAEA,QAAQ,CAAA,yBAAA,EAAA,oBAAA;AAAhC,GAAA,CADF,EAAA,aAEE,MAAA,CAAA,OAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACE,mBADF,IAAA;AAEE,IAAA,SAAS,EAAE,CAAA,GAAA,WAAA,CAAA,OAAA,EAAA,6BAAA,EAA0CF,yBAAyB,GAFhF,EAEa,CAFb;AAGE,IAAA,GAAG,EAAEC;AAHP,GAAA,EAAA,aAKE,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,sBAAA,CAAD,OAAA,EALF,IAKE,CALF,EAHJ,oBAGI,CAFF,CADF;AAPF,CAAA;;eAsBeF,iC","sourcesContent":["import { hooks } from 'botframework-webchat-api';\nimport classNames from 'classnames';\nimport React from 'react';\n\nimport ErrorNotificationIcon from './Assets/ErrorNotificationIcon';\nimport ScreenReaderText from '../ScreenReaderText';\nimport useStyleSet from '../hooks/useStyleSet';\n\nconst { useDirection, useLocalizer } = hooks;\n\nconst ConnectivityStatusFailedToConnect = () => {\n  const [{ errorNotification: errorNotificationStyleSet }] = useStyleSet();\n  const [direction] = useDirection();\n  const localize = useLocalizer();\n\n  const failedConnectionText = localize('CONNECTIVITY_STATUS_ALT_FATAL');\n\n  return (\n    <React.Fragment>\n      <ScreenReaderText text={localize('CONNECTIVITY_STATUS_ALT', failedConnectionText)} />\n      <div\n        aria-hidden={true}\n        className={classNames('webchat__connectivityStatus', errorNotificationStyleSet + '')}\n        dir={direction}\n      >\n        <ErrorNotificationIcon />\n        {failedConnectionText}\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default ConnectivityStatusFailedToConnect;\n"],"sourceRoot":"component:///"},"metadata":{},"sourceType":"script"}