{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DirectLineStreaming = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _BehaviorSubject = require(\"rxjs/BehaviorSubject\");\n\nvar _Observable = require(\"rxjs/Observable\");\n\nvar BFSE = _interopRequireWildcard(require(\"botframework-streaming\"));\n\nvar _crossFetch = _interopRequireDefault(require(\"cross-fetch\"));\n\nvar _directLine = require(\"./directLine\"); // In order to keep file size down, only import the parts of rxjs that we use\n\n\nvar DIRECT_LINE_VERSION = 'DirectLine/3.0';\nvar MAX_RETRY_COUNT = 3;\nvar refreshTokenLifetime = 30 * 60 * 1000; //const refreshTokenLifetime = 5000;\n\nvar timeout = 20 * 1000;\nvar refreshTokenInterval = refreshTokenLifetime / 2;\n\nvar StreamHandler = /*#__PURE__*/function () {\n  function StreamHandler(s, c$, sq) {\n    (0, _classCallCheck2[\"default\"])(this, StreamHandler);\n    (0, _defineProperty2[\"default\"])(this, \"connectionStatus$\", void 0);\n    (0, _defineProperty2[\"default\"])(this, \"subscriber\", void 0);\n    (0, _defineProperty2[\"default\"])(this, \"shouldQueue\", void 0);\n    (0, _defineProperty2[\"default\"])(this, \"activityQueue\", []);\n    this.subscriber = s;\n    this.connectionStatus$ = c$;\n    this.shouldQueue = sq;\n  }\n\n  (0, _createClass2[\"default\"])(StreamHandler, [{\n    key: \"setSubscriber\",\n    value: function setSubscriber(s) {\n      this.subscriber = s;\n    }\n  }, {\n    key: \"processRequest\",\n    value: function () {\n      var _processRequest = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(request, logger) {\n        var streams, stream0, activitySetJson, activitySet, activity, attachments, stream, attachment, dataUri;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                streams = (0, _toConsumableArray2[\"default\"])(request.streams);\n                stream0 = streams.shift();\n                _context.next = 4;\n                return stream0.readAsString();\n\n              case 4:\n                activitySetJson = _context.sent;\n                activitySet = JSON.parse(activitySetJson);\n\n                if (!(activitySet.activities.length !== 1)) {\n                  _context.next = 9;\n                  break;\n                } // Only one activity is expected in a set in streaming\n\n\n                this.subscriber.error(new Error('there should be exactly one activity'));\n                return _context.abrupt(\"return\", BFSE.StreamingResponse.create(500));\n\n              case 9:\n                activity = activitySet.activities[0];\n\n                if (!(streams.length > 0)) {\n                  _context.next = 21;\n                  break;\n                }\n\n                attachments = (0, _toConsumableArray2[\"default\"])(activity.attachments);\n\n              case 12:\n                if (!(stream = streams.shift())) {\n                  _context.next = 20;\n                  break;\n                }\n\n                _context.next = 15;\n                return stream.readAsString();\n\n              case 15:\n                attachment = _context.sent;\n                dataUri = \"data:text/plain;base64,\" + attachment;\n                attachments.push({\n                  contentType: stream.contentType,\n                  contentUrl: dataUri\n                });\n                _context.next = 12;\n                break;\n\n              case 20:\n                activity.attachments = attachments;\n\n              case 21:\n                if (this.shouldQueue()) {\n                  this.activityQueue.push(activity);\n                } else {\n                  this.subscriber.next(activity);\n                }\n\n                return _context.abrupt(\"return\", BFSE.StreamingResponse.create(200));\n\n              case 23:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function processRequest(_x, _x2) {\n        return _processRequest.apply(this, arguments);\n      }\n\n      return processRequest;\n    }()\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      var _this = this;\n\n      this.connectionStatus$.subscribe(function (cs) {});\n      this.activityQueue.forEach(function (a) {\n        return _this.subscriber.next(a);\n      });\n      this.activityQueue = [];\n    }\n  }]);\n  return StreamHandler;\n}();\n\nvar DirectLineStreaming = /*#__PURE__*/function () {\n  function DirectLineStreaming(options) {\n    var _this2 = this;\n\n    (0, _classCallCheck2[\"default\"])(this, DirectLineStreaming);\n    (0, _defineProperty2[\"default\"])(this, \"connectionStatus$\", new _BehaviorSubject.BehaviorSubject(_directLine.ConnectionStatus.Uninitialized));\n    (0, _defineProperty2[\"default\"])(this, \"activity$\", void 0);\n    (0, _defineProperty2[\"default\"])(this, \"activitySubscriber\", void 0);\n    (0, _defineProperty2[\"default\"])(this, \"theStreamHandler\", void 0);\n    (0, _defineProperty2[\"default\"])(this, \"domain\", void 0);\n    (0, _defineProperty2[\"default\"])(this, \"conversationId\", void 0);\n    (0, _defineProperty2[\"default\"])(this, \"token\", void 0);\n    (0, _defineProperty2[\"default\"])(this, \"streamConnection\", void 0);\n    (0, _defineProperty2[\"default\"])(this, \"queueActivities\", void 0);\n    (0, _defineProperty2[\"default\"])(this, \"_botAgent\", '');\n    this.token = options.token;\n    this.refreshToken();\n    this.domain = options.domain;\n\n    if (options.conversationId) {\n      this.conversationId = options.conversationId;\n    }\n\n    this._botAgent = this.getBotAgent(options.botAgent);\n    this.queueActivities = true;\n    this.activity$ = _Observable.Observable.create( /*#__PURE__*/function () {\n      var _ref = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2(subscriber) {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this2.activitySubscriber = subscriber;\n                _this2.theStreamHandler = new StreamHandler(subscriber, _this2.connectionStatus$, function () {\n                  return _this2.queueActivities;\n                });\n\n                _this2.connectWithRetryAsync();\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x3) {\n        return _ref.apply(this, arguments);\n      };\n    }()).share();\n  }\n\n  (0, _createClass2[\"default\"])(DirectLineStreaming, [{\n    key: \"reconnect\",\n    value: function reconnect(_ref2) {\n      var conversationId = _ref2.conversationId,\n          token = _ref2.token;\n      this.conversationId = conversationId;\n      this.token = token;\n      this.connectAsync();\n    }\n  }, {\n    key: \"end\",\n    value: function end() {\n      this.connectionStatus$.next(_directLine.ConnectionStatus.Ended);\n      this.streamConnection.disconnect();\n    }\n  }, {\n    key: \"commonHeaders\",\n    value: function commonHeaders() {\n      return {\n        \"Authorization\": \"Bearer \".concat(this.token),\n        \"x-ms-bot-agent\": this._botAgent\n      };\n    }\n  }, {\n    key: \"getBotAgent\",\n    value: function getBotAgent() {\n      var customAgent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var clientAgent = 'directlineStreaming';\n\n      if (customAgent) {\n        clientAgent += \"; \".concat(customAgent);\n      }\n\n      return \"\".concat(DIRECT_LINE_VERSION, \" (\").concat(clientAgent, \")\");\n    }\n  }, {\n    key: \"refreshToken\",\n    value: function () {\n      var _refreshToken = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3() {\n        var firstCall,\n            retryCount,\n            numberOfAttempts,\n            res,\n            _ref3,\n            token,\n            _args3 = arguments;\n\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                firstCall = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : true;\n                retryCount = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : 0;\n                _context3.next = 4;\n                return this.waitUntilOnline();\n\n              case 4:\n                numberOfAttempts = 0;\n\n              case 5:\n                if (!(numberOfAttempts < MAX_RETRY_COUNT)) {\n                  _context3.next = 30;\n                  break;\n                }\n\n                numberOfAttempts++;\n                _context3.next = 9;\n                return new Promise(function (r) {\n                  return setTimeout(r, refreshTokenInterval);\n                });\n\n              case 9:\n                _context3.prev = 9;\n                _context3.next = 12;\n                return (0, _crossFetch[\"default\"])(\"\".concat(this.domain, \"/tokens/refresh\"), {\n                  method: \"POST\",\n                  headers: this.commonHeaders()\n                });\n\n              case 12:\n                res = _context3.sent;\n\n                if (!res.ok) {\n                  _context3.next = 22;\n                  break;\n                }\n\n                numberOfAttempts = 0;\n                _context3.next = 17;\n                return res.json();\n\n              case 17:\n                _ref3 = _context3.sent;\n                token = _ref3.token;\n                this.token = token;\n                _context3.next = 23;\n                break;\n\n              case 22:\n                if (res.status === 403 || res.status === 403) {\n                  console.error(\"Fatal error while refreshing the token: \".concat(res.status, \" \").concat(res.statusText));\n                  this.streamConnection.disconnect();\n                } else {\n                  console.warn(\"Refresh attempt #\".concat(numberOfAttempts, \" failed: \").concat(res.status, \" \").concat(res.statusText));\n                }\n\n              case 23:\n                _context3.next = 28;\n                break;\n\n              case 25:\n                _context3.prev = 25;\n                _context3.t0 = _context3[\"catch\"](9);\n                console.warn(\"Refresh attempt #\".concat(numberOfAttempts, \" threw an exception: \").concat(_context3.t0));\n\n              case 28:\n                _context3.next = 5;\n                break;\n\n              case 30:\n                console.error(\"Retries exhausted\");\n                this.streamConnection.disconnect();\n\n              case 32:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[9, 25]]);\n      }));\n\n      function refreshToken() {\n        return _refreshToken.apply(this, arguments);\n      }\n\n      return refreshToken;\n    }()\n  }, {\n    key: \"postActivity\",\n    value: function postActivity(activity) {\n      var _this3 = this;\n\n      if (activity.type === \"message\" && activity.attachments && activity.attachments.length > 0) {\n        return this.postMessageWithAttachments(activity);\n      }\n\n      var resp$ = _Observable.Observable.create( /*#__PURE__*/function () {\n        var _ref4 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(subscriber) {\n          var request, resp, numberOfStreams, idString, _JSON$parse, id;\n\n          return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  request = BFSE.StreamingRequest.create('POST', '/v3/directline/conversations/' + _this3.conversationId + '/activities');\n                  request.setBody(JSON.stringify(activity));\n                  _context4.next = 4;\n                  return _this3.streamConnection.send(request);\n\n                case 4:\n                  resp = _context4.sent;\n                  _context4.prev = 5;\n\n                  if (!(resp.statusCode !== 200)) {\n                    _context4.next = 8;\n                    break;\n                  }\n\n                  throw new Error(\"PostActivity returned \" + resp.statusCode);\n\n                case 8:\n                  numberOfStreams = resp.streams.length;\n\n                  if (!(numberOfStreams !== 1)) {\n                    _context4.next = 11;\n                    break;\n                  }\n\n                  throw new Error(\"Expected one stream but got \" + numberOfStreams);\n\n                case 11:\n                  _context4.next = 13;\n                  return resp.streams[0].readAsString();\n\n                case 13:\n                  idString = _context4.sent;\n                  _JSON$parse = JSON.parse(idString), id = _JSON$parse.Id;\n                  return _context4.abrupt(\"return\", subscriber.next(id));\n\n                case 18:\n                  _context4.prev = 18;\n                  _context4.t0 = _context4[\"catch\"](5); // If there is a network issue then its handled by\n                  // the disconnectionHandler. Everything else can\n                  // be retried\n\n                  console.warn(_context4.t0);\n\n                  _this3.streamConnection.disconnect();\n\n                  return _context4.abrupt(\"return\", subscriber.error(_context4.t0));\n\n                case 23:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4, null, [[5, 18]]);\n        }));\n\n        return function (_x4) {\n          return _ref4.apply(this, arguments);\n        };\n      }());\n\n      return resp$;\n    }\n  }, {\n    key: \"postMessageWithAttachments\",\n    value: function postMessageWithAttachments(message) {\n      var _this4 = this;\n\n      var attachments = message.attachments,\n          messageWithoutAttachments = (0, _objectWithoutProperties2[\"default\"])(message, [\"attachments\"]);\n      return _Observable.Observable.create(function (subscriber) {\n        var httpContentList = [];\n        (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee6() {\n          var arrayBuffers, url, request, activityStream, resp, _ref8, id;\n\n          return _regenerator[\"default\"].wrap(function _callee6$(_context6) {\n            while (1) {\n              switch (_context6.prev = _context6.next) {\n                case 0:\n                  _context6.prev = 0;\n                  _context6.next = 3;\n                  return Promise.all(attachments.map( /*#__PURE__*/function () {\n                    var _ref6 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee5(attachment) {\n                      var media, res;\n                      return _regenerator[\"default\"].wrap(function _callee5$(_context5) {\n                        while (1) {\n                          switch (_context5.prev = _context5.next) {\n                            case 0:\n                              media = attachment;\n                              _context5.next = 3;\n                              return (0, _crossFetch[\"default\"])(media.contentUrl);\n\n                            case 3:\n                              res = _context5.sent;\n\n                              if (!res.ok) {\n                                _context5.next = 12;\n                                break;\n                              }\n\n                              _context5.next = 7;\n                              return res.arrayBuffer();\n\n                            case 7:\n                              _context5.t0 = _context5.sent;\n                              _context5.t1 = media;\n                              return _context5.abrupt(\"return\", {\n                                arrayBuffer: _context5.t0,\n                                media: _context5.t1\n                              });\n\n                            case 12:\n                              throw new Error('...');\n\n                            case 13:\n                            case \"end\":\n                              return _context5.stop();\n                          }\n                        }\n                      }, _callee5);\n                    }));\n\n                    return function (_x5) {\n                      return _ref6.apply(this, arguments);\n                    };\n                  }()));\n\n                case 3:\n                  arrayBuffers = _context6.sent;\n                  arrayBuffers.forEach(function (_ref7) {\n                    var arrayBuffer = _ref7.arrayBuffer,\n                        media = _ref7.media;\n                    var buffer = new Buffer(arrayBuffer);\n                    console.log(buffer);\n                    var stream = new BFSE.SubscribableStream();\n                    stream.write(buffer);\n                    var httpContent = new BFSE.HttpContent({\n                      type: media.contentType,\n                      contentLength: buffer.length\n                    }, stream);\n                    httpContentList.push(httpContent);\n                  });\n                  url = \"/v3/directline/conversations/\".concat(_this4.conversationId, \"/users/\").concat(messageWithoutAttachments.from.id, \"/upload\");\n                  request = BFSE.StreamingRequest.create('PUT', url);\n                  activityStream = new BFSE.SubscribableStream();\n                  activityStream.write(JSON.stringify(messageWithoutAttachments), 'utf-8');\n                  request.addStream(new BFSE.HttpContent({\n                    type: \"application/vnd.microsoft.activity\",\n                    contentLength: activityStream.length\n                  }, activityStream));\n                  httpContentList.forEach(function (e) {\n                    return request.addStream(e);\n                  });\n                  _context6.next = 13;\n                  return _this4.streamConnection.send(request);\n\n                case 13:\n                  resp = _context6.sent;\n\n                  if (!(resp.streams && resp.streams.length !== 1)) {\n                    _context6.next = 18;\n                    break;\n                  }\n\n                  subscriber.error(new Error(\"Invalid stream count \".concat(resp.streams.length)));\n                  _context6.next = 23;\n                  break;\n\n                case 18:\n                  _context6.next = 20;\n                  return resp.streams[0].readAsJson();\n\n                case 20:\n                  _ref8 = _context6.sent;\n                  id = _ref8.Id;\n                  subscriber.next(id);\n\n                case 23:\n                  _context6.next = 28;\n                  break;\n\n                case 25:\n                  _context6.prev = 25;\n                  _context6.t0 = _context6[\"catch\"](0);\n                  subscriber.error(_context6.t0);\n\n                case 28:\n                case \"end\":\n                  return _context6.stop();\n              }\n            }\n          }, _callee6, null, [[0, 25]]);\n        }))();\n      });\n    }\n  }, {\n    key: \"waitUntilOnline\",\n    value: function () {\n      var _waitUntilOnline = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee7() {\n        var _this5 = this;\n\n        return _regenerator[\"default\"].wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                return _context7.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  _this5.connectionStatus$.subscribe(function (cs) {\n                    if (cs === _directLine.ConnectionStatus.Online) return resolve();\n                  }, function (e) {\n                    return reject(e);\n                  });\n                }));\n\n              case 1:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      function waitUntilOnline() {\n        return _waitUntilOnline.apply(this, arguments);\n      }\n\n      return waitUntilOnline;\n    }()\n  }, {\n    key: \"connectAsync\",\n    value: function () {\n      var _connectAsync = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee9() {\n        var _this6 = this;\n\n        var re, params, urlSearchParams, wsUrl;\n        return _regenerator[\"default\"].wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                re = new RegExp('^http(s?)');\n\n                if (re.test(this.domain)) {\n                  _context9.next = 3;\n                  break;\n                }\n\n                throw \"Domain must begin with http or https\";\n\n              case 3:\n                params = {\n                  token: this.token\n                };\n                if (this.conversationId) params['conversationId'] = this.conversationId;\n                urlSearchParams = new URLSearchParams(params).toString();\n                wsUrl = \"\".concat(this.domain.replace(re, 'ws$1'), \"/conversations/connect?\").concat(urlSearchParams);\n                return _context9.abrupt(\"return\", new Promise( /*#__PURE__*/function () {\n                  var _ref9 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee8(resolve, reject) {\n                    var request, response, responseString, conversation;\n                    return _regenerator[\"default\"].wrap(function _callee8$(_context8) {\n                      while (1) {\n                        switch (_context8.prev = _context8.next) {\n                          case 0:\n                            _context8.prev = 0;\n                            _this6.streamConnection = new BFSE.WebSocketClient({\n                              url: wsUrl,\n                              requestHandler: _this6.theStreamHandler,\n                              disconnectionHandler: function disconnectionHandler(e) {\n                                return resolve(e);\n                              }\n                            });\n                            _this6.queueActivities = true;\n                            _context8.next = 5;\n                            return _this6.streamConnection.connect();\n\n                          case 5:\n                            request = BFSE.StreamingRequest.create('POST', '/v3/directline/conversations');\n                            _context8.next = 8;\n                            return _this6.streamConnection.send(request);\n\n                          case 8:\n                            response = _context8.sent;\n\n                            if (!(response.statusCode !== 200)) {\n                              _context8.next = 11;\n                              break;\n                            }\n\n                            throw new Error(\"Connection response code \" + response.statusCode);\n\n                          case 11:\n                            if (!(response.streams.length !== 1)) {\n                              _context8.next = 13;\n                              break;\n                            }\n\n                            throw new Error(\"Expected 1 stream but got \" + response.streams.length);\n\n                          case 13:\n                            _context8.next = 15;\n                            return response.streams[0].readAsString();\n\n                          case 15:\n                            responseString = _context8.sent;\n                            conversation = JSON.parse(responseString);\n                            _this6.conversationId = conversation.conversationId;\n\n                            _this6.connectionStatus$.next(_directLine.ConnectionStatus.Online); // Wait until DL consumers have had a chance to be notified\n                            // of the connection status change.\n\n\n                            _context8.next = 21;\n                            return _this6.waitUntilOnline();\n\n                          case 21:\n                            _this6.theStreamHandler.flush();\n\n                            _this6.queueActivities = false;\n                            _context8.next = 28;\n                            break;\n\n                          case 25:\n                            _context8.prev = 25;\n                            _context8.t0 = _context8[\"catch\"](0);\n                            reject(_context8.t0);\n\n                          case 28:\n                          case \"end\":\n                            return _context8.stop();\n                        }\n                      }\n                    }, _callee8, null, [[0, 25]]);\n                  }));\n\n                  return function (_x6, _x7) {\n                    return _ref9.apply(this, arguments);\n                  };\n                }()));\n\n              case 8:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function connectAsync() {\n        return _connectAsync.apply(this, arguments);\n      }\n\n      return connectAsync;\n    }()\n  }, {\n    key: \"connectWithRetryAsync\",\n    value: function () {\n      var _connectWithRetryAsync = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee10() {\n        var _this7 = this;\n\n        var numRetries, start, res;\n        return _regenerator[\"default\"].wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                numRetries = MAX_RETRY_COUNT;\n\n              case 1:\n                if (!(numRetries > 0)) {\n                  _context10.next = 23;\n                  break;\n                }\n\n                numRetries--;\n                start = Date.now();\n                _context10.prev = 4;\n                this.connectionStatus$.next(_directLine.ConnectionStatus.Connecting);\n                _context10.next = 8;\n                return this.connectAsync();\n\n              case 8:\n                res = _context10.sent;\n                console.warn(\"Retrying connection \".concat(res));\n\n                if (!(60000 < Date.now() - start)) {\n                  _context10.next = 13;\n                  break;\n                } // reset the retry counter and retry immediately\n                // if the connection lasted for more than a minute\n\n\n                numRetries = MAX_RETRY_COUNT;\n                return _context10.abrupt(\"continue\", 1);\n\n              case 13:\n                _context10.next = 19;\n                break;\n\n              case 15:\n                _context10.prev = 15;\n                _context10.t0 = _context10[\"catch\"](4);\n                console.error(\"Failed to connect \".concat(_context10.t0));\n                throw _context10.t0;\n\n              case 19:\n                _context10.next = 21;\n                return new Promise(function (r) {\n                  return setTimeout(r, _this7.getRetryDelay());\n                });\n\n              case 21:\n                _context10.next = 1;\n                break;\n\n              case 23:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this, [[4, 15]]);\n      }));\n\n      function connectWithRetryAsync() {\n        return _connectWithRetryAsync.apply(this, arguments);\n      }\n\n      return connectWithRetryAsync;\n    }() // Returns the delay duration in milliseconds\n\n  }, {\n    key: \"getRetryDelay\",\n    value: function getRetryDelay() {\n      return Math.floor(3000 + Math.random() * 12000);\n    }\n  }]);\n  return DirectLineStreaming;\n}();\n\nexports.DirectLineStreaming = DirectLineStreaming;","map":{"version":3,"sources":["../src/directLineStreaming.ts"],"names":["DIRECT_LINE_VERSION","MAX_RETRY_COUNT","refreshTokenLifetime","timeout","refreshTokenInterval","StreamHandler","s","request","logger","streams","stream0","activitySetJson","activitySet","JSON","BFSE","activity","attachments","stream","attachment","dataUri","contentType","contentUrl","DirectLineStreaming","BehaviorSubject","ConnectionStatus","options","conversationId","token","_botAgent","customAgent","clientAgent","firstCall","retryCount","numberOfAttempts","setTimeout","res","method","headers","ok","console","resp$","resp","numberOfStreams","idString","id","subscriber","message","messageWithoutAttachments","httpContentList","arrayBuffers","media","arrayBuffer","buffer","httpContent","type","contentLength","length","url","activityStream","cs","resolve","reject","re","params","urlSearchParams","wsUrl","requestHandler","disconnectionHandler","response","responseString","conversation","numRetries","start","Date","Math"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAA,gBAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAEA,IAAA,IAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,wBAAA,CAAA,CAAA;;AACA,IAAA,WAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,aAAA,CAAA,CAAA;;AAEA,IAAA,WAAA,GAAA,OAAA,CAAA,cAAA,CAAA,C,CARA;;;AAiBA,IAAMA,mBAAmB,GAAzB,gBAAA;AACA,IAAMC,eAAe,GAArB,CAAA;AACA,IAAMC,oBAAoB,GAAG,KAAA,EAAA,GAA7B,IAAA,C,CACA;;AACA,IAAMC,OAAO,GAAG,KAAhB,IAAA;AACA,IAAMC,oBAAoB,GAAGF,oBAAoB,GAAjD,CAAA;;IAUMG,a;AAMJ,WAAA,aAAA,CAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAA0F;AAAA,KAAA,GAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,IAAA,EAAA,aAAA;AAAA,KAAA,GAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,IAAA,EAAA,mBAAA,EAAA,KAAA,CAAA;AAAA,KAAA,GAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,IAAA,EAAA,YAAA,EAAA,KAAA,CAAA;AAAA,KAAA,GAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,IAAA,EAAA,aAAA,EAAA,KAAA,CAAA;AAAA,KAAA,GAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,IAAA,EAAA,eAAA,EAFjD,EAEiD;AACxF,SAAA,UAAA,GAAA,CAAA;AACA,SAAA,iBAAA,GAAA,EAAA;AACA,SAAA,WAAA,GAAA,EAAA;AACD;;;;kCAEoBC,C,EAAyB;AAC5C,WAAA,UAAA,GAAA,CAAA;AACD;;;;2HAEoBC,O,EAA+BC,M;;;;;;AAC5CC,gBAAAA,O,uCAAcF,OAAO,CAACE,O,CAAtBA;AACAC,gBAAAA,O,GAAUD,OAAO,CAAPA,KAAAA,EAAVC;;uBACwBA,OAAO,CAAPA,YAAAA,E;;;AAAxBC,gBAAAA,e,gBAAAA;AACAC,gBAAAA,W,GAAcC,IAAI,CAAJA,KAAAA,CAAAA,eAAAA,CAAdD;;sBAEFA,WAAW,CAAXA,UAAAA,CAAAA,MAAAA,KAAkC,C;;;kBACpC;;;AACA,qBAAA,UAAA,CAAA,KAAA,CAAsB,IAAA,KAAA,CAAtB,sCAAsB,CAAtB;iDACOE,IAAI,CAAJA,iBAAAA,CAAAA,MAAAA,CAAAA,GAAAA,C;;;AAGHC,gBAAAA,Q,GAAWH,WAAW,CAAXA,UAAAA,CAAAA,CAAAA,CAAXG;;sBAEFN,OAAO,CAAPA,MAAAA,GAAiB,C;;;;;AACbO,gBAAAA,W,uCAAkBD,QAAQ,CAACC,W,CAA3BA;;;sBAGCC,MAAM,GAAGR,OAAO,CAAPA,KAAAA,E;;;;;;uBACWQ,MAAM,CAANA,YAAAA,E;;;AAAnBC,gBAAAA,U,gBAAAA;AACAC,gBAAAA,O,GAAU,4BAA4BD,UAAtCC;AACNH,gBAAAA,WAAW,CAAXA,IAAAA,CAAiB;AAAEI,kBAAAA,WAAW,EAAEH,MAAM,CAArB,WAAA;AAAmCI,kBAAAA,UAAU,EAAEF;AAA/C,iBAAjBH;;;;;AAGFD,gBAAAA,QAAQ,CAARA,WAAAA,GAAAA,WAAAA;;;AAGF,oBAAI,KAAJ,WAAI,EAAJ,EAAwB;AACtB,uBAAA,aAAA,CAAA,IAAA,CAAA,QAAA;AADF,iBAAA,MAEO;AACL,uBAAA,UAAA,CAAA,IAAA,CAAA,QAAA;AACD;;iDAEMD,IAAI,CAAJA,iBAAAA,CAAAA,MAAAA,CAAAA,GAAAA,C;;;;;;;;;;;;;;;;;;4BAGM;AAAA,UAAA,KAAA,GAAA,IAAA;;AACb,WAAA,iBAAA,CAAA,SAAA,CAAiC,UAAA,EAAA,EAAM,CAAvC,CAAA;AACA,WAAA,aAAA,CAAA,OAAA,CAA2B,UAAA,CAAA,EAAA;AAAA,eAAO,KAAI,CAAJ,UAAA,CAAA,IAAA,CAAP,CAAO,CAAP;AAA3B,OAAA;AACA,WAAA,aAAA,GAAA,EAAA;AACD;;;;;IAGUQ,mB;AAgBX,WAAA,mBAAA,CAAA,OAAA,EAAiD;AAAA,QAAA,MAAA,GAAA,IAAA;;AAAA,KAAA,GAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,IAAA,EAAA,mBAAA;AAAA,KAAA,GAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,IAAA,EAAA,mBAAA,EAftB,IAAIC,gBAAAA,CAAJ,eAAA,CAAoBC,WAAAA,CAAAA,gBAAAA,CAApB,aAAA,CAesB;AAAA,KAAA,GAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,IAAA,EAAA,WAAA,EAAA,KAAA,CAAA;AAAA,KAAA,GAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,IAAA,EAAA,oBAAA,EAAA,KAAA,CAAA;AAAA,KAAA,GAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,IAAA,EAAA,kBAAA,EAAA,KAAA,CAAA;AAAA,KAAA,GAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,IAAA,EAAA,QAAA,EAAA,KAAA,CAAA;AAAA,KAAA,GAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,IAAA,EAAA,gBAAA,EAAA,KAAA,CAAA;AAAA,KAAA,GAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,IAAA,EAAA,OAAA,EAAA,KAAA,CAAA;AAAA,KAAA,GAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,IAAA,EAAA,kBAAA,EAAA,KAAA,CAAA;AAAA,KAAA,GAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,IAAA,EAAA,iBAAA,EAAA,KAAA,CAAA;AAAA,KAAA,GAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,IAAA,EAAA,WAAA,EAF7B,EAE6B;AAC/C,SAAA,KAAA,GAAaC,OAAO,CAApB,KAAA;AAEA,SAAA,YAAA;AAEA,SAAA,MAAA,GAAcA,OAAO,CAArB,MAAA;;AAEA,QAAIA,OAAO,CAAX,cAAA,EAA4B;AAC1B,WAAA,cAAA,GAAsBA,OAAO,CAA7B,cAAA;AACD;;AAED,SAAA,SAAA,GAAiB,KAAA,WAAA,CAAiBA,OAAO,CAAzC,QAAiB,CAAjB;AAEA,SAAA,eAAA,GAAA,IAAA;AACA,SAAA,SAAA,GAAiB,WAAA,CAAA,UAAA,CAAA,MAAA,EAAA,aAAA,YAAA;AAAA,UAAA,IAAA,GAAA,CAAA,GAAA,kBAAA,CAAA,SAAA,CAAA,GAAA,aAAA,YAAA,CAAA,SAAA,CAAA,CAAA,IAAA,CAAkB,SAAA,QAAA,CAAA,UAAA,EAAA;AAAA,eAAA,YAAA,CAAA,SAAA,CAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AACjC,gBAAA,MAAI,CAAJ,kBAAA,GAAA,UAAA;AACA,gBAAA,MAAI,CAAJ,gBAAA,GAAwB,IAAA,aAAA,CAAA,UAAA,EAA8B,MAAI,CAAlC,iBAAA,EAAsD,YAAA;AAAA,yBAAM,MAAI,CAAV,eAAA;AAA9E,iBAAwB,CAAxB;;AACA,gBAAA,MAAI,CAAJ,qBAAA;;AAHiC,mBAAA,CAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,QAAA,CAAA;AAAlB,OAAA,CAAA,CAAA;;AAAA,aAAA,UAAA,GAAA,EAAA;AAAA,eAAA,IAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA,OAAA;AAAA,KAAA,EAAA,EAAjB,KAAiB,EAAjB;AAKD;;;;qCAE0D;AAAA,UAAxCC,cAAwC,GAAA,KAAA,CAAxCA,cAAwC;AAAA,UAAxBC,KAAwB,GAAA,KAAA,CAAxBA,KAAwB;AACzD,WAAA,cAAA,GAAA,cAAA;AACA,WAAA,KAAA,GAAA,KAAA;AACA,WAAA,YAAA;AACD;;;0BAEK;AACJ,WAAA,iBAAA,CAAA,IAAA,CAA4BH,WAAAA,CAAAA,gBAAAA,CAA5B,KAAA;AACA,WAAA,gBAAA,CAAA,UAAA;AACD;;;oCAEuB;AACtB,aAAO;AACL,yBAAA,UAAA,MAAA,CAA2B,KADtB,KACL,CADK;AAEL,0BAAkB,KAAKI;AAFlB,OAAP;AAID;;;kCAEqD;AAAA,UAAlCC,WAAkC,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAZ,EAAY;AACpD,UAAIC,WAAW,GAAf,qBAAA;;AAEA,UAAA,WAAA,EAAiB;AACfA,QAAAA,WAAW,IAAA,KAAA,MAAA,CAAXA,WAAW,CAAXA;AACD;;AAED,aAAA,GAAA,MAAA,CAAA,mBAAA,EAAA,IAAA,EAAA,MAAA,CAAA,WAAA,EAAA,GAAA,CAAA;AACD;;;;;;;;;;;;;;;;;AAE0BC,gBAAAA,S,8DAAY,IAAZA;AAAkBC,gBAAAA,U,8DAAa,CAAbA;;uBACrC,KAAA,eAAA,E;;;AAEFC,gBAAAA,gB,GAAmB,CAAnBA;;;sBACEA,gBAAgB,GAAGhC,e;;;;;AACvBgC,gBAAAA,gBAAgB;;uBACV,IAAA,OAAA,CAAY,UAAA,CAAA,EAAC;AAAA,yBAAIC,UAAU,CAAA,CAAA,EAAd,oBAAc,CAAd;AAAb,iBAAA,C;;;;;uBAEc,CAAA,GAAA,WAAA,CAAA,SAAA,CAAA,EAAA,GAAA,MAAA,CAAS,KAAT,MAAA,EAAA,iBAAA,CAAA,EAAuC;AAACE,kBAAAA,MAAM,EAAP,MAAA;AAAiBC,kBAAAA,OAAO,EAAE,KAAA,aAAA;AAA1B,iBAAvC,C;;;AAAZF,gBAAAA,G,iBAAAA;;qBACFA,GAAG,CAACG,E;;;;;AACNL,gBAAAA,gBAAgB,GAAhBA,CAAAA;;uBACsBE,GAAG,CAAHA,IAAAA,E;;;;AAAfR,gBAAAA,K,SAAAA,KAAAA;AACP,qBAAA,KAAA,GAAA,KAAA;;;;;AAEA,oBAAIQ,GAAG,CAAHA,MAAAA,KAAAA,GAAAA,IAAsBA,GAAG,CAAHA,MAAAA,KAA1B,GAAA,EAA8C;AAC5CI,kBAAAA,OAAO,CAAPA,KAAAA,CAAAA,2CAAAA,MAAAA,CAAyDJ,GAAG,CAA5DI,MAAAA,EAAAA,GAAAA,EAAAA,MAAAA,CAAuEJ,GAAG,CAA1EI,UAAAA,CAAAA;AACA,uBAAA,gBAAA,CAAA,UAAA;AAFF,iBAAA,MAGO;AACLA,kBAAAA,OAAO,CAAPA,IAAAA,CAAAA,oBAAAA,MAAAA,CAAAA,gBAAAA,EAAAA,WAAAA,EAAAA,MAAAA,CAA6DJ,GAAG,CAAhEI,MAAAA,EAAAA,GAAAA,EAAAA,MAAAA,CAA2EJ,GAAG,CAA9EI,UAAAA,CAAAA;AACD;;;;;;;;;AAGHA,gBAAAA,OAAO,CAAPA,IAAAA,CAAAA,oBAAAA,MAAAA,CAAAA,gBAAAA,EAAAA,uBAAAA,EAAAA,MAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAAA;;;;;;;AAIJA,gBAAAA,OAAO,CAAPA,KAAAA,CAAAA,mBAAAA;AACA,qBAAA,gBAAA,CAAA,UAAA;;;;;;;;;;;;;;;;;;iCAGWxB,Q,EAAoB;AAAA,UAAA,MAAA,GAAA,IAAA;;AAC/B,UAAIA,QAAQ,CAARA,IAAAA,KAAAA,SAAAA,IAA+BA,QAAQ,CAAvCA,WAAAA,IAAuDA,QAAQ,CAARA,WAAAA,CAAAA,MAAAA,GAA3D,CAAA,EAA4F;AAC1F,eAAO,KAAA,0BAAA,CAAP,QAAO,CAAP;AACD;;AAED,UAAMyB,KAAK,GAAG,WAAA,CAAA,UAAA,CAAA,MAAA,EAAA,aAAA,YAAA;AAAA,YAAA,KAAA,GAAA,CAAA,GAAA,kBAAA,CAAA,SAAA,CAAA,GAAA,aAAA,YAAA,CAAA,SAAA,CAAA,CAAA,IAAA,CAAkB,SAAA,QAAA,CAAA,UAAA,EAAA;AAAA,cAAA,OAAA,EAAA,IAAA,EAAA,eAAA,EAAA,QAAA,EAAA,WAAA,EAAA,EAAA;;AAAA,iBAAA,YAAA,CAAA,SAAA,CAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,mBAAA,CAAA,EAAA;AAAA,sBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,qBAAA,CAAA;AACxBjC,kBAAAA,OADwB,GACdO,IAAI,CAAJA,gBAAAA,CAAAA,MAAAA,CAAAA,MAAAA,EAAqC,kCAAkC,MAAI,CAAtC,cAAA,GADvB,aACdA,CAAVP;AACNA,kBAAAA,OAAO,CAAPA,OAAAA,CAAgBM,IAAI,CAAJA,SAAAA,CAAhBN,QAAgBM,CAAhBN;AAF8B,kBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,yBAGX,MAAI,CAAJ,gBAAA,CAAA,IAAA,CAHW,OAGX,CAHW;;AAAA,qBAAA,CAAA;AAGxBkC,kBAAAA,IAHwB,GAAA,SAAA,CAAA,IAGxBA;AAHwB,kBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;;AAAA,sBAAA,EAMxBA,IAAI,CAAJA,UAAAA,KANwB,GAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,wBAMO,IAAA,KAAA,CAAU,2BAA2BA,IAAI,CANhD,UAMO,CANP;;AAAA,qBAAA,CAAA;AAOtBC,kBAAAA,eAPsB,GAOJD,IAAI,CAAJA,OAAAA,CAPI,MAOtBC;;AAPsB,sBAAA,EAQxBA,eAAe,KARS,CAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA;AAAA;;AAAA,wBAQK,IAAA,KAAA,CAAU,iCARf,eAQK,CARL;;AAAA,qBAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA,yBASLD,IAAI,CAAJA,OAAAA,CAAAA,CAAAA,EATK,YASLA,EATK;;AAAA,qBAAA,EAAA;AAStBE,kBAAAA,QATsB,GAAA,SAAA,CAAA,IAStBA;AATsB,kBAAA,WAAA,GAUV9B,IAAI,CAAJA,KAAAA,CAVU,QAUVA,CAVU,EAUhB+B,EAVgB,GAAA,WAAA,CAAA,EAAA;AAAA,yBAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAWrBC,UAAU,CAAVA,IAAAA,CAXqB,EAWrBA,CAXqB,CAAA;;AAAA,qBAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,EAAA,GAAA,SAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAa1B;AACA;AACA;;AACAN,kBAAAA,OAAO,CAAPA,IAAAA,CAAAA,SAAAA,CAAAA,EAAAA;;AACA,kBAAA,MAAI,CAAJ,gBAAA,CAAA,UAAA;;AAjB0B,yBAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAkBnBM,UAAU,CAAVA,KAAAA,CAAAA,SAAAA,CAlBmB,EAkBnBA,CAlBmB,CAAA;;AAAA,qBAAA,EAAA;AAAA,qBAAA,KAAA;AAAA,yBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,WAAA,EAAA,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,CAAA;AAAlB,SAAA,CAAA,CAAA;;AAAA,eAAA,UAAA,GAAA,EAAA;AAAA,iBAAA,KAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA,SAAA;AAAd,OAAc,EAAA,CAAd;;AAqBA,aAAA,KAAA;AACD;;;+CAEkCC,O,EAAkB;AAAA,UAAA,MAAA,GAAA,IAAA;;AAAA,UAC3C9B,WAD2C,GACG8B,OADH,CAAA,WAAA;AAAA,UAC3BC,yBAD2B,GAAA,CAAA,GAAA,yBAAA,CAAA,SAAA,CAAA,EAAA,OAAA,EAAA,CAAA,aAAA,CAAA,CAAA;AAGnD,aAAO,WAAA,CAAA,UAAA,CAAA,MAAA,CAAmB,UAAA,UAAA,EAAc;AACtC,YAAMC,eAAe,GAArB,EAAA;AACA,SAAA,GAAA,kBAAA,CAAA,SAAA,CAAA,GAAA,aAAA,YAAA,CAAA,SAAA,CAAA,CAAA,IAAA,CAAC,SAAA,QAAA,GAAA;AAAA,cAAA,YAAA,EAAA,GAAA,EAAA,OAAA,EAAA,cAAA,EAAA,IAAA,EAAA,KAAA,EAAA,EAAA;;AAAA,iBAAA,YAAA,CAAA,SAAA,CAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,mBAAA,CAAA,EAAA;AAAA,sBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,qBAAA,CAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,yBAE8B,OAAO,CAAP,GAAA,CAAY,WAAW,CAAX,GAAA,EAAA,aAAA,YAAA;AAAA,wBAAA,KAAA,GAAA,CAAA,GAAA,kBAAA,CAAA,SAAA,CAAA,GAAA,aAAA,YAAA,CAAA,SAAA,CAAA,CAAA,IAAA,CAAgB,SAAA,QAAA,CAAA,UAAA,EAAA;AAAA,0BAAA,KAAA,EAAA,GAAA;AAAA,6BAAA,YAAA,CAAA,SAAA,CAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,+BAAA,CAAA,EAAA;AAAA,kCAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,iCAAA,CAAA;AAC/CE,8BAAAA,KAD+C,GAAA,UAC/CA;AAD+C,8BAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,qCAEnC,CAAA,GAAA,WAAA,CAAA,SAAA,CAAA,EAAMA,KAAK,CAFwB,UAEnC,CAFmC;;AAAA,iCAAA,CAAA;AAE/Cf,8BAAAA,GAF+C,GAAA,SAAA,CAAA,IAE/CA;;AAF+C,kCAAA,CAGjDA,GAAG,CAH8C,EAAA,EAAA;AAAA,gCAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA;AAAA;;AAAA,8BAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,qCAIvBA,GAAG,CAJoB,WAIvBA,EAJuB;;AAAA,iCAAA,CAAA;AAAA,8BAAA,SAAA,CAAA,EAAA,GAAA,SAAA,CAAA,IAAA;AAAA,8BAAA,SAAA,CAAA,EAAA,GAAA,KAAA;AAAA,qCAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA;AAI1CgB,gCAAAA,WAJ0C,EAAA,SAAA,CAAA,EAAA;AAIJD,gCAAAA,KAJI,EAAA,SAAA,CAAA;AAAA,+BAAA,CAAA;;AAAA,iCAAA,EAAA;AAAA,oCAM7C,IAAA,KAAA,CAN6C,KAM7C,CAN6C;;AAAA,iCAAA,EAAA;AAAA,iCAAA,KAAA;AAAA,qCAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,uBAAA,EAAA,QAAA,CAAA;AAAhB,qBAAA,CAAA,CAAA;;AAAA,2BAAA,UAAA,GAAA,EAAA;AAAA,6BAAA,KAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA,qBAAA;AAF1C,mBAE0C,EAAA,CAAZ,CAF9B;;AAAA,qBAAA,CAAA;AAESD,kBAAAA,YAFT,GAAA,SAAA,CAAA,IAESA;AAUNA,kBAAAA,YAAY,CAAZA,OAAAA,CAAqB,UAAA,KAAA,EAA4B;AAAA,wBAAzBE,WAAyB,GAAA,KAAA,CAAzBA,WAAyB;AAAA,wBAAZD,KAAY,GAAA,KAAA,CAAZA,KAAY;AAC/C,wBAAME,MAAM,GAAG,IAAA,MAAA,CAAf,WAAe,CAAf;AACAb,oBAAAA,OAAO,CAAPA,GAAAA,CAAAA,MAAAA;AACA,wBAAMtB,MAAM,GAAG,IAAIH,IAAI,CAAvB,kBAAe,EAAf;AACAG,oBAAAA,MAAM,CAANA,KAAAA,CAAAA,MAAAA;AACA,wBAAMoC,WAAW,GAAG,IAAIvC,IAAI,CAAR,WAAA,CAAqB;AAAEwC,sBAAAA,IAAI,EAAEJ,KAAK,CAAb,WAAA;AAA2BK,sBAAAA,aAAa,EAAEH,MAAM,CAACI;AAAjD,qBAArB,EAApB,MAAoB,CAApB;AACAR,oBAAAA,eAAe,CAAfA,IAAAA,CAAAA,WAAAA;AANFC,mBAAAA;AASMQ,kBAAAA,GArBT,GAAA,gCAAA,MAAA,CAqB+C,MAAI,CArBnD,cAAA,EAAA,SAAA,EAAA,MAAA,CAqB4EV,yBAAyB,CAAzBA,IAAAA,CArB5E,EAAA,EAAA,SAAA,CAqBSU;AACAlD,kBAAAA,OAtBT,GAsBmBO,IAAI,CAAJA,gBAAAA,CAAAA,MAAAA,CAAAA,KAAAA,EAtBnB,GAsBmBA,CAAVP;AACAmD,kBAAAA,cAvBT,GAuB0B,IAAI5C,IAAI,CAvBlC,kBAuB0B,EAAjB4C;AACNA,kBAAAA,cAAc,CAAdA,KAAAA,CAAqB7C,IAAI,CAAJA,SAAAA,CAArB6C,yBAAqB7C,CAArB6C,EAAAA,OAAAA;AACAnD,kBAAAA,OAAO,CAAPA,SAAAA,CAAkB,IAAIO,IAAI,CAAR,WAAA,CAAqB;AAAEwC,oBAAAA,IAAI,EAAN,oCAAA;AAA8CC,oBAAAA,aAAa,EAAEG,cAAc,CAACF;AAA5E,mBAArB,EAAlBjD,cAAkB,CAAlBA;AACAyC,kBAAAA,eAAe,CAAfA,OAAAA,CAAwB,UAAA,CAAA,EAAC;AAAA,2BAAIzC,OAAO,CAAPA,SAAAA,CAAJ,CAAIA,CAAJ;AAAzByC,mBAAAA;AA1BH,kBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA,yBA4BsB,MAAI,CAAJ,gBAAA,CAAA,IAAA,CA5BtB,OA4BsB,CA5BtB;;AAAA,qBAAA,EAAA;AA4BSP,kBAAAA,IA5BT,GAAA,SAAA,CAAA,IA4BSA;;AA5BT,sBAAA,EA6BOA,IAAI,CAAJA,OAAAA,IAAgBA,IAAI,CAAJA,OAAAA,CAAAA,MAAAA,KA7BvB,CAAA,CAAA,EAAA;AAAA,oBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA;AAAA;;AA8BKI,kBAAAA,UAAU,CAAVA,KAAAA,CAAiB,IAAA,KAAA,CAAA,wBAAA,MAAA,CAAkCJ,IAAI,CAAJA,OAAAA,CAAnDI,MAAiB,CAAA,CAAjBA;AA9BL,kBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA;;AAAA,qBAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA,yBAgC4BJ,IAAI,CAAJA,OAAAA,CAAAA,CAAAA,EAhC5B,UAgC4BA,EAhC5B;;AAAA,qBAAA,EAAA;AAAA,kBAAA,KAAA,GAAA,SAAA,CAAA,IAAA;AAgCgBG,kBAAAA,EAhChB,GAAA,KAAA,CAAA,EAgCgBA;AACXC,kBAAAA,UAAU,CAAVA,IAAAA,CAAAA,EAAAA;;AAjCL,qBAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA;;AAAA,qBAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,EAAA,GAAA,SAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA;AAoCGA,kBAAAA,UAAU,CAAVA,KAAAA,CAAAA,SAAAA,CAAAA,EAAAA;;AApCH,qBAAA,EAAA;AAAA,qBAAA,KAAA;AAAA,yBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,WAAA,EAAA,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,CAAA;AAAD,SAAA,CAAA;AAFF,OAAO,CAAP;AA0CD;;;;;;;;;;;kDAGQ,IAAA,OAAA,CAAkB,UAAA,OAAA,EAAA,MAAA,EAAqB;AAC5C,kBAAA,MAAI,CAAJ,iBAAA,CAAA,SAAA,CAAiC,UAAA,EAAA,EAAQ;AACvC,wBAAIc,EAAE,KAAKnC,WAAAA,CAAAA,gBAAAA,CAAX,MAAA,EAAoC,OAAOoC,OAAP,EAAA;AADtC,mBAAA,EAGE,UAAA,CAAA,EAAA;AAAA,2BAAOC,MAAM,CAAb,CAAa,CAAb;AAHF,mBAAA;AADK,iBAAA,C;;;;;;;;;;;;;;;;;;;;;;;;;;;AASDC,gBAAAA,E,GAAK,IAAA,MAAA,CAAA,WAAA,CAALA;;oBACDA,EAAE,CAAFA,IAAAA,CAAQ,KAARA,MAAAA,C;;;;;sBAA6B,sC;;;AAC5BC,gBAAAA,M,GAAS;AAACpC,kBAAAA,KAAK,EAAE,KAAKA;AAAb,iBAAToC;AACN,oBAAI,KAAJ,cAAA,EAAyBA,MAAM,CAANA,gBAAM,CAANA,GAA2B,KAA3BA,cAAAA;AACnBC,gBAAAA,e,GAAkB,IAAA,eAAA,CAAA,MAAA,EAAA,QAAA,EAAlBA;AACAC,gBAAAA,K,aAAW,KAAA,MAAA,CAAA,OAAA,CAAA,EAAA,EAAA,MAAA,C,oCAAyDD,e,CAApEC;kDAEC,IAAA,OAAA,EAAA,aAAA,YAAA;AAAA,sBAAA,KAAA,GAAA,CAAA,GAAA,kBAAA,CAAA,SAAA,CAAA,GAAA,aAAA,YAAA,CAAA,SAAA,CAAA,CAAA,IAAA,CAAY,SAAA,QAAA,CAAA,OAAA,EAAA,MAAA,EAAA;AAAA,wBAAA,OAAA,EAAA,QAAA,EAAA,cAAA,EAAA,YAAA;AAAA,2BAAA,YAAA,CAAA,SAAA,CAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,6BAAA,CAAA,EAAA;AAAA,gCAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,+BAAA,CAAA;AAAA,4BAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAEf,4BAAA,MAAI,CAAJ,gBAAA,GAAwB,IAAInD,IAAI,CAAR,eAAA,CAAyB;AAC/C2C,8BAAAA,GAAG,EAD4C,KAAA;AAE/CS,8BAAAA,cAAc,EAAE,MAAI,CAF2B,gBAAA;AAG/CC,8BAAAA,oBAAoB,EAAE,SAAA,oBAAA,CAAA,CAAA,EAAA;AAAA,uCAAOP,OAAO,CAAd,CAAc,CAAd;AAAA;AAHyB,6BAAzB,CAAxB;AAMA,4BAAA,MAAI,CAAJ,eAAA,GAAA,IAAA;AARe,4BAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,mCAST,MAAI,CAAJ,gBAAA,CATS,OAST,EATS;;AAAA,+BAAA,CAAA;AAUTrD,4BAAAA,OAVS,GAUCO,IAAI,CAAJA,gBAAAA,CAAAA,MAAAA,CAAAA,MAAAA,EAVD,8BAUCA,CAAVP;AAVS,4BAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AAAA,mCAWQ,MAAI,CAAJ,gBAAA,CAAA,IAAA,CAXR,OAWQ,CAXR;;AAAA,+BAAA,CAAA;AAWT6D,4BAAAA,QAXS,GAAA,SAAA,CAAA,IAWTA;;AAXS,gCAAA,EAYXA,QAAQ,CAARA,UAAAA,KAZW,GAAA,CAAA,EAAA;AAAA,8BAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA;AAAA;;AAAA,kCAYwB,IAAA,KAAA,CAAU,8BAA8BA,QAAQ,CAZxE,UAYwB,CAZxB;;AAAA,+BAAA,EAAA;AAAA,gCAAA,EAaXA,QAAQ,CAARA,OAAAA,CAAAA,MAAAA,KAbW,CAAA,CAAA,EAAA;AAAA,8BAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA;AAAA;;AAAA,kCAa0B,IAAA,KAAA,CAAU,+BAA+BA,QAAQ,CAARA,OAAAA,CAbnE,MAa0B,CAb1B;;AAAA,+BAAA,EAAA;AAAA,4BAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA,mCAccA,QAAQ,CAARA,OAAAA,CAAAA,CAAAA,EAdd,YAccA,EAdd;;AAAA,+BAAA,EAAA;AAcTC,4BAAAA,cAdS,GAAA,SAAA,CAAA,IAcTA;AACAC,4BAAAA,YAfS,GAeMzD,IAAI,CAAJA,KAAAA,CAfN,cAeMA,CAAfyD;AACN,4BAAA,MAAI,CAAJ,cAAA,GAAsBA,YAAY,CAAlC,cAAA;;AACA,4BAAA,MAAI,CAAJ,iBAAA,CAAA,IAAA,CAA4B9C,WAAAA,CAAAA,gBAAAA,CAjBb,MAiBf,EAjBe,CAmBf;AACA;;;AApBe,4BAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA,mCAqBT,MAAI,CArBK,eAqBT,EArBS;;AAAA,+BAAA,EAAA;AAsBf,4BAAA,MAAI,CAAJ,gBAAA,CAAA,KAAA;;AACA,4BAAA,MAAI,CAAJ,eAAA,GAAA,KAAA;AAvBe,4BAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA;;AAAA,+BAAA,EAAA;AAAA,4BAAA,SAAA,CAAA,IAAA,GAAA,EAAA;AAAA,4BAAA,SAAA,CAAA,EAAA,GAAA,SAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA;AAyBfqC,4BAAAA,MAAM,CAAA,SAAA,CAANA,EAAM,CAANA;;AAzBe,+BAAA,EAAA;AAAA,+BAAA,KAAA;AAAA,mCAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,qBAAA,EAAA,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,CAAA;AAAZ,mBAAA,CAAA,CAAA;;AAAA,yBAAA,UAAA,GAAA,EAAA,GAAA,EAAA;AAAA,2BAAA,KAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA,mBAAA;AAAA,iBAAA,EAAA,C;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BHU,gBAAAA,U,GAAatE,eAAbsE;;;sBACGA,UAAU,GAAG,C;;;;;AAClBA,gBAAAA,UAAU;AACJC,gBAAAA,K,GAAQC,IAAI,CAAJA,GAAAA,EAARD;;AAEJ,qBAAA,iBAAA,CAAA,IAAA,CAA4BhD,WAAAA,CAAAA,gBAAAA,CAA5B,UAAA;;uBACkB,KAAA,YAAA,E;;;AAAZW,gBAAAA,G,kBAAAA;AACNI,gBAAAA,OAAO,CAAPA,IAAAA,CAAAA,uBAAAA,MAAAA,CAAAA,GAAAA,CAAAA;;sBACI,QAAQkC,IAAI,CAAJA,GAAAA,KAAaD,K;;;kBACvB;AACA;;;AACAD,gBAAAA,UAAU,GAAVA,eAAAA;;;;;;;;;;AAIFhC,gBAAAA,OAAO,CAAPA,KAAAA,CAAAA,qBAAAA,MAAAA,CAAAA,UAAAA,CAAAA,EAAAA,CAAAA;;;;;uBAII,IAAA,OAAA,CAAY,UAAA,CAAA,EAAC;AAAA,yBAAIL,UAAU,CAAA,CAAA,EAAI,MAAI,CAAtB,aAAkB,EAAJ,CAAd;AAAb,iBAAA,C;;;;;;;;;;;;;;;;;;;QAIV;;;;oCACwB;AACtB,aAAOwC,IAAI,CAAJA,KAAAA,CAAW,OAAOA,IAAI,CAAJA,MAAAA,KAAzB,KAAOA,CAAP;AACD","sourcesContent":["// In order to keep file size down, only import the parts of rxjs that we use\n\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscriber } from 'rxjs/Subscriber';\nimport * as BFSE from 'botframework-streaming';\nimport fetch from 'cross-fetch';\n\nimport {\n  Activity,\n  ConnectionStatus,\n  Conversation,\n  IBotConnection,\n  Media,\n  Message\n} from './directLine';\n\nconst DIRECT_LINE_VERSION = 'DirectLine/3.0';\nconst MAX_RETRY_COUNT = 3;\nconst refreshTokenLifetime = 30 * 60 * 1000;\n//const refreshTokenLifetime = 5000;\nconst timeout = 20 * 1000;\nconst refreshTokenInterval = refreshTokenLifetime / 2;\n\ninterface DirectLineStreamingOptions {\n  token: string,\n  conversationId?: string,\n  domain: string,\n  // Attached to all requests to identify requesting agent.\n  botAgent?: string\n}\n\nclass StreamHandler implements BFSE.RequestHandler {\n  private connectionStatus$;\n  private subscriber: Subscriber<Activity>;\n  private shouldQueue: () => boolean;\n  private activityQueue: Array<Activity> = [];\n\n  constructor(s: Subscriber<Activity>, c$: Observable<ConnectionStatus>, sq: () => boolean) {\n    this.subscriber = s;\n    this.connectionStatus$ = c$;\n    this.shouldQueue = sq;\n  }\n\n  public setSubscriber(s: Subscriber<Activity>) {\n    this.subscriber = s;\n  }\n\n  async processRequest(request: BFSE.IReceiveRequest, logger?: any): Promise<BFSE.StreamingResponse> {\n    const streams = [...request.streams];\n    const stream0 = streams.shift();\n    const activitySetJson = await stream0.readAsString();\n    const activitySet = JSON.parse(activitySetJson);\n\n    if (activitySet.activities.length !== 1) {\n      // Only one activity is expected in a set in streaming\n      this.subscriber.error(new Error('there should be exactly one activity'));\n      return BFSE.StreamingResponse.create(500);\n    }\n\n    const activity = activitySet.activities[0];\n\n    if (streams.length > 0) {\n      const attachments = [...activity.attachments];\n\n      let stream: BFSE.ContentStream;\n      while (stream = streams.shift()) {\n        const attachment = await stream.readAsString();\n        const dataUri = \"data:text/plain;base64,\" + attachment;\n        attachments.push({ contentType: stream.contentType, contentUrl: dataUri });\n      }\n\n      activity.attachments = attachments;\n    }\n\n    if (this.shouldQueue()) {\n      this.activityQueue.push(activity);\n    } else {\n      this.subscriber.next(activity);\n    }\n\n    return BFSE.StreamingResponse.create(200);\n  }\n\n  public flush() {\n    this.connectionStatus$.subscribe(cs => { })\n    this.activityQueue.forEach((a) => this.subscriber.next(a));\n    this.activityQueue = [];\n  }\n}\n\nexport class DirectLineStreaming implements IBotConnection {\n  public connectionStatus$ = new BehaviorSubject(ConnectionStatus.Uninitialized);\n  public activity$: Observable<Activity>;\n\n  private activitySubscriber: Subscriber<Activity>;\n  private theStreamHandler: StreamHandler;\n\n  private domain: string;\n\n  private conversationId: string;\n  private token: string;\n  private streamConnection: BFSE.WebSocketClient;\n  private queueActivities: boolean;\n\n  private _botAgent = '';\n\n  constructor(options: DirectLineStreamingOptions) {\n    this.token = options.token;\n\n    this.refreshToken();\n\n    this.domain = options.domain;\n\n    if (options.conversationId) {\n      this.conversationId = options.conversationId;\n    }\n\n    this._botAgent = this.getBotAgent(options.botAgent);\n\n    this.queueActivities = true;\n    this.activity$ = Observable.create(async (subscriber: Subscriber<Activity>) => {\n      this.activitySubscriber = subscriber;\n      this.theStreamHandler = new StreamHandler(subscriber, this.connectionStatus$, () => this.queueActivities);\n      this.connectWithRetryAsync();\n    }).share();\n  }\n\n  public reconnect({ conversationId, token } : Conversation) {\n    this.conversationId = conversationId;\n    this.token = token;\n    this.connectAsync();\n  }\n\n  end() {\n    this.connectionStatus$.next(ConnectionStatus.Ended);\n    this.streamConnection.disconnect();\n  }\n\n  private commonHeaders() {\n    return {\n      \"Authorization\": `Bearer ${this.token}`,\n      \"x-ms-bot-agent\": this._botAgent\n    };\n  }\n\n  private getBotAgent(customAgent: string = ''): string {\n    let clientAgent = 'directlineStreaming'\n\n    if (customAgent) {\n      clientAgent += `; ${customAgent}`\n    }\n\n    return `${DIRECT_LINE_VERSION} (${clientAgent})`;\n  }\n\n  private async refreshToken(firstCall = true, retryCount = 0) {\n    await this.waitUntilOnline();\n\n    let numberOfAttempts = 0;\n    while(numberOfAttempts < MAX_RETRY_COUNT) {\n      numberOfAttempts++;\n      await new Promise(r => setTimeout(r, refreshTokenInterval));\n      try {\n        const res = await fetch(`${this.domain}/tokens/refresh`, {method: \"POST\", headers: this.commonHeaders()});\n        if (res.ok) {\n          numberOfAttempts = 0;\n          const {token} = await res.json();\n          this.token = token;\n        } else {\n          if (res.status === 403 || res.status === 403) {\n            console.error(`Fatal error while refreshing the token: ${res.status} ${res.statusText}`);\n            this.streamConnection.disconnect();\n          } else {\n            console.warn(`Refresh attempt #${numberOfAttempts} failed: ${res.status} ${res.statusText}`);\n          }\n        }\n      } catch(e) {\n        console.warn(`Refresh attempt #${numberOfAttempts} threw an exception: ${e}`);\n      }\n    }\n\n    console.error(\"Retries exhausted\");\n    this.streamConnection.disconnect();\n  }\n\n  postActivity(activity: Activity) {\n    if (activity.type === \"message\" && activity.attachments && activity.attachments.length > 0) {\n      return this.postMessageWithAttachments(activity);\n    }\n\n    const resp$ = Observable.create(async subscriber => {\n      const request = BFSE.StreamingRequest.create('POST', '/v3/directline/conversations/' + this.conversationId + '/activities');\n      request.setBody(JSON.stringify(activity));\n      const resp = await this.streamConnection.send(request);\n\n      try {\n        if (resp.statusCode !== 200) throw new Error(\"PostActivity returned \" + resp.statusCode);\n        const numberOfStreams = resp.streams.length;\n        if (numberOfStreams !== 1) throw new Error(\"Expected one stream but got \" + numberOfStreams)\n        const idString = await resp.streams[0].readAsString();\n        const {Id : id} = JSON.parse(idString);\n        return subscriber.next(id);\n      } catch(e) {\n          // If there is a network issue then its handled by\n          // the disconnectionHandler. Everything else can\n          // be retried\n          console.warn(e);\n          this.streamConnection.disconnect();\n          return subscriber.error(e);\n      }\n    });\n    return resp$;\n  }\n\n  private postMessageWithAttachments(message: Message) {\n    const { attachments, ...messageWithoutAttachments } = message;\n\n    return Observable.create( subscriber => {\n      const httpContentList = [];\n      (async () => {\n        try {\n          const arrayBuffers = await Promise.all(attachments.map(async attachment => {\n            const media = attachment as Media;\n            const res = await fetch(media.contentUrl);\n            if (res.ok) {\n              return { arrayBuffer: await res.arrayBuffer(), media };\n            } else {\n              throw new Error('...');\n            }\n          }));\n\n          arrayBuffers.forEach(({ arrayBuffer, media }) => {\n            const buffer = new Buffer(arrayBuffer);\n            console.log(buffer);\n            const stream = new BFSE.SubscribableStream();\n            stream.write(buffer);\n            const httpContent = new BFSE.HttpContent({ type: media.contentType, contentLength: buffer.length }, stream);\n            httpContentList.push(httpContent);\n          });\n\n          const url = `/v3/directline/conversations/${this.conversationId}/users/${messageWithoutAttachments.from.id}/upload`;\n          const request = BFSE.StreamingRequest.create('PUT', url);\n          const activityStream = new BFSE.SubscribableStream();\n          activityStream.write(JSON.stringify(messageWithoutAttachments), 'utf-8');\n          request.addStream(new BFSE.HttpContent({ type: \"application/vnd.microsoft.activity\", contentLength: activityStream.length }, activityStream));\n          httpContentList.forEach(e => request.addStream(e));\n\n          const resp = await this.streamConnection.send(request);\n          if (resp.streams && resp.streams.length !== 1) {\n            subscriber.error(new Error(`Invalid stream count ${resp.streams.length}`));\n          } else {\n            const {Id: id} = await resp.streams[0].readAsJson();\n            subscriber.next(id);\n          }\n        } catch(e) {\n          subscriber.error(e);\n        }\n      })();\n    });\n  }\n\n  private async waitUntilOnline() {\n    return new Promise<void>((resolve, reject) => {\n      this.connectionStatus$.subscribe((cs) => {\n        if (cs === ConnectionStatus.Online) return resolve();\n      },\n        (e) => reject(e));\n    })\n  }\n\n  private async connectAsync() {\n    const re = new RegExp('^http(s?)');\n    if (!re.test(this.domain)) throw (\"Domain must begin with http or https\");\n    const params = {token: this.token};\n    if (this.conversationId) params['conversationId'] = this.conversationId;\n    const urlSearchParams = new URLSearchParams(params).toString();\n    const wsUrl = `${this.domain.replace(re, 'ws$1')}/conversations/connect?${urlSearchParams}`;\n\n    return new Promise(async (resolve, reject) => {\n      try {\n        this.streamConnection = new BFSE.WebSocketClient({\n          url: wsUrl,\n          requestHandler: this.theStreamHandler,\n          disconnectionHandler: (e) => resolve(e)\n        });\n\n        this.queueActivities = true;\n        await this.streamConnection.connect();\n        const request = BFSE.StreamingRequest.create('POST', '/v3/directline/conversations');\n        const response = await this.streamConnection.send(request);\n        if (response.statusCode !== 200) throw new Error(\"Connection response code \" + response.statusCode);\n        if (response.streams.length !== 1) throw new Error(\"Expected 1 stream but got \" + response.streams.length);\n        const responseString = await response.streams[0].readAsString();\n        const conversation = JSON.parse(responseString);\n        this.conversationId = conversation.conversationId;\n        this.connectionStatus$.next(ConnectionStatus.Online);\n\n        // Wait until DL consumers have had a chance to be notified\n        // of the connection status change.\n        await this.waitUntilOnline();\n        this.theStreamHandler.flush();\n        this.queueActivities = false;\n      } catch(e) {\n        reject(e);\n      }\n    });\n  }\n\n  private async connectWithRetryAsync() {\n    let numRetries = MAX_RETRY_COUNT;\n    while (numRetries > 0) {\n      numRetries--;\n      const start = Date.now();\n      try {\n        this.connectionStatus$.next(ConnectionStatus.Connecting);\n        const res = await this.connectAsync();\n        console.warn(`Retrying connection ${res}`);\n        if (60000 < Date.now() - start) {\n          // reset the retry counter and retry immediately\n          // if the connection lasted for more than a minute\n          numRetries = MAX_RETRY_COUNT;\n          continue;\n        }\n      } catch (err) {\n        console.error(`Failed to connect ${err}`);\n        throw(err);\n      }\n\n      await new Promise(r => setTimeout(r, this.getRetryDelay()));\n    }\n  }\n\n  // Returns the delay duration in milliseconds\n  private getRetryDelay() {\n    return Math.floor(3000 + Math.random() * 12000);\n  }\n}"]},"metadata":{},"sourceType":"script"}