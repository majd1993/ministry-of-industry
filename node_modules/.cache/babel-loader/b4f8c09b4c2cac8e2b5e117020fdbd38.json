{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) {\n    if (b.hasOwnProperty(p)) d[p] = b[p];\n  }\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Subject_1 = require('../Subject');\n\nvar Observable_1 = require('../Observable');\n\nvar Subscriber_1 = require('../Subscriber');\n\nvar Subscription_1 = require('../Subscription');\n\nvar refCount_1 = require('../operators/refCount');\n/**\n * @class ConnectableObservable<T>\n */\n\n\nvar ConnectableObservable = function (_super) {\n  __extends(ConnectableObservable, _super);\n\n  function ConnectableObservable(\n  /** @deprecated internal use only */\n  source,\n  /** @deprecated internal use only */\n  subjectFactory) {\n    _super.call(this);\n\n    this.source = source;\n    this.subjectFactory = subjectFactory;\n    /** @deprecated internal use only */\n\n    this._refCount = 0;\n    this._isComplete = false;\n  }\n  /** @deprecated internal use only */\n\n\n  ConnectableObservable.prototype._subscribe = function (subscriber) {\n    return this.getSubject().subscribe(subscriber);\n  };\n  /** @deprecated internal use only */\n\n\n  ConnectableObservable.prototype.getSubject = function () {\n    var subject = this._subject;\n\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n\n    return this._subject;\n  };\n\n  ConnectableObservable.prototype.connect = function () {\n    var connection = this._connection;\n\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription_1.Subscription();\n      connection.add(this.source.subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription_1.Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n\n    return connection;\n  };\n\n  ConnectableObservable.prototype.refCount = function () {\n    return refCount_1.refCount()(this);\n  };\n\n  return ConnectableObservable;\n}(Observable_1.Observable);\n\nexports.ConnectableObservable = ConnectableObservable;\nvar connectableProto = ConnectableObservable.prototype;\nexports.connectableObservableDescriptor = {\n  operator: {\n    value: null\n  },\n  _refCount: {\n    value: 0,\n    writable: true\n  },\n  _subject: {\n    value: null,\n    writable: true\n  },\n  _connection: {\n    value: null,\n    writable: true\n  },\n  _subscribe: {\n    value: connectableProto._subscribe\n  },\n  _isComplete: {\n    value: connectableProto._isComplete,\n    writable: true\n  },\n  getSubject: {\n    value: connectableProto.getSubject\n  },\n  connect: {\n    value: connectableProto.connect\n  },\n  refCount: {\n    value: connectableProto.refCount\n  }\n};\n\nvar ConnectableSubscriber = function (_super) {\n  __extends(ConnectableSubscriber, _super);\n\n  function ConnectableSubscriber(destination, connectable) {\n    _super.call(this, destination);\n\n    this.connectable = connectable;\n  }\n\n  ConnectableSubscriber.prototype._error = function (err) {\n    this._unsubscribe();\n\n    _super.prototype._error.call(this, err);\n  };\n\n  ConnectableSubscriber.prototype._complete = function () {\n    this.connectable._isComplete = true;\n\n    this._unsubscribe();\n\n    _super.prototype._complete.call(this);\n  };\n  /** @deprecated internal use only */\n\n\n  ConnectableSubscriber.prototype._unsubscribe = function () {\n    var connectable = this.connectable;\n\n    if (connectable) {\n      this.connectable = null;\n      var connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  };\n\n  return ConnectableSubscriber;\n}(Subject_1.SubjectSubscriber);\n\nvar RefCountOperator = function () {\n  function RefCountOperator(connectable) {\n    this.connectable = connectable;\n  }\n\n  RefCountOperator.prototype.call = function (subscriber, source) {\n    var connectable = this.connectable;\n    connectable._refCount++;\n    var refCounter = new RefCountSubscriber(subscriber, connectable);\n    var subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      refCounter.connection = connectable.connect();\n    }\n\n    return subscription;\n  };\n\n  return RefCountOperator;\n}();\n\nvar RefCountSubscriber = function (_super) {\n  __extends(RefCountSubscriber, _super);\n\n  function RefCountSubscriber(destination, connectable) {\n    _super.call(this, destination);\n\n    this.connectable = connectable;\n  }\n  /** @deprecated internal use only */\n\n\n  RefCountSubscriber.prototype._unsubscribe = function () {\n    var connectable = this.connectable;\n\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    var refCount = connectable._refCount;\n\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    connectable._refCount = refCount - 1;\n\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    } ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n\n\n    var connection = this.connection;\n    var sharedConnection = connectable._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  };\n\n  return RefCountSubscriber;\n}(Subscriber_1.Subscriber);","map":{"version":3,"sources":["../../src/observable/ConnectableObservable.ts"],"names":[],"mappings":"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","sourcesContent":["import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  /** @deprecated internal use only */ public _subject: Subject<T>;\n  /** @deprecated internal use only */ public _refCount: number = 0;\n  /** @deprecated internal use only */ public _connection: Subscription;\n  _isComplete = false;\n\n  constructor(/** @deprecated internal use only */ public source: Observable<T>,\n              /** @deprecated internal use only */ public subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  /** @deprecated internal use only */ public getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nconst connectableProto = <any>ConnectableObservable.prototype;\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subject: { value: null, writable: true },\n  _connection: { value: null, writable: true },\n  _subscribe: { value: connectableProto._subscribe },\n  _isComplete: { value: connectableProto._isComplete, writable: true },\n  getSubject: { value: connectableProto.getSubject },\n  connect: { value: connectableProto.connect },\n  refCount: { value: connectableProto.refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  /** @deprecated internal use only */ _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}