{"ast":null,"code":"'use strict';\n\nvar xtend = require('xtend');\n\nvar encode = require('stringify-entities');\n\nvar defaults = require('./defaults');\n\nvar escapeFactory = require('./escape');\n\nvar identity = require('./util/identity');\n\nmodule.exports = setOptions; // Map of applicable enums.\n\nvar maps = {\n  entities: {\n    true: true,\n    false: true,\n    numbers: true,\n    escape: true\n  },\n  bullet: {\n    '*': true,\n    '-': true,\n    '+': true\n  },\n  rule: {\n    '-': true,\n    _: true,\n    '*': true\n  },\n  listItemIndent: {\n    tab: true,\n    mixed: true,\n    1: true\n  },\n  emphasis: {\n    _: true,\n    '*': true\n  },\n  strong: {\n    _: true,\n    '*': true\n  },\n  fence: {\n    '`': true,\n    '~': true\n  }\n}; // Expose `validate`.\n\nvar validate = {\n  boolean: validateBoolean,\n  string: validateString,\n  number: validateNumber,\n  function: validateFunction\n}; // Set options.  Does not overwrite previously set options.\n\nfunction setOptions(options) {\n  var self = this;\n  var current = self.options;\n  var ruleRepetition;\n  var key;\n\n  if (options == null) {\n    options = {};\n  } else if (typeof options === 'object') {\n    options = xtend(options);\n  } else {\n    throw new Error('Invalid value `' + options + '` for setting `options`');\n  }\n\n  for (key in defaults) {\n    validate[typeof defaults[key]](options, key, current[key], maps[key]);\n  }\n\n  ruleRepetition = options.ruleRepetition;\n\n  if (ruleRepetition && ruleRepetition < 3) {\n    raise(ruleRepetition, 'options.ruleRepetition');\n  }\n\n  self.encode = encodeFactory(String(options.entities));\n  self.escape = escapeFactory(options);\n  self.options = options;\n  return self;\n} // Validate a value to be boolean. Defaults to `def`.  Raises an exception with\n// `context[name]` when not a boolean.\n\n\nfunction validateBoolean(context, name, def) {\n  var value = context[name];\n\n  if (value == null) {\n    value = def;\n  }\n\n  if (typeof value !== 'boolean') {\n    raise(value, 'options.' + name);\n  }\n\n  context[name] = value;\n} // Validate a value to be boolean. Defaults to `def`.  Raises an exception with\n// `context[name]` when not a boolean.\n\n\nfunction validateNumber(context, name, def) {\n  var value = context[name];\n\n  if (value == null) {\n    value = def;\n  }\n\n  if (isNaN(value)) {\n    raise(value, 'options.' + name);\n  }\n\n  context[name] = value;\n} // Validate a value to be in `map`. Defaults to `def`.  Raises an exception\n// with `context[name]` when not in `map`.\n\n\nfunction validateString(context, name, def, map) {\n  var value = context[name];\n\n  if (value == null) {\n    value = def;\n  }\n\n  value = String(value);\n\n  if (!(value in map)) {\n    raise(value, 'options.' + name);\n  }\n\n  context[name] = value;\n} // Validate a value to be function. Defaults to `def`.  Raises an exception\n// with `context[name]` when not a function.\n\n\nfunction validateFunction(context, name, def) {\n  var value = context[name];\n\n  if (value == null) {\n    value = def;\n  }\n\n  if (typeof value !== 'function') {\n    raise(value, 'options.' + name);\n  }\n\n  context[name] = value;\n} // Factory to encode HTML entities.  Creates a no-operation function when\n// `type` is `'false'`, a function which encodes using named references when\n// `type` is `'true'`, and a function which encodes using numbered references\n// when `type` is `'numbers'`.\n\n\nfunction encodeFactory(type) {\n  var options = {};\n\n  if (type === 'false') {\n    return identity;\n  }\n\n  if (type === 'true') {\n    options.useNamedReferences = true;\n  }\n\n  if (type === 'escape') {\n    options.escapeOnly = true;\n    options.useNamedReferences = true;\n  }\n\n  return wrapped; // Encode HTML entities using the bound options.\n\n  function wrapped(value) {\n    return encode(value, options);\n  }\n} // Throw an exception with in its `message` `value` and `name`.\n\n\nfunction raise(value, name) {\n  throw new Error('Invalid value `' + value + '` for setting `' + name + '`');\n}","map":{"version":3,"sources":["/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/remark-stringify/lib/set-options.js"],"names":["xtend","require","encode","defaults","escapeFactory","identity","module","exports","setOptions","maps","entities","true","false","numbers","escape","bullet","rule","_","listItemIndent","tab","mixed","emphasis","strong","fence","validate","boolean","validateBoolean","string","validateString","number","validateNumber","function","validateFunction","options","self","current","ruleRepetition","key","Error","raise","encodeFactory","String","context","name","def","value","isNaN","map","type","useNamedReferences","escapeOnly","wrapped"],"mappings":"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","sourcesContent":["'use strict'\n\nvar xtend = require('xtend')\nvar encode = require('stringify-entities')\nvar defaults = require('./defaults')\nvar escapeFactory = require('./escape')\nvar identity = require('./util/identity')\n\nmodule.exports = setOptions\n\n// Map of applicable enums.\nvar maps = {\n  entities: {true: true, false: true, numbers: true, escape: true},\n  bullet: {'*': true, '-': true, '+': true},\n  rule: {'-': true, _: true, '*': true},\n  listItemIndent: {tab: true, mixed: true, 1: true},\n  emphasis: {_: true, '*': true},\n  strong: {_: true, '*': true},\n  fence: {'`': true, '~': true}\n}\n\n// Expose `validate`.\nvar validate = {\n  boolean: validateBoolean,\n  string: validateString,\n  number: validateNumber,\n  function: validateFunction\n}\n\n// Set options.  Does not overwrite previously set options.\nfunction setOptions(options) {\n  var self = this\n  var current = self.options\n  var ruleRepetition\n  var key\n\n  if (options == null) {\n    options = {}\n  } else if (typeof options === 'object') {\n    options = xtend(options)\n  } else {\n    throw new Error('Invalid value `' + options + '` for setting `options`')\n  }\n\n  for (key in defaults) {\n    validate[typeof defaults[key]](options, key, current[key], maps[key])\n  }\n\n  ruleRepetition = options.ruleRepetition\n\n  if (ruleRepetition && ruleRepetition < 3) {\n    raise(ruleRepetition, 'options.ruleRepetition')\n  }\n\n  self.encode = encodeFactory(String(options.entities))\n  self.escape = escapeFactory(options)\n\n  self.options = options\n\n  return self\n}\n\n// Validate a value to be boolean. Defaults to `def`.  Raises an exception with\n// `context[name]` when not a boolean.\nfunction validateBoolean(context, name, def) {\n  var value = context[name]\n\n  if (value == null) {\n    value = def\n  }\n\n  if (typeof value !== 'boolean') {\n    raise(value, 'options.' + name)\n  }\n\n  context[name] = value\n}\n\n// Validate a value to be boolean. Defaults to `def`.  Raises an exception with\n// `context[name]` when not a boolean.\nfunction validateNumber(context, name, def) {\n  var value = context[name]\n\n  if (value == null) {\n    value = def\n  }\n\n  if (isNaN(value)) {\n    raise(value, 'options.' + name)\n  }\n\n  context[name] = value\n}\n\n// Validate a value to be in `map`. Defaults to `def`.  Raises an exception\n// with `context[name]` when not in `map`.\nfunction validateString(context, name, def, map) {\n  var value = context[name]\n\n  if (value == null) {\n    value = def\n  }\n\n  value = String(value)\n\n  if (!(value in map)) {\n    raise(value, 'options.' + name)\n  }\n\n  context[name] = value\n}\n\n// Validate a value to be function. Defaults to `def`.  Raises an exception\n// with `context[name]` when not a function.\nfunction validateFunction(context, name, def) {\n  var value = context[name]\n\n  if (value == null) {\n    value = def\n  }\n\n  if (typeof value !== 'function') {\n    raise(value, 'options.' + name)\n  }\n\n  context[name] = value\n}\n\n// Factory to encode HTML entities.  Creates a no-operation function when\n// `type` is `'false'`, a function which encodes using named references when\n// `type` is `'true'`, and a function which encodes using numbered references\n// when `type` is `'numbers'`.\nfunction encodeFactory(type) {\n  var options = {}\n\n  if (type === 'false') {\n    return identity\n  }\n\n  if (type === 'true') {\n    options.useNamedReferences = true\n  }\n\n  if (type === 'escape') {\n    options.escapeOnly = true\n    options.useNamedReferences = true\n  }\n\n  return wrapped\n\n  // Encode HTML entities using the bound options.\n  function wrapped(value) {\n    return encode(value, options)\n  }\n}\n\n// Throw an exception with in its `message` `value` and `name`.\nfunction raise(value, name) {\n  throw new Error('Invalid value `' + value + '` for setting `' + name + '`')\n}\n"]},"metadata":{},"sourceType":"script"}