{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.connectSendStatus = exports.default = void 0;\n\nvar _botframeworkWebchatCore = require(\"botframework-webchat-core\");\n\nvar _botframeworkWebchatApi = require(\"botframework-webchat-api\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _connectToWebChat = _interopRequireDefault(require(\"../../../connectToWebChat\"));\n\nvar _ScreenReaderText = _interopRequireDefault(require(\"../../../ScreenReaderText\"));\n\nvar _SendFailedRetry = _interopRequireDefault(require(\"./SendFailedRetry\"));\n\nvar _useFocus = _interopRequireDefault(require(\"../../../hooks/useFocus\"));\n\nvar _useStyleSet3 = _interopRequireDefault(require(\"../../../hooks/useStyleSet\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar useLocalizer = _botframeworkWebchatApi.hooks.useLocalizer,\n    usePostActivity = _botframeworkWebchatApi.hooks.usePostActivity;\nvar _Constants$ActivityCl = _botframeworkWebchatCore.Constants.ActivityClientState,\n    SEND_FAILED = _Constants$ActivityCl.SEND_FAILED,\n    SENDING = _Constants$ActivityCl.SENDING;\n\nvar connectSendStatus = function connectSendStatus() {\n  for (var _len = arguments.length, selectors = new Array(_len), _key = 0; _key < _len; _key++) {\n    selectors[_key] = arguments[_key];\n  }\n\n  return _connectToWebChat.default.apply(void 0, [function (_ref, _ref2) {\n    var focusSendBox = _ref.focusSendBox,\n        language = _ref.language,\n        postActivity = _ref.postActivity;\n    var activity = _ref2.activity;\n    return {\n      language: language,\n      retrySend: function retrySend(evt) {\n        evt.preventDefault();\n        postActivity(activity); // After clicking on \"retry\", the button will be removed from the DOM and focus will be lost (back to document.body)\n        // This ensures that focus will stay within Web Chat\n\n        focusSendBox();\n      }\n    };\n  }].concat(selectors));\n};\n\nexports.connectSendStatus = connectSendStatus;\n\nvar SendStatus = function SendStatus(_ref3) {\n  var activity = _ref3.activity,\n      sendState = _ref3.sendState;\n\n  var _useStyleSet = (0, _useStyleSet3.default)(),\n      _useStyleSet2 = _slicedToArray(_useStyleSet, 1),\n      sendStatusStyleSet = _useStyleSet2[0].sendStatus;\n\n  var focus = (0, _useFocus.default)();\n  var localize = useLocalizer();\n  var postActivity = usePostActivity();\n  var sendingText = localize('ACTIVITY_STATUS_SEND_STATUS_ALT_SENDING');\n  var label = localize('ACTIVITY_STATUS_SEND_STATUS_ALT', sendingText);\n  var handleRetryClick = (0, _react.useCallback)(function () {\n    postActivity(activity); // After clicking on \"retry\", the button will be gone and focus will be lost (back to document.body)\n    // We want to make sure the user stay inside Web Chat\n\n    focus('sendBoxWithoutKeyboard');\n  }, [activity, focus, postActivity]);\n  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_ScreenReaderText.default, {\n    text: label\n  }), /*#__PURE__*/_react.default.createElement(\"span\", {\n    \"aria-hidden\": true,\n    className: sendStatusStyleSet\n  }, sendState === SENDING ? sendingText : sendState === SEND_FAILED ? /*#__PURE__*/_react.default.createElement(_SendFailedRetry.default, {\n    onRetryClick: handleRetryClick\n  }) : false));\n};\n\nSendStatus.propTypes = {\n  activity: _propTypes.default.shape({\n    channelData: _propTypes.default.shape({\n      clientTimestamp: _propTypes.default.string,\n      state: _propTypes.default.string\n    })\n  }).isRequired,\n  sendState: _propTypes.default.oneOf([SENDING, SEND_FAILED]).isRequired\n};\nvar _default = SendStatus;\nexports.default = _default;","map":{"version":3,"sources":["../../../../src/Middleware/ActivityStatus/SendStatus/SendStatus.js"],"names":["useLocalizer","usePostActivity","hooks","ActivityClientState","SEND_FAILED","SENDING","Constants","connectSendStatus","selectors","focusSendBox","language","postActivity","activity","retrySend","evt","SendStatus","sendState","sendStatusStyleSet","focus","localize","sendingText","label","handleRetryClick","channelData","clientTimestamp","PropTypes","state","string","isRequired"],"mappings":"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","sourcesContent":["import { Constants } from 'botframework-webchat-core';\nimport { hooks } from 'botframework-webchat-api';\nimport PropTypes from 'prop-types';\nimport React, { useCallback } from 'react';\n\nimport connectToWebChat from '../../../connectToWebChat';\nimport ScreenReaderText from '../../../ScreenReaderText';\nimport SendFailedRetry from './SendFailedRetry';\nimport useFocus from '../../../hooks/useFocus';\nimport useStyleSet from '../../../hooks/useStyleSet';\n\nconst { useLocalizer, usePostActivity } = hooks;\n\nconst {\n  ActivityClientState: { SEND_FAILED, SENDING }\n} = Constants;\n\nconst connectSendStatus = (...selectors) =>\n  connectToWebChat(\n    ({ focusSendBox, language, postActivity }, { activity }) => ({\n      language,\n      retrySend: evt => {\n        evt.preventDefault();\n\n        postActivity(activity);\n\n        // After clicking on \"retry\", the button will be removed from the DOM and focus will be lost (back to document.body)\n        // This ensures that focus will stay within Web Chat\n        focusSendBox();\n      }\n    }),\n    ...selectors\n  );\n\nconst SendStatus = ({ activity, sendState }) => {\n  const [{ sendStatus: sendStatusStyleSet }] = useStyleSet();\n  const focus = useFocus();\n  const localize = useLocalizer();\n  const postActivity = usePostActivity();\n\n  const sendingText = localize('ACTIVITY_STATUS_SEND_STATUS_ALT_SENDING');\n\n  const label = localize('ACTIVITY_STATUS_SEND_STATUS_ALT', sendingText);\n\n  const handleRetryClick = useCallback(() => {\n    postActivity(activity);\n\n    // After clicking on \"retry\", the button will be gone and focus will be lost (back to document.body)\n    // We want to make sure the user stay inside Web Chat\n    focus('sendBoxWithoutKeyboard');\n  }, [activity, focus, postActivity]);\n\n  return (\n    <React.Fragment>\n      <ScreenReaderText text={label} />\n      <span aria-hidden={true} className={sendStatusStyleSet}>\n        {sendState === SENDING ? (\n          sendingText\n        ) : sendState === SEND_FAILED ? (\n          <SendFailedRetry onRetryClick={handleRetryClick} />\n        ) : (\n          false\n        )}\n      </span>\n    </React.Fragment>\n  );\n};\n\nSendStatus.propTypes = {\n  activity: PropTypes.shape({\n    channelData: PropTypes.shape({\n      clientTimestamp: PropTypes.string,\n      state: PropTypes.string\n    })\n  }).isRequired,\n  sendState: PropTypes.oneOf([SENDING, SEND_FAILED]).isRequired\n};\n\nexport default SendStatus;\n\nexport { connectSendStatus };\n"],"sourceRoot":"component:///"},"metadata":{},"sourceType":"script"}