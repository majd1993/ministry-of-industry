{"ast":null,"code":"import _createClass from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { Contracts } from \"./Contracts\";\nimport { PropertyId, SpeechConfigImpl } from \"./Exports\";\n/**\n * Class that defines base configurations for dialog service connector\n * @class DialogServiceConfig\n */\n\nexport var DialogServiceConfig =\n/**\n * Creates an instance of DialogService config.\n * @constructor\n */\nfunction DialogServiceConfig() {\n  _classCallCheck(this, DialogServiceConfig);\n};\n/**\n * Dialog Service configuration.\n * @class DialogServiceConfigImpl\n */\n// tslint:disable-next-line:max-classes-per-file\n\nexport var DialogServiceConfigImpl = /*#__PURE__*/function (_DialogServiceConfig) {\n  _inherits(DialogServiceConfigImpl, _DialogServiceConfig);\n\n  var _super = _createSuper(DialogServiceConfigImpl);\n\n  /**\n   * Creates an instance of dialogService config.\n   */\n  function DialogServiceConfigImpl() {\n    var _this;\n\n    _classCallCheck(this, DialogServiceConfigImpl);\n\n    _this = _super.call(this);\n    _this.privSpeechConfig = new SpeechConfigImpl();\n    return _this;\n  }\n  /**\n   * Provides access to custom properties.\n   * @member DialogServiceConfigImpl.prototype.properties\n   * @function\n   * @public\n   * @returns {PropertyCollection} The properties.\n   */\n\n\n  _createClass(DialogServiceConfigImpl, [{\n    key: \"properties\",\n    get: function get() {\n      return this.privSpeechConfig.properties;\n    }\n    /**\n     * Gets the speech recognition language.\n     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     */\n\n  }, {\n    key: \"speechRecognitionLanguage\",\n    get: function get() {\n      return this.privSpeechConfig.speechRecognitionLanguage;\n    }\n    /**\n     * Sets the speech recognition language.\n     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     * @param {string} value - The language to set.\n     */\n    ,\n    set: function set(value) {\n      Contracts.throwIfNullOrWhitespace(value, \"value\");\n      this.privSpeechConfig.speechRecognitionLanguage = value;\n    }\n    /**\n     * Sets a named property as value\n     * @member DialogServiceConfigImpl.prototype.setProperty\n     * @function\n     * @public\n     * @param {PropertyId | string} name - The property to set.\n     * @param {string} value - The value.\n     */\n\n  }, {\n    key: \"setProperty\",\n    value: function setProperty(name, value) {\n      this.privSpeechConfig.setProperty(name, value);\n    }\n    /**\n     * Sets a named property as value\n     * @member DialogServiceConfigImpl.prototype.getProperty\n     * @function\n     * @public\n     * @param {PropertyId | string} name - The property to get.\n     * @param {string} def - The default value to return in case the property is not known.\n     * @returns {string} The current value, or provided default, of the given property.\n     */\n\n  }, {\n    key: \"getProperty\",\n    value: function getProperty(name, def) {\n      return this.privSpeechConfig.getProperty(name);\n    }\n    /**\n     * Sets the proxy configuration.\n     * Only relevant in Node.js environments.\n     * Added in version 1.4.0.\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\n     * @param proxyPort The port number of the proxy server.\n     * @param proxyUserName The user name of the proxy server.\n     * @param proxyPassword The password of the proxy server.\n     */\n\n  }, {\n    key: \"setProxy\",\n    value: function setProxy(proxyHostName, proxyPort, proxyUserName, proxyPassword) {\n      this.setProperty(PropertyId.SpeechServiceConnection_ProxyHostName, proxyHostName);\n      this.setProperty(PropertyId.SpeechServiceConnection_ProxyPort, \"\".concat(proxyPort));\n\n      if (proxyUserName) {\n        this.setProperty(PropertyId.SpeechServiceConnection_ProxyUserName, proxyUserName);\n      }\n\n      if (proxyPassword) {\n        this.setProperty(PropertyId.SpeechServiceConnection_ProxyPassword, proxyPassword);\n      }\n    }\n  }, {\n    key: \"setServiceProperty\",\n    value: function setServiceProperty(name, value, channel) {\n      this.privSpeechConfig.setServiceProperty(name, value, channel);\n    }\n    /**\n     * Dispose of associated resources.\n     * @member DialogServiceConfigImpl.prototype.close\n     * @function\n     * @public\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      return;\n    }\n  }]);\n\n  return DialogServiceConfigImpl;\n}(DialogServiceConfig);","map":{"version":3,"sources":["src/sdk/DialogServiceConfig.ts"],"names":[],"mappings":";;;;AAAA;AACA;AAEA,SAAS,SAAT,QAA0B,aAA1B;AACA,SAA6B,UAA7B,EAAiE,gBAAjE,QAAyF,WAAzF;AAEA;;;AAGG;;AACH,WAAsB,mBAAtB;AAEI;;;AAGG;AACH,+BAAA;AAAA;AAA2B,CAN/B;AAoFA;;;AAGG;AACH;;AACA,WAAa,uBAAb;AAAA;;AAAA;;AAII;;AAEG;AACH,qCAAA;AAAA;;AAAA;;AACI;AACA,UAAK,gBAAL,GAAwB,IAAI,gBAAJ,EAAxB;AAFJ;AAGC;AAED;;;;;;AAMG;;;AAlBP;AAAA;AAAA,SAmBI,eAAqB;AACjB,aAAO,KAAK,gBAAL,CAAsB,UAA7B;AACH;AAED;;;;;AAKG;;AA5BP;AAAA;AAAA,SA6BI,eAAoC;AAChC,aAAO,KAAK,gBAAL,CAAsB,yBAA7B;AACH;AAED;;;;;;AAMG;AAvCP;AAAA,SAwCI,aAAqC,KAArC,EAAkD;AAC9C,MAAA,SAAS,CAAC,uBAAV,CAAkC,KAAlC,EAAyC,OAAzC;AACA,WAAK,gBAAL,CAAsB,yBAAtB,GAAkD,KAAlD;AACH;AAED;;;;;;;AAOG;;AApDP;AAAA;AAAA,WAqDW,qBAAY,IAAZ,EAAuC,KAAvC,EAAoD;AACvD,WAAK,gBAAL,CAAsB,WAAtB,CAAkC,IAAlC,EAAwC,KAAxC;AACH;AAED;;;;;;;;AAQG;;AAjEP;AAAA;AAAA,WAkEW,qBAAY,IAAZ,EAAuC,GAAvC,EAAmD;AACtD,aAAO,KAAK,gBAAL,CAAsB,WAAtB,CAAkC,IAAlC,CAAP;AACH;AAED;;;;;;;;AAQG;;AA9EP;AAAA;AAAA,WA+EW,kBAAS,aAAT,EAAgC,SAAhC,EAAmD,aAAnD,EAA2E,aAA3E,EAAiG;AACpG,WAAK,WAAL,CAAiB,UAAU,CAAC,qCAA5B,EAAmE,aAAnE;AACA,WAAK,WAAL,CAAiB,UAAU,CAAC,iCAA5B,YAAkE,SAAlE;;AACA,UAAI,aAAJ,EAAmB;AACf,aAAK,WAAL,CAAiB,UAAU,CAAC,qCAA5B,EAAmE,aAAnE;AACH;;AACD,UAAI,aAAJ,EAAmB;AACf,aAAK,WAAL,CAAiB,UAAU,CAAC,qCAA5B,EAAmE,aAAnE;AACH;AACJ;AAxFL;AAAA;AAAA,WA0FW,4BAAmB,IAAnB,EAAiC,KAAjC,EAAgD,OAAhD,EAA+E;AAClF,WAAK,gBAAL,CAAsB,kBAAtB,CAAyC,IAAzC,EAA+C,KAA/C,EAAsD,OAAtD;AACH;AAED;;;;;AAKG;;AAnGP;AAAA;AAAA,WAoGW,iBAAK;AACR;AACH;AAtGL;;AAAA;AAAA,EAA6C,mBAA7C","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\nimport { PropertyCollection, PropertyId, ServicePropertyChannel, SpeechConfigImpl } from \"./Exports\";\r\n\r\n/**\r\n * Class that defines base configurations for dialog service connector\r\n * @class DialogServiceConfig\r\n */\r\nexport abstract class DialogServiceConfig {\r\n\r\n    /**\r\n     * Creates an instance of DialogService config.\r\n     * @constructor\r\n     */\r\n    protected constructor() { }\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member DialogServiceConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member DialogServiceConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string, def?: string): string;\r\n\r\n    /**\r\n     * @member DialogServiceConfig.prototype.setServiceProperty\r\n     * @function\r\n     * @public\r\n     * @param {name} The name of the property.\r\n     * @param {value} Value to set.\r\n     * @param {channel} The channel used to pass the specified property to service.\r\n     * @summary Sets a property value that will be passed to service using the specified channel.\r\n     */\r\n    public abstract setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server.\r\n     * @param proxyPort The port number of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param porxyPort The port number of the proxy server.\r\n     * @param proxyUserName The user name of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n\r\n    /**\r\n     * Returns the configured language.\r\n     * @member DialogServiceConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get speechRecognitionLanguage(): string;\r\n\r\n    /**\r\n     * Gets/Sets the input language.\r\n     * @member DialogServiceConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language to use for recognition.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Not used in DialogServiceConfig\r\n     * @member DialogServiceConfig.applicationId\r\n     */\r\n    public applicationId: string;\r\n}\r\n\r\n/**\r\n * Dialog Service configuration.\r\n * @class DialogServiceConfigImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class DialogServiceConfigImpl extends DialogServiceConfig {\r\n\r\n    private privSpeechConfig: SpeechConfigImpl;\r\n\r\n    /**\r\n     * Creates an instance of dialogService config.\r\n     */\r\n    public constructor() {\r\n        super();\r\n        this.privSpeechConfig = new SpeechConfigImpl();\r\n    }\r\n\r\n    /**\r\n     * Provides access to custom properties.\r\n     * @member DialogServiceConfigImpl.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The properties.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privSpeechConfig.properties;\r\n    }\r\n\r\n    /**\r\n     * Gets the speech recognition language.\r\n     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechConfig.speechRecognitionLanguage;\r\n    }\r\n\r\n    /**\r\n     * Sets the speech recognition language.\r\n     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language to set.\r\n     */\r\n    public set speechRecognitionLanguage(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.privSpeechConfig.speechRecognitionLanguage = value;\r\n    }\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member DialogServiceConfigImpl.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {PropertyId | string} name - The property to set.\r\n     * @param {string} value - The value.\r\n     */\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        this.privSpeechConfig.setProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member DialogServiceConfigImpl.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {PropertyId | string} name - The property to get.\r\n     * @param {string} def - The default value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public getProperty(name: string | PropertyId, def?: string): string {\r\n        return this.privSpeechConfig.getProperty(name);\r\n    }\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param proxyPort The port number of the proxy server.\r\n     * @param proxyUserName The user name of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName?: string, proxyPassword?: string): void {\r\n        this.setProperty(PropertyId.SpeechServiceConnection_ProxyHostName, proxyHostName);\r\n        this.setProperty(PropertyId.SpeechServiceConnection_ProxyPort, `${proxyPort}`);\r\n        if (proxyUserName) {\r\n            this.setProperty(PropertyId.SpeechServiceConnection_ProxyUserName, proxyUserName);\r\n        }\r\n        if (proxyPassword) {\r\n            this.setProperty(PropertyId.SpeechServiceConnection_ProxyPassword, proxyPassword);\r\n        }\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void {\r\n        this.privSpeechConfig.setServiceProperty(name, value, channel);\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member DialogServiceConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}