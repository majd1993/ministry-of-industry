{"ast":null,"code":"import _classCallCheck from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { RecognitionMode, RecognizerConfig, TranslationConnectionFactory, TranslationServiceRecognizer } from \"../common.speech/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport { PropertyId, Recognizer } from \"./Exports\";\n/**\n * Translation recognizer\n * @class TranslationRecognizer\n */\n\nexport var TranslationRecognizer = /*#__PURE__*/function (_Recognizer) {\n  _inherits(TranslationRecognizer, _Recognizer);\n\n  var _super = _createSuper(TranslationRecognizer);\n\n  /**\n   * Initializes an instance of the TranslationRecognizer.\n   * @constructor\n   * @param {SpeechTranslationConfig} speechConfig - Set of properties to configure this recognizer.\n   * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\n   */\n  function TranslationRecognizer(speechConfig, audioConfig) {\n    var _this;\n\n    _classCallCheck(this, TranslationRecognizer);\n\n    var configImpl = speechConfig;\n    Contracts.throwIfNull(configImpl, \"speechConfig\");\n    _this = _super.call(this, audioConfig, configImpl.properties, new TranslationConnectionFactory());\n    _this.privDisposedTranslationRecognizer = false;\n    _this.privProperties = configImpl.properties.clone();\n\n    if (_this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\n      Contracts.throwIfNullOrWhitespace(_this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice), PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\n    }\n\n    Contracts.throwIfNullOrWhitespace(_this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages), PropertyId[PropertyId.SpeechServiceConnection_TranslationToLanguages]);\n    Contracts.throwIfNullOrWhitespace(_this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage), PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n    return _this;\n  }\n  /**\n   * Gets the language name that was set when the recognizer was created.\n   * @member TranslationRecognizer.prototype.speechRecognitionLanguage\n   * @function\n   * @public\n   * @returns {string} Gets the language name that was set when the recognizer was created.\n   */\n\n\n  _createClass(TranslationRecognizer, [{\n    key: \"speechRecognitionLanguage\",\n    get: function get() {\n      Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n      return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\n    }\n    /**\n     * Gets target languages for translation that were set when the recognizer was created.\n     * The language is specified in BCP-47 format. The translation will provide translated text for each of language.\n     * @member TranslationRecognizer.prototype.targetLanguages\n     * @function\n     * @public\n     * @returns {string[]} Gets target languages for translation that were set when the recognizer was created.\n     */\n\n  }, {\n    key: \"targetLanguages\",\n    get: function get() {\n      Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n      return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\n    }\n    /**\n     * Gets the name of output voice.\n     * @member TranslationRecognizer.prototype.voiceName\n     * @function\n     * @public\n     * @returns {string} the name of output voice.\n     */\n\n  }, {\n    key: \"voiceName\",\n    get: function get() {\n      Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n      return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\n    }\n    /**\n     * Gets the authorization token used to communicate with the service.\n     * @member TranslationRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @returns {string} Authorization token.\n     */\n\n  }, {\n    key: \"authorizationToken\",\n    get: function get() {\n      return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n    }\n    /**\n     * Gets/Sets the authorization token used to communicate with the service.\n     * @member TranslationRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} value - Authorization token.\n     */\n    ,\n    set: function set(value) {\n      this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\n    }\n    /**\n     * The collection of properties and their values defined for this TranslationRecognizer.\n     * @member TranslationRecognizer.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The collection of properties and their values defined for this TranslationRecognizer.\n     */\n\n  }, {\n    key: \"properties\",\n    get: function get() {\n      return this.privProperties;\n    }\n    /**\n     * Starts recognition and translation, and stops after the first utterance is recognized.\n     * The task returns the translation text as result.\n     * Note: recognizeOnceAsync returns when the first utterance has been recognized, so it is suitableonly\n     *       for single shot recognition like command or query. For long-running recognition,\n     *       use startContinuousRecognitionAsync() instead.\n     * @member TranslationRecognizer.prototype.recognizeOnceAsync\n     * @function\n     * @public\n     * @param cb - Callback that received the result when the translation has completed.\n     * @param err - Callback invoked in case of an error.\n     */\n\n  }, {\n    key: \"recognizeOnceAsync\",\n    value: function recognizeOnceAsync(cb, err) {\n      Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n      this.recognizeOnceAsyncImpl(RecognitionMode.Conversation, cb, err);\n    }\n    /**\n     * Starts recognition and translation, until stopContinuousRecognitionAsync() is called.\n     * User must subscribe to events to receive translation results.\n     * @member TranslationRecognizer.prototype.startContinuousRecognitionAsync\n     * @function\n     * @public\n     * @param cb - Callback that received the translation has started.\n     * @param err - Callback invoked in case of an error.\n     */\n\n  }, {\n    key: \"startContinuousRecognitionAsync\",\n    value: function startContinuousRecognitionAsync(cb, err) {\n      this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation, cb, err);\n    }\n    /**\n     * Stops continuous recognition and translation.\n     * @member TranslationRecognizer.prototype.stopContinuousRecognitionAsync\n     * @function\n     * @public\n     * @param cb - Callback that received the translation has stopped.\n     * @param err - Callback invoked in case of an error.\n     */\n\n  }, {\n    key: \"stopContinuousRecognitionAsync\",\n    value: function stopContinuousRecognitionAsync(cb, err) {\n      this.stopContinuousRecognitionAsyncImpl(cb, err);\n    }\n    /**\n     * closes all external resources held by an instance of this class.\n     * @member TranslationRecognizer.prototype.close\n     * @function\n     * @public\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n      this.dispose(true);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose(disposing) {\n      if (this.privDisposedTranslationRecognizer) {\n        return;\n      }\n\n      if (disposing) {\n        this.implRecognizerStop();\n        this.privDisposedTranslationRecognizer = true;\n\n        _get(_getPrototypeOf(TranslationRecognizer.prototype), \"dispose\", this).call(this, disposing);\n      }\n    }\n  }, {\n    key: \"createRecognizerConfig\",\n    value: function createRecognizerConfig(speechConfig) {\n      return new RecognizerConfig(speechConfig, this.properties);\n    }\n  }, {\n    key: \"createServiceRecognizer\",\n    value: function createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {\n      var configImpl = audioConfig;\n      return new TranslationServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\n    }\n  }]);\n\n  return TranslationRecognizer;\n}(Recognizer);","map":{"version":3,"sources":["src/sdk/TranslationRecognizer.ts"],"names":[],"mappings":";;;;;;AAAA;AACA;AAEA,SAGI,eAHJ,EAII,gBAJJ,EAOI,4BAPJ,EAQI,4BARJ,QASO,0BATP;AAWA,SAAS,SAAT,QAA0B,aAA1B;AACA,SAGI,UAHJ,EAII,UAJJ,QASO,WATP;AAYA;;;AAGG;;AACH,WAAa,qBAAb;AAAA;;AAAA;;AAGI;;;;;AAKG;AACH,iCAAmB,YAAnB,EAA0D,WAA1D,EAAmF;AAAA;;AAAA;;AAC/E,QAAM,UAAU,GAAG,YAAnB;AACA,IAAA,SAAS,CAAC,WAAV,CAAsB,UAAtB,EAAkC,cAAlC;AAEA,8BAAM,WAAN,EAAmB,UAAU,CAAC,UAA9B,EAA0C,IAAI,4BAAJ,EAA1C;AAEA,UAAK,iCAAL,GAAyC,KAAzC;AACA,UAAK,cAAL,GAAsB,UAAU,CAAC,UAAX,CAAsB,KAAtB,EAAtB;;AAEA,QAAI,MAAK,UAAL,CAAgB,WAAhB,CAA4B,UAAU,CAAC,wCAAvC,EAAiF,SAAjF,MAAgG,SAApG,EAA+G;AAC3G,MAAA,SAAS,CAAC,uBAAV,CACI,MAAK,UAAL,CAAgB,WAAhB,CAA4B,UAAU,CAAC,wCAAvC,CADJ,EAEI,UAAU,CAAC,UAAU,CAAC,wCAAZ,CAFd;AAGH;;AAED,IAAA,SAAS,CAAC,uBAAV,CACI,MAAK,UAAL,CAAgB,WAAhB,CAA4B,UAAU,CAAC,8CAAvC,CADJ,EAEI,UAAU,CAAC,UAAU,CAAC,8CAAZ,CAFd;AAIA,IAAA,SAAS,CAAC,uBAAV,CAAkC,MAAK,UAAL,CAAgB,WAAhB,CAC9B,UAAU,CAAC,oCADmB,CAAlC,EAEI,UAAU,CAAC,UAAU,CAAC,oCAAZ,CAFd;AAnB+E;AAsBlF;AAkCD;;;;;;AAMG;;;AAvEP;AAAA;AAAA,SAwEI,eAAoC;AAChC,MAAA,SAAS,CAAC,eAAV,CAA0B,KAAK,iCAA/B;AAEA,aAAO,KAAK,UAAL,CAAgB,WAAhB,CAA4B,UAAU,CAAC,oCAAvC,CAAP;AACH;AAED;;;;;;;AAOG;;AArFP;AAAA;AAAA,SAsFI,eAA0B;AACtB,MAAA,SAAS,CAAC,eAAV,CAA0B,KAAK,iCAA/B;AAEA,aAAO,KAAK,UAAL,CAAgB,WAAhB,CAA4B,UAAU,CAAC,8CAAvC,EAAuF,KAAvF,CAA6F,GAA7F,CAAP;AACH;AAED;;;;;;AAMG;;AAlGP;AAAA;AAAA,SAmGI,eAAoB;AAChB,MAAA,SAAS,CAAC,eAAV,CAA0B,KAAK,iCAA/B;AAEA,aAAO,KAAK,UAAL,CAAgB,WAAhB,CAA4B,UAAU,CAAC,wCAAvC,EAAiF,SAAjF,CAAP;AACH;AAED;;;;;;AAMG;;AA/GP;AAAA;AAAA,SAgHI,eAA6B;AACzB,aAAO,KAAK,UAAL,CAAgB,WAAhB,CAA4B,UAAU,CAAC,gCAAvC,CAAP;AACH;AAED;;;;;;AAMG;AA1HP;AAAA,SA2HI,aAA8B,KAA9B,EAA2C;AACvC,WAAK,UAAL,CAAgB,WAAhB,CAA4B,UAAU,CAAC,gCAAvC,EAAyE,KAAzE;AACH;AAED;;;;;;AAMG;;AArIP;AAAA;AAAA,SAsII,eAAqB;AACjB,aAAO,KAAK,cAAZ;AACH;AAED;;;;;;;;;;;AAWG;;AArJP;AAAA;AAAA,WAsJW,4BAAmB,EAAnB,EAAmE,GAAnE,EAA4F;AAC/F,MAAA,SAAS,CAAC,eAAV,CAA0B,KAAK,iCAA/B;AACA,WAAK,sBAAL,CAA4B,eAAe,CAAC,YAA5C,EAA0D,EAA1D,EAA8D,GAA9D;AACH;AAED;;;;;;;;AAQG;;AAnKP;AAAA;AAAA,WAoKW,yCAAgC,EAAhC,EAAiD,GAAjD,EAA0E;AAC7E,WAAK,mCAAL,CAAyC,eAAe,CAAC,YAAzD,EAAuE,EAAvE,EAA2E,GAA3E;AACH;AAED;;;;;;;AAOG;;AA/KP;AAAA;AAAA,WAgLW,wCAA+B,EAA/B,EAAgD,GAAhD,EAAyE;AAC5E,WAAK,kCAAL,CAAwC,EAAxC,EAA4C,GAA5C;AACH;AAED;;;;;AAKG;;AAzLP;AAAA;AAAA,WA0LW,iBAAK;AACR,MAAA,SAAS,CAAC,eAAV,CAA0B,KAAK,iCAA/B;AAEA,WAAK,OAAL,CAAa,IAAb;AACH;AA9LL;AAAA;AAAA,WAgMc,iBAAQ,SAAR,EAA0B;AAChC,UAAI,KAAK,iCAAT,EAA4C;AACxC;AACH;;AAED,UAAI,SAAJ,EAAe;AACX,aAAK,kBAAL;AACA,aAAK,iCAAL,GAAyC,IAAzC;;AACA,2FAAc,SAAd;AACH;AACJ;AA1ML;AAAA;AAAA,WA4Mc,gCAAuB,YAAvB,EAAwD;AAC9D,aAAO,IAAI,gBAAJ,CAAqB,YAArB,EAAmC,KAAK,UAAxC,CAAP;AACH;AA9ML;AAAA;AAAA,WAgNc,iCACN,cADM,EAEN,iBAFM,EAGN,WAHM,EAIN,gBAJM,EAI4B;AAElC,UAAM,UAAU,GAAoB,WAApC;AAEA,aAAO,IAAI,4BAAJ,CAAiC,cAAjC,EAAiD,iBAAjD,EAAoE,UAApE,EAAgF,gBAAhF,EAAkG,IAAlG,CAAP;AACH;AAzNL;;AAAA;AAAA,EAA2C,UAA3C","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    TranslationConnectionFactory,\r\n    TranslationServiceRecognizer,\r\n} from \"../common.speech/Exports\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    TranslationRecognitionCanceledEventArgs,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognitionResult,\r\n    TranslationSynthesisEventArgs,\r\n} from \"./Exports\";\r\nimport { SpeechTranslationConfig, SpeechTranslationConfigImpl } from \"./SpeechTranslationConfig\";\r\n\r\n/**\r\n * Translation recognizer\r\n * @class TranslationRecognizer\r\n */\r\nexport class TranslationRecognizer extends Recognizer {\r\n    private privDisposedTranslationRecognizer: boolean;\r\n\r\n    /**\r\n     * Initializes an instance of the TranslationRecognizer.\r\n     * @constructor\r\n     * @param {SpeechTranslationConfig} speechConfig - Set of properties to configure this recognizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig) {\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, new TranslationConnectionFactory());\r\n\r\n        this.privDisposedTranslationRecognizer = false;\r\n        this.privProperties = configImpl.properties.clone();\r\n\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\r\n            Contracts.throwIfNullOrWhitespace(\r\n                this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice),\r\n                PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\r\n        }\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages),\r\n            PropertyId[PropertyId.SpeechServiceConnection_TranslationToLanguages]);\r\n\r\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(\r\n            PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member TranslationRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member TranslationRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member TranslationRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: TranslationRecognizer, event: TranslationRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * The event synthesizing signals that a translation synthesis result is received.\r\n     * @member TranslationRecognizer.prototype.synthesizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesizing: (sender: TranslationRecognizer, event: TranslationSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the language name that was set when the recognizer was created.\r\n     * @member TranslationRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} Gets the language name that was set when the recognizer was created.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets target languages for translation that were set when the recognizer was created.\r\n     * The language is specified in BCP-47 format. The translation will provide translated text for each of language.\r\n     * @member TranslationRecognizer.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @returns {string[]} Gets target languages for translation that were set when the recognizer was created.\r\n     */\r\n    public get targetLanguages(): string[] {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n    }\r\n\r\n    /**\r\n     * Gets the name of output voice.\r\n     * @member TranslationRecognizer.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} the name of output voice.\r\n     */\r\n    public get voiceName(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member TranslationRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member TranslationRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - Authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this TranslationRecognizer.\r\n     * @member TranslationRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this TranslationRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and translation, and stops after the first utterance is recognized.\r\n     * The task returns the translation text as result.\r\n     * Note: recognizeOnceAsync returns when the first utterance has been recognized, so it is suitableonly\r\n     *       for single shot recognition like command or query. For long-running recognition,\r\n     *       use startContinuousRecognitionAsync() instead.\r\n     * @member TranslationRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the result when the translation has completed.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: TranslationRecognitionResult) => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n        this.recognizeOnceAsyncImpl(RecognitionMode.Conversation, cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and translation, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive translation results.\r\n     * @member TranslationRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the translation has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation, cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous recognition and translation.\r\n     * @member TranslationRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the translation has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        this.stopContinuousRecognitionAsyncImpl(cb, err);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member TranslationRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        this.dispose(true);\r\n    }\r\n\r\n    protected dispose(disposing: boolean): boolean {\r\n        if (this.privDisposedTranslationRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.implRecognizerStop();\r\n            this.privDisposedTranslationRecognizer = true;\r\n            super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.properties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new TranslationServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}