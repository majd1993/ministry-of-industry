{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = sendTypingIndicatorOnSetSendBoxSaga;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _effects = require(\"redux-saga/effects\");\n\nvar _setSendBox = require(\"../actions/setSendBox\");\n\nvar _setSendTypingIndicator = require(\"../actions/setSendTypingIndicator\");\n\nvar _postActivity = require(\"../actions/postActivity\");\n\nvar _emitTypingIndicator = _interopRequireDefault(require(\"../actions/emitTypingIndicator\"));\n\nvar _sendTypingIndicator = _interopRequireDefault(require(\"../selectors/sendTypingIndicator\"));\n\nvar _sleep = _interopRequireDefault(require(\"../utils/sleep\"));\n\nvar _whileConnected = _interopRequireDefault(require(\"./effects/whileConnected\"));\n\nvar _marked = /*#__PURE__*/_regenerator[\"default\"].mark(sendTypingIndicatorOnSetSendBox),\n    _marked2 = /*#__PURE__*/_regenerator[\"default\"].mark(sendTypingIndicatorOnSetSendBoxSaga);\n\nvar SEND_INTERVAL = 3000;\n\nfunction takeSendTypingIndicator(value) {\n  return (0, _effects.take)(function (_ref) {\n    var payload = _ref.payload,\n        type = _ref.type;\n    return type === _setSendTypingIndicator.SET_SEND_TYPING_INDICATOR && !payload.sendTypingIndicator === !value;\n  });\n}\n\nfunction sendTypingIndicatorOnSetSendBox() {\n  var sendTypingIndicator, _loop;\n\n  return _regenerator[\"default\"].wrap(function sendTypingIndicatorOnSetSendBox$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return (0, _effects.select)(_sendTypingIndicator[\"default\"]);\n\n        case 2:\n          sendTypingIndicator = _context3.sent;\n\n          if (sendTypingIndicator) {\n            _context3.next = 6;\n            break;\n          }\n\n          _context3.next = 6;\n          return takeSendTypingIndicator(true);\n\n        case 6:\n          _loop = /*#__PURE__*/_regenerator[\"default\"].mark(function _loop() {\n            var lastSend, task;\n            return _regenerator[\"default\"].wrap(function _loop$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    lastSend = -Infinity;\n                    _context2.next = 3;\n                    return (0, _effects.takeLatest)(function (_ref2) {\n                      var payload = _ref2.payload,\n                          type = _ref2.type;\n                      return type === _setSendBox.SET_SEND_BOX && payload.text || // Stop sending pending typing indicator if the user has posted anything.\n                      // We send typing indicator in a debounce way (t = 0, t = 3000, t = 6000).\n                      // When the user type, and then post the activity at t = 1500, we still have a pending typing indicator at t = 3000.\n                      // This code is to cancel the typing indicator at t = 3000.\n                      type === _postActivity.POST_ACTIVITY && payload.activity.type !== 'typing';\n                    }, /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(_ref3) {\n                      var payload, type, interval;\n                      return _regenerator[\"default\"].wrap(function _callee$(_context) {\n                        while (1) {\n                          switch (_context.prev = _context.next) {\n                            case 0:\n                              payload = _ref3.payload, type = _ref3.type;\n\n                              if (!(type === _setSendBox.SET_SEND_BOX)) {\n                                _context.next = 11;\n                                break;\n                              }\n\n                              interval = SEND_INTERVAL - Date.now() + lastSend;\n\n                              if (!(interval > 0)) {\n                                _context.next = 6;\n                                break;\n                              }\n\n                              _context.next = 6;\n                              return (0, _effects.call)(_sleep[\"default\"], interval);\n\n                            case 6:\n                              _context.next = 8;\n                              return (0, _effects.put)((0, _emitTypingIndicator[\"default\"])());\n\n                            case 8:\n                              lastSend = Date.now();\n                              _context.next = 12;\n                              break;\n\n                            case 11:\n                              if (payload.activity.type === 'message') {\n                                lastSend = -Infinity;\n                              }\n\n                            case 12:\n                            case \"end\":\n                              return _context.stop();\n                          }\n                        }\n                      }, _callee);\n                    }));\n\n                  case 3:\n                    task = _context2.sent;\n                    _context2.next = 6;\n                    return takeSendTypingIndicator(false);\n\n                  case 6:\n                    _context2.next = 8;\n                    return (0, _effects.cancel)(task);\n\n                  case 8:\n                    _context2.next = 10;\n                    return takeSendTypingIndicator(true);\n\n                  case 10:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _loop);\n          });\n\n        case 7:\n          return _context3.delegateYield(_loop(), \"t0\", 8);\n\n        case 8:\n          _context3.next = 7;\n          break;\n\n        case 10:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction sendTypingIndicatorOnSetSendBoxSaga() {\n  return _regenerator[\"default\"].wrap(function sendTypingIndicatorOnSetSendBoxSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return (0, _whileConnected[\"default\"])(sendTypingIndicatorOnSetSendBox);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["../../src/sagas/sendTypingIndicatorOnSetSendBoxSaga.js"],"names":["SEND_INTERVAL","payload","type","SET_SEND_TYPING_INDICATOR","sendTypingIndicatorOnSetSendBox","sendTypingIndicator","sendTypingIndicatorSelector","takeSendTypingIndicator","lastSend","task","SET_SEND_BOX","POST_ACTIVITY","interval","Date","sleep","sendTypingIndicatorOnSetSendBoxSaga"],"mappings":"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","sourcesContent":["// We will revisit this logic in #2157 and should remove the following eslint ignore\n/* eslint require-atomic-updates: \"off\" */\n\nimport { call, cancel, put, select, take, takeLatest } from 'redux-saga/effects';\n\nimport { SET_SEND_BOX } from '../actions/setSendBox';\nimport { SET_SEND_TYPING_INDICATOR } from '../actions/setSendTypingIndicator';\nimport { POST_ACTIVITY } from '../actions/postActivity';\nimport emitTypingIndicator from '../actions/emitTypingIndicator';\nimport sendTypingIndicatorSelector from '../selectors/sendTypingIndicator';\nimport sleep from '../utils/sleep';\nimport whileConnected from './effects/whileConnected';\n\nconst SEND_INTERVAL = 3000;\n\nfunction takeSendTypingIndicator(value) {\n  return take(({ payload, type }) => type === SET_SEND_TYPING_INDICATOR && !payload.sendTypingIndicator === !value);\n}\n\nfunction* sendTypingIndicatorOnSetSendBox() {\n  const sendTypingIndicator = yield select(sendTypingIndicatorSelector);\n\n  if (!sendTypingIndicator) {\n    yield takeSendTypingIndicator(true);\n  }\n\n  for (;;) {\n    let lastSend = -Infinity;\n    const task = yield takeLatest(\n      ({ payload, type }) =>\n        (type === SET_SEND_BOX && payload.text) ||\n        // Stop sending pending typing indicator if the user has posted anything.\n        // We send typing indicator in a debounce way (t = 0, t = 3000, t = 6000).\n        // When the user type, and then post the activity at t = 1500, we still have a pending typing indicator at t = 3000.\n        // This code is to cancel the typing indicator at t = 3000.\n        (type === POST_ACTIVITY && payload.activity.type !== 'typing'),\n      function*({ payload, type }) {\n        if (type === SET_SEND_BOX) {\n          const interval = SEND_INTERVAL - Date.now() + lastSend;\n\n          if (interval > 0) {\n            yield call(sleep, interval);\n          }\n\n          yield put(emitTypingIndicator());\n\n          lastSend = Date.now();\n        } else if (payload.activity.type === 'message') {\n          lastSend = -Infinity;\n        }\n      }\n    );\n\n    yield takeSendTypingIndicator(false);\n    yield cancel(task);\n    yield takeSendTypingIndicator(true);\n  }\n}\n\nexport default function* sendTypingIndicatorOnSetSendBoxSaga() {\n  yield whileConnected(sendTypingIndicatorOnSetSendBox);\n}\n"],"sourceRoot":"core:///"},"metadata":{},"sourceType":"script"}