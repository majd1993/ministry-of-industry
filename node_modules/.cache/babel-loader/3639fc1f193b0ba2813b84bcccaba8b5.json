{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = detectSlowConnectionSaga;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _effects = require(\"redux-saga/effects\");\n\nvar _connect = require(\"../actions/connect\");\n\nvar _reconnect = require(\"../actions/reconnect\");\n\nvar _sleep = _interopRequireDefault(require(\"../utils/sleep\"));\n\nvar _marked = /*#__PURE__*/_regenerator[\"default\"].mark(detectSlowConnectionSaga);\n\nvar SLOW_CONNECTION_AFTER = 15000;\n\nfunction detectSlowConnectionSaga() {\n  var connectivityRace;\n  return _regenerator[\"default\"].wrap(function detectSlowConnectionSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return (0, _effects.take)([_connect.CONNECT_PENDING, _reconnect.RECONNECT_PENDING]);\n\n        case 2:\n          _context.next = 4;\n          return (0, _effects.race)({\n            fulfilled: (0, _effects.take)([_connect.CONNECT_FULFILLED, _reconnect.RECONNECT_FULFILLED]),\n            rejected: (0, _effects.take)([_connect.CONNECT_REJECTED, _reconnect.RECONNECT_REJECTED]),\n            slow: (0, _effects.call)(function () {\n              return (0, _sleep[\"default\"])(SLOW_CONNECTION_AFTER);\n            })\n          });\n\n        case 4:\n          connectivityRace = _context.sent;\n\n          if (!('slow' in connectivityRace)) {\n            _context.next = 8;\n            break;\n          }\n\n          _context.next = 8;\n          return (0, _effects.put)({\n            type: _connect.CONNECT_STILL_PENDING\n          });\n\n        case 8:\n          _context.next = 0;\n          break;\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}","map":{"version":3,"sources":["../../src/sagas/detectSlowConnectionSaga.js"],"names":["SLOW_CONNECTION_AFTER","detectSlowConnectionSaga","CONNECT_PENDING","RECONNECT_PENDING","connectivityRace","fulfilled","CONNECT_FULFILLED","RECONNECT_FULFILLED","rejected","CONNECT_REJECTED","RECONNECT_REJECTED","slow","type","CONNECT_STILL_PENDING"],"mappings":";;;;;;;;;;;AAAA,IAAA,QAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAEA,IAAA,QAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAEA,IAAA,UAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AACA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;;wDAIyBC,wB;;AAFzB,IAAMD,qBAAqB,GAA3B,KAAA;;AAEe,SAAA,wBAAA,GAAA;AAAA,MAAA,gBAAA;AAAA,SAAA,YAAA,CAAA,SAAA,CAAA,CAAA,IAAA,CAAA,SAAA,yBAAA,CAAA,QAAA,EAAA;AAAA,WAAA,CAAA,EAAA;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,aAAA,CAAA;AAAA,UAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAEX,iBAAM,CAAA,GAAA,QAAA,CAAA,IAAA,EAAK,CAACE,QAAAA,CAAD,eAAA,EAAkBC,UAAAA,CAA7B,iBAAW,CAAL,CAAN;;AAFW,aAAA,CAAA;AAAA,UAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAIc,iBAAM,CAAA,GAAA,QAAA,CAAA,IAAA,EAAK;AAClCE,YAAAA,SAAS,EAAE,CAAA,GAAA,QAAA,CAAA,IAAA,EAAK,CAACC,QAAAA,CAAD,iBAAA,EAAoBC,UAAAA,CADF,mBAClB,CAAL,CADuB;AAElCC,YAAAA,QAAQ,EAAE,CAAA,GAAA,QAAA,CAAA,IAAA,EAAK,CAACC,QAAAA,CAAD,gBAAA,EAAmBC,UAAAA,CAFA,kBAEnB,CAAL,CAFwB;AAGlCC,YAAAA,IAAI,EAAE,CAAA,GAAA,QAAA,CAAA,IAAA,EAAK,YAAA;AAAA,qBAAM,CAAA,GAAA,MAAA,CAAA,SAAA,CAAA,EAAN,qBAAM,CAAN;AAAL,aAAA;AAH4B,WAAL,CAAN;;AAJd,aAAA,CAAA;AAILP,UAAAA,gBAJK,GAAA,QAAA,CAAA,IAILA;;AAJK,cAAA,EAUP,UAVO,gBAAA,CAAA,EAAA;AAAA,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,UAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAWT,iBAAM,CAAA,GAAA,QAAA,CAAA,GAAA,EAAI;AAAEQ,YAAAA,IAAI,EAAEC,QAAAA,CAAAA;AAAR,WAAJ,CAAN;;AAXS,aAAA,CAAA;AAAA,UAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA;;AAAA,aAAA,EAAA;AAAA,aAAA,KAAA;AAAA,iBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,GAAA,EAAA,OAAA,CAAA;AAAA","sourcesContent":["import { call, put, race, take } from 'redux-saga/effects';\n\nimport { CONNECT_FULFILLED, CONNECT_PENDING, CONNECT_REJECTED, CONNECT_STILL_PENDING } from '../actions/connect';\n\nimport { RECONNECT_FULFILLED, RECONNECT_PENDING, RECONNECT_REJECTED } from '../actions/reconnect';\nimport sleep from '../utils/sleep';\n\nconst SLOW_CONNECTION_AFTER = 15000;\n\nexport default function* detectSlowConnectionSaga() {\n  for (;;) {\n    yield take([CONNECT_PENDING, RECONNECT_PENDING]);\n\n    const connectivityRace = yield race({\n      fulfilled: take([CONNECT_FULFILLED, RECONNECT_FULFILLED]),\n      rejected: take([CONNECT_REJECTED, RECONNECT_REJECTED]),\n      slow: call(() => sleep(SLOW_CONNECTION_AFTER))\n    });\n\n    if ('slow' in connectivityRace) {\n      yield put({ type: CONNECT_STILL_PENDING });\n    }\n  }\n}\n"],"sourceRoot":"core:///"},"metadata":{},"sourceType":"script"}