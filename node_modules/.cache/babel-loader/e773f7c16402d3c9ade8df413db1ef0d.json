{"ast":null,"code":"'use strict';\n\nvar markdownTable = require('markdown-table');\n\nmodule.exports = table;\nvar space = ' ';\nvar verticalBar = '|'; // Stringify table.\n//\n// Creates a fenced table by default, but not in `looseTable: true` mode:\n//\n// ```markdown\n//  Foo | Bar\n// :-: | ---\n// Baz | Qux\n//\n// NOTE: Be careful with `looseTable: true` mode, as a loose table inside an\n// indented code block on GitHub renders as an actual table!\n//\n// Creates a spaced table by default, but not in `spacedTable: false`:\n//\n// ```markdown\n// |Foo|Bar|\n// |:-:|---|\n// |Baz|Qux|\n// ```\n\nfunction table(node) {\n  var self = this;\n  var options = self.options;\n  var loose = options.looseTable;\n  var spaced = options.spacedTable;\n  var pad = options.paddedTable;\n  var stringLength = options.stringLength;\n  var rows = node.children;\n  var index = rows.length;\n  var exit = self.enterTable();\n  var result = [];\n  var start;\n  var end;\n\n  while (index--) {\n    result[index] = self.all(rows[index]);\n  }\n\n  exit();\n\n  if (loose) {\n    start = '';\n    end = '';\n  } else if (spaced) {\n    start = verticalBar + space;\n    end = space + verticalBar;\n  } else {\n    start = verticalBar;\n    end = verticalBar;\n  }\n\n  return markdownTable(result, {\n    align: node.align,\n    pad: pad,\n    start: start,\n    end: end,\n    stringLength: stringLength,\n    delimiter: spaced ? space + verticalBar + space : verticalBar\n  });\n}","map":{"version":3,"sources":["/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/remark-stringify/lib/visitors/table.js"],"names":["markdownTable","require","module","exports","table","space","verticalBar","node","self","options","loose","looseTable","spaced","spacedTable","pad","paddedTable","stringLength","rows","children","index","length","exit","enterTable","result","start","end","all","align","delimiter"],"mappings":"AAAA;;AAEA,IAAIA,aAAa,GAAGC,OAAO,CAAC,gBAAD,CAA3B;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,KAAjB;AAEA,IAAIC,KAAK,GAAG,GAAZ;AACA,IAAIC,WAAW,GAAG,GAAlB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASF,KAAT,CAAeG,IAAf,EAAqB;AACnB,MAAIC,IAAI,GAAG,IAAX;AACA,MAAIC,OAAO,GAAGD,IAAI,CAACC,OAAnB;AACA,MAAIC,KAAK,GAAGD,OAAO,CAACE,UAApB;AACA,MAAIC,MAAM,GAAGH,OAAO,CAACI,WAArB;AACA,MAAIC,GAAG,GAAGL,OAAO,CAACM,WAAlB;AACA,MAAIC,YAAY,GAAGP,OAAO,CAACO,YAA3B;AACA,MAAIC,IAAI,GAAGV,IAAI,CAACW,QAAhB;AACA,MAAIC,KAAK,GAAGF,IAAI,CAACG,MAAjB;AACA,MAAIC,IAAI,GAAGb,IAAI,CAACc,UAAL,EAAX;AACA,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,KAAJ;AACA,MAAIC,GAAJ;;AAEA,SAAON,KAAK,EAAZ,EAAgB;AACdI,IAAAA,MAAM,CAACJ,KAAD,CAAN,GAAgBX,IAAI,CAACkB,GAAL,CAAST,IAAI,CAACE,KAAD,CAAb,CAAhB;AACD;;AAEDE,EAAAA,IAAI;;AAEJ,MAAIX,KAAJ,EAAW;AACTc,IAAAA,KAAK,GAAG,EAAR;AACAC,IAAAA,GAAG,GAAG,EAAN;AACD,GAHD,MAGO,IAAIb,MAAJ,EAAY;AACjBY,IAAAA,KAAK,GAAGlB,WAAW,GAAGD,KAAtB;AACAoB,IAAAA,GAAG,GAAGpB,KAAK,GAAGC,WAAd;AACD,GAHM,MAGA;AACLkB,IAAAA,KAAK,GAAGlB,WAAR;AACAmB,IAAAA,GAAG,GAAGnB,WAAN;AACD;;AAED,SAAON,aAAa,CAACuB,MAAD,EAAS;AAC3BI,IAAAA,KAAK,EAAEpB,IAAI,CAACoB,KADe;AAE3Bb,IAAAA,GAAG,EAAEA,GAFsB;AAG3BU,IAAAA,KAAK,EAAEA,KAHoB;AAI3BC,IAAAA,GAAG,EAAEA,GAJsB;AAK3BT,IAAAA,YAAY,EAAEA,YALa;AAM3BY,IAAAA,SAAS,EAAEhB,MAAM,GAAGP,KAAK,GAAGC,WAAR,GAAsBD,KAAzB,GAAiCC;AANvB,GAAT,CAApB;AAQD","sourcesContent":["'use strict'\n\nvar markdownTable = require('markdown-table')\n\nmodule.exports = table\n\nvar space = ' '\nvar verticalBar = '|'\n\n// Stringify table.\n//\n// Creates a fenced table by default, but not in `looseTable: true` mode:\n//\n// ```markdown\n//  Foo | Bar\n// :-: | ---\n// Baz | Qux\n//\n// NOTE: Be careful with `looseTable: true` mode, as a loose table inside an\n// indented code block on GitHub renders as an actual table!\n//\n// Creates a spaced table by default, but not in `spacedTable: false`:\n//\n// ```markdown\n// |Foo|Bar|\n// |:-:|---|\n// |Baz|Qux|\n// ```\nfunction table(node) {\n  var self = this\n  var options = self.options\n  var loose = options.looseTable\n  var spaced = options.spacedTable\n  var pad = options.paddedTable\n  var stringLength = options.stringLength\n  var rows = node.children\n  var index = rows.length\n  var exit = self.enterTable()\n  var result = []\n  var start\n  var end\n\n  while (index--) {\n    result[index] = self.all(rows[index])\n  }\n\n  exit()\n\n  if (loose) {\n    start = ''\n    end = ''\n  } else if (spaced) {\n    start = verticalBar + space\n    end = space + verticalBar\n  } else {\n    start = verticalBar\n    end = verticalBar\n  }\n\n  return markdownTable(result, {\n    align: node.align,\n    pad: pad,\n    start: start,\n    end: end,\n    stringLength: stringLength,\n    delimiter: spaced ? space + verticalBar + space : verticalBar\n  })\n}\n"]},"metadata":{},"sourceType":"script"}