{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Exports_1 = require(\"../common.speech/Exports\");\n\nvar Contracts_1 = require(\"./Contracts\");\n\nvar Exports_2 = require(\"./Exports\");\n/**\n * Defines SpeakerRecognizer class for Speaker Recognition\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\n * @class SpeakerRecognizer\n */\n\n\nvar SpeakerRecognizer =\n/** @class */\nfunction () {\n  /**\n   * SpeakerRecognizer constructor.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - An set of initial properties for this recognizer (authentication key, region, &c)\n   */\n  function SpeakerRecognizer(speechConfig, audioConfig) {\n    var speechConfigImpl = speechConfig;\n    Contracts_1.Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\n    this.privAudioConfigImpl = audioConfig;\n    Contracts_1.Contracts.throwIfNull(this.privAudioConfigImpl, \"audioConfig\");\n    this.privProperties = speechConfigImpl.properties.clone();\n    this.implSRSetup();\n  }\n\n  Object.defineProperty(SpeakerRecognizer.prototype, \"authorizationToken\", {\n    /**\n     * Gets the authorization token used to communicate with the service.\n     * @member SpeakerRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @returns {string} Authorization token.\n     */\n    get: function get() {\n      return this.properties.getProperty(Exports_2.PropertyId.SpeechServiceAuthorization_Token);\n    },\n\n    /**\n     * Gets/Sets the authorization token used to communicate with the service.\n     * @member SpeakerRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} token - Authorization token.\n     */\n    set: function set(token) {\n      Contracts_1.Contracts.throwIfNullOrWhitespace(token, \"token\");\n      this.properties.setProperty(Exports_2.PropertyId.SpeechServiceAuthorization_Token, token);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SpeakerRecognizer.prototype, \"properties\", {\n    /**\n     * The collection of properties and their values defined for this SpeakerRecognizer.\n     * @member SpeakerRecognizer.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeakerRecognizer.\n     */\n    get: function get() {\n      return this.privProperties;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Get recognition result for model using given audio\n   * @member SpeakerRecognizer.prototype.recognizeOnceAsync\n   * @function\n   * @public\n   * @param {SpeakerIdentificationModel} model Model containing Voice Profiles to be identified\n   * @param cb - Callback invoked once result is returned.\n   * @param err - Callback invoked in case of an error.\n   */\n\n  SpeakerRecognizer.prototype.recognizeOnceAsync = function (model, cb, err) {\n    var _this = this;\n\n    if (model instanceof Exports_2.SpeakerIdentificationModel) {\n      this.privAdapter.identifySpeaker(model, this.privAudioConfigImpl).continueWith(function (promiseResult) {\n        _this.handleResultCallbacks(promiseResult, Exports_2.SpeakerRecognitionResultType.Identify, undefined, cb, err);\n      });\n    } else if (model instanceof Exports_2.SpeakerVerificationModel) {\n      this.privAdapter.verifySpeaker(model, this.privAudioConfigImpl).continueWith(function (promiseResult) {\n        _this.handleResultCallbacks(promiseResult, Exports_2.SpeakerRecognitionResultType.Verify, model.voiceProfile.profileId, cb, err);\n      });\n    } else {\n      throw new Error(\"SpeakerRecognizer.recognizeOnce: Unexpected model type\");\n    }\n  };\n  /**\n   * Included for compatibility\n   * @member SpeakerRecognizer.prototype.close\n   * @function\n   * @public\n   */\n\n\n  SpeakerRecognizer.prototype.close = function () {\n    return;\n  }; // Does class setup, swiped from Recognizer.\n\n\n  SpeakerRecognizer.prototype.implSRSetup = function () {\n    var osPlatform = typeof window !== \"undefined\" ? \"Browser\" : \"Node\";\n    var osName = \"unknown\";\n    var osVersion = \"unknown\";\n\n    if (typeof navigator !== \"undefined\") {\n      osPlatform = osPlatform + \"/\" + navigator.platform;\n      osName = navigator.userAgent;\n      osVersion = navigator.appVersion;\n    }\n\n    var recognizerConfig = new Exports_1.SpeakerRecognitionConfig(new Exports_1.Context(new Exports_1.OS(osPlatform, osName, osVersion)), this.privProperties);\n    this.privAdapter = new Exports_1.SpeakerIdMessageAdapter(recognizerConfig);\n  };\n\n  SpeakerRecognizer.prototype.handleResultCallbacks = function (promiseResult, resultType, profileId, cb, err) {\n    try {\n      if (promiseResult.isError) {\n        if (!!err) {\n          err(promiseResult.error);\n        }\n      } else if (promiseResult.isCompleted && !!cb) {\n        cb(new Exports_2.SpeakerRecognitionResult(resultType, promiseResult.result.data, profileId, promiseResult.result.ok ? Exports_2.ResultReason.RecognizedSpeaker : Exports_2.ResultReason.Canceled));\n      }\n    } catch (e) {\n      if (!!err) {\n        err(e);\n      }\n    }\n  };\n\n  return SpeakerRecognizer;\n}();\n\nexports.SpeakerRecognizer = SpeakerRecognizer;","map":{"version":3,"sources":["src/sdk/SpeakerRecognizer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IRestResponse,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    Context,\r\n    OS,\r\n    SpeakerIdMessageAdapter,\r\n    SpeakerRecognitionConfig,\r\n} from \"../common.speech/Exports\";\r\nimport { IAudioSource, PromiseResult } from \"../common/Exports\";\r\nimport { AudioConfig, AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeakerIdentificationModel,\r\n    SpeakerRecognitionResult,\r\n    SpeakerRecognitionResultType,\r\n    SpeakerVerificationModel,\r\n    VoiceProfile,\r\n} from \"./Exports\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Defines SpeakerRecognizer class for Speaker Recognition\r\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\r\n * @class SpeakerRecognizer\r\n */\r\nexport class SpeakerRecognizer {\r\n    protected privProperties: PropertyCollection;\r\n    private privAdapter: SpeakerIdMessageAdapter;\r\n    private privAudioConfigImpl: AudioConfigImpl;\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member SpeakerRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member SpeakerRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this SpeakerRecognizer.\r\n     * @member SpeakerRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeakerRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * SpeakerRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this recognizer (authentication key, region, &c)\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig: AudioConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        this.privAudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNull(this.privAudioConfigImpl, \"audioConfig\");\r\n\r\n        this.privProperties = speechConfigImpl.properties.clone();\r\n        this.implSRSetup();\r\n    }\r\n\r\n    /**\r\n     * Get recognition result for model using given audio\r\n     * @member SpeakerRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param {SpeakerIdentificationModel} model Model containing Voice Profiles to be identified\r\n     * @param cb - Callback invoked once result is returned.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(model: SpeakerIdentificationModel | SpeakerVerificationModel, cb?: (e: SpeakerRecognitionResult) => void, err?: (e: string) => void): void {\r\n        if (model instanceof SpeakerIdentificationModel) {\r\n            this.privAdapter.identifySpeaker(model, this.privAudioConfigImpl).continueWith((promiseResult: PromiseResult<IRestResponse>) => {\r\n                this.handleResultCallbacks(promiseResult, SpeakerRecognitionResultType.Identify, undefined, cb, err);\r\n            });\r\n        } else if (model instanceof SpeakerVerificationModel) {\r\n            this.privAdapter.verifySpeaker(model, this.privAudioConfigImpl).continueWith((promiseResult: PromiseResult<IRestResponse>) => {\r\n                this.handleResultCallbacks(promiseResult, SpeakerRecognitionResultType.Verify, model.voiceProfile.profileId, cb, err);\r\n            });\r\n        } else {\r\n            throw new Error(\"SpeakerRecognizer.recognizeOnce: Unexpected model type\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Included for compatibility\r\n     * @member SpeakerRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n\r\n    // Does class setup, swiped from Recognizer.\r\n    private implSRSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const recognizerConfig =\r\n            new SpeakerRecognitionConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion)),\r\n                this.privProperties);\r\n\r\n        this.privAdapter = new SpeakerIdMessageAdapter(recognizerConfig);\r\n    }\r\n\r\n    private handleResultCallbacks(promiseResult: PromiseResult<IRestResponse>, resultType: SpeakerRecognitionResultType, profileId?: string, cb?: (response: SpeakerRecognitionResult) => void, err?: (e: string) => void): void {\r\n        try {\r\n            if (promiseResult.isError) {\r\n                if (!!err) {\r\n                    err(promiseResult.error);\r\n                }\r\n            } else if (promiseResult.isCompleted && !!cb) {\r\n                cb(\r\n                    new SpeakerRecognitionResult(\r\n                        resultType,\r\n                        promiseResult.result.data,\r\n                        profileId,\r\n                        promiseResult.result.ok ? ResultReason.RecognizedSpeaker : ResultReason.Canceled,\r\n                    )\r\n                );\r\n            }\r\n        } catch (e) {\r\n            if (!!err) {\r\n                err(e);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"script"}