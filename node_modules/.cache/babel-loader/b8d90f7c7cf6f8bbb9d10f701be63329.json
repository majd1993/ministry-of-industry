{"ast":null,"code":"import _classCallCheck from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ProxyInfo, WebsocketConnection } from \"../../common.browser/Exports\";\nimport { createGuid } from \"../../common/Exports\";\nimport { Contracts } from \"../../sdk/Contracts\";\nimport { PropertyId } from \"../../sdk/Exports\";\nimport { ConnectionFactoryBase } from \"../ConnectionFactoryBase\";\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig\";\nimport { ConversationWebsocketMessageFormatter } from \"./ConversationWebsocketMessageFormatter\";\n/**\n * Create a connection to the Conversation Translator websocket for sending instant messages and commands, and for receiving translated messages.\n * The conversation must already have been started or joined.\n */\n\nexport var ConversationConnectionFactory = /*#__PURE__*/function (_ConnectionFactoryBas) {\n  _inherits(ConversationConnectionFactory, _ConnectionFactoryBas);\n\n  var _super = _createSuper(ConversationConnectionFactory);\n\n  function ConversationConnectionFactory() {\n    _classCallCheck(this, ConversationConnectionFactory);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ConversationConnectionFactory, [{\n    key: \"create\",\n    value: function create(config, authInfo, connectionId) {\n      var endpointHost = config.parameters.getProperty(PropertyId.ConversationTranslator_Host, ConversationConnectionConfig.host);\n      var correlationId = config.parameters.getProperty(PropertyId.ConversationTranslator_CorrelationId, createGuid());\n      var endpoint = \"wss://\".concat(endpointHost).concat(ConversationConnectionConfig.webSocketPath);\n      var token = config.parameters.getProperty(PropertyId.ConversationTranslator_Token, undefined);\n      Contracts.throwIfNullOrUndefined(token, \"token\");\n      var queryParams = {};\n      queryParams[ConversationConnectionConfig.configParams.apiVersion] = ConversationConnectionConfig.apiVersion;\n      queryParams[ConversationConnectionConfig.configParams.token] = token;\n      queryParams[ConversationConnectionConfig.configParams.correlationId] = correlationId;\n      return new WebsocketConnection(endpoint, queryParams, {}, new ConversationWebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), connectionId);\n    }\n  }]);\n\n  return ConversationConnectionFactory;\n}(ConnectionFactoryBase);","map":{"version":3,"sources":["src/common.speech/Transcription/ConversationConnectionFactory.ts"],"names":[],"mappings":";;;;AAAA;AACA;AAEA,SAAS,SAAT,EAAoB,mBAApB,QAA+C,8BAA/C;AACA,SAAS,UAAT,QAA2D,sBAA3D;AACA,SAAS,SAAT,QAA0B,qBAA1B;AACA,SAAS,UAAT,QAA2B,mBAA3B;AACA,SAAS,qBAAT,QAAsC,0BAAtC;AAEA,SAAS,4BAAT,QAA6C,gCAA7C;AACA,SAAS,qCAAT,QAAsD,yCAAtD;AAEA;;;AAGG;;AACH,WAAa,6BAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WAEW,gBAAO,MAAP,EAAiC,QAAjC,EAAqD,YAArD,EAA0E;AAE7E,UAAM,YAAY,GAAW,MAAM,CAAC,UAAP,CAAkB,WAAlB,CAA8B,UAAU,CAAC,2BAAzC,EAAsE,4BAA4B,CAAC,IAAnG,CAA7B;AACA,UAAM,aAAa,GAAW,MAAM,CAAC,UAAP,CAAkB,WAAlB,CAA8B,UAAU,CAAC,oCAAzC,EAA+E,UAAU,EAAzF,CAA9B;AAEA,UAAM,QAAQ,mBAAoB,YAApB,SAAmC,4BAA4B,CAAC,aAAhE,CAAd;AACA,UAAM,KAAK,GAAW,MAAM,CAAC,UAAP,CAAkB,WAAlB,CAA8B,UAAU,CAAC,4BAAzC,EAAuE,SAAvE,CAAtB;AACA,MAAA,SAAS,CAAC,sBAAV,CAAiC,KAAjC,EAAwC,OAAxC;AAEA,UAAM,WAAW,GAA8B,EAA/C;AACA,MAAA,WAAW,CAAC,4BAA4B,CAAC,YAA7B,CAA0C,UAA3C,CAAX,GAAoE,4BAA4B,CAAC,UAAjG;AACA,MAAA,WAAW,CAAC,4BAA4B,CAAC,YAA7B,CAA0C,KAA3C,CAAX,GAA+D,KAA/D;AACA,MAAA,WAAW,CAAC,4BAA4B,CAAC,YAA7B,CAA0C,aAA3C,CAAX,GAAuE,aAAvE;AACA,aAAO,IAAI,mBAAJ,CAAwB,QAAxB,EAAkC,WAAlC,EAA+C,EAA/C,EAAmD,IAAI,qCAAJ,EAAnD,EAAgG,SAAS,CAAC,oBAAV,CAA+B,MAA/B,CAAhG,EAAwI,YAAxI,CAAP;AACH;AAhBL;;AAAA;AAAA,EAAmD,qBAAnD","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ProxyInfo, WebsocketConnection } from \"../../common.browser/Exports\";\r\nimport { createGuid, IConnection, IStringDictionary } from \"../../common/Exports\";\r\nimport { Contracts } from \"../../sdk/Contracts\";\r\nimport { PropertyId } from \"../../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"../ConnectionFactoryBase\";\r\nimport { AuthInfo, RecognizerConfig } from \"../Exports\";\r\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig\";\r\nimport { ConversationWebsocketMessageFormatter } from \"./ConversationWebsocketMessageFormatter\";\r\n\r\n/**\r\n * Create a connection to the Conversation Translator websocket for sending instant messages and commands, and for receiving translated messages.\r\n * The conversation must already have been started or joined.\r\n */\r\nexport class ConversationConnectionFactory extends ConnectionFactoryBase  {\r\n\r\n    public create(config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n\r\n        const endpointHost: string = config.parameters.getProperty(PropertyId.ConversationTranslator_Host, ConversationConnectionConfig.host);\r\n        const correlationId: string = config.parameters.getProperty(PropertyId.ConversationTranslator_CorrelationId, createGuid());\r\n\r\n        const endpoint: string = `wss://${endpointHost}${ConversationConnectionConfig.webSocketPath}`;\r\n        const token: string = config.parameters.getProperty(PropertyId.ConversationTranslator_Token, undefined);\r\n        Contracts.throwIfNullOrUndefined(token, \"token\");\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        queryParams[ConversationConnectionConfig.configParams.apiVersion] = ConversationConnectionConfig.apiVersion;\r\n        queryParams[ConversationConnectionConfig.configParams.token] = token;\r\n        queryParams[ConversationConnectionConfig.configParams.correlationId] = correlationId;\r\n        return new WebsocketConnection(endpoint, queryParams, {}, new ConversationWebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), connectionId);\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}