{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar DialogConnectorFactory_1 = require(\"../common.speech/DialogConnectorFactory\");\n\nvar Exports_1 = require(\"../common.speech/Exports\");\n\nvar Contracts_1 = require(\"./Contracts\");\n\nvar Exports_2 = require(\"./Exports\");\n\nvar PropertyId_1 = require(\"./PropertyId\");\n\nvar SpeechSynthesisOutputFormat_1 = require(\"./SpeechSynthesisOutputFormat\");\n/**\n * Dialog Service Connector\n * @class DialogServiceConnector\n */\n\n\nvar DialogServiceConnector =\n/** @class */\nfunction (_super) {\n  __extends(DialogServiceConnector, _super);\n  /**\n   * Initializes an instance of the DialogServiceConnector.\n   * @constructor\n   * @param {DialogServiceConfig} dialogConfig - Set of properties to configure this recognizer.\n   * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\n   */\n\n\n  function DialogServiceConnector(dialogConfig, audioConfig) {\n    var _this = this;\n\n    var dialogServiceConfigImpl = dialogConfig;\n    Contracts_1.Contracts.throwIfNull(dialogConfig, \"dialogConfig\");\n    _this = _super.call(this, audioConfig, dialogServiceConfigImpl.properties, new DialogConnectorFactory_1.DialogConnectionFactory()) || this;\n    _this.isTurnComplete = true;\n    _this.privIsDisposed = false;\n    _this.privProperties = dialogServiceConfigImpl.properties.clone();\n\n    var agentConfig = _this.buildAgentConfig();\n\n    _this.privReco.agentConfig.set(agentConfig);\n\n    return _this;\n  }\n  /**\n   * Starts a connection to the service.\n   * Users can optionally call connect() to manually set up a connection in advance, before starting interactions.\n   *\n   * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to\n   * be notified when the connection is established.\n   * @member DialogServiceConnector.prototype.connect\n   * @function\n   * @public\n   */\n\n\n  DialogServiceConnector.prototype.connect = function () {\n    this.privReco.connect();\n  };\n  /**\n   * Closes the connection the service.\n   * Users can optionally call disconnect() to manually shutdown the connection of the associated DialogServiceConnector.\n   *\n   * If disconnect() is called during a recognition, recognition will fail and cancel with an error.\n   */\n\n\n  DialogServiceConnector.prototype.disconnect = function () {\n    this.privReco.disconnect();\n  };\n\n  Object.defineProperty(DialogServiceConnector.prototype, \"authorizationToken\", {\n    /**\n     * Gets the authorization token used to communicate with the service.\n     * @member DialogServiceConnector.prototype.authorizationToken\n     * @function\n     * @public\n     * @returns {string} Authorization token.\n     */\n    get: function get() {\n      return this.properties.getProperty(PropertyId_1.PropertyId.SpeechServiceAuthorization_Token);\n    },\n\n    /**\n     * Sets the authorization token used to communicate with the service.\n     * @member DialogServiceConnector.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} token - Authorization token.\n     */\n    set: function set(token) {\n      Contracts_1.Contracts.throwIfNullOrWhitespace(token, \"token\");\n      this.properties.setProperty(PropertyId_1.PropertyId.SpeechServiceAuthorization_Token, token);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DialogServiceConnector.prototype, \"properties\", {\n    /**\n     * The collection of properties and their values defined for this DialogServiceConnector.\n     * @member DialogServiceConnector.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The collection of properties and their values defined for this DialogServiceConnector.\n     */\n    get: function get() {\n      return this.privProperties;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DialogServiceConnector.prototype, \"speechActivityTemplate\", {\n    /** Gets the template for the activity generated by service from speech.\n     * Properties from the template will be stamped on the generated activity.\n     * It can be empty\n     */\n    get: function get() {\n      return this.properties.getProperty(PropertyId_1.PropertyId.Conversation_Speech_Activity_Template);\n    },\n\n    /** Sets the template for the activity generated by service from speech.\n     * Properties from the template will be stamped on the generated activity.\n     * It can be null or empty.\n     * Note: it has to be a valid Json object.\n     */\n    set: function set(speechActivityTemplate) {\n      this.properties.setProperty(PropertyId_1.PropertyId.Conversation_Speech_Activity_Template, speechActivityTemplate);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Starts recognition and stops after the first utterance is recognized.\n   * @member DialogServiceConnector.prototype.listenOnceAsync\n   * @function\n   * @public\n   * @param cb - Callback that received the result when the reco has completed.\n   * @param err - Callback invoked in case of an error.\n   */\n\n  DialogServiceConnector.prototype.listenOnceAsync = function (cb, err) {\n    var _this = this;\n\n    if (this.isTurnComplete) {\n      try {\n        Contracts_1.Contracts.throwIfDisposed(this.privIsDisposed);\n        this.connect();\n        this.implRecognizerStop();\n        this.isTurnComplete = false;\n        this.privReco.recognize(Exports_1.RecognitionMode.Conversation, function (e) {\n          _this.implRecognizerStop();\n\n          _this.isTurnComplete = true;\n\n          if (!!cb) {\n            cb(e);\n          }\n        }, function (e) {\n          _this.implRecognizerStop();\n\n          _this.isTurnComplete = true;\n\n          if (!!err) {\n            err(e);\n          }\n          /* tslint:disable:no-empty */\n\n        }).on(function (_) {}, function (error) {\n          if (!!err) {\n            err(error);\n          }\n        });\n      } catch (error) {\n        if (!!err) {\n          if (error instanceof Error) {\n            var typedError = error;\n            err(typedError.name + \": \" + typedError.message);\n          } else {\n            err(error);\n          }\n        } // Destroy the recognizer.\n\n\n        this.dispose(true);\n      }\n    }\n  };\n\n  DialogServiceConnector.prototype.sendActivityAsync = function (activity) {\n    this.privReco.sendMessage(activity);\n  };\n  /**\n   * closes all external resources held by an instance of this class.\n   * @member DialogServiceConnector.prototype.close\n   * @function\n   * @public\n   */\n\n\n  DialogServiceConnector.prototype.close = function () {\n    Contracts_1.Contracts.throwIfDisposed(this.privIsDisposed);\n    this.dispose(true);\n  };\n\n  DialogServiceConnector.prototype.dispose = function (disposing) {\n    if (this.privIsDisposed) {\n      return;\n    }\n\n    if (disposing) {\n      this.implRecognizerStop();\n      this.privIsDisposed = true;\n\n      _super.prototype.dispose.call(this, disposing);\n    }\n  };\n\n  DialogServiceConnector.prototype.createRecognizerConfig = function (speechConfig) {\n    return new Exports_1.RecognizerConfig(speechConfig, this.privProperties);\n  };\n\n  DialogServiceConnector.prototype.createServiceRecognizer = function (authentication, connectionFactory, audioConfig, recognizerConfig) {\n    var audioSource = audioConfig;\n    return new Exports_1.DialogServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\n  };\n\n  DialogServiceConnector.prototype.buildAgentConfig = function () {\n    var communicationType = this.properties.getProperty(\"Conversation_Communication_Type\", \"Default\");\n    return {\n      botInfo: {\n        commType: communicationType,\n        commandsCulture: undefined,\n        connectionId: this.properties.getProperty(PropertyId_1.PropertyId.Conversation_ApplicationId),\n        conversationId: this.properties.getProperty(PropertyId_1.PropertyId.Conversation_Conversation_Id, undefined),\n        fromId: this.properties.getProperty(PropertyId_1.PropertyId.Conversation_From_Id, undefined),\n        ttsAudioFormat: SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat[this.properties.getProperty(PropertyId_1.PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)]\n      },\n      version: 0.2\n    };\n  };\n\n  return DialogServiceConnector;\n}(Exports_2.Recognizer);\n\nexports.DialogServiceConnector = DialogServiceConnector;","map":{"version":3,"sources":["src/sdk/DialogServiceConnector.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { DialogConnectionFactory } from \"../common.speech/DialogConnectorFactory\";\r\nimport {\r\n    DialogServiceAdapter,\r\n    IAgentConfig,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n} from \"../common.speech/Exports\";\r\nimport { ActivityReceivedEventArgs } from \"./ActivityReceivedEventArgs\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig\";\r\nimport {\r\n    AudioConfig,\r\n    PropertyCollection,\r\n    Recognizer,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult\r\n} from \"./Exports\";\r\nimport { PropertyId } from \"./PropertyId\";\r\nimport { SpeechSynthesisOutputFormat } from \"./SpeechSynthesisOutputFormat\";\r\n\r\n/**\r\n * Dialog Service Connector\r\n * @class DialogServiceConnector\r\n */\r\nexport class DialogServiceConnector extends Recognizer {\r\n    private privIsDisposed: boolean;\r\n    private isTurnComplete: boolean;\r\n\r\n    /**\r\n     * Initializes an instance of the DialogServiceConnector.\r\n     * @constructor\r\n     * @param {DialogServiceConfig} dialogConfig - Set of properties to configure this recognizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\r\n     */\r\n    public constructor(dialogConfig: DialogServiceConfig, audioConfig?: AudioConfig) {\r\n        const dialogServiceConfigImpl = dialogConfig as DialogServiceConfigImpl;\r\n        Contracts.throwIfNull(dialogConfig, \"dialogConfig\");\r\n\r\n        super(audioConfig, dialogServiceConfigImpl.properties, new DialogConnectionFactory());\r\n\r\n        this.isTurnComplete = true;\r\n        this.privIsDisposed = false;\r\n        this.privProperties = dialogServiceConfigImpl.properties.clone();\r\n\r\n        const agentConfig = this.buildAgentConfig();\r\n        this.privReco.agentConfig.set(agentConfig);\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member DialogServiceConnector.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: DialogServiceConnector, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member DialogServiceConfig.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: DialogServiceConnector, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member DialogServiceConnector.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: DialogServiceConnector, event: SpeechRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * The event activityReceived signals that an activity has been received.\r\n     * @member DialogServiceConnector.prototype.activityReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public activityReceived: (sender: DialogServiceConnector, event: ActivityReceivedEventArgs) => void;\r\n\r\n    /**\r\n     * Starts a connection to the service.\r\n     * Users can optionally call connect() to manually set up a connection in advance, before starting interactions.\r\n     *\r\n     * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to\r\n     * be notified when the connection is established.\r\n     * @member DialogServiceConnector.prototype.connect\r\n     * @function\r\n     * @public\r\n     */\r\n    public connect(): void {\r\n        this.privReco.connect();\r\n    }\r\n\r\n    /**\r\n     * Closes the connection the service.\r\n     * Users can optionally call disconnect() to manually shutdown the connection of the associated DialogServiceConnector.\r\n     *\r\n     * If disconnect() is called during a recognition, recognition will fail and cancel with an error.\r\n     */\r\n    public disconnect(): void {\r\n        this.privReco.disconnect();\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member DialogServiceConnector.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Sets the authorization token used to communicate with the service.\r\n     * @member DialogServiceConnector.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this DialogServiceConnector.\r\n     * @member DialogServiceConnector.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this DialogServiceConnector.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /** Gets the template for the activity generated by service from speech.\r\n     * Properties from the template will be stamped on the generated activity.\r\n     * It can be empty\r\n     */\r\n    public get speechActivityTemplate(): string {\r\n        return this.properties.getProperty(PropertyId.Conversation_Speech_Activity_Template);\r\n    }\r\n\r\n    /** Sets the template for the activity generated by service from speech.\r\n     * Properties from the template will be stamped on the generated activity.\r\n     * It can be null or empty.\r\n     * Note: it has to be a valid Json object.\r\n     */\r\n    public set speechActivityTemplate(speechActivityTemplate: string) {\r\n        this.properties.setProperty(PropertyId.Conversation_Speech_Activity_Template, speechActivityTemplate);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and stops after the first utterance is recognized.\r\n     * @member DialogServiceConnector.prototype.listenOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the result when the reco has completed.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public listenOnceAsync(cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\r\n        if (this.isTurnComplete) {\r\n            try {\r\n                Contracts.throwIfDisposed(this.privIsDisposed);\r\n\r\n                this.connect();\r\n\r\n                this.implRecognizerStop();\r\n                this.isTurnComplete = false;\r\n\r\n                this.privReco.recognize(\r\n                    RecognitionMode.Conversation,\r\n                    (e: SpeechRecognitionResult) => {\r\n                        this.implRecognizerStop();\r\n\r\n                        this.isTurnComplete = true;\r\n\r\n                        if (!!cb) {\r\n                            cb(e);\r\n                        }\r\n                    },\r\n                    (e: string) => {\r\n                        this.implRecognizerStop();\r\n                        this.isTurnComplete = true;\r\n                        if (!!err) {\r\n                            err(e);\r\n                        }\r\n                        /* tslint:disable:no-empty */\r\n                    }).on((_: boolean): void => { },\r\n                        (error: string): void => {\r\n                            if (!!err) {\r\n                                err(error);\r\n                            }\r\n                        });\r\n            } catch (error) {\r\n                if (!!err) {\r\n                    if (error instanceof Error) {\r\n                        const typedError: Error = error as Error;\r\n                        err(typedError.name + \": \" + typedError.message);\r\n                    } else {\r\n                        err(error);\r\n                    }\r\n                }\r\n\r\n                // Destroy the recognizer.\r\n                this.dispose(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    public sendActivityAsync(activity: string): void {\r\n        this.privReco.sendMessage(activity);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member DialogServiceConnector.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        Contracts.throwIfDisposed(this.privIsDisposed);\r\n\r\n        this.dispose(true);\r\n    }\r\n\r\n    protected dispose(disposing: boolean): boolean {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.implRecognizerStop();\r\n            this.privIsDisposed = true;\r\n            super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const audioSource: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new DialogServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\r\n    }\r\n\r\n    private buildAgentConfig(): IAgentConfig {\r\n        const communicationType = this.properties.getProperty(\"Conversation_Communication_Type\", \"Default\");\r\n\r\n        return {\r\n            botInfo: {\r\n                commType: communicationType,\r\n                commandsCulture: undefined,\r\n                connectionId: this.properties.getProperty(PropertyId.Conversation_ApplicationId),\r\n                conversationId: this.properties.getProperty(PropertyId.Conversation_Conversation_Id, undefined),\r\n                fromId: this.properties.getProperty(PropertyId.Conversation_From_Id, undefined),\r\n                ttsAudioFormat: (SpeechSynthesisOutputFormat as any)[this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)]\r\n            },\r\n            version: 0.2\r\n        };\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}