{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Exports_1 = require(\"../../common/Exports\");\n\nvar Contracts_1 = require(\"../Contracts\");\n\nvar AudioOutputFormat_1 = require(\"./AudioOutputFormat\");\n/**\n * Represents audio output stream used for custom audio output configurations.\n * @class AudioOutputStream\n */\n\n\nvar AudioOutputStream =\n/** @class */\nfunction () {\n  /**\n   * Creates and initializes an instance.\n   * @constructor\n   */\n  function AudioOutputStream() {}\n  /**\n   * Creates a memory backed PullAudioOutputStream with the specified audio format.\n   * @member AudioOutputStream.createPullStream\n   * @function\n   * @public\n   * @returns {PullAudioOutputStream} The audio output stream being created.\n   */\n\n\n  AudioOutputStream.createPullStream = function () {\n    return PullAudioOutputStream.create();\n  };\n\n  return AudioOutputStream;\n}();\n\nexports.AudioOutputStream = AudioOutputStream;\n/**\n * Represents memory backed push audio output stream used for custom audio output configurations.\n * @class PullAudioOutputStream\n */\n// tslint:disable-next-line:max-classes-per-file\n\nvar PullAudioOutputStream =\n/** @class */\nfunction (_super) {\n  __extends(PullAudioOutputStream, _super);\n\n  function PullAudioOutputStream() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Creates a memory backed PullAudioOutputStream with the specified audio format.\n   * @member PullAudioOutputStream.create\n   * @function\n   * @public\n   * @returns {PullAudioOutputStream} The push audio output stream being created.\n   */\n\n\n  PullAudioOutputStream.create = function () {\n    return new PullAudioOutputStreamImpl();\n  };\n\n  return PullAudioOutputStream;\n}(AudioOutputStream);\n\nexports.PullAudioOutputStream = PullAudioOutputStream;\n/**\n * Represents memory backed push audio output stream used for custom audio output configurations.\n * @private\n * @class PullAudioOutputStreamImpl\n */\n// tslint:disable-next-line:max-classes-per-file\n\nvar PullAudioOutputStreamImpl =\n/** @class */\nfunction (_super) {\n  __extends(PullAudioOutputStreamImpl, _super);\n  /**\n   * Creates and initializes an instance with the given values.\n   * @constructor\n   */\n\n\n  function PullAudioOutputStreamImpl() {\n    var _this = _super.call(this) || this;\n\n    _this.privId = Exports_1.createNoDashGuid();\n    _this.privStream = new Exports_1.Stream();\n    return _this;\n  }\n\n  Object.defineProperty(PullAudioOutputStreamImpl.prototype, \"format\", {\n    /**\n     * Format information for the audio\n     */\n    get: function get() {\n      return this.privFormat;\n    },\n\n    /**\n     * Sets the format information to the stream. For internal use only.\n     * @param {AudioStreamFormat} format - the format to be set.\n     */\n    set: function set(format) {\n      if (format === undefined || format === null) {\n        this.privFormat = AudioOutputFormat_1.AudioOutputFormatImpl.getDefaultOutputFormat();\n      }\n\n      this.privFormat = format;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PullAudioOutputStreamImpl.prototype, \"isClosed\", {\n    /**\n     * Checks if the stream is closed\n     * @member PullAudioOutputStreamImpl.prototype.isClosed\n     * @property\n     * @public\n     */\n    get: function get() {\n      return this.privStream.isClosed;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Gets the id of the stream\n   * @member PullAudioOutputStreamImpl.prototype.id\n   * @property\n   * @public\n   */\n\n  PullAudioOutputStreamImpl.prototype.id = function () {\n    return this.privId;\n  };\n  /**\n   * Reads audio data from the internal buffer.\n   * @member PullAudioOutputStreamImpl.prototype.read\n   * @function\n   * @public\n   * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\n   * @returns {Promise<number>} - Audio buffer length has been read.\n   */\n\n\n  PullAudioOutputStreamImpl.prototype.read = function (dataBuffer) {\n    var _this = this;\n\n    var intView = new Int8Array(dataBuffer);\n    var totalBytes = 0;\n\n    if (this.privLastChunkView !== undefined) {\n      if (this.privLastChunkView.length > dataBuffer.byteLength) {\n        intView.set(this.privLastChunkView.slice(0, dataBuffer.byteLength));\n        this.privLastChunkView = this.privLastChunkView.slice(dataBuffer.byteLength);\n        return Exports_1.PromiseHelper.fromResult(dataBuffer.byteLength);\n      }\n\n      intView.set(this.privLastChunkView);\n      totalBytes = this.privLastChunkView.length;\n      this.privLastChunkView = undefined;\n    }\n\n    var deffer = new Exports_1.Deferred(); // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\n\n    var readUntilFilled = function readUntilFilled() {\n      if (totalBytes < dataBuffer.byteLength && !_this.privStream.isReadEnded) {\n        _this.privStream.read().onSuccessContinueWith(function (chunk) {\n          if (chunk !== undefined && !chunk.isEnd) {\n            var tmpBuffer = void 0;\n\n            if (chunk.buffer.byteLength > dataBuffer.byteLength - totalBytes) {\n              tmpBuffer = chunk.buffer.slice(0, dataBuffer.byteLength - totalBytes);\n              _this.privLastChunkView = new Int8Array(chunk.buffer.slice(dataBuffer.byteLength - totalBytes));\n            } else {\n              tmpBuffer = chunk.buffer;\n            }\n\n            intView.set(new Int8Array(tmpBuffer), totalBytes);\n            totalBytes += tmpBuffer.byteLength;\n            readUntilFilled();\n          } else {\n            _this.privStream.readEnded();\n\n            deffer.resolve(totalBytes);\n          }\n        });\n      } else {\n        deffer.resolve(totalBytes);\n      }\n    };\n\n    readUntilFilled();\n    return deffer.promise();\n  };\n  /**\n   * Writes the audio data specified by making an internal copy of the data.\n   * @member PullAudioOutputStreamImpl.prototype.write\n   * @function\n   * @public\n   * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\n   */\n\n\n  PullAudioOutputStreamImpl.prototype.write = function (dataBuffer) {\n    Contracts_1.Contracts.throwIfNullOrUndefined(this.privStream, \"must set format before writing\");\n    this.privStream.writeStreamChunk({\n      buffer: dataBuffer,\n      isEnd: false,\n      timeReceived: Date.now()\n    });\n  };\n  /**\n   * Closes the stream.\n   * @member PullAudioOutputStreamImpl.prototype.close\n   * @function\n   * @public\n   */\n\n\n  PullAudioOutputStreamImpl.prototype.close = function () {\n    this.privStream.close();\n  };\n\n  return PullAudioOutputStreamImpl;\n}(PullAudioOutputStream);\n\nexports.PullAudioOutputStreamImpl = PullAudioOutputStreamImpl;\n/*\n * Represents audio output stream used for custom audio output configurations.\n * @class PushAudioOutputStream\n */\n// tslint:disable-next-line:max-classes-per-file\n\nvar PushAudioOutputStream =\n/** @class */\nfunction (_super) {\n  __extends(PushAudioOutputStream, _super);\n  /**\n   * Creates and initializes and instance.\n   * @constructor\n   */\n\n\n  function PushAudioOutputStream() {\n    return _super.call(this) || this;\n  }\n  /**\n   * Creates a PushAudioOutputStream that delegates to the specified callback interface for\n   * write() and close() methods.\n   * @member PushAudioOutputStream.create\n   * @function\n   * @public\n   * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\n   *        derived from PushAudioOutputStreamCallback\n   * @returns {PushAudioOutputStream} The push audio output stream being created.\n   */\n\n\n  PushAudioOutputStream.create = function (callback) {\n    return new PushAudioOutputStreamImpl(callback);\n  };\n\n  return PushAudioOutputStream;\n}(AudioOutputStream);\n\nexports.PushAudioOutputStream = PushAudioOutputStream;\n/**\n * Represents audio output stream used for custom audio output configurations.\n * @private\n * @class PushAudioOutputStreamImpl\n */\n// tslint:disable-next-line:max-classes-per-file\n\nvar PushAudioOutputStreamImpl =\n/** @class */\nfunction (_super) {\n  __extends(PushAudioOutputStreamImpl, _super);\n  /**\n   * Creates a PushAudioOutputStream that delegates to the specified callback interface for\n   * read() and close() methods.\n   * @constructor\n   * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\n   *        derived from PushAudioOutputStreamCallback\n   */\n\n\n  function PushAudioOutputStreamImpl(callback) {\n    var _this = _super.call(this) || this;\n\n    _this.privId = Exports_1.createNoDashGuid();\n    _this.privCallback = callback;\n    return _this;\n  }\n\n  Object.defineProperty(PushAudioOutputStreamImpl.prototype, \"format\", {\n    // tslint:disable-next-line:no-empty\n    set: function set(format) {},\n    enumerable: true,\n    configurable: true\n  });\n\n  PushAudioOutputStreamImpl.prototype.write = function (buffer) {\n    if (!!this.privCallback.write) {\n      this.privCallback.write(buffer);\n    }\n  };\n\n  PushAudioOutputStreamImpl.prototype.close = function () {\n    if (!!this.privCallback.close) {\n      this.privCallback.close();\n    }\n  };\n\n  PushAudioOutputStreamImpl.prototype.id = function () {\n    return this.privId;\n  };\n\n  return PushAudioOutputStreamImpl;\n}(PushAudioOutputStream);\n\nexports.PushAudioOutputStreamImpl = PushAudioOutputStreamImpl;","map":{"version":3,"sources":["src/sdk/Audio/AudioOutputStream.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    IAudioDestination,\r\n    IStreamChunk,\r\n    Promise,\r\n    PromiseHelper,\r\n    Stream,\r\n} from \"../../common/Exports\";\r\nimport {Contracts} from \"../Contracts\";\r\nimport {\r\n    AudioStreamFormat,\r\n    PushAudioOutputStreamCallback\r\n} from \"../Exports\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat\";\r\n\r\n/**\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @class AudioOutputStream\r\n */\r\nexport abstract class AudioOutputStream {\r\n\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() { }\r\n\r\n    /**\r\n     * Sets the format of the AudioOutputStream\r\n     * Note: the format is set by the synthesizer before writing. Do not set it before passing it to AudioConfig\r\n     * @member AudioOutputStream.prototype.format\r\n     */\r\n    public abstract set format(format: AudioStreamFormat);\r\n\r\n    /**\r\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\r\n     * @member AudioOutputStream.createPullStream\r\n     * @function\r\n     * @public\r\n     * @returns {PullAudioOutputStream} The audio output stream being created.\r\n     */\r\n    public static createPullStream(): PullAudioOutputStream {\r\n        return PullAudioOutputStream.create();\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio output stream used for custom audio output configurations.\r\n * @class PullAudioOutputStream\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport abstract class PullAudioOutputStream extends AudioOutputStream {\r\n\r\n    /**\r\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\r\n     * @member PullAudioOutputStream.create\r\n     * @function\r\n     * @public\r\n     * @returns {PullAudioOutputStream} The push audio output stream being created.\r\n     */\r\n    public static create(): PullAudioOutputStream {\r\n        return new PullAudioOutputStreamImpl();\r\n    }\r\n\r\n    /**\r\n     * Reads audio data from the internal buffer.\r\n     * @member PullAudioOutputStream.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\r\n     * @returns {Promise<number>} Audio buffer length has been read.\r\n     */\r\n    public abstract read(dataBuffer: ArrayBuffer): Promise<number>;\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio output stream used for custom audio output configurations.\r\n * @private\r\n * @class PullAudioOutputStreamImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class PullAudioOutputStreamImpl extends PullAudioOutputStream implements IAudioDestination {\r\n    private privFormat: AudioOutputFormatImpl;\r\n    private privId: string;\r\n    private privStream: Stream<ArrayBuffer>;\r\n    private privLastChunkView: Int8Array;\r\n\r\n    /**\r\n     * Creates and initializes an instance with the given values.\r\n     * @constructor\r\n     */\r\n    public constructor() {\r\n        super();\r\n        this.privId = createNoDashGuid();\r\n        this.privStream = new Stream<ArrayBuffer>();\r\n    }\r\n\r\n    /**\r\n     * Sets the format information to the stream. For internal use only.\r\n     * @param {AudioStreamFormat} format - the format to be set.\r\n     */\r\n    public set format(format: AudioStreamFormat) {\r\n        if (format === undefined || format === null) {\r\n            this.privFormat = AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        this.privFormat = format as AudioOutputFormatImpl;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): AudioStreamFormat {\r\n        return this.privFormat;\r\n    }\r\n\r\n    /**\r\n     * Checks if the stream is closed\r\n     * @member PullAudioOutputStreamImpl.prototype.isClosed\r\n     * @property\r\n     * @public\r\n     */\r\n    public get isClosed(): boolean {\r\n        return this.privStream.isClosed;\r\n    }\r\n\r\n    /**\r\n     * Gets the id of the stream\r\n     * @member PullAudioOutputStreamImpl.prototype.id\r\n     * @property\r\n     * @public\r\n     */\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    /**\r\n     * Reads audio data from the internal buffer.\r\n     * @member PullAudioOutputStreamImpl.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\r\n     * @returns {Promise<number>} - Audio buffer length has been read.\r\n     */\r\n    public read(dataBuffer: ArrayBuffer): Promise<number> {\r\n        const intView: Int8Array = new Int8Array(dataBuffer);\r\n        let totalBytes: number = 0;\r\n\r\n        if (this.privLastChunkView !== undefined) {\r\n            if (this.privLastChunkView.length > dataBuffer.byteLength) {\r\n                intView.set(this.privLastChunkView.slice(0, dataBuffer.byteLength));\r\n                this.privLastChunkView = this.privLastChunkView.slice(dataBuffer.byteLength);\r\n                return PromiseHelper.fromResult(dataBuffer.byteLength);\r\n            }\r\n            intView.set(this.privLastChunkView);\r\n            totalBytes = this.privLastChunkView.length;\r\n            this.privLastChunkView = undefined;\r\n        }\r\n\r\n        const deffer: Deferred<number> = new Deferred<number>();\r\n        // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\r\n        const readUntilFilled: () => void = (): void => {\r\n            if (totalBytes < dataBuffer.byteLength && !this.privStream.isReadEnded) {\r\n                this.privStream.read()\r\n                    .onSuccessContinueWith((chunk: IStreamChunk<ArrayBuffer>) => {\r\n                        if (chunk !== undefined && !chunk.isEnd) {\r\n                            let tmpBuffer: ArrayBuffer;\r\n                            if (chunk.buffer.byteLength > dataBuffer.byteLength - totalBytes) {\r\n                                tmpBuffer = chunk.buffer.slice(0, dataBuffer.byteLength - totalBytes);\r\n                                this.privLastChunkView = new Int8Array(chunk.buffer.slice(dataBuffer.byteLength - totalBytes));\r\n                            } else {\r\n                                tmpBuffer = chunk.buffer;\r\n                            }\r\n                            intView.set(new Int8Array(tmpBuffer), totalBytes);\r\n                            totalBytes += tmpBuffer.byteLength;\r\n                            readUntilFilled();\r\n                        } else {\r\n                            this.privStream.readEnded();\r\n                            deffer.resolve(totalBytes);\r\n                        }\r\n                    });\r\n            } else {\r\n                deffer.resolve(totalBytes);\r\n            }\r\n        };\r\n        readUntilFilled();\r\n        return deffer.promise();\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PullAudioOutputStreamImpl.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public write(dataBuffer: ArrayBuffer): void {\r\n        Contracts.throwIfNullOrUndefined(this.privStream, \"must set format before writing\");\r\n        this.privStream.writeStreamChunk({\r\n            buffer: dataBuffer,\r\n            isEnd: false,\r\n            timeReceived: Date.now()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioOutputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privStream.close();\r\n    }\r\n}\r\n\r\n/*\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @class PushAudioOutputStream\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport abstract class PushAudioOutputStream extends AudioOutputStream {\r\n    /**\r\n     * Creates and initializes and instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() { super(); }\r\n\r\n    /**\r\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\r\n     * write() and close() methods.\r\n     * @member PushAudioOutputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\r\n     *        derived from PushAudioOutputStreamCallback\r\n     * @returns {PushAudioOutputStream} The push audio output stream being created.\r\n     */\r\n    public static create(callback: PushAudioOutputStreamCallback): PushAudioOutputStream {\r\n        return new PushAudioOutputStreamImpl(callback);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member PushAudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @private\r\n * @class PushAudioOutputStreamImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class PushAudioOutputStreamImpl extends PushAudioOutputStream implements IAudioDestination {\r\n    private readonly privId: string;\r\n    private privCallback: PushAudioOutputStreamCallback;\r\n\r\n    /**\r\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\r\n     * read() and close() methods.\r\n     * @constructor\r\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\r\n     *        derived from PushAudioOutputStreamCallback\r\n     */\r\n    public constructor(callback: PushAudioOutputStreamCallback) {\r\n        super();\r\n        this.privId = createNoDashGuid();\r\n        this.privCallback = callback;\r\n    }\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public set format(format: AudioStreamFormat) {}\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        if (!!this.privCallback.write) {\r\n            this.privCallback.write(buffer);\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        if (!!this.privCallback.close) {\r\n            this.privCallback.close();\r\n        }\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}