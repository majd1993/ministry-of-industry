{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createDefaultGroupActivityMiddleware;\n\nvar _botframeworkWebchatCore = require(\"botframework-webchat-core\");\n\nvar SENT = _botframeworkWebchatCore.Constants.ActivityClientState.SENT;\n\nfunction bin(items, grouping) {\n  var lastBin;\n  var bins = [];\n  var lastItem;\n  items.forEach(function (item) {\n    if (lastItem && grouping(lastItem, item)) {\n      lastBin.push(item);\n    } else {\n      lastBin = [item];\n      bins.push(lastBin);\n    }\n\n    lastItem = item;\n  });\n  return bins;\n}\n\nfunction sending(activity) {\n  return activity.from.role === 'user' && activity.channelData && activity.channelData.state !== SENT;\n}\n\nfunction shouldGroupTimestamp(activityX, activityY, groupTimestamp) {\n  if (groupTimestamp === false) {\n    // Hide timestamp for all activities.\n    return true;\n  } else if (activityX && activityY) {\n    if (sending(activityX) !== sending(activityY)) {\n      return false;\n    }\n\n    groupTimestamp = typeof groupTimestamp === 'number' ? groupTimestamp : Infinity;\n    var timeX = new Date(activityX.timestamp).getTime();\n    var timeY = new Date(activityY.timestamp).getTime();\n    return Math.abs(timeX - timeY) <= groupTimestamp;\n  }\n\n  return false;\n}\n\nfunction createDefaultGroupActivityMiddleware(_ref) {\n  var groupTimestamp = _ref.groupTimestamp;\n  return function () {\n    return function () {\n      return function (_ref2) {\n        var activities = _ref2.activities;\n        return {\n          sender: bin(activities, function (x, y) {\n            return x.from.role === y.from.role;\n          }),\n          status: bin(activities, function (x, y) {\n            return shouldGroupTimestamp(x, y, groupTimestamp);\n          })\n        };\n      };\n    };\n  };\n}","map":{"version":3,"sources":["../../../src/hooks/middleware/createDefaultGroupActivitiesMiddleware.js"],"names":["ActivityClientState","SENT","Constants","bins","items","lastItem","grouping","lastBin","activity","groupTimestamp","activityX","sending","timeX","timeY","activityY","Math","activities","sender","bin","x","y","status","shouldGroupTimestamp"],"mappings":";;;;;;;AAAA,IAAA,wBAAA,GAAA,OAAA,CAAA,2BAAA,CAAA;;IAGyBC,I,GACrBC,wBAAAA,CAAAA,SAAAA,CADFF,mBACEE,CADqBD,I;;AAGzB,SAAA,GAAA,CAAA,KAAA,EAAA,QAAA,EAA8B;AAC5B,MAAA,OAAA;AACA,MAAME,IAAI,GAAV,EAAA;AACA,MAAA,QAAA;AAEAC,EAAAA,KAAK,CAALA,OAAAA,CAAc,UAAA,IAAA,EAAQ;AACpB,QAAIC,QAAQ,IAAIC,QAAQ,CAAA,QAAA,EAAxB,IAAwB,CAAxB,EAA0C;AACxCC,MAAAA,OAAO,CAAPA,IAAAA,CAAAA,IAAAA;AADF,KAAA,MAEO;AACLA,MAAAA,OAAO,GAAG,CAAVA,IAAU,CAAVA;AACAJ,MAAAA,IAAI,CAAJA,IAAAA,CAAAA,OAAAA;AACD;;AAEDE,IAAAA,QAAQ,GAARA,IAAAA;AARFD,GAAAA;AAWA,SAAA,IAAA;AACD;;AAED,SAAA,OAAA,CAAA,QAAA,EAA2B;AACzB,SAAOI,QAAQ,CAARA,IAAAA,CAAAA,IAAAA,KAAAA,MAAAA,IAAiCA,QAAQ,CAAzCA,WAAAA,IAAyDA,QAAQ,CAARA,WAAAA,CAAAA,KAAAA,KAAhE,IAAA;AACD;;AAED,SAAA,oBAAA,CAAA,SAAA,EAAA,SAAA,EAAA,cAAA,EAAoE;AAClE,MAAIC,cAAc,KAAlB,KAAA,EAA8B;AAC5B;AACA,WAAA,IAAA;AAFF,GAAA,MAGO,IAAIC,SAAS,IAAb,SAAA,EAA4B;AACjC,QAAIC,OAAO,CAAPA,SAAO,CAAPA,KAAuBA,OAAO,CAAlC,SAAkC,CAAlC,EAA+C;AAC7C,aAAA,KAAA;AACD;;AAEDF,IAAAA,cAAc,GAAG,OAAA,cAAA,KAAA,QAAA,GAAA,cAAA,GAAjBA,QAAAA;AAEA,QAAMG,KAAK,GAAG,IAAA,IAAA,CAASF,SAAS,CAAlB,SAAA,EAAd,OAAc,EAAd;AACA,QAAMG,KAAK,GAAG,IAAA,IAAA,CAASC,SAAS,CAAlB,SAAA,EAAd,OAAc,EAAd;AAEA,WAAOC,IAAI,CAAJA,GAAAA,CAASH,KAAK,GAAdG,KAAAA,KAAP,cAAA;AACD;;AAED,SAAA,KAAA;AACD;;AAEc,SAAA,oCAAA,CAAA,IAAA,EAAkE;AAAA,MAAlBN,cAAkB,GAAA,IAAA,CAAlBA,cAAkB;AAC/E,SAAO,YAAA;AAAA,WAAM,YAAA;AAAA,aAAM,UAAA,KAAA,EAAA;AAAA,YAAGO,UAAH,GAAA,KAAA,CAAA,UAAA;AAAA,eAAqB;AACtCC,UAAAA,MAAM,EAAEC,GAAG,CAAA,UAAA,EAAa,UAAA,CAAA,EAAA,CAAA,EAAA;AAAA,mBAAUC,CAAC,CAADA,IAAAA,CAAAA,IAAAA,KAAgBC,CAAC,CAADA,IAAAA,CAA1B,IAAA;AADc,WAC3B,CAD2B;AAEtCC,UAAAA,MAAM,EAAEH,GAAG,CAAA,UAAA,EAAa,UAAA,CAAA,EAAA,CAAA,EAAA;AAAA,mBAAUI,oBAAoB,CAAA,CAAA,EAAA,CAAA,EAA9B,cAA8B,CAA9B;AAAb,WAAA;AAF2B,SAArB;AAAN,OAAA;AAAN,KAAA;AAAP,GAAA;AAID","sourcesContent":["import { Constants } from 'botframework-webchat-core';\n\nconst {\n  ActivityClientState: { SENT }\n} = Constants;\n\nfunction bin(items, grouping) {\n  let lastBin;\n  const bins = [];\n  let lastItem;\n\n  items.forEach(item => {\n    if (lastItem && grouping(lastItem, item)) {\n      lastBin.push(item);\n    } else {\n      lastBin = [item];\n      bins.push(lastBin);\n    }\n\n    lastItem = item;\n  });\n\n  return bins;\n}\n\nfunction sending(activity) {\n  return activity.from.role === 'user' && activity.channelData && activity.channelData.state !== SENT;\n}\n\nfunction shouldGroupTimestamp(activityX, activityY, groupTimestamp) {\n  if (groupTimestamp === false) {\n    // Hide timestamp for all activities.\n    return true;\n  } else if (activityX && activityY) {\n    if (sending(activityX) !== sending(activityY)) {\n      return false;\n    }\n\n    groupTimestamp = typeof groupTimestamp === 'number' ? groupTimestamp : Infinity;\n\n    const timeX = new Date(activityX.timestamp).getTime();\n    const timeY = new Date(activityY.timestamp).getTime();\n\n    return Math.abs(timeX - timeY) <= groupTimestamp;\n  }\n\n  return false;\n}\n\nexport default function createDefaultGroupActivityMiddleware({ groupTimestamp }) {\n  return () => () => ({ activities }) => ({\n    sender: bin(activities, (x, y) => x.from.role === y.from.role),\n    status: bin(activities, (x, y) => shouldGroupTimestamp(x, y, groupTimestamp))\n  });\n}\n"],"sourceRoot":"component:///"},"metadata":{},"sourceType":"script"}