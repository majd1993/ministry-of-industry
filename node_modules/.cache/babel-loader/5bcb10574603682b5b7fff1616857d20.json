{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ArgumentNullError, ConnectionState, createNoDashGuid, EventSource, MessageType, PromiseHelper, ServiceEvent } from \"../common/Exports\";\nimport { CancellationErrorCode, CancellationReason, PropertyCollection, PropertyId, ResultReason, SpeechSynthesisEventArgs, SpeechSynthesisResult, SpeechSynthesisWordBoundaryEventArgs } from \"../sdk/Exports\";\nimport { AgentConfig, CancellationErrorCodePropertyName, SynthesisAudioMetadata, SynthesisContext, SynthesisTurn } from \"./Exports\";\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\nexport var SynthesisAdapterBase = /*#__PURE__*/function () {\n  function SynthesisAdapterBase(authentication, connectionFactory, synthesizerConfig, speechSynthesizer, audioDestination) {\n    var _this = this;\n\n    _classCallCheck(this, SynthesisAdapterBase);\n\n    this.speakOverride = undefined;\n    this.receiveMessageOverride = undefined;\n    this.connectImplOverride = undefined;\n    this.configConnectionOverride = undefined;\n    this.fetchConnectionOverride = undefined;\n\n    this.receiveMessage = function () {\n      return _this.fetchConnection().on(function (connection) {\n        return connection.read().onSuccessContinueWithPromise(function (message) {\n          if (_this.receiveMessageOverride !== undefined) {\n            return _this.receiveMessageOverride();\n          }\n\n          if (_this.privIsDisposed) {\n            // We're done.\n            return PromiseHelper.fromResult(undefined);\n          } // indicates we are draining the queue and it came with no message;\n\n\n          if (!message) {\n            if (!_this.privSynthesisTurn.isSynthesizing) {\n              return PromiseHelper.fromResult(true);\n            } else {\n              return _this.receiveMessage();\n            }\n          }\n\n          _this.privServiceHasSentMessage = true;\n          var connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\n\n          if (connectionMessage.requestId.toLowerCase() === _this.privSynthesisTurn.requestId.toLowerCase()) {\n            switch (connectionMessage.path.toLowerCase()) {\n              case \"turn.start\":\n                _this.privSynthesisTurn.onServiceTurnStartResponse();\n\n                break;\n\n              case \"response\":\n                _this.privSynthesisTurn.onServiceResponseMessage(connectionMessage.textBody);\n\n                break;\n\n              case \"audio\":\n                if (_this.privSynthesisTurn.streamId.toLowerCase() === connectionMessage.streamId.toLowerCase() && !!connectionMessage.binaryBody) {\n                  _this.privSynthesisTurn.onAudioChunkReceived(connectionMessage.binaryBody);\n\n                  if (!!_this.privSpeechSynthesizer.synthesizing) {\n                    try {\n                      var audioWithHeader = SynthesisAdapterBase.addHeader(connectionMessage.binaryBody, _this.privSynthesisTurn.audioOutputFormat);\n                      var ev = new SpeechSynthesisEventArgs(new SpeechSynthesisResult(_this.privSynthesisTurn.requestId, ResultReason.SynthesizingAudio, audioWithHeader));\n\n                      _this.privSpeechSynthesizer.synthesizing(_this.privSpeechSynthesizer, ev);\n                    } catch (error) {// Not going to let errors in the event handler\n                      // trip things up.\n                    }\n                  }\n\n                  if (_this.privSessionAudioDestination !== undefined) {\n                    _this.privSessionAudioDestination.write(connectionMessage.binaryBody);\n                  }\n                }\n\n                break;\n\n              case \"audio.metadata\":\n                var metadataList = SynthesisAudioMetadata.fromJSON(connectionMessage.textBody).Metadata;\n\n                var _iterator = _createForOfIteratorHelper(metadataList),\n                    _step;\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    var metadata = _step.value;\n\n                    if (metadata.Type.toLowerCase() === \"WordBoundary\".toLowerCase()) {\n                      _this.privSynthesisTurn.onWordBoundaryEvent(metadata.Data.text.Text);\n\n                      var _ev = new SpeechSynthesisWordBoundaryEventArgs(metadata.Data.Offset, metadata.Data.text.Text, metadata.Data.text.Length, _this.privSynthesisTurn.currentTextOffset);\n\n                      if (!!_this.privSpeechSynthesizer.wordBoundary) {\n                        try {\n                          _this.privSpeechSynthesizer.wordBoundary(_this.privSpeechSynthesizer, _ev);\n                        } catch (error) {// Not going to let errors in the event handler\n                          // trip things up.\n                        }\n                      }\n                    }\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n                break;\n\n              case \"turn.end\":\n                _this.privSynthesisTurn.onServiceTurnEndResponse();\n\n                var result;\n\n                try {\n                  result = new SpeechSynthesisResult(_this.privSynthesisTurn.requestId, ResultReason.SynthesizingAudioCompleted, _this.privSynthesisTurn.allReceivedAudioWithHeader);\n\n                  if (!!_this.privSuccessCallback) {\n                    _this.privSuccessCallback(result);\n                  }\n                } catch (error) {\n                  if (!!_this.privErrorCallback) {\n                    _this.privErrorCallback(error);\n                  }\n                }\n\n                if (_this.privSpeechSynthesizer.synthesisCompleted) {\n                  try {\n                    _this.privSpeechSynthesizer.synthesisCompleted(_this.privSpeechSynthesizer, new SpeechSynthesisEventArgs(result));\n                  } catch (e) {// Not going to let errors in the event handler\n                    // trip things up.\n                  }\n                }\n\n                break;\n\n              default:\n                if (!_this.processTypeSpecificMessages(connectionMessage)) {\n                  // here are some messages that the derived class has not processed, dispatch them to connect class\n                  if (!!_this.privServiceEvents) {\n                    _this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\n                  }\n                }\n\n            }\n          }\n\n          return _this.receiveMessage();\n        });\n      }, function (error) {});\n    };\n\n    this.sendSynthesisContext = function (connection) {\n      var synthesisContextJson = _this.synthesisContext.toJSON();\n\n      if (synthesisContextJson) {\n        return connection.send(new SpeechConnectionMessage(MessageType.Text, \"synthesis.context\", _this.privSynthesisTurn.requestId, \"application/json\", synthesisContextJson));\n      }\n\n      return PromiseHelper.fromResult(true);\n    };\n\n    this.sendSpeechServiceConfig = function (connection, SpeechServiceConfigJson) {\n      if (SpeechServiceConfigJson) {\n        return connection.send(new SpeechConnectionMessage(MessageType.Text, \"speech.config\", _this.privSynthesisTurn.requestId, \"application/json\", SpeechServiceConfigJson));\n      }\n\n      return PromiseHelper.fromResult(true);\n    };\n\n    this.sendSsmlMessage = function (connection, ssml, requestId) {\n      return connection.send(new SpeechConnectionMessage(MessageType.Text, \"ssml\", requestId, \"application/ssml+xml\", ssml));\n    };\n\n    this.fetchConnection = function () {\n      if (_this.fetchConnectionOverride !== undefined) {\n        return _this.fetchConnectionOverride();\n      }\n\n      return _this.configureConnection();\n    };\n\n    if (!authentication) {\n      throw new ArgumentNullError(\"authentication\");\n    }\n\n    if (!connectionFactory) {\n      throw new ArgumentNullError(\"connectionFactory\");\n    }\n\n    if (!synthesizerConfig) {\n      throw new ArgumentNullError(\"synthesizerConfig\");\n    }\n\n    this.privAuthentication = authentication;\n    this.privConnectionFactory = connectionFactory;\n    this.privSynthesizerConfig = synthesizerConfig;\n    this.privIsDisposed = false;\n    this.privSpeechSynthesizer = speechSynthesizer;\n    this.privSessionAudioDestination = audioDestination;\n    this.privSynthesisTurn = new SynthesisTurn();\n    this.privConnectionEvents = new EventSource();\n    this.privServiceEvents = new EventSource();\n    this.privSynthesisContext = new SynthesisContext(this.privSpeechSynthesizer);\n    this.privAgentConfig = new AgentConfig();\n    this.connectionEvents.attach(function (connectionEvent) {\n      if (connectionEvent.name === \"ConnectionClosedEvent\") {\n        var connectionClosedEvent = connectionEvent;\n\n        _this.cancelSynthesisLocal(CancellationReason.Error, connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure, connectionClosedEvent.reason + \" websocket error code: \" + connectionClosedEvent.statusCode);\n      }\n    });\n  }\n\n  _createClass(SynthesisAdapterBase, [{\n    key: \"synthesisContext\",\n    get: function get() {\n      return this.privSynthesisContext;\n    }\n  }, {\n    key: \"agentConfig\",\n    get: function get() {\n      return this.privAgentConfig;\n    }\n  }, {\n    key: \"connectionEvents\",\n    get: function get() {\n      return this.privConnectionEvents;\n    }\n  }, {\n    key: \"serviceEvents\",\n    get: function get() {\n      return this.privServiceEvents;\n    }\n  }, {\n    key: \"activityTemplate\",\n    get: function get() {\n      return this.privActivityTemplate;\n    },\n    set: function set(messagePayload) {\n      this.privActivityTemplate = messagePayload;\n    }\n  }, {\n    key: \"audioOutputFormat\",\n    set: function set(format) {\n      this.privAudioOutputFormat = format;\n      this.privSynthesisTurn.audioOutputFormat = format;\n\n      if (this.privSessionAudioDestination !== undefined) {\n        this.privSessionAudioDestination.format = format;\n      }\n\n      if (this.synthesisContext !== undefined) {\n        this.synthesisContext.audioOutputFormat = format;\n      }\n    }\n  }, {\n    key: \"isDisposed\",\n    value: function isDisposed() {\n      return this.privIsDisposed;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose(reason) {\n      this.privIsDisposed = true;\n\n      if (this.privSessionAudioDestination !== undefined) {\n        this.privSessionAudioDestination.close();\n      }\n\n      if (this.privConnectionConfigurationPromise) {\n        this.privConnectionConfigurationPromise.onSuccessContinueWith(function (connection) {\n          connection.dispose(reason);\n        });\n      }\n    }\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      this.connectImpl().result();\n    }\n  }, {\n    key: \"connectAsync\",\n    value: function connectAsync(cb, err) {\n      this.connectImpl().continueWith(function (promiseResult) {\n        try {\n          if (promiseResult.isError) {\n            if (!!err) {\n              err(promiseResult.error);\n            }\n          } else if (promiseResult.isCompleted) {\n            if (!!cb) {\n              cb();\n            }\n          }\n        } catch (e) {\n          if (!!err) {\n            err(e);\n          }\n        }\n      });\n    }\n  }, {\n    key: \"sendNetworkMessage\",\n    value: function sendNetworkMessage(path, payload, success, err) {\n      var _this2 = this;\n\n      var type = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\n      var contentType = typeof payload === \"string\" ? \"application/json\" : \"\";\n      this.fetchConnection().on(function (connection) {\n        connection.send(new SpeechConnectionMessage(type, path, _this2.privSynthesisTurn.requestId, contentType, payload)).on(function () {\n          if (!!success) {\n            success();\n          }\n        }, function (error) {\n          if (!!err) {\n            err(error);\n          }\n        });\n      }, function (error) {\n        if (!!err) {\n          err(error);\n        }\n      });\n    }\n  }, {\n    key: \"Speak\",\n    value: function Speak(text, isSSML, requestId, successCallback, errorCallBack, audioDestination) {\n      var _this3 = this;\n\n      var ssml;\n\n      if (isSSML) {\n        ssml = text;\n      } else {\n        ssml = this.privSpeechSynthesizer.buildSsml(text);\n      }\n\n      if (this.speakOverride !== undefined) {\n        return this.speakOverride(ssml, requestId, successCallback, errorCallBack);\n      }\n\n      this.privSuccessCallback = successCallback;\n      this.privErrorCallback = errorCallBack;\n      this.privSynthesisTurn.startNewSynthesis(requestId, text, isSSML, audioDestination);\n      return this.fetchConnection().continueWithPromise(function (connection) {\n        if (connection.isError) {\n          _this3.cancelSynthesisLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, connection.error);\n\n          return PromiseHelper.fromError(connection.error);\n        }\n\n        return _this3.sendSynthesisContext(connection.result).continueWithPromise(function (result) {\n          if (result.isError) {\n            _this3.cancelSynthesisLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, result.error);\n\n            return PromiseHelper.fromError(result.error);\n          }\n\n          return _this3.sendSsmlMessage(connection.result, ssml, requestId).continueWithPromise(function (result) {\n            if (result.isError) {\n              _this3.cancelSynthesisLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, result.error);\n\n              return PromiseHelper.fromError(result.error);\n            }\n\n            var synthesisStartEventArgs = new SpeechSynthesisEventArgs(new SpeechSynthesisResult(requestId, ResultReason.SynthesizingAudioStarted));\n\n            if (!!_this3.privSpeechSynthesizer.synthesisStarted) {\n              _this3.privSpeechSynthesizer.synthesisStarted(_this3.privSpeechSynthesizer, synthesisStartEventArgs);\n            }\n\n            var messageRetrievalPromise = _this3.receiveMessage();\n\n            return PromiseHelper.fromResult(true);\n          });\n        });\n      });\n    } // Cancels synthesis.\n\n  }, {\n    key: \"cancelSynthesis\",\n    value: function cancelSynthesis(requestId, cancellationReason, errorCode, error) {\n      var properties = new PropertyCollection();\n      properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\n      var result = new SpeechSynthesisResult(requestId, ResultReason.Canceled, undefined, error, properties);\n\n      if (!!this.privSpeechSynthesizer.SynthesisCanceled) {\n        var cancelEvent = new SpeechSynthesisEventArgs(result);\n\n        try {\n          this.privSpeechSynthesizer.SynthesisCanceled(this.privSpeechSynthesizer, cancelEvent);\n          /* tslint:disable:no-empty */\n        } catch (_a) {}\n      }\n\n      if (!!this.privSuccessCallback) {\n        try {\n          this.privSuccessCallback(result);\n          /* tslint:disable:no-empty */\n        } catch (_b) {}\n      }\n    } // Cancels synthesis.\n\n  }, {\n    key: \"cancelSynthesisLocal\",\n    value: function cancelSynthesisLocal(cancellationReason, errorCode, error) {\n      if (!!this.privSynthesisTurn.isSynthesizing) {\n        this.privSynthesisTurn.onStopSynthesizing();\n        this.cancelSynthesis(this.privSynthesisTurn.requestId, cancellationReason, errorCode, error);\n      }\n    }\n  }, {\n    key: \"processTypeSpecificMessages\",\n    value: function processTypeSpecificMessages(connectionMessage, successCallback, errorCallBack) {\n      return true;\n    } // Establishes a websocket connection to the end point.\n\n  }, {\n    key: \"connectImpl\",\n    value: function connectImpl() {\n      var _this4 = this;\n\n      var isUnAuthorized = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (this.connectImplOverride !== undefined) {\n        return this.connectImplOverride(isUnAuthorized);\n      }\n\n      if (this.privConnectionPromise) {\n        if (this.privConnectionPromise.result().isCompleted && (this.privConnectionPromise.result().isError || this.privConnectionPromise.result().result.state() === ConnectionState.Disconnected) && this.privServiceHasSentMessage === true) {\n          this.privConnectionId = null;\n          this.privConnectionPromise = null;\n          this.privServiceHasSentMessage = false;\n          return this.connectImpl();\n        } else {\n          return this.privConnectionPromise;\n        }\n      }\n\n      this.privAuthFetchEventId = createNoDashGuid();\n      this.privConnectionId = createNoDashGuid();\n      this.privSynthesisTurn.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\n      var authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\n      this.privConnectionPromise = authPromise.continueWithPromise(function (result) {\n        if (result.isError) {\n          _this4.privSynthesisTurn.onAuthCompleted(true, result.error);\n\n          throw new Error(result.error);\n        } else {\n          _this4.privSynthesisTurn.onAuthCompleted(false);\n        }\n\n        var connection = _this4.privConnectionFactory.create(_this4.privSynthesizerConfig, result.result, _this4.privConnectionId); // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\n        // it'll stop sending events.\n\n\n        connection.events.attach(function (event) {\n          _this4.connectionEvents.onEvent(event);\n        });\n        return connection.open().onSuccessContinueWithPromise(function (response) {\n          if (response.statusCode === 200) {\n            _this4.privSynthesisTurn.onPreConnectionStart(_this4.privAuthFetchEventId, _this4.privConnectionId);\n\n            _this4.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode);\n\n            return PromiseHelper.fromResult(connection);\n          } else if (response.statusCode === 403 && !isUnAuthorized) {\n            return _this4.connectImpl(true);\n          } else {\n            _this4.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode, response.reason);\n\n            return PromiseHelper.fromError(\"Unable to contact server. StatusCode: \".concat(response.statusCode, \", \").concat(_this4.privSynthesizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint), \" Reason: \").concat(response.reason));\n          }\n        });\n      });\n      return this.privConnectionPromise;\n    } // Takes an established websocket connection to the endpoint and sends speech configuration information.\n\n  }, {\n    key: \"configureConnection\",\n    value: function configureConnection() {\n      var _this5 = this;\n\n      if (this.configConnectionOverride !== undefined) {\n        return this.configConnectionOverride();\n      }\n\n      if (this.privConnectionConfigurationPromise) {\n        if (this.privConnectionConfigurationPromise.result().isCompleted && (this.privConnectionConfigurationPromise.result().isError || this.privConnectionConfigurationPromise.result().result.state() === ConnectionState.Disconnected)) {\n          this.privConnectionConfigurationPromise = null;\n          return this.configureConnection();\n        } else {\n          return this.privConnectionConfigurationPromise;\n        }\n      }\n\n      this.privConnectionConfigurationPromise = this.connectImpl().onSuccessContinueWithPromise(function (connection) {\n        return _this5.sendSpeechServiceConfig(connection, _this5.privSynthesizerConfig.SpeechServiceConfig.serialize()).onSuccessContinueWith(function (_) {\n          return connection;\n        });\n      });\n      return this.privConnectionConfigurationPromise;\n    }\n  }], [{\n    key: \"addHeader\",\n    value: function addHeader(audio, format) {\n      if (!format.hasHeader) {\n        return audio;\n      }\n\n      format.updateHeader(audio.byteLength);\n      var tmp = new Uint8Array(audio.byteLength + format.header.byteLength);\n      tmp.set(new Uint8Array(format.header), 0);\n      tmp.set(new Uint8Array(audio), format.header.byteLength);\n      return tmp.buffer;\n    }\n  }]);\n\n  return SynthesisAdapterBase;\n}();\nSynthesisAdapterBase.telemetryDataEnabled = true;","map":{"version":3,"sources":["src/common.speech/SynthesisAdapterBase.ts"],"names":[],"mappings":";;;AAAA;AACA;AAEA,SACI,iBADJ,EAMI,eANJ,EAOI,gBAPJ,EAQI,WARJ,EAYI,WAZJ,EAcI,aAdJ,EAgBI,YAhBJ,QAiBO,mBAjBP;AAmBA,SACI,qBADJ,EAEI,kBAFJ,EAGI,kBAHJ,EAII,UAJJ,EAKI,YALJ,EAMI,wBANJ,EAOI,qBAPJ,EAQI,oCARJ,QAUO,gBAVP;AAYA,SACI,WADJ,EAEI,iCAFJ,EAII,sBAJJ,EAKI,gBALJ,EAMI,aANJ,QAQO,WARP;AAUA,SAAS,uBAAT,QAAwC,oCAAxC;AAEA,WAAa,oBAAb;AAyEI,gCACI,cADJ,EAEI,iBAFJ,EAGI,iBAHJ,EAII,iBAJJ,EAKI,gBALJ,EAKuC;AAAA;;AAAA;;AAtD7B,SAAA,aAAA,GAA2H,SAA3H;AAUA,SAAA,sBAAA,GAAoC,SAApC;AAEA,SAAA,mBAAA,GAAwD,SAAxD;AAEA,SAAA,wBAAA,GAAsC,SAAtC;AAEA,SAAA,uBAAA,GAAqC,SAArC;;AAsQA,SAAA,cAAA,GAAiB,YAA2B;AAClD,aAAO,KAAI,CAAC,eAAL,GAAuB,EAAvB,CAA0B,UAAC,UAAD,EAAkD;AAC/E,eAAO,UAAU,CAAC,IAAX,GACF,4BADE,CAC2B,UAAC,OAAD,EAA+B;AAEzD,cAAI,KAAI,CAAC,sBAAL,KAAgC,SAApC,EAA+C;AAC3C,mBAAO,KAAI,CAAC,sBAAL,EAAP;AACH;;AACD,cAAI,KAAI,CAAC,cAAT,EAAyB;AACrB;AACA,mBAAO,aAAa,CAAC,UAAd,CAAyB,SAAzB,CAAP;AACH,WARwD,CAUzD;;;AACA,cAAI,CAAC,OAAL,EAAc;AACV,gBAAI,CAAC,KAAI,CAAC,iBAAL,CAAuB,cAA5B,EAA4C;AACxC,qBAAO,aAAa,CAAC,UAAd,CAAyB,IAAzB,CAAP;AACH,aAFD,MAEO;AACH,qBAAO,KAAI,CAAC,cAAL,EAAP;AACH;AACJ;;AAED,UAAA,KAAI,CAAC,yBAAL,GAAiC,IAAjC;AAEA,cAAM,iBAAiB,GAAG,uBAAuB,CAAC,qBAAxB,CAA8C,OAA9C,CAA1B;;AAEA,cAAI,iBAAiB,CAAC,SAAlB,CAA4B,WAA5B,OAA8C,KAAI,CAAC,iBAAL,CAAuB,SAAvB,CAAiC,WAAjC,EAAlD,EAAkG;AAC9F,oBAAQ,iBAAiB,CAAC,IAAlB,CAAuB,WAAvB,EAAR;AACI,mBAAK,YAAL;AACI,gBAAA,KAAI,CAAC,iBAAL,CAAuB,0BAAvB;;AACA;;AACJ,mBAAK,UAAL;AACI,gBAAA,KAAI,CAAC,iBAAL,CAAuB,wBAAvB,CAAgD,iBAAiB,CAAC,QAAlE;;AACA;;AACJ,mBAAK,OAAL;AACI,oBAAI,KAAI,CAAC,iBAAL,CAAuB,QAAvB,CAAgC,WAAhC,OAAkD,iBAAiB,CAAC,QAAlB,CAA2B,WAA3B,EAAlD,IACG,CAAC,CAAC,iBAAiB,CAAC,UAD3B,EACuC;AACnC,kBAAA,KAAI,CAAC,iBAAL,CAAuB,oBAAvB,CAA4C,iBAAiB,CAAC,UAA9D;;AACA,sBAAI,CAAC,CAAC,KAAI,CAAC,qBAAL,CAA2B,YAAjC,EAA+C;AAC3C,wBAAI;AACA,0BAAM,eAAe,GAAG,oBAAoB,CAAC,SAArB,CAA+B,iBAAiB,CAAC,UAAjD,EAA6D,KAAI,CAAC,iBAAL,CAAuB,iBAApF,CAAxB;AACA,0BAAM,EAAE,GAA6B,IAAI,wBAAJ,CACjC,IAAI,qBAAJ,CACI,KAAI,CAAC,iBAAL,CAAuB,SAD3B,EAEI,YAAY,CAAC,iBAFjB,EAGI,eAHJ,CADiC,CAArC;;AAKA,sBAAA,KAAI,CAAC,qBAAL,CAA2B,YAA3B,CAAwC,KAAI,CAAC,qBAA7C,EAAoE,EAApE;AACH,qBARD,CAQE,OAAO,KAAP,EAAc,CACZ;AACA;AACH;AACJ;;AACD,sBAAI,KAAI,CAAC,2BAAL,KAAqC,SAAzC,EAAoD;AAChD,oBAAA,KAAI,CAAC,2BAAL,CAAiC,KAAjC,CAAuC,iBAAiB,CAAC,UAAzD;AACH;AACJ;;AACD;;AACJ,mBAAK,gBAAL;AACI,oBAAM,YAAY,GAAG,sBAAsB,CAAC,QAAvB,CAAgC,iBAAiB,CAAC,QAAlD,EAA4D,QAAjF;;AADJ,2DAE2B,YAF3B;AAAA;;AAAA;AAEI,sEAAqC;AAAA,wBAA1B,QAA0B;;AACjC,wBAAI,QAAQ,CAAC,IAAT,CAAc,WAAd,OAAgC,eAAe,WAAf,EAApC,EAAkE;AAE9D,sBAAA,KAAI,CAAC,iBAAL,CAAuB,mBAAvB,CAA2C,QAAQ,CAAC,IAAT,CAAc,IAAd,CAAmB,IAA9D;;AAEA,0BAAM,GAAE,GAAyC,IAAI,oCAAJ,CAC7C,QAAQ,CAAC,IAAT,CAAc,MAD+B,EAE7C,QAAQ,CAAC,IAAT,CAAc,IAAd,CAAmB,IAF0B,EAG7C,QAAQ,CAAC,IAAT,CAAc,IAAd,CAAmB,MAH0B,EAI7C,KAAI,CAAC,iBAAL,CAAuB,iBAJsB,CAAjD;;AAMA,0BAAI,CAAC,CAAC,KAAI,CAAC,qBAAL,CAA2B,YAAjC,EAA+C;AAC3C,4BAAI;AACA,0BAAA,KAAI,CAAC,qBAAL,CAA2B,YAA3B,CAAwC,KAAI,CAAC,qBAA7C,EAAoE,GAApE;AACH,yBAFD,CAEE,OAAO,KAAP,EAAc,CACZ;AACA;AACH;AACJ;AACJ;AACJ;AAtBL;AAAA;AAAA;AAAA;AAAA;;AAuBI;;AACJ,mBAAK,UAAL;AACI,gBAAA,KAAI,CAAC,iBAAL,CAAuB,wBAAvB;;AACA,oBAAI,MAAJ;;AACA,oBAAI;AACA,kBAAA,MAAM,GAAG,IAAI,qBAAJ,CACL,KAAI,CAAC,iBAAL,CAAuB,SADlB,EAEL,YAAY,CAAC,0BAFR,EAGL,KAAI,CAAC,iBAAL,CAAuB,0BAHlB,CAAT;;AAKA,sBAAI,CAAC,CAAC,KAAI,CAAC,mBAAX,EAAgC;AAC5B,oBAAA,KAAI,CAAC,mBAAL,CAAyB,MAAzB;AACH;AACJ,iBATD,CASE,OAAO,KAAP,EAAc;AACZ,sBAAI,CAAC,CAAC,KAAI,CAAC,iBAAX,EAA8B;AAC1B,oBAAA,KAAI,CAAC,iBAAL,CAAuB,KAAvB;AACH;AACJ;;AACD,oBAAI,KAAI,CAAC,qBAAL,CAA2B,kBAA/B,EAAmD;AAC/C,sBAAI;AACA,oBAAA,KAAI,CAAC,qBAAL,CAA2B,kBAA3B,CACI,KAAI,CAAC,qBADT,EAEI,IAAI,wBAAJ,CAA6B,MAA7B,CAFJ;AAIH,mBALD,CAKE,OAAO,CAAP,EAAU,CACR;AACA;AACH;AACJ;;AACD;;AAEJ;AAEI,oBAAI,CAAC,KAAI,CAAC,2BAAL,CAAiC,iBAAjC,CAAL,EAA0D;AACtD;AACA,sBAAI,CAAC,CAAC,KAAI,CAAC,iBAAX,EAA8B;AAC1B,oBAAA,KAAI,CAAC,aAAL,CAAmB,OAAnB,CAA2B,IAAI,YAAJ,CAAiB,iBAAiB,CAAC,IAAlB,CAAuB,WAAvB,EAAjB,EAAuD,iBAAiB,CAAC,QAAzE,CAA3B;AACH;AACJ;;AA3FT;AA8FH;;AAED,iBAAO,KAAI,CAAC,cAAL,EAAP;AACH,SA1HE,CAAP;AA2HH,OA5HM,EA4HJ,UAAC,KAAD,EAAkB,CACpB,CA7HM,CAAP;AA8HH,KA/HS;;AAiIA,SAAA,oBAAA,GAAuB,UAAC,UAAD,EAA8C;AAC3E,UAAM,oBAAoB,GAAG,KAAI,CAAC,gBAAL,CAAsB,MAAtB,EAA7B;;AAEA,UAAI,oBAAJ,EAA0B;AACtB,eAAO,UAAU,CAAC,IAAX,CAAgB,IAAI,uBAAJ,CACnB,WAAW,CAAC,IADO,EAEnB,mBAFmB,EAGnB,KAAI,CAAC,iBAAL,CAAuB,SAHJ,EAInB,kBAJmB,EAKnB,oBALmB,CAAhB,CAAP;AAMH;;AACD,aAAO,aAAa,CAAC,UAAd,CAAyB,IAAzB,CAAP;AACH,KAZS;;AA6EA,SAAA,uBAAA,GAA0B,UAAC,UAAD,EAA0B,uBAA1B,EAA+E;AAE/G,UAAI,uBAAJ,EAA6B;AACzB,eAAO,UAAU,CAAC,IAAX,CAAgB,IAAI,uBAAJ,CACnB,WAAW,CAAC,IADO,EAEnB,eAFmB,EAGnB,KAAI,CAAC,iBAAL,CAAuB,SAHJ,EAInB,kBAJmB,EAKnB,uBALmB,CAAhB,CAAP;AAMH;;AAED,aAAO,aAAa,CAAC,UAAd,CAAyB,IAAzB,CAAP;AACH,KAZS;;AAcA,SAAA,eAAA,GAAkB,UAAC,UAAD,EAA0B,IAA1B,EAAwC,SAAxC,EAA+E;AACvG,aAAO,UAAU,CAAC,IAAX,CAAgB,IAAI,uBAAJ,CACnB,WAAW,CAAC,IADO,EAEnB,MAFmB,EAGnB,SAHmB,EAInB,sBAJmB,EAKnB,IALmB,CAAhB,CAAP;AAMH,KAPS;;AASF,SAAA,eAAA,GAAkB,YAA2B;AACjD,UAAI,KAAI,CAAC,uBAAL,KAAiC,SAArC,EAAgD;AAC5C,eAAO,KAAI,CAAC,uBAAL,EAAP;AACH;;AAED,aAAO,KAAI,CAAC,mBAAL,EAAP;AACH,KANO;;AAncJ,QAAI,CAAC,cAAL,EAAqB;AACjB,YAAM,IAAI,iBAAJ,CAAsB,gBAAtB,CAAN;AACH;;AAED,QAAI,CAAC,iBAAL,EAAwB;AACpB,YAAM,IAAI,iBAAJ,CAAsB,mBAAtB,CAAN;AACH;;AAED,QAAI,CAAC,iBAAL,EAAwB;AACpB,YAAM,IAAI,iBAAJ,CAAsB,mBAAtB,CAAN;AACH;;AAED,SAAK,kBAAL,GAA0B,cAA1B;AACA,SAAK,qBAAL,GAA6B,iBAA7B;AACA,SAAK,qBAAL,GAA6B,iBAA7B;AACA,SAAK,cAAL,GAAsB,KAAtB;AACA,SAAK,qBAAL,GAA6B,iBAA7B;AACA,SAAK,2BAAL,GAAmC,gBAAnC;AACA,SAAK,iBAAL,GAAyB,IAAI,aAAJ,EAAzB;AACA,SAAK,oBAAL,GAA4B,IAAI,WAAJ,EAA5B;AACA,SAAK,iBAAL,GAAyB,IAAI,WAAJ,EAAzB;AACA,SAAK,oBAAL,GAA4B,IAAI,gBAAJ,CAAqB,KAAK,qBAA1B,CAA5B;AACA,SAAK,eAAL,GAAuB,IAAI,WAAJ,EAAvB;AAEA,SAAK,gBAAL,CAAsB,MAAtB,CAA6B,UAAC,eAAD,EAA2C;AACpE,UAAI,eAAe,CAAC,IAAhB,KAAyB,uBAA7B,EAAsD;AAClD,YAAM,qBAAqB,GAAG,eAA9B;;AACA,QAAA,KAAI,CAAC,oBAAL,CAA0B,kBAAkB,CAAC,KAA7C,EACI,qBAAqB,CAAC,UAAtB,KAAqC,IAArC,GAA4C,qBAAqB,CAAC,oBAAlE,GAAyF,qBAAqB,CAAC,iBADnH,EAEI,qBAAqB,CAAC,MAAtB,GAA+B,yBAA/B,GAA2D,qBAAqB,CAAC,UAFrF;AAGH;AACJ,KAPD;AAQH;;AAhHL;AAAA;AAAA,SAQI,eAA2B;AACvB,aAAO,KAAK,oBAAZ;AACH;AAVL;AAAA;AAAA,SAYI,eAAsB;AAClB,aAAO,KAAK,eAAZ;AACH;AAdL;AAAA;AAAA,SAgBI,eAA2B;AACvB,aAAO,KAAK,oBAAZ;AACH;AAlBL;AAAA;AAAA,SAoBI,eAAwB;AACpB,aAAO,KAAK,iBAAZ;AACH;AAtBL;AAAA;AAAA,SAgCI,eAA2B;AAAa,aAAO,KAAK,oBAAZ;AAAmC,KAhC/E;AAAA,SA+BI,aAA4B,cAA5B,EAAkD;AAAI,WAAK,oBAAL,GAA4B,cAA5B;AAA6C;AA/BvG;AAAA;AAAA,SA0CI,aAA6B,MAA7B,EAA0D;AACtD,WAAK,qBAAL,GAA6B,MAA7B;AACA,WAAK,iBAAL,CAAuB,iBAAvB,GAA2C,MAA3C;;AACA,UAAI,KAAK,2BAAL,KAAqC,SAAzC,EAAoD;AAChD,aAAK,2BAAL,CAAiC,MAAjC,GAA0C,MAA1C;AACH;;AACD,UAAI,KAAK,gBAAL,KAA0B,SAA9B,EAAyC;AACrC,aAAK,gBAAL,CAAsB,iBAAtB,GAA0C,MAA1C;AACH;AACJ;AAnDL;AAAA;AAAA,WA6HW,sBAAU;AACb,aAAO,KAAK,cAAZ;AACH;AA/HL;AAAA;AAAA,WAiIW,iBAAQ,MAAR,EAAuB;AAC1B,WAAK,cAAL,GAAsB,IAAtB;;AACA,UAAI,KAAK,2BAAL,KAAqC,SAAzC,EAAoD;AAChD,aAAK,2BAAL,CAAiC,KAAjC;AACH;;AACD,UAAI,KAAK,kCAAT,EAA6C;AACzC,aAAK,kCAAL,CAAwC,qBAAxC,CAA8D,UAAC,UAAD,EAA4B;AACtF,UAAA,UAAU,CAAC,OAAX,CAAmB,MAAnB;AACH,SAFD;AAGH;AACJ;AA3IL;AAAA;AAAA,WA6IW,mBAAO;AACV,WAAK,WAAL,GAAmB,MAAnB;AACH;AA/IL;AAAA;AAAA,WAiJW,sBAAa,EAAb,EAA4B,GAA5B,EAA0C;AAC7C,WAAK,WAAL,GAAmB,YAAnB,CAAgC,UAAC,aAAD,EAA8C;AAC1E,YAAI;AACA,cAAI,aAAa,CAAC,OAAlB,EAA2B;AACvB,gBAAI,CAAC,CAAC,GAAN,EAAW;AACP,cAAA,GAAG,CAAC,aAAa,CAAC,KAAf,CAAH;AACH;AACJ,WAJD,MAIO,IAAI,aAAa,CAAC,WAAlB,EAA+B;AAClC,gBAAI,CAAC,CAAC,EAAN,EAAU;AACN,cAAA,EAAE;AACL;AACJ;AACJ,SAVD,CAUE,OAAO,CAAP,EAAU;AACR,cAAI,CAAC,CAAC,GAAN,EAAW;AACP,YAAA,GAAG,CAAC,CAAD,CAAH;AACH;AACJ;AACJ,OAhBD;AAiBH;AAnKL;AAAA;AAAA,WAqKW,4BAAmB,IAAnB,EAAiC,OAAjC,EAAgE,OAAhE,EAAsF,GAAtF,EAAmH;AAAA;;AACtH,UAAM,IAAI,GAAgB,OAAO,OAAP,KAAmB,QAAnB,GAA8B,WAAW,CAAC,IAA1C,GAAiD,WAAW,CAAC,MAAvF;AACA,UAAM,WAAW,GAAW,OAAO,OAAP,KAAmB,QAAnB,GAA8B,kBAA9B,GAAmD,EAA/E;AAEA,WAAK,eAAL,GAAuB,EAAvB,CAA0B,UAAC,UAAD,EAA4B;AAClD,QAAA,UAAU,CAAC,IAAX,CAAgB,IAAI,uBAAJ,CAA4B,IAA5B,EAAkC,IAAlC,EAAwC,MAAI,CAAC,iBAAL,CAAuB,SAA/D,EAA0E,WAA1E,EAAuF,OAAvF,CAAhB,EAAiH,EAAjH,CAAoH,YAAK;AACrH,cAAI,CAAC,CAAC,OAAN,EAAe;AACX,YAAA,OAAO;AACV;AACJ,SAJD,EAIG,UAAC,KAAD,EAAkB;AACjB,cAAI,CAAC,CAAC,GAAN,EAAW;AACP,YAAA,GAAG,CAAC,KAAD,CAAH;AACH;AACJ,SARD;AASH,OAVD,EAUG,UAAC,KAAD,EAAkB;AACjB,YAAI,CAAC,CAAC,GAAN,EAAW;AACP,UAAA,GAAG,CAAC,KAAD,CAAH;AACH;AACJ,OAdD;AAeH;AAxLL;AAAA;AAAA,WA0LW,eACH,IADG,EAEH,MAFG,EAGH,SAHG,EAIH,eAJG,EAKH,aALG,EAMH,gBANG,EAMgC;AAAA;;AAGnC,UAAI,IAAJ;;AAEA,UAAI,MAAJ,EAAY;AACR,QAAA,IAAI,GAAG,IAAP;AACH,OAFD,MAEO;AACH,QAAA,IAAI,GAAG,KAAK,qBAAL,CAA2B,SAA3B,CAAqC,IAArC,CAAP;AACH;;AAED,UAAI,KAAK,aAAL,KAAuB,SAA3B,EAAsC;AAClC,eAAO,KAAK,aAAL,CAAmB,IAAnB,EAAyB,SAAzB,EAAoC,eAApC,EAAqD,aAArD,CAAP;AACH;;AAED,WAAK,mBAAL,GAA2B,eAA3B;AACA,WAAK,iBAAL,GAAyB,aAAzB;AAEA,WAAK,iBAAL,CAAuB,iBAAvB,CAAyC,SAAzC,EAAoD,IAApD,EAA0D,MAA1D,EAAkE,gBAAlE;AAEA,aAAO,KAAK,eAAL,GAAuB,mBAAvB,CAAoD,UAAC,UAAD,EAA2C;AAClG,YAAI,UAAU,CAAC,OAAf,EAAwB;AACpB,UAAA,MAAI,CAAC,oBAAL,CAA0B,kBAAkB,CAAC,KAA7C,EAAoD,qBAAqB,CAAC,iBAA1E,EAA6F,UAAU,CAAC,KAAxG;;AACA,iBAAO,aAAa,CAAC,SAAd,CAAwB,UAAU,CAAC,KAAnC,CAAP;AACH;;AACD,eAAO,MAAI,CAAC,oBAAL,CAA0B,UAAU,CAAC,MAArC,EAA6C,mBAA7C,CAA0E,UAAC,MAAD,EAAqD;AAClI,cAAI,MAAM,CAAC,OAAX,EAAoB;AAChB,YAAA,MAAI,CAAC,oBAAL,CAA0B,kBAAkB,CAAC,KAA7C,EAAoD,qBAAqB,CAAC,iBAA1E,EAA6F,MAAM,CAAC,KAApG;;AACA,mBAAO,aAAa,CAAC,SAAd,CAAwB,MAAM,CAAC,KAA/B,CAAP;AACH;;AACD,iBAAO,MAAI,CAAC,eAAL,CAAqB,UAAU,CAAC,MAAhC,EAAwC,IAAxC,EAA8C,SAA9C,EAAyD,mBAAzD,CAAsF,UAAC,MAAD,EAAqD;AAC9I,gBAAI,MAAM,CAAC,OAAX,EAAoB;AAChB,cAAA,MAAI,CAAC,oBAAL,CAA0B,kBAAkB,CAAC,KAA7C,EAAoD,qBAAqB,CAAC,iBAA1E,EAA6F,MAAM,CAAC,KAApG;;AACA,qBAAO,aAAa,CAAC,SAAd,CAAwB,MAAM,CAAC,KAA/B,CAAP;AACH;;AAED,gBAAM,uBAAuB,GAA6B,IAAI,wBAAJ,CACtD,IAAI,qBAAJ,CACI,SADJ,EAEI,YAAY,CAAC,wBAFjB,CADsD,CAA1D;;AAOA,gBAAI,CAAC,CAAC,MAAI,CAAC,qBAAL,CAA2B,gBAAjC,EAAmD;AAC/C,cAAA,MAAI,CAAC,qBAAL,CAA2B,gBAA3B,CAA4C,MAAI,CAAC,qBAAjD,EAAwE,uBAAxE;AACH;;AAED,gBAAM,uBAAuB,GAAG,MAAI,CAAC,cAAL,EAAhC;;AACA,mBAAO,aAAa,CAAC,UAAd,CAAyB,IAAzB,CAAP;AACH,WAnBM,CAAP;AAoBH,SAzBM,CAAP;AA0BH,OA/BM,CAAP;AAgCH,KApPL,CAsPI;;AAtPJ;AAAA;AAAA,WAuPc,yBACN,SADM,EAEN,kBAFM,EAGN,SAHM,EAIN,KAJM,EAIO;AACb,UAAM,UAAU,GAAuB,IAAI,kBAAJ,EAAvC;AACA,MAAA,UAAU,CAAC,WAAX,CAAuB,iCAAvB,EAA0D,qBAAqB,CAAC,SAAD,CAA/E;AACA,UAAM,MAAM,GAA0B,IAAI,qBAAJ,CAClC,SADkC,EAElC,YAAY,CAAC,QAFqB,EAGlC,SAHkC,EAIlC,KAJkC,EAKlC,UALkC,CAAtC;;AAQA,UAAI,CAAC,CAAC,KAAK,qBAAL,CAA2B,iBAAjC,EAAoD;AAChD,YAAM,WAAW,GAA6B,IAAI,wBAAJ,CAA6B,MAA7B,CAA9C;;AACA,YAAI;AACA,eAAK,qBAAL,CAA2B,iBAA3B,CAA6C,KAAK,qBAAlD,EAAyE,WAAzE;AACA;AACH,SAHD,CAGE,OAAA,EAAA,EAAM,CAAG;AACd;;AAED,UAAI,CAAC,CAAC,KAAK,mBAAX,EAAgC;AAC5B,YAAI;AACA,eAAK,mBAAL,CAAyB,MAAzB;AACA;AACH,SAHD,CAGE,OAAA,EAAA,EAAM,CAAG;AACd;AACJ,KApRL,CAsRI;;AAtRJ;AAAA;AAAA,WAuRc,8BACN,kBADM,EAEN,SAFM,EAGN,KAHM,EAGO;AAEb,UAAI,CAAC,CAAC,KAAK,iBAAL,CAAuB,cAA7B,EAA6C;AACzC,aAAK,iBAAL,CAAuB,kBAAvB;AAEA,aAAK,eAAL,CACI,KAAK,iBAAL,CAAuB,SAD3B,EAEI,kBAFJ,EAGI,SAHJ,EAII,KAJJ;AAKH;AACJ;AArSL;AAAA;AAAA,WAuSc,qCACN,iBADM,EAEN,eAFM,EAGN,aAHM,EAG6B;AACnC,aAAO,IAAP;AACH,KA5SL,CA6bI;;AA7bJ;AAAA;AAAA,WA8bc,uBAA2C;AAAA;;AAAA,UAA/B,cAA+B,uEAAL,KAAK;;AAEjD,UAAI,KAAK,mBAAL,KAA6B,SAAjC,EAA4C;AACxC,eAAO,KAAK,mBAAL,CAAyB,cAAzB,CAAP;AACH;;AAED,UAAI,KAAK,qBAAT,EAAgC;AAC5B,YAAI,KAAK,qBAAL,CAA2B,MAA3B,GAAoC,WAApC,KACC,KAAK,qBAAL,CAA2B,MAA3B,GAAoC,OAApC,IACM,KAAK,qBAAL,CAA2B,MAA3B,GAAoC,MAApC,CAA2C,KAA3C,OAAuD,eAAe,CAAC,YAF9E,KAGA,KAAK,yBAAL,KAAmC,IAHvC,EAG6C;AACzC,eAAK,gBAAL,GAAwB,IAAxB;AACA,eAAK,qBAAL,GAA6B,IAA7B;AACA,eAAK,yBAAL,GAAiC,KAAjC;AACA,iBAAO,KAAK,WAAL,EAAP;AACH,SARD,MAQO;AACH,iBAAO,KAAK,qBAAZ;AACH;AACJ;;AAED,WAAK,oBAAL,GAA4B,gBAAgB,EAA5C;AACA,WAAK,gBAAL,GAAwB,gBAAgB,EAAxC;AAEA,WAAK,iBAAL,CAAuB,oBAAvB,CAA4C,KAAK,oBAAjD,EAAuE,KAAK,gBAA5E;AAEA,UAAM,WAAW,GAAG,cAAc,GAAG,KAAK,kBAAL,CAAwB,aAAxB,CAAsC,KAAK,oBAA3C,CAAH,GAAsE,KAAK,kBAAL,CAAwB,KAAxB,CAA8B,KAAK,oBAAnC,CAAxG;AAEA,WAAK,qBAAL,GAA6B,WAAW,CACnC,mBADwB,CACJ,UAAC,MAAD,EAAoC;AACrD,YAAI,MAAM,CAAC,OAAX,EAAoB;AAChB,UAAA,MAAI,CAAC,iBAAL,CAAuB,eAAvB,CAAuC,IAAvC,EAA6C,MAAM,CAAC,KAApD;;AACA,gBAAM,IAAI,KAAJ,CAAU,MAAM,CAAC,KAAjB,CAAN;AACH,SAHD,MAGO;AACH,UAAA,MAAI,CAAC,iBAAL,CAAuB,eAAvB,CAAuC,KAAvC;AACH;;AAED,YAAM,UAAU,GAAgB,MAAI,CAAC,qBAAL,CAA2B,MAA3B,CAAkC,MAAI,CAAC,qBAAvC,EAA8D,MAAM,CAAC,MAArE,EAA6E,MAAI,CAAC,gBAAlF,CAAhC,CARqD,CAUrD;AACA;;;AACA,QAAA,UAAU,CAAC,MAAX,CAAkB,MAAlB,CAAyB,UAAC,KAAD,EAA2B;AAChD,UAAA,MAAI,CAAC,gBAAL,CAAsB,OAAtB,CAA8B,KAA9B;AACH,SAFD;AAIA,eAAO,UAAU,CAAC,IAAX,GAAkB,4BAAlB,CAA+C,UAAC,QAAD,EAA2D;AAC7G,cAAI,QAAQ,CAAC,UAAT,KAAwB,GAA5B,EAAiC;AAC7B,YAAA,MAAI,CAAC,iBAAL,CAAuB,oBAAvB,CAA4C,MAAI,CAAC,oBAAjD,EAAuE,MAAI,CAAC,gBAA5E;;AACA,YAAA,MAAI,CAAC,iBAAL,CAAuB,8BAAvB,CAAsD,QAAQ,CAAC,UAA/D;;AAEA,mBAAO,aAAa,CAAC,UAAd,CAAsC,UAAtC,CAAP;AACH,WALD,MAKO,IAAI,QAAQ,CAAC,UAAT,KAAwB,GAAxB,IAA+B,CAAC,cAApC,EAAoD;AACvD,mBAAO,MAAI,CAAC,WAAL,CAAiB,IAAjB,CAAP;AACH,WAFM,MAEA;AACH,YAAA,MAAI,CAAC,iBAAL,CAAuB,8BAAvB,CAAsD,QAAQ,CAAC,UAA/D,EAA2E,QAAQ,CAAC,MAApF;;AACA,mBAAO,aAAa,CAAC,SAAd,iDAA8E,QAAQ,CAAC,UAAvF,eAAsG,MAAI,CAAC,qBAAL,CAA2B,UAA3B,CAAsC,WAAtC,CAAkD,UAAU,CAAC,gCAA7D,CAAtG,sBAAgN,QAAQ,CAAC,MAAzN,EAAP;AACH;AACJ,SAZM,CAAP;AAaH,OA9BwB,CAA7B;AAgCA,aAAO,KAAK,qBAAZ;AACH,KA1fL,CA2hBI;;AA3hBJ;AAAA;AAAA,WA4hBY,+BAAmB;AAAA;;AACvB,UAAI,KAAK,wBAAL,KAAkC,SAAtC,EAAiD;AAC7C,eAAO,KAAK,wBAAL,EAAP;AACH;;AAED,UAAI,KAAK,kCAAT,EAA6C;AACzC,YAAI,KAAK,kCAAL,CAAwC,MAAxC,GAAiD,WAAjD,KACC,KAAK,kCAAL,CAAwC,MAAxC,GAAiD,OAAjD,IACM,KAAK,kCAAL,CAAwC,MAAxC,GAAiD,MAAjD,CAAwD,KAAxD,OAAoE,eAAe,CAAC,YAF3F,CAAJ,EAE8G;AAE1G,eAAK,kCAAL,GAA0C,IAA1C;AACA,iBAAO,KAAK,mBAAL,EAAP;AACH,SAND,MAMO;AACH,iBAAO,KAAK,kCAAZ;AACH;AACJ;;AAED,WAAK,kCAAL,GAA0C,KAAK,WAAL,GAAmB,4BAAnB,CAAgD,UAAC,UAAD,EAAkD;AACxI,eAAO,MAAI,CAAC,uBAAL,CAA6B,UAA7B,EAAyC,MAAI,CAAC,qBAAL,CAA2B,mBAA3B,CAA+C,SAA/C,EAAzC,EACF,qBADE,CACoB,UAAC,CAAD,EAAe;AAClC,iBAAO,UAAP;AACH,SAHE,CAAP;AAIH,OALyC,CAA1C;AAOA,aAAO,KAAK,kCAAZ;AACH;AArjBL;AAAA;AAAA,WAkHW,mBAAiB,KAAjB,EAAqC,MAArC,EAAkE;AACrE,UAAI,CAAC,MAAM,CAAC,SAAZ,EAAuB;AACnB,eAAO,KAAP;AACH;;AACD,MAAA,MAAM,CAAC,YAAP,CAAoB,KAAK,CAAC,UAA1B;AACA,UAAM,GAAG,GAAG,IAAI,UAAJ,CAAe,KAAK,CAAC,UAAN,GAAmB,MAAM,CAAC,MAAP,CAAc,UAAhD,CAAZ;AACA,MAAA,GAAG,CAAC,GAAJ,CAAQ,IAAI,UAAJ,CAAe,MAAM,CAAC,MAAtB,CAAR,EAAuC,CAAvC;AACA,MAAA,GAAG,CAAC,GAAJ,CAAQ,IAAI,UAAJ,CAAe,KAAf,CAAR,EAA+B,MAAM,CAAC,MAAP,CAAc,UAA7C;AACA,aAAO,GAAG,CAAC,MAAX;AACH;AA3HL;;AAAA;AAAA;AA6BkB,oBAAA,CAAA,oBAAA,GAAgC,IAAhC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionOpenResponse,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IAudioDestination,\r\n    IConnection,\r\n    IDisposable,\r\n    MessageType,\r\n    Promise,\r\n    PromiseHelper,\r\n    PromiseResult,\r\n    ServiceEvent,\r\n} from \"../common/Exports\";\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechSynthesisEventArgs,\r\n    SpeechSynthesisResult,\r\n    SpeechSynthesisWordBoundaryEventArgs,\r\n    SpeechSynthesizer,\r\n} from \"../sdk/Exports\";\r\nimport { Callback } from \"../sdk/Transcription/IConversation\";\r\nimport {\r\n    AgentConfig,\r\n    CancellationErrorCodePropertyName,\r\n    ISynthesisConnectionFactory,\r\n    SynthesisAudioMetadata,\r\n    SynthesisContext,\r\n    SynthesisTurn,\r\n    SynthesizerConfig\r\n} from \"./Exports\";\r\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\nexport class SynthesisAdapterBase implements IDisposable {\r\n    protected privSynthesisTurn: SynthesisTurn;\r\n    protected privConnectionId: string;\r\n    protected privSynthesizerConfig: SynthesizerConfig;\r\n    protected privSpeechSynthesizer: SpeechSynthesizer;\r\n    protected privSuccessCallback: (e: SpeechSynthesisResult) => void;\r\n    protected privErrorCallback: (e: string) => void;\r\n\r\n    public get synthesisContext(): SynthesisContext {\r\n        return this.privSynthesisContext;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n\r\n    public get connectionEvents(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    public get serviceEvents(): EventSource<ServiceEvent> {\r\n        return this.privServiceEvents;\r\n    }\r\n\r\n    protected speakOverride: (ssml: string, requestId: string, sc: (e: SpeechSynthesisResult) => void, ec: (e: string) => void) => any = undefined;\r\n\r\n    // Called when telemetry data is sent to the service.\r\n    // Used for testing Telemetry capture.\r\n    public static telemetryData: (json: string) => void;\r\n    public static telemetryDataEnabled: boolean = true;\r\n\r\n    public set activityTemplate(messagePayload: string) { this.privActivityTemplate = messagePayload; }\r\n    public get activityTemplate(): string { return this.privActivityTemplate; }\r\n\r\n    protected receiveMessageOverride: () => any = undefined;\r\n\r\n    protected connectImplOverride: (isUnAuthorized: boolean) => any = undefined;\r\n\r\n    protected configConnectionOverride: () => any = undefined;\r\n\r\n    protected fetchConnectionOverride: () => any = undefined;\r\n\r\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\r\n        this.privAudioOutputFormat = format;\r\n        this.privSynthesisTurn.audioOutputFormat = format;\r\n        if (this.privSessionAudioDestination !== undefined) {\r\n            this.privSessionAudioDestination.format = format;\r\n        }\r\n        if (this.synthesisContext !== undefined) {\r\n            this.synthesisContext.audioOutputFormat = format;\r\n        }\r\n    }\r\n    private privAuthentication: IAuthentication;\r\n    private privConnectionFactory: ISynthesisConnectionFactory;\r\n\r\n    // A promise for a configured connection.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionConfigurationPromise: Promise<IConnection>;\r\n\r\n    // A promise for a connection, but one that has not had the speech context sent yet.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionPromise: Promise<IConnection>;\r\n    private privAuthFetchEventId: string;\r\n    private privIsDisposed: boolean;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privServiceEvents: EventSource<ServiceEvent>;\r\n    private privSynthesisContext: SynthesisContext;\r\n    private privAgentConfig: AgentConfig;\r\n    private privServiceHasSentMessage: boolean;\r\n    private privActivityTemplate: string;\r\n    private privAudioOutputFormat: AudioOutputFormatImpl;\r\n    private privSessionAudioDestination: IAudioDestination;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig,\r\n        speechSynthesizer: SpeechSynthesizer,\r\n        audioDestination: IAudioDestination) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!synthesizerConfig) {\r\n            throw new ArgumentNullError(\"synthesizerConfig\");\r\n        }\r\n\r\n        this.privAuthentication = authentication;\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.privSynthesizerConfig = synthesizerConfig;\r\n        this.privIsDisposed = false;\r\n        this.privSpeechSynthesizer = speechSynthesizer;\r\n        this.privSessionAudioDestination = audioDestination;\r\n        this.privSynthesisTurn = new SynthesisTurn();\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privServiceEvents = new EventSource<ServiceEvent>();\r\n        this.privSynthesisContext = new SynthesisContext(this.privSpeechSynthesizer);\r\n        this.privAgentConfig = new AgentConfig();\r\n\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                const connectionClosedEvent = connectionEvent as ConnectionClosedEvent;\r\n                this.cancelSynthesisLocal(CancellationReason.Error,\r\n                    connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure,\r\n                    connectionClosedEvent.reason + \" websocket error code: \" + connectionClosedEvent.statusCode);\r\n            }\r\n        });\r\n    }\r\n\r\n    public static addHeader(audio: ArrayBuffer, format: AudioOutputFormatImpl): ArrayBuffer {\r\n        if (!format.hasHeader) {\r\n            return audio;\r\n        }\r\n        format.updateHeader(audio.byteLength);\r\n        const tmp = new Uint8Array(audio.byteLength + format.header.byteLength);\r\n        tmp.set(new Uint8Array(format.header), 0);\r\n        tmp.set(new Uint8Array(audio), format.header.byteLength);\r\n        return tmp.buffer;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(reason?: string): void {\r\n        this.privIsDisposed = true;\r\n        if (this.privSessionAudioDestination !== undefined) {\r\n            this.privSessionAudioDestination.close();\r\n        }\r\n        if (this.privConnectionConfigurationPromise) {\r\n            this.privConnectionConfigurationPromise.onSuccessContinueWith((connection: IConnection) => {\r\n                connection.dispose(reason);\r\n            });\r\n        }\r\n    }\r\n\r\n    public connect(): void {\r\n        this.connectImpl().result();\r\n    }\r\n\r\n    public connectAsync(cb?: Callback, err?: Callback): void {\r\n        this.connectImpl().continueWith((promiseResult: PromiseResult<IConnection>) => {\r\n            try {\r\n                if (promiseResult.isError) {\r\n                    if (!!err) {\r\n                        err(promiseResult.error);\r\n                    }\r\n                } else if (promiseResult.isCompleted) {\r\n                    if (!!cb) {\r\n                        cb();\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public sendNetworkMessage(path: string, payload: string | ArrayBuffer, success?: () => void, err?: (error: string) => void): void {\r\n        const type: MessageType = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\r\n        const contentType: string = typeof payload === \"string\" ? \"application/json\" : \"\";\r\n\r\n        this.fetchConnection().on((connection: IConnection) => {\r\n            connection.send(new SpeechConnectionMessage(type, path, this.privSynthesisTurn.requestId, contentType, payload)).on(() => {\r\n                if (!!success) {\r\n                    success();\r\n                }\r\n            }, (error: string) => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        }, (error: string) => {\r\n            if (!!err) {\r\n                err(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    public Speak(\r\n        text: string,\r\n        isSSML: boolean,\r\n        requestId: string,\r\n        successCallback: (e: SpeechSynthesisResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n        audioDestination: IAudioDestination,\r\n    ): Promise<boolean> {\r\n\r\n        let ssml: string;\r\n\r\n        if (isSSML) {\r\n            ssml = text;\r\n        } else {\r\n            ssml = this.privSpeechSynthesizer.buildSsml(text);\r\n        }\r\n\r\n        if (this.speakOverride !== undefined) {\r\n            return this.speakOverride(ssml, requestId, successCallback, errorCallBack);\r\n        }\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallBack;\r\n\r\n        this.privSynthesisTurn.startNewSynthesis(requestId, text, isSSML, audioDestination);\r\n\r\n        return this.fetchConnection().continueWithPromise<boolean>((connection: PromiseResult<IConnection>) => {\r\n            if (connection.isError) {\r\n                this.cancelSynthesisLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, connection.error);\r\n                return PromiseHelper.fromError(connection.error);\r\n            }\r\n            return this.sendSynthesisContext(connection.result).continueWithPromise<boolean>((result: PromiseResult<boolean>): Promise<boolean> => {\r\n                if (result.isError) {\r\n                    this.cancelSynthesisLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, result.error);\r\n                    return PromiseHelper.fromError(result.error);\r\n                }\r\n                return this.sendSsmlMessage(connection.result, ssml, requestId).continueWithPromise<boolean>((result: PromiseResult<boolean>): Promise<boolean> => {\r\n                    if (result.isError) {\r\n                        this.cancelSynthesisLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, result.error);\r\n                        return PromiseHelper.fromError(result.error);\r\n                    }\r\n\r\n                    const synthesisStartEventArgs: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(\r\n                        new SpeechSynthesisResult(\r\n                            requestId,\r\n                            ResultReason.SynthesizingAudioStarted,\r\n                        )\r\n                    );\r\n\r\n                    if (!!this.privSpeechSynthesizer.synthesisStarted) {\r\n                        this.privSpeechSynthesizer.synthesisStarted(this.privSpeechSynthesizer, synthesisStartEventArgs);\r\n                    }\r\n\r\n                    const messageRetrievalPromise = this.receiveMessage();\r\n                    return PromiseHelper.fromResult(true);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    // Cancels synthesis.\r\n    protected cancelSynthesis(\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n        const result: SpeechSynthesisResult = new SpeechSynthesisResult(\r\n            requestId,\r\n            ResultReason.Canceled,\r\n            undefined,\r\n            error,\r\n            properties\r\n        );\r\n\r\n        if (!!this.privSpeechSynthesizer.SynthesisCanceled) {\r\n            const cancelEvent: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(result);\r\n            try {\r\n                this.privSpeechSynthesizer.SynthesisCanceled(this.privSpeechSynthesizer, cancelEvent);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    // Cancels synthesis.\r\n    protected cancelSynthesisLocal(\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        if (!!this.privSynthesisTurn.isSynthesizing) {\r\n            this.privSynthesisTurn.onStopSynthesizing();\r\n\r\n            this.cancelSynthesis(\r\n                this.privSynthesisTurn.requestId,\r\n                cancellationReason,\r\n                errorCode,\r\n                error);\r\n        }\r\n    }\r\n\r\n    protected processTypeSpecificMessages(\r\n        connectionMessage: SpeechConnectionMessage,\r\n        successCallback?: (e: SpeechSynthesisResult) => void,\r\n        errorCallBack?: (e: string) => void): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected receiveMessage = (): Promise<IConnection> => {\r\n        return this.fetchConnection().on((connection: IConnection): Promise<IConnection> => {\r\n            return connection.read()\r\n                .onSuccessContinueWithPromise((message: ConnectionMessage) => {\r\n\r\n                    if (this.receiveMessageOverride !== undefined) {\r\n                        return this.receiveMessageOverride();\r\n                    }\r\n                    if (this.privIsDisposed) {\r\n                        // We're done.\r\n                        return PromiseHelper.fromResult(undefined);\r\n                    }\r\n\r\n                    // indicates we are draining the queue and it came with no message;\r\n                    if (!message) {\r\n                        if (!this.privSynthesisTurn.isSynthesizing) {\r\n                            return PromiseHelper.fromResult(true);\r\n                        } else {\r\n                            return this.receiveMessage();\r\n                        }\r\n                    }\r\n\r\n                    this.privServiceHasSentMessage = true;\r\n\r\n                    const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n                    if (connectionMessage.requestId.toLowerCase() === this.privSynthesisTurn.requestId.toLowerCase()) {\r\n                        switch (connectionMessage.path.toLowerCase()) {\r\n                            case \"turn.start\":\r\n                                this.privSynthesisTurn.onServiceTurnStartResponse();\r\n                                break;\r\n                            case \"response\":\r\n                                this.privSynthesisTurn.onServiceResponseMessage(connectionMessage.textBody);\r\n                                break;\r\n                            case \"audio\":\r\n                                if (this.privSynthesisTurn.streamId.toLowerCase() === connectionMessage.streamId.toLowerCase()\r\n                                    && !!connectionMessage.binaryBody) {\r\n                                    this.privSynthesisTurn.onAudioChunkReceived(connectionMessage.binaryBody);\r\n                                    if (!!this.privSpeechSynthesizer.synthesizing) {\r\n                                        try {\r\n                                            const audioWithHeader = SynthesisAdapterBase.addHeader(connectionMessage.binaryBody, this.privSynthesisTurn.audioOutputFormat);\r\n                                            const ev: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(\r\n                                                new SpeechSynthesisResult(\r\n                                                    this.privSynthesisTurn.requestId,\r\n                                                    ResultReason.SynthesizingAudio,\r\n                                                    audioWithHeader));\r\n                                            this.privSpeechSynthesizer.synthesizing(this.privSpeechSynthesizer, ev);\r\n                                        } catch (error) {\r\n                                            // Not going to let errors in the event handler\r\n                                            // trip things up.\r\n                                        }\r\n                                    }\r\n                                    if (this.privSessionAudioDestination !== undefined) {\r\n                                        this.privSessionAudioDestination.write(connectionMessage.binaryBody);\r\n                                    }\r\n                                }\r\n                                break;\r\n                            case \"audio.metadata\":\r\n                                const metadataList = SynthesisAudioMetadata.fromJSON(connectionMessage.textBody).Metadata;\r\n                                for (const metadata of metadataList) {\r\n                                    if (metadata.Type.toLowerCase() === \"WordBoundary\".toLowerCase()) {\r\n\r\n                                        this.privSynthesisTurn.onWordBoundaryEvent(metadata.Data.text.Text);\r\n\r\n                                        const ev: SpeechSynthesisWordBoundaryEventArgs = new SpeechSynthesisWordBoundaryEventArgs(\r\n                                            metadata.Data.Offset,\r\n                                            metadata.Data.text.Text,\r\n                                            metadata.Data.text.Length,\r\n                                            this.privSynthesisTurn.currentTextOffset);\r\n\r\n                                        if (!!this.privSpeechSynthesizer.wordBoundary) {\r\n                                            try {\r\n                                                this.privSpeechSynthesizer.wordBoundary(this.privSpeechSynthesizer, ev);\r\n                                            } catch (error) {\r\n                                                // Not going to let errors in the event handler\r\n                                                // trip things up.\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                                break;\r\n                            case \"turn.end\":\r\n                                this.privSynthesisTurn.onServiceTurnEndResponse();\r\n                                let result: SpeechSynthesisResult;\r\n                                try {\r\n                                    result = new SpeechSynthesisResult(\r\n                                        this.privSynthesisTurn.requestId,\r\n                                        ResultReason.SynthesizingAudioCompleted,\r\n                                        this.privSynthesisTurn.allReceivedAudioWithHeader\r\n                                    );\r\n                                    if (!!this.privSuccessCallback) {\r\n                                        this.privSuccessCallback(result);\r\n                                    }\r\n                                } catch (error) {\r\n                                    if (!!this.privErrorCallback) {\r\n                                        this.privErrorCallback(error);\r\n                                    }\r\n                                }\r\n                                if (this.privSpeechSynthesizer.synthesisCompleted) {\r\n                                    try {\r\n                                        this.privSpeechSynthesizer.synthesisCompleted(\r\n                                            this.privSpeechSynthesizer,\r\n                                            new SpeechSynthesisEventArgs(result)\r\n                                        );\r\n                                    } catch (e) {\r\n                                        // Not going to let errors in the event handler\r\n                                        // trip things up.\r\n                                    }\r\n                                }\r\n                                break;\r\n\r\n                            default:\r\n\r\n                                if (!this.processTypeSpecificMessages(connectionMessage)) {\r\n                                    // here are some messages that the derived class has not processed, dispatch them to connect class\r\n                                    if (!!this.privServiceEvents) {\r\n                                        this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                                    }\r\n                                }\r\n\r\n                        }\r\n                    }\r\n\r\n                    return this.receiveMessage();\r\n                });\r\n        }, (error: string) => {\r\n        });\r\n    }\r\n\r\n    protected sendSynthesisContext = (connection: IConnection): Promise<boolean> => {\r\n        const synthesisContextJson = this.synthesisContext.toJSON();\r\n\r\n        if (synthesisContextJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"synthesis.context\",\r\n                this.privSynthesisTurn.requestId,\r\n                \"application/json\",\r\n                synthesisContextJson));\r\n        }\r\n        return PromiseHelper.fromResult(true);\r\n    }\r\n\r\n    // Establishes a websocket connection to the end point.\r\n    protected connectImpl(isUnAuthorized: boolean = false): Promise<IConnection> {\r\n\r\n        if (this.connectImplOverride !== undefined) {\r\n            return this.connectImplOverride(isUnAuthorized);\r\n        }\r\n\r\n        if (this.privConnectionPromise) {\r\n            if (this.privConnectionPromise.result().isCompleted &&\r\n                (this.privConnectionPromise.result().isError\r\n                    || this.privConnectionPromise.result().result.state() === ConnectionState.Disconnected) &&\r\n                this.privServiceHasSentMessage === true) {\r\n                this.privConnectionId = null;\r\n                this.privConnectionPromise = null;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.connectImpl();\r\n            } else {\r\n                return this.privConnectionPromise;\r\n            }\r\n        }\r\n\r\n        this.privAuthFetchEventId = createNoDashGuid();\r\n        this.privConnectionId = createNoDashGuid();\r\n\r\n        this.privSynthesisTurn.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\r\n\r\n        const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\r\n\r\n        this.privConnectionPromise = authPromise\r\n            .continueWithPromise((result: PromiseResult<AuthInfo>) => {\r\n                if (result.isError) {\r\n                    this.privSynthesisTurn.onAuthCompleted(true, result.error);\r\n                    throw new Error(result.error);\r\n                } else {\r\n                    this.privSynthesisTurn.onAuthCompleted(false);\r\n                }\r\n\r\n                const connection: IConnection = this.privConnectionFactory.create(this.privSynthesizerConfig, result.result, this.privConnectionId);\r\n\r\n                // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n                // it'll stop sending events.\r\n                connection.events.attach((event: ConnectionEvent) => {\r\n                    this.connectionEvents.onEvent(event);\r\n                });\r\n\r\n                return connection.open().onSuccessContinueWithPromise((response: ConnectionOpenResponse): Promise<IConnection> => {\r\n                    if (response.statusCode === 200) {\r\n                        this.privSynthesisTurn.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\r\n                        this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode);\r\n\r\n                        return PromiseHelper.fromResult<IConnection>(connection);\r\n                    } else if (response.statusCode === 403 && !isUnAuthorized) {\r\n                        return this.connectImpl(true);\r\n                    } else {\r\n                        this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode, response.reason);\r\n                        return PromiseHelper.fromError<IConnection>(`Unable to contact server. StatusCode: ${response.statusCode}, ${this.privSynthesizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${response.reason}`);\r\n                    }\r\n                });\r\n            });\r\n\r\n        return this.privConnectionPromise;\r\n    }\r\n\r\n    protected sendSpeechServiceConfig = (connection: IConnection, SpeechServiceConfigJson: string): Promise<boolean> => {\r\n\r\n        if (SpeechServiceConfigJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.config\",\r\n                this.privSynthesisTurn.requestId,\r\n                \"application/json\",\r\n                SpeechServiceConfigJson));\r\n        }\r\n\r\n        return PromiseHelper.fromResult(true);\r\n    }\r\n\r\n    protected sendSsmlMessage = (connection: IConnection, ssml: string, requestId: string): Promise<boolean> => {\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"ssml\",\r\n            requestId,\r\n            \"application/ssml+xml\",\r\n            ssml));\r\n    }\r\n\r\n    private fetchConnection = (): Promise<IConnection> => {\r\n        if (this.fetchConnectionOverride !== undefined) {\r\n            return this.fetchConnectionOverride();\r\n        }\r\n\r\n        return this.configureConnection();\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private configureConnection(): Promise<IConnection> {\r\n        if (this.configConnectionOverride !== undefined) {\r\n            return this.configConnectionOverride();\r\n        }\r\n\r\n        if (this.privConnectionConfigurationPromise) {\r\n            if (this.privConnectionConfigurationPromise.result().isCompleted &&\r\n                (this.privConnectionConfigurationPromise.result().isError\r\n                    || this.privConnectionConfigurationPromise.result().result.state() === ConnectionState.Disconnected)) {\r\n\r\n                this.privConnectionConfigurationPromise = null;\r\n                return this.configureConnection();\r\n            } else {\r\n                return this.privConnectionConfigurationPromise;\r\n            }\r\n        }\r\n\r\n        this.privConnectionConfigurationPromise = this.connectImpl().onSuccessContinueWithPromise((connection: IConnection): Promise<IConnection> => {\r\n            return this.sendSpeechServiceConfig(connection, this.privSynthesizerConfig.SpeechServiceConfig.serialize())\r\n                .onSuccessContinueWith((_: boolean) => {\r\n                    return connection;\r\n                });\r\n        });\r\n\r\n        return this.privConnectionConfigurationPromise;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}