{"ast":null,"code":"import _classCallCheck from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ArgumentNullError, Deferred } from \"../common/Exports\"; // Node.JS specific xmlhttprequest / browser support.\n\nimport * as XHR from \"xmlhttprequest-ts\";\nexport var RestRequestType;\n\n(function (RestRequestType) {\n  RestRequestType[\"Get\"] = \"get\";\n  RestRequestType[\"Post\"] = \"post\";\n  RestRequestType[\"Delete\"] = \"delete\";\n  RestRequestType[\"File\"] = \"file\";\n})(RestRequestType || (RestRequestType = {})); // accept rest operations via request method and return abstracted objects from server response\n\n\nexport var RestMessageAdapter = /*#__PURE__*/function () {\n  function RestMessageAdapter(configParams, connectionId) {\n    _classCallCheck(this, RestMessageAdapter);\n\n    if (!configParams) {\n      throw new ArgumentNullError(\"configParams\");\n    }\n\n    this.privHeaders = configParams.headers;\n    this.privTimeout = configParams.timeout;\n    this.privIgnoreCache = configParams.ignoreCache;\n  }\n\n  _createClass(RestMessageAdapter, [{\n    key: \"setHeaders\",\n    value: function setHeaders(key, value) {\n      this.privHeaders[key] = value;\n    }\n  }, {\n    key: \"request\",\n    value: function request(method, uri) {\n      var _this = this;\n\n      var queryParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var body = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var binaryBody = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n      var responseReceivedDeferral = new Deferred();\n      var xhr;\n\n      if (typeof XMLHttpRequest === \"undefined\") {\n        xhr = new XHR.XMLHttpRequest();\n      } else {\n        xhr = new XMLHttpRequest();\n      }\n\n      var requestCommand = method === RestRequestType.File ? \"post\" : method;\n      xhr.open(requestCommand, this.withQuery(uri, queryParams), true);\n\n      if (this.privHeaders) {\n        Object.keys(this.privHeaders).forEach(function (key) {\n          return xhr.setRequestHeader(key, _this.privHeaders[key]);\n        });\n      }\n\n      if (this.privIgnoreCache) {\n        xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      }\n\n      xhr.timeout = this.privTimeout;\n\n      xhr.onload = function () {\n        responseReceivedDeferral.resolve(_this.parseXHRResult(xhr));\n      };\n\n      xhr.onerror = function () {\n        responseReceivedDeferral.resolve(_this.errorResponse(xhr, \"Failed to make request.\"));\n      };\n\n      xhr.ontimeout = function () {\n        responseReceivedDeferral.resolve(_this.errorResponse(xhr, \"Request took longer than expected.\"));\n      };\n\n      if (method === RestRequestType.File && binaryBody) {\n        xhr.setRequestHeader(\"Content-Type\", \"multipart/form-data\");\n        xhr.send(binaryBody);\n      } else if (method === RestRequestType.Post && body) {\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n        xhr.send(JSON.stringify(body));\n      } else {\n        xhr.send();\n      }\n\n      return responseReceivedDeferral.promise();\n    }\n  }, {\n    key: \"parseXHRResult\",\n    value: function parseXHRResult(xhr) {\n      return {\n        data: xhr.responseText,\n        headers: xhr.getAllResponseHeaders(),\n        json: function json() {\n          return JSON.parse(xhr.responseText);\n        },\n        ok: xhr.status >= 200 && xhr.status < 300,\n        status: xhr.status,\n        statusText: xhr.statusText\n      };\n    }\n  }, {\n    key: \"errorResponse\",\n    value: function errorResponse(xhr) {\n      var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return {\n        data: message || xhr.statusText,\n        headers: xhr.getAllResponseHeaders(),\n        json: function json() {\n          return JSON.parse(message || \"\\\"\" + xhr.statusText + \"\\\"\");\n        },\n        ok: false,\n        status: xhr.status,\n        statusText: xhr.statusText\n      };\n    }\n  }, {\n    key: \"withQuery\",\n    value: function withQuery(url) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var queryString = this.queryParams(params);\n      return queryString ? url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + queryString : url;\n    }\n  }, {\n    key: \"queryParams\",\n    value: function queryParams() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return Object.keys(params).map(function (k) {\n        return encodeURIComponent(k) + \"=\" + encodeURIComponent(params[k]);\n      }).join(\"&\");\n    }\n  }]);\n\n  return RestMessageAdapter;\n}();","map":{"version":3,"sources":["src/common.browser/RestMessageAdapter.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    Deferred,\r\n    Promise,\r\n} from \"../common/Exports\";\r\nimport { IRequestOptions } from \"./Exports\";\r\n\r\n// Node.JS specific xmlhttprequest / browser support.\r\nimport * as XHR from \"xmlhttprequest-ts\";\r\n\r\nexport enum RestRequestType {\r\n    Get = \"get\",\r\n    Post = \"post\",\r\n    Delete = \"delete\",\r\n    File = \"file\",\r\n}\r\n\r\nexport interface IRestResponse {\r\n    ok: boolean;\r\n    status: number;\r\n    statusText: string;\r\n    data: string;\r\n    json: <T>() => T;\r\n    headers: string;\r\n}\r\n\r\n// accept rest operations via request method and return abstracted objects from server response\r\nexport class RestMessageAdapter {\r\n\r\n    private privTimeout: number;\r\n    private privIgnoreCache: boolean;\r\n    private privHeaders: { [key: string]: string; };\r\n\r\n    public constructor(\r\n        configParams: IRequestOptions,\r\n        connectionId?: string\r\n        ) {\r\n\r\n        if (!configParams) {\r\n            throw new ArgumentNullError(\"configParams\");\r\n        }\r\n\r\n        this.privHeaders = configParams.headers;\r\n        this.privTimeout = configParams.timeout;\r\n        this.privIgnoreCache = configParams.ignoreCache;\r\n    }\r\n\r\n    public setHeaders(key: string, value: string ): void {\r\n        this.privHeaders[key] = value;\r\n    }\r\n\r\n    public request(\r\n        method: RestRequestType,\r\n        uri: string,\r\n        queryParams: any = {},\r\n        body: any = null,\r\n        binaryBody: Blob | Buffer = null,\r\n        ): Promise<IRestResponse> {\r\n\r\n        const responseReceivedDeferral = new Deferred<IRestResponse>();\r\n\r\n        let xhr: XMLHttpRequest | XHR.XMLHttpRequest;\r\n        if (typeof (XMLHttpRequest) === \"undefined\") {\r\n            xhr = new XHR.XMLHttpRequest();\r\n        } else {\r\n            xhr = new XMLHttpRequest();\r\n        }\r\n        const requestCommand = method === RestRequestType.File ? \"post\" : method;\r\n        xhr.open(requestCommand, this.withQuery(uri, queryParams), true);\r\n\r\n        if (this.privHeaders) {\r\n            Object.keys(this.privHeaders).forEach((key: any) => xhr.setRequestHeader(key, this.privHeaders[key]));\r\n        }\r\n\r\n        if (this.privIgnoreCache) {\r\n            xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\r\n        }\r\n\r\n        xhr.timeout = this.privTimeout;\r\n\r\n        xhr.onload = () => {\r\n            responseReceivedDeferral.resolve(this.parseXHRResult(xhr));\r\n        };\r\n\r\n        xhr.onerror = () => {\r\n            responseReceivedDeferral.resolve(this.errorResponse(xhr, \"Failed to make request.\"));\r\n        };\r\n\r\n        xhr.ontimeout = () => {\r\n            responseReceivedDeferral.resolve(this.errorResponse(xhr, \"Request took longer than expected.\"));\r\n        };\r\n\r\n        if (method === RestRequestType.File && binaryBody) {\r\n            xhr.setRequestHeader(\"Content-Type\", \"multipart/form-data\");\r\n            xhr.send(binaryBody);\r\n        } else if (method === RestRequestType.Post && body) {\r\n            xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n            xhr.send(JSON.stringify(body));\r\n        } else {\r\n            xhr.send();\r\n        }\r\n\r\n        return responseReceivedDeferral.promise();\r\n    }\r\n\r\n    private parseXHRResult(xhr: XMLHttpRequest | XHR.XMLHttpRequest): IRestResponse {\r\n        return {\r\n            data: xhr.responseText,\r\n            headers: xhr.getAllResponseHeaders(),\r\n            json: <T>() => JSON.parse(xhr.responseText) as T,\r\n            ok: xhr.status >= 200 && xhr.status < 300,\r\n            status: xhr.status,\r\n            statusText: xhr.statusText,\r\n        };\r\n    }\r\n\r\n    private errorResponse(xhr: XMLHttpRequest | XHR.XMLHttpRequest, message: string | null = null): IRestResponse {\r\n        return {\r\n            data: message || xhr.statusText,\r\n            headers: xhr.getAllResponseHeaders(),\r\n            json: <T>() => JSON.parse(message || (\"\\\"\" + xhr.statusText + \"\\\"\")) as T,\r\n            ok: false,\r\n            status: xhr.status,\r\n            statusText: xhr.statusText,\r\n        };\r\n    }\r\n\r\n    private withQuery(url: string, params: any = {}): any {\r\n        const queryString = this.queryParams(params);\r\n        return queryString ? url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + queryString : url;\r\n    }\r\n\r\n    private queryParams(params: any = {}): any {\r\n        return Object.keys(params)\r\n            .map((k: any) => encodeURIComponent(k) + \"=\" + encodeURIComponent(params[k]))\r\n            .join(\"&\");\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}