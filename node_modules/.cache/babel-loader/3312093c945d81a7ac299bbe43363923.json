{"ast":null,"code":"'use strict';\n\nvar streak = require('longest-streak');\n\nvar repeat = require('repeat-string');\n\nvar pad = require('../util/pad');\n\nmodule.exports = code;\nvar lineFeed = '\\n';\nvar space = ' '; // Stringify code.\n// Creates indented code when:\n//\n// - No language tag exists\n// - Not in `fences: true` mode\n// - A non-empty value exists\n//\n// Otherwise, GFM fenced code is created:\n//\n// ````markdown\n// ```js\n// foo();\n// ```\n// ````\n//\n// When in ``fence: `~` `` mode, uses tildes as fences:\n//\n// ```markdown\n// ~~~js\n// foo();\n// ~~~\n// ```\n//\n// Knows about internal fences:\n//\n// `````markdown\n// ````markdown\n// ```javascript\n// foo();\n// ```\n// ````\n// `````\n\nfunction code(node, parent) {\n  var self = this;\n  var value = node.value;\n  var options = self.options;\n  var marker = options.fence;\n  var info = node.lang || '';\n  var fence;\n\n  if (info && node.meta) {\n    info += space + node.meta;\n  }\n\n  info = self.encode(self.escape(info, node)); // Without (needed) fences.\n\n  if (!info && !options.fences && value) {\n    // Throw when pedantic, in a list item which isn’t compiled using a tab.\n    if (parent && parent.type === 'listItem' && options.listItemIndent !== 'tab' && options.pedantic) {\n      self.file.fail('Cannot indent code properly. See https://git.io/fxKR8', node.position);\n    }\n\n    return pad(value, 1);\n  }\n\n  fence = repeat(marker, Math.max(streak(value, marker) + 1, 3));\n  return fence + info + lineFeed + value + lineFeed + fence;\n}","map":{"version":3,"sources":["/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/remark-stringify/lib/visitors/code.js"],"names":["streak","require","repeat","pad","module","exports","code","lineFeed","space","node","parent","self","value","options","marker","fence","info","lang","meta","encode","escape","fences","type","listItemIndent","pedantic","file","fail","position","Math","max"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,gBAAD,CAApB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,eAAD,CAApB;;AACA,IAAIE,GAAG,GAAGF,OAAO,CAAC,aAAD,CAAjB;;AAEAG,MAAM,CAACC,OAAP,GAAiBC,IAAjB;AAEA,IAAIC,QAAQ,GAAG,IAAf;AACA,IAAIC,KAAK,GAAG,GAAZ,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASF,IAAT,CAAcG,IAAd,EAAoBC,MAApB,EAA4B;AAC1B,MAAIC,IAAI,GAAG,IAAX;AACA,MAAIC,KAAK,GAAGH,IAAI,CAACG,KAAjB;AACA,MAAIC,OAAO,GAAGF,IAAI,CAACE,OAAnB;AACA,MAAIC,MAAM,GAAGD,OAAO,CAACE,KAArB;AACA,MAAIC,IAAI,GAAGP,IAAI,CAACQ,IAAL,IAAa,EAAxB;AACA,MAAIF,KAAJ;;AAEA,MAAIC,IAAI,IAAIP,IAAI,CAACS,IAAjB,EAAuB;AACrBF,IAAAA,IAAI,IAAIR,KAAK,GAAGC,IAAI,CAACS,IAArB;AACD;;AAEDF,EAAAA,IAAI,GAAGL,IAAI,CAACQ,MAAL,CAAYR,IAAI,CAACS,MAAL,CAAYJ,IAAZ,EAAkBP,IAAlB,CAAZ,CAAP,CAZ0B,CAc1B;;AACA,MAAI,CAACO,IAAD,IAAS,CAACH,OAAO,CAACQ,MAAlB,IAA4BT,KAAhC,EAAuC;AACrC;AACA,QACEF,MAAM,IACNA,MAAM,CAACY,IAAP,KAAgB,UADhB,IAEAT,OAAO,CAACU,cAAR,KAA2B,KAF3B,IAGAV,OAAO,CAACW,QAJV,EAKE;AACAb,MAAAA,IAAI,CAACc,IAAL,CAAUC,IAAV,CACE,uDADF,EAEEjB,IAAI,CAACkB,QAFP;AAID;;AAED,WAAOxB,GAAG,CAACS,KAAD,EAAQ,CAAR,CAAV;AACD;;AAEDG,EAAAA,KAAK,GAAGb,MAAM,CAACY,MAAD,EAASc,IAAI,CAACC,GAAL,CAAS7B,MAAM,CAACY,KAAD,EAAQE,MAAR,CAAN,GAAwB,CAAjC,EAAoC,CAApC,CAAT,CAAd;AAEA,SAAOC,KAAK,GAAGC,IAAR,GAAeT,QAAf,GAA0BK,KAA1B,GAAkCL,QAAlC,GAA6CQ,KAApD;AACD","sourcesContent":["'use strict'\n\nvar streak = require('longest-streak')\nvar repeat = require('repeat-string')\nvar pad = require('../util/pad')\n\nmodule.exports = code\n\nvar lineFeed = '\\n'\nvar space = ' '\n\n// Stringify code.\n// Creates indented code when:\n//\n// - No language tag exists\n// - Not in `fences: true` mode\n// - A non-empty value exists\n//\n// Otherwise, GFM fenced code is created:\n//\n// ````markdown\n// ```js\n// foo();\n// ```\n// ````\n//\n// When in ``fence: `~` `` mode, uses tildes as fences:\n//\n// ```markdown\n// ~~~js\n// foo();\n// ~~~\n// ```\n//\n// Knows about internal fences:\n//\n// `````markdown\n// ````markdown\n// ```javascript\n// foo();\n// ```\n// ````\n// `````\nfunction code(node, parent) {\n  var self = this\n  var value = node.value\n  var options = self.options\n  var marker = options.fence\n  var info = node.lang || ''\n  var fence\n\n  if (info && node.meta) {\n    info += space + node.meta\n  }\n\n  info = self.encode(self.escape(info, node))\n\n  // Without (needed) fences.\n  if (!info && !options.fences && value) {\n    // Throw when pedantic, in a list item which isn’t compiled using a tab.\n    if (\n      parent &&\n      parent.type === 'listItem' &&\n      options.listItemIndent !== 'tab' &&\n      options.pedantic\n    ) {\n      self.file.fail(\n        'Cannot indent code properly. See https://git.io/fxKR8',\n        node.position\n      )\n    }\n\n    return pad(value, 1)\n  }\n\n  fence = repeat(marker, Math.max(streak(value, marker) + 1, 3))\n\n  return fence + info + lineFeed + value + lineFeed + fence\n}\n"]},"metadata":{},"sourceType":"script"}