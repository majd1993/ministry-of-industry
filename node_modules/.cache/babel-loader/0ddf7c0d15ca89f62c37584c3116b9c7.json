{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = observeOnceEffect;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _effects = require(\"redux-saga/effects\");\n\nfunction observeOnceEffect(observable) {\n  return (0, _effects.call)( /*#__PURE__*/_regenerator[\"default\"].mark(function observeOnce() {\n    var subscription;\n    return _regenerator[\"default\"].wrap(function observeOnce$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return (0, _effects.call)(function () {\n              return new Promise(function (resolve, reject) {\n                subscription = observable.subscribe({\n                  complete: resolve,\n                  error: reject,\n                  next: resolve\n                });\n              });\n            });\n\n          case 3:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 4:\n            _context.prev = 4;\n            subscription && subscription.unsubscribe();\n            return _context.finish(4);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, observeOnce, null, [[0,, 4, 7]]);\n  }));\n}","map":{"version":3,"sources":["../../../src/sagas/effects/observeOnce.js"],"names":["subscription","complete","error","next","resolve"],"mappings":";;;;;;;;;;;AAAA,IAAA,QAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAEe,SAAA,iBAAA,CAAA,UAAA,EAAuC;AACpD,SAAO,CAAA,GAAA,QAAA,CAAA,IAAA,GAAA,aAAA,YAAA,CAAA,SAAA,CAAA,CAAA,IAAA,CAAK,SAAA,WAAA,GAAA;AAAA,QAAA,YAAA;AAAA,WAAA,YAAA,CAAA,SAAA,CAAA,CAAA,IAAA,CAAA,SAAA,YAAA,CAAA,QAAA,EAAA;AAAA,aAAA,CAAA,EAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,eAAA,CAAA;AAAA,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAID,mBAAM,CAAA,GAAA,QAAA,CAAA,IAAA,EACX,YAAA;AAAA,qBACE,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAAqB;AAC/BA,gBAAAA,YAAY,GAAG,UAAU,CAAV,SAAA,CAAqB;AAClCC,kBAAAA,QAAQ,EAD0B,OAAA;AAElCC,kBAAAA,KAAK,EAF6B,MAAA;AAGlCC,kBAAAA,IAAI,EAAEC;AAH4B,iBAArB,CAAfJ;AAFJ,eACE,CADF;AADK,aAAM,CAAN;;AAJC,eAAA,CAAA;AAAA,mBAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAAA,QAAA,CAAA,IAAA,CAAA;;AAAA,eAAA,CAAA;AAAA,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAeRA,YAAAA,YAAY,IAAIA,YAAY,CAA5BA,WAAgBA,EAAhBA;AAfQ,mBAAA,QAAA,CAAA,MAAA,CAAA,CAAA,CAAA;;AAAA,eAAA,CAAA;AAAA,eAAA,KAAA;AAAA,mBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,KAAA,EAAA,WAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA;AAAZ,GAAO,CAAA,CAAP;AAkBD","sourcesContent":["import { call } from 'redux-saga/effects';\n\nexport default function observeOnceEffect(observable) {\n  return call(function* observeOnce() {\n    let subscription;\n\n    try {\n      return yield call(\n        () =>\n          new Promise((resolve, reject) => {\n            subscription = observable.subscribe({\n              complete: resolve,\n              error: reject,\n              next: resolve\n            });\n          })\n      );\n    } finally {\n      subscription && subscription.unsubscribe();\n    }\n  });\n}\n"],"sourceRoot":"core:///"},"metadata":{},"sourceType":"script"}