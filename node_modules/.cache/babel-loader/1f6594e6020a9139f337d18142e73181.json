{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n/* eslint class-methods-use-this: \"off\" */\n\n\nvar _default = /*#__PURE__*/function () {\n  function _default() {\n    (0, _classCallCheck2.default)(this, _default);\n    this._phrases = [];\n  }\n\n  (0, _createClass2.default)(_default, [{\n    key: \"addFromString\",\n    value: function addFromString() {\n      throw new Error('JSGF is not supported');\n    }\n  }, {\n    key: \"phrases\",\n    get: function get() {\n      return this._phrases;\n    },\n    set: function set(value) {\n      if (Array.isArray(value)) {\n        this._phrases = value;\n      } else if (typeof value === 'string') {\n        this._phrases = [value];\n      } else {\n        throw new Error(\"The provided value is not an array or of type 'string'\");\n      }\n    }\n  }]);\n  return _default;\n}();\n\nexports.default = _default;","map":{"version":3,"sources":["../../../src/SpeechServices/SpeechToText/SpeechGrammarList.js"],"names":["value","Array"],"mappings":";;;;;;;;;;;;AAAA;;;;AAGE,WAAA,QAAA,GAAc;AAAA,KAAA,GAAA,gBAAA,CAAA,OAAA,EAAA,IAAA,EAAA,QAAA;AACZ,SAAA,QAAA,GAAA,EAAA;AACD;;;;oCAEe;AACd,YAAM,IAAA,KAAA,CAAN,uBAAM,CAAN;AACD;;;wBAEa;AACZ,aAAO,KAAP,QAAA;;sBAGUA,K,EAAO;AACjB,UAAIC,KAAK,CAALA,OAAAA,CAAJ,KAAIA,CAAJ,EAA0B;AACxB,aAAA,QAAA,GAAA,KAAA;AADF,OAAA,MAEO,IAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;AACpC,aAAA,QAAA,GAAgB,CAAhB,KAAgB,CAAhB;AADK,OAAA,MAEA;AACL,cAAM,IAAA,KAAA,CAAN,wDAAM,CAAN;AACD;AACF","sourcesContent":["/* eslint class-methods-use-this: \"off\" */\n\nexport default class {\n  constructor() {\n    this._phrases = [];\n  }\n\n  addFromString() {\n    throw new Error('JSGF is not supported');\n  }\n\n  get phrases() {\n    return this._phrases;\n  }\n\n  set phrases(value) {\n    if (Array.isArray(value)) {\n      this._phrases = value;\n    } else if (typeof value === 'string') {\n      this._phrases = [value];\n    } else {\n      throw new Error(`The provided value is not an array or of type 'string'`);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}