{"ast":null,"code":"\"use strict\";\n\nvar isArray_1 = require('../util/isArray');\n\nfunction isNumeric(val) {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray_1.isArray(val) && val - parseFloat(val) + 1 >= 0;\n}\n\nexports.isNumeric = isNumeric;\n;","map":{"version":3,"sources":["../../src/util/isNumeric.ts"],"names":[],"mappings":";;AAAA,IAAA,SAAA,GAAA,OAAA,CAAwB,iBAAxB,CAAA;;AAEA,SAAA,SAAA,CAA0B,GAA1B,EAAkC;AAChC;AACA;AACA;AACA;AACA,SAAO,CAAC,SAAA,CAAA,OAAA,CAAQ,GAAR,CAAD,IAAkB,GAAG,GAAG,UAAU,CAAC,GAAD,CAAhB,GAAwB,CAAzB,IAA+B,CAAvD;AACD;;AANe,OAAA,CAAA,SAAA,GAAS,SAAT;AAMf","sourcesContent":["import { isArray } from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}