{"ast":null,"code":"import _classCallCheck from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { Contracts } from \"./Contracts\";\nimport { DialogServiceConfigImpl } from \"./DialogServiceConfig\";\nimport { PropertyId } from \"./Exports\";\n/**\n * Class that defines configurations for the dialog service connector object for using a CustomCommands backend.\n * @class CustomCommandsConfig\n */\n\nexport var CustomCommandsConfig = /*#__PURE__*/function (_DialogServiceConfigI) {\n  _inherits(CustomCommandsConfig, _DialogServiceConfigI);\n\n  var _super = _createSuper(CustomCommandsConfig);\n\n  /**\n   * Creates an instance of CustomCommandsConfig.\n   */\n  function CustomCommandsConfig() {\n    _classCallCheck(this, CustomCommandsConfig);\n\n    return _super.call(this);\n  }\n  /**\n   * Creates an instance of the bot framework config with the specified subscription and region.\n   * @member CustomCommandsConfig.fromSubscription\n   * @function\n   * @public\n   * @param applicationId Speech Commands application id.\n   * @param subscription Subscription key associated with the bot\n   * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n   * @returns {CustomCommandsConfig} A new bot framework config.\n   */\n\n\n  _createClass(CustomCommandsConfig, [{\n    key: \"applicationId\",\n    get:\n    /**\n     * Gets the corresponding backend application identifier.\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\n     * @function\n     * @public\n     * @param {string} value - The application identifier to get.\n     */\n    function get() {\n      return this.getProperty(PropertyId.Conversation_ApplicationId);\n    },\n    set:\n    /**\n     * Sets the corresponding backend application identifier.\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\n     * @function\n     * @public\n     * @param {string} value - The application identifier to set.\n     */\n    function set(value) {\n      Contracts.throwIfNullOrWhitespace(value, \"value\");\n      this.setProperty(PropertyId.Conversation_ApplicationId, value);\n    }\n  }], [{\n    key: \"fromSubscription\",\n    value: function fromSubscription(applicationId, subscription, region) {\n      Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\n      Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\n      Contracts.throwIfNullOrWhitespace(region, \"region\");\n      var customCommandsConfig = new DialogServiceConfigImpl();\n      customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, \"custom_commands\");\n      customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\n      customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\n      customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\n      return customCommandsConfig;\n    }\n    /**\n     * Creates an instance of the bot framework config with the specified Speech Commands application id, authorization token and region.\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\n     * As configuration values are copied when creating a new recognizer, the new token value will not apply to recognizers that have already been created.\n     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\n     * @member CustomCommandsConfig.fromAuthorizationToken\n     * @function\n     * @public\n     * @param applicationId Speech Commands application id.\n     * @param authorizationToken The authorization token associated with the application.\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n     * @returns {CustomCommandsConfig} A new speech commands config.\n     */\n\n  }, {\n    key: \"fromAuthorizationToken\",\n    value: function fromAuthorizationToken(applicationId, authorizationToken, region) {\n      Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\n      Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\n      Contracts.throwIfNullOrWhitespace(region, \"region\");\n      var customCommandsConfig = new DialogServiceConfigImpl();\n      customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, \"custom_commands\");\n      customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\n      customCommandsConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\n      customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\n      return customCommandsConfig;\n    }\n  }]);\n\n  return CustomCommandsConfig;\n}(DialogServiceConfigImpl);","map":{"version":3,"sources":["src/sdk/CustomCommandsConfig.ts"],"names":[],"mappings":";;;;AAAA;AACA;AAEA,SAAS,SAAT,QAA0B,aAA1B;AACA,SAAS,uBAAT,QAAwC,uBAAxC;AACA,SAAS,UAAT,QAA2B,WAA3B;AAEA;;;AAGG;;AACH,WAAa,oBAAb;AAAA;;AAAA;;AAEI;;AAEG;AACH,kCAAA;AAAA;;AAAA;AAEC;AAED;;;;;;;;;AASG;;;AAlBP;AAAA;AAAA;AAwEI;;;;;;AAMG;AACH,mBAAwB;AACpB,aAAO,KAAK,WAAL,CAAiB,UAAU,CAAC,0BAA5B,CAAP;AACH,KAjFL;AAAA;AA4DI;;;;;;AAMG;AACH,iBAAyB,KAAzB,EAAsC;AAClC,MAAA,SAAS,CAAC,uBAAV,CAAkC,KAAlC,EAAyC,OAAzC;AACA,WAAK,WAAL,CAAiB,UAAU,CAAC,0BAA5B,EAAwD,KAAxD;AACH;AAtEL;AAAA;AAAA,WAmBW,0BAAwB,aAAxB,EAA+C,YAA/C,EAAqE,MAArE,EAAmF;AACtF,MAAA,SAAS,CAAC,uBAAV,CAAkC,aAAlC,EAAiD,eAAjD;AACA,MAAA,SAAS,CAAC,uBAAV,CAAkC,YAAlC,EAAgD,cAAhD;AACA,MAAA,SAAS,CAAC,uBAAV,CAAkC,MAAlC,EAA0C,QAA1C;AAEA,UAAM,oBAAoB,GAAyB,IAAI,uBAAJ,EAAnD;AACA,MAAA,oBAAoB,CAAC,WAArB,CAAiC,UAAU,CAAC,uBAA5C,EAAqE,iBAArE;AACA,MAAA,oBAAoB,CAAC,WAArB,CAAiC,UAAU,CAAC,0BAA5C,EAAwE,aAAxE;AACA,MAAA,oBAAoB,CAAC,WAArB,CAAiC,UAAU,CAAC,2BAA5C,EAAyE,YAAzE;AACA,MAAA,oBAAoB,CAAC,WAArB,CAAiC,UAAU,CAAC,8BAA5C,EAA4E,MAA5E;AACA,aAAO,oBAAP;AACH;AAED;;;;;;;;;;;;;;AAcG;;AA9CP;AAAA;AAAA,WA+CW,gCAA8B,aAA9B,EAAqD,kBAArD,EAAiF,MAAjF,EAA+F;AAClG,MAAA,SAAS,CAAC,uBAAV,CAAkC,aAAlC,EAAiD,eAAjD;AACA,MAAA,SAAS,CAAC,uBAAV,CAAkC,kBAAlC,EAAsD,oBAAtD;AACA,MAAA,SAAS,CAAC,uBAAV,CAAkC,MAAlC,EAA0C,QAA1C;AAEA,UAAM,oBAAoB,GAAyB,IAAI,uBAAJ,EAAnD;AACA,MAAA,oBAAoB,CAAC,WAArB,CAAiC,UAAU,CAAC,uBAA5C,EAAqE,iBAArE;AACA,MAAA,oBAAoB,CAAC,WAArB,CAAiC,UAAU,CAAC,0BAA5C,EAAwE,aAAxE;AACA,MAAA,oBAAoB,CAAC,WAArB,CAAiC,UAAU,CAAC,gCAA5C,EAA8E,kBAA9E;AACA,MAAA,oBAAoB,CAAC,WAArB,CAAiC,UAAU,CAAC,8BAA5C,EAA4E,MAA5E;AACA,aAAO,oBAAP;AACH;AA1DL;;AAAA;AAAA,EAA0C,uBAA1C","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\nimport { DialogServiceConfigImpl } from \"./DialogServiceConfig\";\r\nimport { PropertyId } from \"./Exports\";\r\n\r\n/**\r\n * Class that defines configurations for the dialog service connector object for using a CustomCommands backend.\r\n * @class CustomCommandsConfig\r\n */\r\nexport class CustomCommandsConfig extends DialogServiceConfigImpl {\r\n\r\n    /**\r\n     * Creates an instance of CustomCommandsConfig.\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the bot framework config with the specified subscription and region.\r\n     * @member CustomCommandsConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param applicationId Speech Commands application id.\r\n     * @param subscription Subscription key associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {CustomCommandsConfig} A new bot framework config.\r\n     */\r\n    public static fromSubscription(applicationId: string, subscription: string, region: string): CustomCommandsConfig {\r\n        Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\r\n        Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const customCommandsConfig: CustomCommandsConfig = new DialogServiceConfigImpl();\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, \"custom_commands\");\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return customCommandsConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the bot framework config with the specified Speech Commands application id, authorization token and region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * As configuration values are copied when creating a new recognizer, the new token value will not apply to recognizers that have already been created.\r\n     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member CustomCommandsConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param applicationId Speech Commands application id.\r\n     * @param authorizationToken The authorization token associated with the application.\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {CustomCommandsConfig} A new speech commands config.\r\n     */\r\n    public static fromAuthorizationToken(applicationId: string, authorizationToken: string, region: string): CustomCommandsConfig {\r\n        Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const customCommandsConfig: CustomCommandsConfig = new DialogServiceConfigImpl();\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, \"custom_commands\");\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return customCommandsConfig;\r\n    }\r\n\r\n    /**\r\n     * Sets the corresponding backend application identifier.\r\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to set.\r\n     */\r\n    public set applicationId(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.setProperty(PropertyId.Conversation_ApplicationId, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the corresponding backend application identifier.\r\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to get.\r\n     */\r\n    public get applicationId(): string {\r\n        return this.getProperty(PropertyId.Conversation_ApplicationId);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}