{"ast":null,"code":"import _inherits from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { FileAudioSource, MicAudioSource, PcmRecorder } from \"../../common.browser/Exports\";\nimport { Contracts } from \"../Contracts\";\nimport { AudioInputStream, PullAudioInputStreamCallback, PullAudioOutputStream, PushAudioOutputStream, PushAudioOutputStreamCallback, SpeakerAudioDestination } from \"../Exports\";\nimport { AudioFileWriter } from \"./AudioFileWriter\";\nimport { PullAudioInputStreamImpl } from \"./AudioInputStream\";\nimport { PushAudioOutputStreamImpl } from \"./AudioOutputStream\";\n/**\n * Represents audio input configuration used for specifying what type of input to use (microphone, file, stream).\n * @class AudioConfig\n * Updated in version 1.11.0\n */\n\nexport var AudioConfig = /*#__PURE__*/function () {\n  function AudioConfig() {\n    _classCallCheck(this, AudioConfig);\n  }\n\n  _createClass(AudioConfig, null, [{\n    key: \"fromDefaultMicrophoneInput\",\n    value:\n    /**\n     * Creates an AudioConfig object representing the default microphone on the system.\n     * @member AudioConfig.fromDefaultMicrophoneInput\n     * @function\n     * @public\n     * @returns {AudioConfig} The audio input configuration being created.\n     */\n    function fromDefaultMicrophoneInput() {\n      var pcmRecorder = new PcmRecorder();\n      return new AudioConfigImpl(new MicAudioSource(pcmRecorder));\n    }\n    /**\n     * Creates an AudioConfig object representing a microphone with the specified device ID.\n     * @member AudioConfig.fromMicrophoneInput\n     * @function\n     * @public\n     * @param {string | undefined} deviceId - Specifies the device ID of the microphone to be used.\n     *        Default microphone is used the value is omitted.\n     * @returns {AudioConfig} The audio input configuration being created.\n     */\n\n  }, {\n    key: \"fromMicrophoneInput\",\n    value: function fromMicrophoneInput(deviceId) {\n      var pcmRecorder = new PcmRecorder();\n      return new AudioConfigImpl(new MicAudioSource(pcmRecorder, deviceId));\n    }\n    /**\n     * Creates an AudioConfig object representing the specified file.\n     * @member AudioConfig.fromWavFileInput\n     * @function\n     * @public\n     * @param {File} fileName - Specifies the audio input file. Currently, only WAV / PCM is supported.\n     * @returns {AudioConfig} The audio input configuration being created.\n     */\n\n  }, {\n    key: \"fromWavFileInput\",\n    value: function fromWavFileInput(file) {\n      return new AudioConfigImpl(new FileAudioSource(file));\n    }\n    /**\n     * Creates an AudioConfig object representing the specified stream.\n     * @member AudioConfig.fromStreamInput\n     * @function\n     * @public\n     * @param {AudioInputStream | PullAudioInputStreamCallback} audioStream - Specifies the custom audio input\n     *        stream. Currently, only WAV / PCM is supported.\n     * @returns {AudioConfig} The audio input configuration being created.\n     */\n\n  }, {\n    key: \"fromStreamInput\",\n    value: function fromStreamInput(audioStream) {\n      if (audioStream instanceof PullAudioInputStreamCallback) {\n        return new AudioConfigImpl(new PullAudioInputStreamImpl(audioStream));\n      }\n\n      if (audioStream instanceof AudioInputStream) {\n        return new AudioConfigImpl(audioStream);\n      }\n\n      throw new Error(\"Not Supported Type\");\n    }\n    /**\n     * Creates an AudioConfig object representing the default speaker.\n     * @member AudioConfig.fromDefaultSpeakerOutput\n     * @function\n     * @public\n     * @returns {AudioConfig} The audio output configuration being created.\n     * Added in version 1.11.0\n     */\n\n  }, {\n    key: \"fromDefaultSpeakerOutput\",\n    value: function fromDefaultSpeakerOutput() {\n      return new AudioOutputConfigImpl(new SpeakerAudioDestination());\n    }\n    /**\n     * Creates an AudioConfig object representing the custom IPlayer object.\n     * You can use the IPlayer object to control pause, resume, etc.\n     * @member AudioConfig.fromSpeakerOutput\n     * @function\n     * @public\n     * @param {IPlayer} player - the IPlayer object for playback.\n     * @returns {AudioConfig} The audio output configuration being created.\n     * Added in version 1.12.0\n     */\n\n  }, {\n    key: \"fromSpeakerOutput\",\n    value: function fromSpeakerOutput(player) {\n      if (player === undefined) {\n        return AudioConfig.fromDefaultSpeakerOutput();\n      }\n\n      if (player instanceof SpeakerAudioDestination) {\n        return new AudioOutputConfigImpl(player);\n      }\n\n      throw new Error(\"Not Supported Type\");\n    }\n    /**\n     * Creates an AudioConfig object representing a specified output audio file\n     * @member AudioConfig.fromAudioFileOutput\n     * @function\n     * @public\n     * @param {PathLike} filename - the filename of the output audio file\n     * @returns {AudioConfig} The audio output configuration being created.\n     * Added in version 1.11.0\n     */\n\n  }, {\n    key: \"fromAudioFileOutput\",\n    value: function fromAudioFileOutput(filename) {\n      return new AudioOutputConfigImpl(new AudioFileWriter(filename));\n    }\n    /**\n     * Creates an AudioConfig object representing a specified audio output stream\n     * @member AudioConfig.fromStreamOutput\n     * @function\n     * @public\n     * @param {AudioOutputStream | PushAudioOutputStreamCallback} audioStream - Specifies the custom audio output\n     *        stream.\n     * @returns {AudioConfig} The audio output configuration being created.\n     * Added in version 1.11.0\n     */\n\n  }, {\n    key: \"fromStreamOutput\",\n    value: function fromStreamOutput(audioStream) {\n      if (audioStream instanceof PushAudioOutputStreamCallback) {\n        return new AudioOutputConfigImpl(new PushAudioOutputStreamImpl(audioStream));\n      }\n\n      if (audioStream instanceof PushAudioOutputStream) {\n        return new AudioOutputConfigImpl(audioStream);\n      }\n\n      if (audioStream instanceof PullAudioOutputStream) {\n        return new AudioOutputConfigImpl(audioStream);\n      }\n\n      throw new Error(\"Not Supported Type\");\n    }\n  }]);\n\n  return AudioConfig;\n}();\n/**\n * Represents audio input stream used for custom audio input configurations.\n * @private\n * @class AudioConfigImpl\n */\n// tslint:disable-next-line:max-classes-per-file\n\nexport var AudioConfigImpl = /*#__PURE__*/function (_AudioConfig) {\n  _inherits(AudioConfigImpl, _AudioConfig);\n\n  var _super = _createSuper(AudioConfigImpl);\n\n  /**\n   * Creates and initializes an instance of this class.\n   * @constructor\n   * @param {IAudioSource} source - An audio source.\n   */\n  function AudioConfigImpl(source) {\n    var _this;\n\n    _classCallCheck(this, AudioConfigImpl);\n\n    _this = _super.call(this);\n    _this.privSource = source;\n    return _this;\n  }\n  /**\n   * Format information for the audio\n   */\n\n\n  _createClass(AudioConfigImpl, [{\n    key: \"format\",\n    get: function get() {\n      return this.privSource.format;\n    }\n    /**\n     * @member AudioConfigImpl.prototype.close\n     * @function\n     * @public\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.privSource.turnOff();\n    }\n    /**\n     * @member AudioConfigImpl.prototype.id\n     * @function\n     * @public\n     */\n\n  }, {\n    key: \"id\",\n    value: function id() {\n      return this.privSource.id();\n    }\n    /**\n     * @member AudioConfigImpl.prototype.blob\n     * @function\n     * @public\n     */\n\n  }, {\n    key: \"blob\",\n    get: function get() {\n      return this.privSource.blob;\n    }\n    /**\n     * @member AudioConfigImpl.prototype.turnOn\n     * @function\n     * @public\n     * @returns {Promise<boolean>} A promise.\n     */\n\n  }, {\n    key: \"turnOn\",\n    value: function turnOn() {\n      return this.privSource.turnOn();\n    }\n    /**\n     * @member AudioConfigImpl.prototype.attach\n     * @function\n     * @public\n     * @param {string} audioNodeId - The audio node id.\n     * @returns {Promise<IAudioStreamNode>} A promise.\n     */\n\n  }, {\n    key: \"attach\",\n    value: function attach(audioNodeId) {\n      return this.privSource.attach(audioNodeId);\n    }\n    /**\n     * @member AudioConfigImpl.prototype.detach\n     * @function\n     * @public\n     * @param {string} audioNodeId - The audio node id.\n     */\n\n  }, {\n    key: \"detach\",\n    value: function detach(audioNodeId) {\n      return this.privSource.detach(audioNodeId);\n    }\n    /**\n     * @member AudioConfigImpl.prototype.turnOff\n     * @function\n     * @public\n     * @returns {Promise<boolean>} A promise.\n     */\n\n  }, {\n    key: \"turnOff\",\n    value: function turnOff() {\n      return this.privSource.turnOff();\n    }\n    /**\n     * @member AudioConfigImpl.prototype.events\n     * @function\n     * @public\n     * @returns {EventSource<AudioSourceEvent>} An event source for audio events.\n     */\n\n  }, {\n    key: \"events\",\n    get: function get() {\n      return this.privSource.events;\n    }\n  }, {\n    key: \"setProperty\",\n    value: function setProperty(name, value) {\n      Contracts.throwIfNull(value, \"value\");\n\n      if (undefined !== this.privSource.setProperty) {\n        this.privSource.setProperty(name, value);\n      } else {\n        throw new Error(\"This AudioConfig instance does not support setting properties.\");\n      }\n    }\n  }, {\n    key: \"getProperty\",\n    value: function getProperty(name, def) {\n      if (undefined !== this.privSource.getProperty) {\n        return this.privSource.getProperty(name, def);\n      } else {\n        throw new Error(\"This AudioConfig instance does not support getting properties.\");\n      }\n\n      return def;\n    }\n  }, {\n    key: \"deviceInfo\",\n    get: function get() {\n      return this.privSource.deviceInfo;\n    }\n  }]);\n\n  return AudioConfigImpl;\n}(AudioConfig); // tslint:disable-next-line:max-classes-per-file\n\nexport var AudioOutputConfigImpl = /*#__PURE__*/function (_AudioConfig2) {\n  _inherits(AudioOutputConfigImpl, _AudioConfig2);\n\n  var _super2 = _createSuper(AudioOutputConfigImpl);\n\n  /**\n   * Creates and initializes an instance of this class.\n   * @constructor\n   * @param {IAudioDestination} destination - An audio destination.\n   */\n  function AudioOutputConfigImpl(destination) {\n    var _this2;\n\n    _classCallCheck(this, AudioOutputConfigImpl);\n\n    _this2 = _super2.call(this);\n    _this2.privDestination = destination;\n    return _this2;\n  }\n\n  _createClass(AudioOutputConfigImpl, [{\n    key: \"format\",\n    set: function set(format) {\n      this.privDestination.format = format;\n    }\n  }, {\n    key: \"write\",\n    value: function write(buffer) {\n      this.privDestination.write(buffer);\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.privDestination.close();\n    }\n  }, {\n    key: \"id\",\n    value: function id() {\n      return this.privDestination.id();\n    }\n  }, {\n    key: \"setProperty\",\n    value: function setProperty(name, value) {\n      throw new Error(\"This AudioConfig instance does not support setting properties.\");\n    }\n  }, {\n    key: \"getProperty\",\n    value: function getProperty(name, def) {\n      throw new Error(\"This AudioConfig instance does not support getting properties.\");\n    }\n  }]);\n\n  return AudioOutputConfigImpl;\n}(AudioConfig);","map":{"version":3,"sources":["src/sdk/Audio/AudioConfig.ts"],"names":[],"mappings":";;;;AAAA;AACA;AAGA,SACI,eADJ,EAEI,cAFJ,EAGI,WAHJ,QAIO,8BAJP;AAeA,SAAS,SAAT,QAA0B,cAA1B;AACA,SACI,gBADJ,EAOI,4BAPJ,EAQI,qBARJ,EASI,qBATJ,EAUI,6BAVJ,EAWI,uBAXJ,QAYO,YAZP;AAaA,SAAS,eAAT,QAAgC,mBAAhC;AACA,SAAS,wBAAT,QAAmE,oBAAnE;AACA,SAAoC,yBAApC,QAAqE,qBAArE;AAGA;;;;AAIG;;AACH,WAAsB,WAAtB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AACI;;;;;;AAMG;AACI,0CAAiC;AACpC,UAAM,WAAW,GAAG,IAAI,WAAJ,EAApB;AACA,aAAO,IAAI,eAAJ,CAAoB,IAAI,cAAJ,CAAmB,WAAnB,CAApB,CAAP;AACH;AAED;;;;;;;;AAQG;;AArBP;AAAA;AAAA,WAsBW,6BAA2B,QAA3B,EAA4C;AAC/C,UAAM,WAAW,GAAG,IAAI,WAAJ,EAApB;AACA,aAAO,IAAI,eAAJ,CAAoB,IAAI,cAAJ,CAAmB,WAAnB,EAAgC,QAAhC,CAApB,CAAP;AACH;AAED;;;;;;;AAOG;;AAlCP;AAAA;AAAA,WAmCW,0BAAwB,IAAxB,EAAkC;AACrC,aAAO,IAAI,eAAJ,CAAoB,IAAI,eAAJ,CAAoB,IAApB,CAApB,CAAP;AACH;AAED;;;;;;;;AAQG;;AA/CP;AAAA;AAAA,WAgDW,yBAAuB,WAAvB,EAAmF;AACtF,UAAI,WAAW,YAAY,4BAA3B,EAAyD;AACrD,eAAO,IAAI,eAAJ,CAAoB,IAAI,wBAAJ,CAA6B,WAA7B,CAApB,CAAP;AACH;;AAED,UAAI,WAAW,YAAY,gBAA3B,EAA6C;AACzC,eAAO,IAAI,eAAJ,CAAoB,WAApB,CAAP;AACH;;AAED,YAAM,IAAI,KAAJ,CAAU,oBAAV,CAAN;AACH;AAED;;;;;;;AAOG;;AAnEP;AAAA;AAAA,WAoEW,oCAA+B;AAClC,aAAO,IAAI,qBAAJ,CAA0B,IAAI,uBAAJ,EAA1B,CAAP;AACH;AAED;;;;;;;;;AASG;;AAjFP;AAAA;AAAA,WAkFW,2BAAyB,MAAzB,EAAyC;AAC5C,UAAI,MAAM,KAAK,SAAf,EAA0B;AACtB,eAAO,WAAW,CAAC,wBAAZ,EAAP;AACH;;AACD,UAAI,MAAM,YAAY,uBAAtB,EAA+C;AAC3C,eAAO,IAAI,qBAAJ,CAA0B,MAA1B,CAAP;AACH;;AAED,YAAM,IAAI,KAAJ,CAAU,oBAAV,CAAN;AACH;AAED;;;;;;;;AAQG;;AArGP;AAAA;AAAA,WAsGW,6BAA2B,QAA3B,EAA6C;AAChD,aAAO,IAAI,qBAAJ,CAA0B,IAAI,eAAJ,CAAoB,QAApB,CAA1B,CAAP;AACH;AAED;;;;;;;;;AASG;;AAnHP;AAAA;AAAA,WAoHW,0BAAwB,WAAxB,EAAsF;AACzF,UAAI,WAAW,YAAY,6BAA3B,EAA0D;AACtD,eAAO,IAAI,qBAAJ,CAA0B,IAAI,yBAAJ,CAA8B,WAA9B,CAA1B,CAAP;AACH;;AAED,UAAI,WAAW,YAAY,qBAA3B,EAAkD;AAC9C,eAAO,IAAI,qBAAJ,CAA0B,WAA1B,CAAP;AACH;;AAED,UAAI,WAAW,YAAY,qBAA3B,EAAkD;AAC9C,eAAO,IAAI,qBAAJ,CAA0B,WAA1B,CAAP;AACH;;AAED,YAAM,IAAI,KAAJ,CAAU,oBAAV,CAAN;AACH;AAlIL;;AAAA;AAAA;AAmKA;;;;AAIG;AACH;;AACA,WAAa,eAAb;AAAA;;AAAA;;AAGI;;;;AAIG;AACH,2BAAmB,MAAnB,EAAuC;AAAA;;AAAA;;AACnC;AACA,UAAK,UAAL,GAAkB,MAAlB;AAFmC;AAGtC;AAED;;AAEG;;;AAfP;AAAA;AAAA,SAgBI,eAAiB;AACb,aAAO,KAAK,UAAL,CAAgB,MAAvB;AACH;AAED;;;;AAIG;;AAxBP;AAAA;AAAA,WAyBW,iBAAK;AACR,WAAK,UAAL,CAAgB,OAAhB;AACH;AAED;;;;AAIG;;AAjCP;AAAA;AAAA,WAkCW,cAAE;AACL,aAAO,KAAK,UAAL,CAAgB,EAAhB,EAAP;AACH;AAED;;;;AAIG;;AA1CP;AAAA;AAAA,SA2CI,eAAe;AACX,aAAO,KAAK,UAAL,CAAgB,IAAvB;AACH;AAED;;;;;AAKG;;AApDP;AAAA;AAAA,WAqDW,kBAAM;AACT,aAAO,KAAK,UAAL,CAAgB,MAAhB,EAAP;AACH;AAED;;;;;;AAMG;;AA/DP;AAAA;AAAA,WAgEW,gBAAO,WAAP,EAA0B;AAC7B,aAAO,KAAK,UAAL,CAAgB,MAAhB,CAAuB,WAAvB,CAAP;AACH;AAED;;;;;AAKG;;AAzEP;AAAA;AAAA,WA0EW,gBAAO,WAAP,EAA0B;AAC7B,aAAO,KAAK,UAAL,CAAgB,MAAhB,CAAuB,WAAvB,CAAP;AACH;AAED;;;;;AAKG;;AAnFP;AAAA;AAAA,WAoFW,mBAAO;AACV,aAAO,KAAK,UAAL,CAAgB,OAAhB,EAAP;AACH;AAED;;;;;AAKG;;AA7FP;AAAA;AAAA,SA8FI,eAAiB;AACb,aAAO,KAAK,UAAL,CAAgB,MAAvB;AACH;AAhGL;AAAA;AAAA,WAkGW,qBAAY,IAAZ,EAA0B,KAA1B,EAAuC;AAC1C,MAAA,SAAS,CAAC,WAAV,CAAsB,KAAtB,EAA6B,OAA7B;;AAEA,UAAI,SAAS,KAAK,KAAK,UAAL,CAAgB,WAAlC,EAA+C;AAC3C,aAAK,UAAL,CAAgB,WAAhB,CAA4B,IAA5B,EAAkC,KAAlC;AACH,OAFD,MAEO;AACH,cAAM,IAAI,KAAJ,CAAU,gEAAV,CAAN;AACH;AAEJ;AA3GL;AAAA;AAAA,WA6GW,qBAAY,IAAZ,EAA0B,GAA1B,EAAsC;AACzC,UAAI,SAAS,KAAK,KAAK,UAAL,CAAgB,WAAlC,EAA+C;AAC3C,eAAO,KAAK,UAAL,CAAgB,WAAhB,CAA4B,IAA5B,EAAkC,GAAlC,CAAP;AACH,OAFD,MAEO;AACH,cAAM,IAAI,KAAJ,CAAU,gEAAV,CAAN;AACH;;AAED,aAAO,GAAP;AACH;AArHL;AAAA;AAAA,SAuHI,eAAqB;AACjB,aAAO,KAAK,UAAL,CAAgB,UAAvB;AACH;AAzHL;;AAAA;AAAA,EAAqC,WAArC,E,CA4HA;;AACA,WAAa,qBAAb;AAAA;;AAAA;;AAGI;;;;AAIG;AACH,iCAAmB,WAAnB,EAAiD;AAAA;;AAAA;;AAC7C;AACA,WAAK,eAAL,GAAuB,WAAvB;AAF6C;AAGhD;;AAXL;AAAA;AAAA,SAaI,aAAkB,MAAlB,EAA2C;AACvC,WAAK,eAAL,CAAqB,MAArB,GAA8B,MAA9B;AACH;AAfL;AAAA;AAAA,WAiBW,eAAM,MAAN,EAAyB;AAC5B,WAAK,eAAL,CAAqB,KAArB,CAA2B,MAA3B;AACH;AAnBL;AAAA;AAAA,WAqBW,iBAAK;AACR,WAAK,eAAL,CAAqB,KAArB;AACH;AAvBL;AAAA;AAAA,WAyBW,cAAE;AACL,aAAO,KAAK,eAAL,CAAqB,EAArB,EAAP;AACH;AA3BL;AAAA;AAAA,WA6BW,qBAAY,IAAZ,EAA0B,KAA1B,EAAuC;AAC1C,YAAM,IAAI,KAAJ,CAAU,gEAAV,CAAN;AACH;AA/BL;AAAA;AAAA,WAiCW,qBAAY,IAAZ,EAA0B,GAA1B,EAAsC;AACzC,YAAM,IAAI,KAAJ,CAAU,gEAAV,CAAN;AACH;AAnCL;;AAAA;AAAA,EAA2C,WAA3C","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PathLike } from \"fs\";\r\nimport {\r\n    FileAudioSource,\r\n    MicAudioSource,\r\n    PcmRecorder,\r\n} from \"../../common.browser/Exports\";\r\nimport { ISpeechConfigAudioDevice } from \"../../common.speech/Exports\";\r\nimport {\r\n    AudioSourceEvent,\r\n    Deferred,\r\n    EventSource,\r\n    IAudioDestination,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    Promise\r\n} from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    AudioInputStream,\r\n    AudioOutputStream,\r\n    AudioStreamFormat,\r\n    IPlayer,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    PullAudioInputStreamCallback,\r\n    PullAudioOutputStream,\r\n    PushAudioOutputStream,\r\n    PushAudioOutputStreamCallback,\r\n    SpeakerAudioDestination\r\n} from \"../Exports\";\r\nimport { AudioFileWriter } from \"./AudioFileWriter\";\r\nimport { PullAudioInputStreamImpl, PushAudioInputStreamImpl } from \"./AudioInputStream\";\r\nimport { PullAudioOutputStreamImpl, PushAudioOutputStreamImpl } from \"./AudioOutputStream\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\r\n\r\n/**\r\n * Represents audio input configuration used for specifying what type of input to use (microphone, file, stream).\r\n * @class AudioConfig\r\n * Updated in version 1.11.0\r\n */\r\nexport abstract class AudioConfig {\r\n    /**\r\n     * Creates an AudioConfig object representing the default microphone on the system.\r\n     * @member AudioConfig.fromDefaultMicrophoneInput\r\n     * @function\r\n     * @public\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromDefaultMicrophoneInput(): AudioConfig {\r\n        const pcmRecorder = new PcmRecorder();\r\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a microphone with the specified device ID.\r\n     * @member AudioConfig.fromMicrophoneInput\r\n     * @function\r\n     * @public\r\n     * @param {string | undefined} deviceId - Specifies the device ID of the microphone to be used.\r\n     *        Default microphone is used the value is omitted.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromMicrophoneInput(deviceId?: string): AudioConfig {\r\n        const pcmRecorder = new PcmRecorder();\r\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder, deviceId));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the specified file.\r\n     * @member AudioConfig.fromWavFileInput\r\n     * @function\r\n     * @public\r\n     * @param {File} fileName - Specifies the audio input file. Currently, only WAV / PCM is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromWavFileInput(file: File): AudioConfig {\r\n        return new AudioConfigImpl(new FileAudioSource(file));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the specified stream.\r\n     * @member AudioConfig.fromStreamInput\r\n     * @function\r\n     * @public\r\n     * @param {AudioInputStream | PullAudioInputStreamCallback} audioStream - Specifies the custom audio input\r\n     *        stream. Currently, only WAV / PCM is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromStreamInput(audioStream: AudioInputStream | PullAudioInputStreamCallback): AudioConfig {\r\n        if (audioStream instanceof PullAudioInputStreamCallback) {\r\n            return new AudioConfigImpl(new PullAudioInputStreamImpl(audioStream as PullAudioInputStreamCallback));\r\n        }\r\n\r\n        if (audioStream instanceof AudioInputStream) {\r\n            return new AudioConfigImpl(audioStream as PushAudioInputStreamImpl);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the default speaker.\r\n     * @member AudioConfig.fromDefaultSpeakerOutput\r\n     * @function\r\n     * @public\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromDefaultSpeakerOutput(): AudioConfig {\r\n        return new AudioOutputConfigImpl(new SpeakerAudioDestination());\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the custom IPlayer object.\r\n     * You can use the IPlayer object to control pause, resume, etc.\r\n     * @member AudioConfig.fromSpeakerOutput\r\n     * @function\r\n     * @public\r\n     * @param {IPlayer} player - the IPlayer object for playback.\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.12.0\r\n     */\r\n    public static fromSpeakerOutput(player?: IPlayer): AudioConfig {\r\n        if (player === undefined) {\r\n            return AudioConfig.fromDefaultSpeakerOutput();\r\n        }\r\n        if (player instanceof SpeakerAudioDestination) {\r\n            return new AudioOutputConfigImpl(player as SpeakerAudioDestination);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a specified output audio file\r\n     * @member AudioConfig.fromAudioFileOutput\r\n     * @function\r\n     * @public\r\n     * @param {PathLike} filename - the filename of the output audio file\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromAudioFileOutput(filename: PathLike): AudioConfig {\r\n        return new AudioOutputConfigImpl(new AudioFileWriter(filename));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a specified audio output stream\r\n     * @member AudioConfig.fromStreamOutput\r\n     * @function\r\n     * @public\r\n     * @param {AudioOutputStream | PushAudioOutputStreamCallback} audioStream - Specifies the custom audio output\r\n     *        stream.\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromStreamOutput(audioStream: AudioOutputStream | PushAudioOutputStreamCallback): AudioConfig {\r\n        if (audioStream instanceof PushAudioOutputStreamCallback) {\r\n            return new AudioOutputConfigImpl(new PushAudioOutputStreamImpl(audioStream as PushAudioOutputStreamCallback));\r\n        }\r\n\r\n        if (audioStream instanceof PushAudioOutputStream) {\r\n            return new AudioOutputConfigImpl(audioStream as PushAudioOutputStreamImpl);\r\n        }\r\n\r\n        if (audioStream instanceof PullAudioOutputStream) {\r\n            return new AudioOutputConfigImpl(audioStream as PullAudioOutputStreamImpl);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member SpeechConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member SpeechConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string, def?: string): string;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class AudioConfigImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioConfigImpl extends AudioConfig implements IAudioSource {\r\n    private privSource: IAudioSource;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {IAudioSource} source - An audio source.\r\n     */\r\n    public constructor(source: IAudioSource) {\r\n        super();\r\n        this.privSource = source;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return this.privSource.format;\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privSource.turnOff();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.id\r\n     * @function\r\n     * @public\r\n     */\r\n    public id(): string {\r\n        return this.privSource.id();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.blob\r\n     * @function\r\n     * @public\r\n     */\r\n    public get blob(): Promise<Blob | Buffer> {\r\n        return this.privSource.blob;\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.turnOn\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<boolean>} A promise.\r\n     */\r\n    public turnOn(): Promise<boolean> {\r\n        return this.privSource.turnOn();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.attach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     * @returns {Promise<IAudioStreamNode>} A promise.\r\n     */\r\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        return this.privSource.attach(audioNodeId);\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.detach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     */\r\n    public detach(audioNodeId: string): void {\r\n        return this.privSource.detach(audioNodeId);\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.turnOff\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<boolean>} A promise.\r\n     */\r\n    public turnOff(): Promise<boolean> {\r\n        return this.privSource.turnOff();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.events\r\n     * @function\r\n     * @public\r\n     * @returns {EventSource<AudioSourceEvent>} An event source for audio events.\r\n     */\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privSource.events;\r\n    }\r\n\r\n    public setProperty(name: string, value: string): void {\r\n        Contracts.throwIfNull(value, \"value\");\r\n\r\n        if (undefined !== this.privSource.setProperty) {\r\n            this.privSource.setProperty(name, value);\r\n        } else {\r\n            throw new Error(\"This AudioConfig instance does not support setting properties.\");\r\n        }\r\n\r\n    }\r\n\r\n    public getProperty(name: string, def?: string): string {\r\n        if (undefined !== this.privSource.getProperty) {\r\n            return this.privSource.getProperty(name, def);\r\n        } else {\r\n            throw new Error(\"This AudioConfig instance does not support getting properties.\");\r\n        }\r\n\r\n        return def;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.privSource.deviceInfo;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioOutputConfigImpl extends AudioConfig implements IAudioDestination {\r\n    private privDestination: IAudioDestination;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {IAudioDestination} destination - An audio destination.\r\n     */\r\n    public constructor(destination: IAudioDestination) {\r\n        super();\r\n        this.privDestination = destination;\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        this.privDestination.format = format;\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        this.privDestination.write(buffer);\r\n    }\r\n\r\n    public close(): void {\r\n        this.privDestination.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privDestination.id();\r\n    }\r\n\r\n    public setProperty(name: string, value: string): void {\r\n        throw new Error(\"This AudioConfig instance does not support setting properties.\");\r\n    }\r\n\r\n    public getProperty(name: string, def?: string): string {\r\n        throw new Error(\"This AudioConfig instance does not support getting properties.\");\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}