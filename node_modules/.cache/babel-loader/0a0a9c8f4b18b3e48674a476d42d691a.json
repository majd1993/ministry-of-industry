{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Exports_1 = require(\"../common/Exports\");\n\nvar IAuthentication_1 = require(\"./IAuthentication\");\n\nvar AuthHeader = \"Ocp-Apim-Subscription-Key\";\n/**\n * @class\n */\n\nvar CognitiveSubscriptionKeyAuthentication =\n/** @class */\nfunction () {\n  /**\n   * Creates and initializes an instance of the CognitiveSubscriptionKeyAuthentication class.\n   * @constructor\n   * @param {string} subscriptionKey - The subscription key\n   */\n  function CognitiveSubscriptionKeyAuthentication(subscriptionKey) {\n    var _this = this;\n    /**\n     * Fetches the subscription key.\n     * @member\n     * @function\n     * @public\n     * @param {string} authFetchEventId - The id to fetch.\n     */\n\n\n    this.fetch = function (authFetchEventId) {\n      return Exports_1.PromiseHelper.fromResult(_this.privAuthInfo);\n    };\n    /**\n     * Fetches the subscription key.\n     * @member\n     * @function\n     * @public\n     * @param {string} authFetchEventId - The id to fetch.\n     */\n\n\n    this.fetchOnExpiry = function (authFetchEventId) {\n      return Exports_1.PromiseHelper.fromResult(_this.privAuthInfo);\n    };\n\n    if (!subscriptionKey) {\n      throw new Exports_1.ArgumentNullError(\"subscriptionKey\");\n    }\n\n    this.privAuthInfo = new IAuthentication_1.AuthInfo(AuthHeader, subscriptionKey);\n  }\n\n  return CognitiveSubscriptionKeyAuthentication;\n}();\n\nexports.CognitiveSubscriptionKeyAuthentication = CognitiveSubscriptionKeyAuthentication;","map":{"version":3,"sources":["src/common.speech/CognitiveSubscriptionKeyAuthentication.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;AAEA,IAAA,SAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AACA,IAAA,iBAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAEA,IAAM,UAAU,GAAW,2BAA3B;AAEA;;AAEG;;AACH,IAAA,sCAAA;AAAA;AAAA,YAAA;AAGI;;;;AAIG;AACH,WAAA,sCAAA,CAAY,eAAZ,EAAmC;AAAnC,QAAA,KAAA,GAAA,IAAA;AAQA;;;;;;AAMG;;;AACI,SAAA,KAAA,GAAQ,UAAC,gBAAD,EAAyB;AACpC,aAAO,SAAA,CAAA,aAAA,CAAc,UAAd,CAAyB,KAAI,CAAC,YAA9B,CAAP;AACH,KAFM;AAIP;;;;;;AAMG;;;AACI,SAAA,aAAA,GAAgB,UAAC,gBAAD,EAAyB;AAC5C,aAAO,SAAA,CAAA,aAAA,CAAc,UAAd,CAAyB,KAAI,CAAC,YAA9B,CAAP;AACH,KAFM;;AAzBH,QAAI,CAAC,eAAL,EAAsB;AAClB,YAAM,IAAI,SAAA,CAAA,iBAAJ,CAAsB,iBAAtB,CAAN;AACH;;AAED,SAAK,YAAL,GAAoB,IAAI,iBAAA,CAAA,QAAJ,CAAa,UAAb,EAAyB,eAAzB,CAApB;AACH;;AAuBL,SAAA,sCAAA;AAAC,CArCD,EAAA;;AAAa,OAAA,CAAA,sCAAA,GAAA,sCAAA","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError, Promise, PromiseHelper } from \"../common/Exports\";\r\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\r\n\r\nconst AuthHeader: string = \"Ocp-Apim-Subscription-Key\";\r\n\r\n/**\r\n * @class\r\n */\r\nexport class CognitiveSubscriptionKeyAuthentication implements IAuthentication {\r\n    private privAuthInfo: AuthInfo;\r\n\r\n    /**\r\n     * Creates and initializes an instance of the CognitiveSubscriptionKeyAuthentication class.\r\n     * @constructor\r\n     * @param {string} subscriptionKey - The subscription key\r\n     */\r\n    constructor(subscriptionKey: string) {\r\n        if (!subscriptionKey) {\r\n            throw new ArgumentNullError(\"subscriptionKey\");\r\n        }\r\n\r\n        this.privAuthInfo = new AuthInfo(AuthHeader, subscriptionKey);\r\n    }\r\n\r\n    /**\r\n     * Fetches the subscription key.\r\n     * @member\r\n     * @function\r\n     * @public\r\n     * @param {string} authFetchEventId - The id to fetch.\r\n     */\r\n    public fetch = (authFetchEventId: string): Promise<AuthInfo> => {\r\n        return PromiseHelper.fromResult(this.privAuthInfo);\r\n    }\r\n\r\n    /**\r\n     * Fetches the subscription key.\r\n     * @member\r\n     * @function\r\n     * @public\r\n     * @param {string} authFetchEventId - The id to fetch.\r\n     */\r\n    public fetchOnExpiry = (authFetchEventId: string): Promise<AuthInfo> => {\r\n        return PromiseHelper.fromResult(this.privAuthInfo);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}