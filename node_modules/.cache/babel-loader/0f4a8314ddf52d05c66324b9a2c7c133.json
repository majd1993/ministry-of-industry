{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Error_1 = require(\"./Error\");\n\nvar Guid_1 = require(\"./Guid\");\n\nvar MessageType;\n\n(function (MessageType) {\n  MessageType[MessageType[\"Text\"] = 0] = \"Text\";\n  MessageType[MessageType[\"Binary\"] = 1] = \"Binary\";\n})(MessageType = exports.MessageType || (exports.MessageType = {}));\n\nvar ConnectionMessage =\n/** @class */\nfunction () {\n  function ConnectionMessage(messageType, body, headers, id) {\n    this.privBody = null;\n\n    if (messageType === MessageType.Text && body && !(typeof body === \"string\")) {\n      throw new Error_1.InvalidOperationError(\"Payload must be a string\");\n    }\n\n    if (messageType === MessageType.Binary && body && !(body instanceof ArrayBuffer)) {\n      throw new Error_1.InvalidOperationError(\"Payload must be ArrayBuffer\");\n    }\n\n    this.privMessageType = messageType;\n    this.privBody = body;\n    this.privHeaders = headers ? headers : {};\n    this.privId = id ? id : Guid_1.createNoDashGuid();\n\n    switch (this.messageType) {\n      case MessageType.Binary:\n        this.privSize = this.binaryBody !== null ? this.binaryBody.byteLength : 0;\n        break;\n\n      case MessageType.Text:\n        this.privSize = this.textBody.length;\n    }\n  }\n\n  Object.defineProperty(ConnectionMessage.prototype, \"messageType\", {\n    get: function get() {\n      return this.privMessageType;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ConnectionMessage.prototype, \"headers\", {\n    get: function get() {\n      return this.privHeaders;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ConnectionMessage.prototype, \"body\", {\n    get: function get() {\n      return this.privBody;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ConnectionMessage.prototype, \"textBody\", {\n    get: function get() {\n      if (this.privMessageType === MessageType.Binary) {\n        throw new Error_1.InvalidOperationError(\"Not supported for binary message\");\n      }\n\n      return this.privBody;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ConnectionMessage.prototype, \"binaryBody\", {\n    get: function get() {\n      if (this.privMessageType === MessageType.Text) {\n        throw new Error_1.InvalidOperationError(\"Not supported for text message\");\n      }\n\n      return this.privBody;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ConnectionMessage.prototype, \"id\", {\n    get: function get() {\n      return this.privId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return ConnectionMessage;\n}();\n\nexports.ConnectionMessage = ConnectionMessage;","map":{"version":3,"sources":["src/common/ConnectionMessage.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"./Error\";\r\nimport { createNoDashGuid } from \"./Guid\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\n\r\nexport enum MessageType {\r\n    Text,\r\n    Binary,\r\n}\r\n\r\nexport class ConnectionMessage {\r\n\r\n    private privMessageType: MessageType;\r\n    private privHeaders: IStringDictionary<string>;\r\n    private privBody: any = null;\r\n    private privSize: number;\r\n\r\n    private privId: string;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        body: any,\r\n        headers?: IStringDictionary<string>,\r\n        id?: string) {\r\n\r\n        if (messageType === MessageType.Text && body && !(typeof (body) === \"string\")) {\r\n            throw new InvalidOperationError(\"Payload must be a string\");\r\n        }\r\n\r\n        if (messageType === MessageType.Binary && body && !(body instanceof ArrayBuffer)) {\r\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\r\n        }\r\n\r\n        this.privMessageType = messageType;\r\n        this.privBody = body;\r\n        this.privHeaders = headers ? headers : {};\r\n        this.privId = id ? id : createNoDashGuid();\r\n        switch (this.messageType) {\r\n            case MessageType.Binary:\r\n                this.privSize = this.binaryBody !== null ? this.binaryBody.byteLength : 0;\r\n                break;\r\n            case MessageType.Text:\r\n                this.privSize = this.textBody.length;\r\n        }\r\n    }\r\n\r\n    public get messageType(): MessageType {\r\n        return this.privMessageType;\r\n    }\r\n\r\n    public get headers(): IStringDictionary<string> {\r\n        return this.privHeaders;\r\n    }\r\n\r\n    public get body(): any {\r\n        return this.privBody;\r\n    }\r\n\r\n    public get textBody(): string {\r\n        if (this.privMessageType === MessageType.Binary) {\r\n            throw new InvalidOperationError(\"Not supported for binary message\");\r\n        }\r\n\r\n        return this.privBody as string;\r\n    }\r\n\r\n    public get binaryBody(): ArrayBuffer {\r\n        if (this.privMessageType === MessageType.Text) {\r\n            throw new InvalidOperationError(\"Not supported for text message\");\r\n        }\r\n\r\n        return this.privBody;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}