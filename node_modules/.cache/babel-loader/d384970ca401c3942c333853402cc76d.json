{"ast":null,"code":"import _classCallCheck from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ForceDictationPropertyName, OutputFormatPropertyName, ServicePropertiesPropertyName } from \"../common.speech/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport { OutputFormat, ProfanityOption, PropertyCollection, PropertyId, SpeechConfig, SpeechSynthesisOutputFormat } from \"./Exports\";\n/**\n * Speech translation configuration.\n * @class SpeechTranslationConfig\n */\n\nexport var SpeechTranslationConfig = /*#__PURE__*/function (_SpeechConfig) {\n  _inherits(SpeechTranslationConfig, _SpeechConfig);\n\n  var _super = _createSuper(SpeechTranslationConfig);\n\n  /**\n   * Creates an instance of recognizer config.\n   */\n  function SpeechTranslationConfig() {\n    _classCallCheck(this, SpeechTranslationConfig);\n\n    return _super.call(this);\n  }\n  /**\n   * Static instance of SpeechTranslationConfig returned by passing a subscription key and service region.\n   * @member SpeechTranslationConfig.fromSubscription\n   * @function\n   * @public\n   * @param {string} subscriptionKey - The subscription key.\n   * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n   * @returns {SpeechTranslationConfig} The speech translation config.\n   */\n\n\n  _createClass(SpeechTranslationConfig, null, [{\n    key: \"fromSubscription\",\n    value: function fromSubscription(subscriptionKey, region) {\n      Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\n      Contracts.throwIfNullOrWhitespace(region, \"region\");\n      var ret = new SpeechTranslationConfigImpl();\n      ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n      ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\n      return ret;\n    }\n    /**\n     * Static instance of SpeechTranslationConfig returned by passing authorization token and service region.\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\n     *       expires, the caller needs to refresh it by setting the property authorizationToken with a new\n     *       valid token. Otherwise, all the recognizers created by this SpeechTranslationConfig instance\n     *       will encounter errors during recognition.\n     * As configuration values are copied when creating a new recognizer, the new token value will not apply\n     * to recognizers that have already been created.\n     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\n     * @member SpeechTranslationConfig.fromAuthorizationToken\n     * @function\n     * @public\n     * @param {string} authorizationToken - The authorization token.\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n     * @returns {SpeechTranslationConfig} The speech translation config.\n     */\n\n  }, {\n    key: \"fromAuthorizationToken\",\n    value: function fromAuthorizationToken(authorizationToken, region) {\n      Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\n      Contracts.throwIfNullOrWhitespace(region, \"region\");\n      var ret = new SpeechTranslationConfigImpl();\n      ret.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\n      ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\n      return ret;\n    }\n    /**\n     * Creates an instance of the speech config with specified host and subscription key.\n     * This method is intended only for users who use a non-default service host. Standard resource path will be assumed.\n     * For services with a non-standard resource path or no path at all, use fromEndpoint instead.\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\n     * Note: To use an authorization token with fromHost, use fromHost(URL),\n     * and then set the AuthorizationToken property on the created SpeechConfig instance.\n     * Note: Added in version 1.9.0.\n     * @member SpeechConfig.fromHost\n     * @function\n     * @public\n     * @param {URL} host - The service endpoint to connect to. Format is \"protocol://host:port\" where \":port\" is optional.\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\n     * @returns {SpeechConfig} A speech factory instance.\n     */\n\n  }, {\n    key: \"fromHost\",\n    value: function fromHost(hostName, subscriptionKey) {\n      Contracts.throwIfNull(hostName, \"hostName\");\n      var speechImpl = new SpeechTranslationConfigImpl();\n      speechImpl.setProperty(PropertyId.SpeechServiceConnection_Host, hostName.protocol + \"//\" + hostName.hostname + (hostName.port === \"\" ? \"\" : \":\" + hostName.port));\n\n      if (undefined !== subscriptionKey) {\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n      }\n\n      return speechImpl;\n    }\n    /**\n     * Creates an instance of the speech translation config with specified endpoint and subscription key.\n     * This method is intended only for users who use a non-standard service endpoint or paramters.\n     * Note: The query properties specified in the endpoint URL are not changed, even if they are\n     *       set by any other APIs. For example, if language is defined in the uri as query parameter\n     *       \"language=de-DE\", and also set by the speechRecognitionLanguage property, the language\n     *       setting in uri takes precedence, and the effective language is \"de-DE\".\n     * Only the properties that are not specified in the endpoint URL can be set by other APIs.\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\n     *       fromEndpoint method, and then set authorizationToken=\"token\" on the created SpeechConfig instance to\n     *       use the authorization token.\n     * @member SpeechTranslationConfig.fromEndpoint\n     * @function\n     * @public\n     * @param {URL} endpoint - The service endpoint to connect to.\n     * @param {string} subscriptionKey - The subscription key.\n     * @returns {SpeechTranslationConfig} A speech config instance.\n     */\n\n  }, {\n    key: \"fromEndpoint\",\n    value: function fromEndpoint(endpoint, subscriptionKey) {\n      Contracts.throwIfNull(endpoint, \"endpoint\");\n      Contracts.throwIfNull(subscriptionKey, \"subscriptionKey\");\n      var ret = new SpeechTranslationConfigImpl();\n      ret.properties.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\n      ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n      return ret;\n    }\n  }]);\n\n  return SpeechTranslationConfig;\n}(SpeechConfig);\n/**\n * @private\n * @class SpeechTranslationConfigImpl\n */\n// tslint:disable-next-line:max-classes-per-file\n\nexport var SpeechTranslationConfigImpl = /*#__PURE__*/function (_SpeechTranslationCon) {\n  _inherits(SpeechTranslationConfigImpl, _SpeechTranslationCon);\n\n  var _super2 = _createSuper(SpeechTranslationConfigImpl);\n\n  function SpeechTranslationConfigImpl() {\n    var _this;\n\n    _classCallCheck(this, SpeechTranslationConfigImpl);\n\n    _this = _super2.call(this);\n    _this.privSpeechProperties = new PropertyCollection();\n    _this.outputFormat = OutputFormat.Simple;\n    return _this;\n  }\n  /**\n   * Gets/Sets the authorization token.\n   * If this is set, subscription key is ignored.\n   * User needs to make sure the provided authorization token is valid and not expired.\n   * @member SpeechTranslationConfigImpl.prototype.authorizationToken\n   * @function\n   * @public\n   * @param {string} value - The authorization token.\n   */\n\n\n  _createClass(SpeechTranslationConfigImpl, [{\n    key: \"authorizationToken\",\n    set: function set(value) {\n      Contracts.throwIfNullOrWhitespace(value, \"value\");\n      this.privSpeechProperties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\n    }\n    /**\n     * Gets/Sets the speech recognition language.\n     * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     * @param {string} value - The authorization token.\n     */\n\n  }, {\n    key: \"speechRecognitionLanguage\",\n    set: function set(value) {\n      Contracts.throwIfNullOrWhitespace(value, \"value\");\n      this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\n    }\n    /**\n     * @member SpeechTranslationConfigImpl.prototype.subscriptionKey\n     * @function\n     * @public\n     */\n\n  }, {\n    key: \"subscriptionKey\",\n    get: function get() {\n      return this.privSpeechProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]);\n    }\n    /**\n     * Gets the output format\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\n     * @function\n     * @public\n     */\n\n  }, {\n    key: \"outputFormat\",\n    get: function get() {\n      return OutputFormat[this.privSpeechProperties.getProperty(OutputFormatPropertyName, undefined)];\n    }\n    /**\n     * Gets/Sets the output format\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\n     * @function\n     * @public\n     */\n    ,\n    set: function set(value) {\n      this.privSpeechProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\n    }\n    /**\n     * Gets the endpoint id.\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\n     * @function\n     * @public\n     */\n\n  }, {\n    key: \"endpointId\",\n    get: function get() {\n      return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\n    }\n    /**\n     * Gets/Sets the endpoint id.\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\n     * @function\n     * @public\n     */\n    ,\n    set: function set(value) {\n      this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_EndpointId, value);\n    }\n    /**\n     * Add a (text) target language to translate into.\n     * @member SpeechTranslationConfigImpl.prototype.addTargetLanguage\n     * @function\n     * @public\n     * @param {string} value - The language such as de-DE\n     */\n\n  }, {\n    key: \"addTargetLanguage\",\n    value: function addTargetLanguage(value) {\n      Contracts.throwIfNullOrWhitespace(value, \"value\");\n      var languages = this.targetLanguages;\n      languages.push(value);\n      this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\n    }\n    /**\n     * Gets the (text) target language to translate into.\n     * @member SpeechTranslationConfigImpl.prototype.targetLanguages\n     * @function\n     * @public\n     * @param {string} value - The language such as de-DE\n     */\n\n  }, {\n    key: \"targetLanguages\",\n    get: function get() {\n      if (this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\n      } else {\n        return [];\n      }\n    }\n    /**\n     * Gets the voice name.\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\n     * @function\n     * @public\n     */\n\n  }, {\n    key: \"voiceName\",\n    get: function get() {\n      return this.getProperty(PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\n    }\n    /**\n     * Gets/Sets the voice of the translated language, enable voice synthesis output.\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\n     * @function\n     * @public\n     * @param {string} value - The name of the voice.\n     */\n    ,\n    set: function set(value) {\n      Contracts.throwIfNullOrWhitespace(value, \"value\");\n      this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_TranslationVoice, value);\n    }\n    /**\n     * Provides the region.\n     * @member SpeechTranslationConfigImpl.prototype.region\n     * @function\n     * @public\n     * @returns {string} The region.\n     */\n\n  }, {\n    key: \"region\",\n    get: function get() {\n      return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\n    }\n  }, {\n    key: \"setProxy\",\n    value: function setProxy(proxyHostName, proxyPort, proxyUserName, proxyPassword) {\n      this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName);\n      this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPort], proxyPort);\n      this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName);\n      this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword);\n    }\n    /**\n     * Gets an arbitrary property value.\n     * @member SpeechTranslationConfigImpl.prototype.getProperty\n     * @function\n     * @public\n     * @param {string} name - The name of the property.\n     * @param {string} def - The default value of the property in case it is not set.\n     * @returns {string} The value of the property.\n     */\n\n  }, {\n    key: \"getProperty\",\n    value: function getProperty(name, def) {\n      return this.privSpeechProperties.getProperty(name, def);\n    }\n    /**\n     * Gets/Sets an arbitrary property value.\n     * @member SpeechTranslationConfigImpl.prototype.setProperty\n     * @function\n     * @public\n     * @param {string} name - The name of the property.\n     * @param {string} value - The value of the property.\n     */\n\n  }, {\n    key: \"setProperty\",\n    value: function setProperty(name, value) {\n      this.privSpeechProperties.setProperty(name, value);\n    }\n    /**\n     * Provides access to custom properties.\n     * @member SpeechTranslationConfigImpl.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The properties.\n     */\n\n  }, {\n    key: \"properties\",\n    get: function get() {\n      return this.privSpeechProperties;\n    }\n    /**\n     * Dispose of associated resources.\n     * @member SpeechTranslationConfigImpl.prototype.close\n     * @function\n     * @public\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      return;\n    }\n  }, {\n    key: \"setServiceProperty\",\n    value: function setServiceProperty(name, value, channel) {\n      var currentProperties = JSON.parse(this.privSpeechProperties.getProperty(ServicePropertiesPropertyName, \"{}\"));\n      currentProperties[name] = value;\n      this.privSpeechProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\n    }\n  }, {\n    key: \"setProfanity\",\n    value: function setProfanity(profanity) {\n      this.privSpeechProperties.setProperty(PropertyId.SpeechServiceResponse_ProfanityOption, ProfanityOption[profanity]);\n    }\n  }, {\n    key: \"enableAudioLogging\",\n    value: function enableAudioLogging() {\n      this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_EnableAudioLogging, \"true\");\n    }\n  }, {\n    key: \"requestWordLevelTimestamps\",\n    value: function requestWordLevelTimestamps() {\n      this.privSpeechProperties.setProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"true\");\n    }\n  }, {\n    key: \"enableDictation\",\n    value: function enableDictation() {\n      this.privSpeechProperties.setProperty(ForceDictationPropertyName, \"true\");\n    }\n  }, {\n    key: \"speechSynthesisLanguage\",\n    get: function get() {\n      return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage);\n    },\n    set: function set(language) {\n      this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthLanguage, language);\n    }\n  }, {\n    key: \"speechSynthesisVoiceName\",\n    get: function get() {\n      return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice);\n    },\n    set: function set(voice) {\n      this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthVoice, voice);\n    }\n  }, {\n    key: \"speechSynthesisOutputFormat\",\n    get: function get() {\n      return SpeechSynthesisOutputFormat[this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)];\n    },\n    set: function set(format) {\n      this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, SpeechSynthesisOutputFormat[format]);\n    }\n  }]);\n\n  return SpeechTranslationConfigImpl;\n}(SpeechTranslationConfig);","map":{"version":3,"sources":["src/sdk/SpeechTranslationConfig.ts"],"names":[],"mappings":";;;;AAAA;AACA;AAEA,SACI,0BADJ,EAEI,wBAFJ,EAGI,6BAHJ,QAIO,0BAJP;AAMA,SAAS,SAAT,QAA0B,aAA1B;AACA,SACI,YADJ,EAEI,eAFJ,EAGI,kBAHJ,EAII,UAJJ,EAMI,YANJ,EAMkB,2BANlB,QAOO,WAPP;AASA;;;AAGG;;AACH,WAAsB,uBAAtB;AAAA;;AAAA;;AAEI;;AAEG;AACH,qCAAA;AAAA;;AAAA;AAEC;AAED;;;;;;;;AAQG;;;AAjBP;AAAA;AAAA,WAkBW,0BAAwB,eAAxB,EAAiD,MAAjD,EAA+D;AAClE,MAAA,SAAS,CAAC,uBAAV,CAAkC,eAAlC,EAAmD,iBAAnD;AACA,MAAA,SAAS,CAAC,uBAAV,CAAkC,MAAlC,EAA0C,QAA1C;AAEA,UAAM,GAAG,GAAgC,IAAI,2BAAJ,EAAzC;AACA,MAAA,GAAG,CAAC,UAAJ,CAAe,WAAf,CAA2B,UAAU,CAAC,2BAAtC,EAAmE,eAAnE;AACA,MAAA,GAAG,CAAC,UAAJ,CAAe,WAAf,CAA2B,UAAU,CAAC,8BAAtC,EAAsE,MAAtE;AACA,aAAO,GAAP;AACH;AAED;;;;;;;;;;;;;;;;AAgBG;;AA5CP;AAAA;AAAA,WA6CW,gCAA8B,kBAA9B,EAA0D,MAA1D,EAAwE;AAC3E,MAAA,SAAS,CAAC,uBAAV,CAAkC,kBAAlC,EAAsD,oBAAtD;AACA,MAAA,SAAS,CAAC,uBAAV,CAAkC,MAAlC,EAA0C,QAA1C;AAEA,UAAM,GAAG,GAAgC,IAAI,2BAAJ,EAAzC;AACA,MAAA,GAAG,CAAC,UAAJ,CAAe,WAAf,CAA2B,UAAU,CAAC,gCAAtC,EAAwE,kBAAxE;AACA,MAAA,GAAG,CAAC,UAAJ,CAAe,WAAf,CAA2B,UAAU,CAAC,8BAAtC,EAAsE,MAAtE;AACA,aAAO,GAAP;AACH;AAED;;;;;;;;;;;;;;AAcG;;AArEP;AAAA;AAAA,WAsEW,kBAAgB,QAAhB,EAA+B,eAA/B,EAAuD;AAC1D,MAAA,SAAS,CAAC,WAAV,CAAsB,QAAtB,EAAgC,UAAhC;AAEA,UAAM,UAAU,GAAgC,IAAI,2BAAJ,EAAhD;AACA,MAAA,UAAU,CAAC,WAAX,CAAuB,UAAU,CAAC,4BAAlC,EAAgE,QAAQ,CAAC,QAAT,GAAoB,IAApB,GAA2B,QAAQ,CAAC,QAApC,IAAgD,QAAQ,CAAC,IAAT,KAAkB,EAAlB,GAAuB,EAAvB,GAA4B,MAAM,QAAQ,CAAC,IAA3F,CAAhE;;AAEA,UAAI,SAAS,KAAK,eAAlB,EAAmC;AAC/B,QAAA,UAAU,CAAC,WAAX,CAAuB,UAAU,CAAC,2BAAlC,EAA+D,eAA/D;AACH;;AACD,aAAO,UAAP;AACH;AAED;;;;;;;;;;;;;;;;;AAiBG;;AAnGP;AAAA;AAAA,WAoGW,sBAAoB,QAApB,EAAmC,eAAnC,EAA0D;AAC7D,MAAA,SAAS,CAAC,WAAV,CAAsB,QAAtB,EAAgC,UAAhC;AACA,MAAA,SAAS,CAAC,WAAV,CAAsB,eAAtB,EAAuC,iBAAvC;AAEA,UAAM,GAAG,GAAgC,IAAI,2BAAJ,EAAzC;AACA,MAAA,GAAG,CAAC,UAAJ,CAAe,WAAf,CAA2B,UAAU,CAAC,gCAAtC,EAAwE,QAAQ,CAAC,IAAjF;AACA,MAAA,GAAG,CAAC,UAAJ,CAAe,WAAf,CAA2B,UAAU,CAAC,2BAAtC,EAAmE,eAAnE;AACA,aAAO,GAAP;AACH;AA5GL;;AAAA;AAAA,EAAsD,YAAtD;AAyLA;;;AAGG;AACH;;AACA,WAAa,2BAAb;AAAA;;AAAA;;AAII,yCAAA;AAAA;;AAAA;;AACI;AACA,UAAK,oBAAL,GAA4B,IAAI,kBAAJ,EAA5B;AACA,UAAK,YAAL,GAAoB,YAAY,CAAC,MAAjC;AAHJ;AAIC;AACD;;;;;;;;AAQG;;;AAjBP;AAAA;AAAA,SAkBI,aAA8B,KAA9B,EAA2C;AACvC,MAAA,SAAS,CAAC,uBAAV,CAAkC,KAAlC,EAAyC,OAAzC;AAEA,WAAK,oBAAL,CAA0B,WAA1B,CAAsC,UAAU,CAAC,gCAAjD,EAAmF,KAAnF;AACH;AAED;;;;;;AAMG;;AA9BP;AAAA;AAAA,SA+BI,aAAqC,KAArC,EAAkD;AAC9C,MAAA,SAAS,CAAC,uBAAV,CAAkC,KAAlC,EAAyC,OAAzC;AACA,WAAK,oBAAL,CAA0B,WAA1B,CAAsC,UAAU,CAAC,oCAAjD,EAAuF,KAAvF;AACH;AAED;;;;AAIG;;AAxCP;AAAA;AAAA,SAyCI,eAA0B;AACtB,aAAO,KAAK,oBAAL,CAA0B,WAA1B,CAAsC,UAAU,CAAC,UAAU,CAAC,2BAAZ,CAAhD,CAAP;AACH;AAED;;;;;AAKG;;AAlDP;AAAA;AAAA,SAmDI,eAAuB;AACnB,aAAQ,YAAoB,CAAC,KAAK,oBAAL,CAA0B,WAA1B,CAAsC,wBAAtC,EAAgE,SAAhE,CAAD,CAA5B;AACH;AAED;;;;;AAKG;AA5DP;AAAA,SA6DI,aAAwB,KAAxB,EAA2C;AACvC,WAAK,oBAAL,CAA0B,WAA1B,CAAsC,wBAAtC,EAAgE,YAAY,CAAC,KAAD,CAA5E;AACH;AAED;;;;;AAKG;;AAtEP;AAAA;AAAA,SAuEI,eAAqB;AACjB,aAAO,KAAK,oBAAL,CAA0B,WAA1B,CAAsC,UAAU,CAAC,kCAAjD,CAAP;AACH;AAED;;;;;AAKG;AAhFP;AAAA,SAiFI,aAAsB,KAAtB,EAAmC;AAC/B,WAAK,oBAAL,CAA0B,WAA1B,CAAsC,UAAU,CAAC,kCAAjD,EAAqF,KAArF;AACH;AAED;;;;;;AAMG;;AA3FP;AAAA;AAAA,WA4FW,2BAAkB,KAAlB,EAA+B;AAClC,MAAA,SAAS,CAAC,uBAAV,CAAkC,KAAlC,EAAyC,OAAzC;AAEA,UAAM,SAAS,GAAa,KAAK,eAAjC;AACA,MAAA,SAAS,CAAC,IAAV,CAAe,KAAf;AACA,WAAK,oBAAL,CAA0B,WAA1B,CAAsC,UAAU,CAAC,8CAAjD,EAAiG,SAAS,CAAC,IAAV,CAAe,GAAf,CAAjG;AACH;AAED;;;;;;AAMG;;AA1GP;AAAA;AAAA,SA2GI,eAA0B;AAEtB,UAAI,KAAK,oBAAL,CAA0B,WAA1B,CAAsC,UAAU,CAAC,8CAAjD,EAAiG,SAAjG,MAAgH,SAApH,EAA+H;AAC3H,eAAO,KAAK,oBAAL,CAA0B,WAA1B,CAAsC,UAAU,CAAC,8CAAjD,EAAiG,KAAjG,CAAuG,GAAvG,CAAP;AACH,OAFD,MAEO;AACH,eAAO,EAAP;AACH;AAEJ;AAED;;;;;AAKG;;AA1HP;AAAA;AAAA,SA2HI,eAAoB;AAChB,aAAO,KAAK,WAAL,CAAiB,UAAU,CAAC,UAAU,CAAC,wCAAZ,CAA3B,CAAP;AACH;AAED;;;;;;AAMG;AArIP;AAAA,SAsII,aAAqB,KAArB,EAAkC;AAC9B,MAAA,SAAS,CAAC,uBAAV,CAAkC,KAAlC,EAAyC,OAAzC;AAEA,WAAK,oBAAL,CAA0B,WAA1B,CAAsC,UAAU,CAAC,wCAAjD,EAA2F,KAA3F;AACH;AAED;;;;;;AAMG;;AAlJP;AAAA;AAAA,SAmJI,eAAiB;AACb,aAAO,KAAK,oBAAL,CAA0B,WAA1B,CAAsC,UAAU,CAAC,8BAAjD,CAAP;AACH;AArJL;AAAA;AAAA,WAyJW,kBAAS,aAAT,EAA6B,SAA7B,EAA6C,aAA7C,EAAkE,aAAlE,EAAqF;AACxF,WAAK,WAAL,CAAiB,UAAU,CAAC,UAAU,CAAC,qCAAZ,CAA3B,EAA+E,aAA/E;AACA,WAAK,WAAL,CAAiB,UAAU,CAAC,UAAU,CAAC,iCAAZ,CAA3B,EAA2E,SAA3E;AACA,WAAK,WAAL,CAAiB,UAAU,CAAC,UAAU,CAAC,qCAAZ,CAA3B,EAA+E,aAA/E;AACA,WAAK,WAAL,CAAiB,UAAU,CAAC,UAAU,CAAC,qCAAZ,CAA3B,EAA+E,aAA/E;AACH;AAED;;;;;;;;AAQG;;AAxKP;AAAA;AAAA,WAyKW,qBAAY,IAAZ,EAA0B,GAA1B,EAAsC;AACzC,aAAO,KAAK,oBAAL,CAA0B,WAA1B,CAAsC,IAAtC,EAA4C,GAA5C,CAAP;AACH;AAED;;;;;;;AAOG;;AApLP;AAAA;AAAA,WAqLW,qBAAY,IAAZ,EAAuC,KAAvC,EAAoD;AACvD,WAAK,oBAAL,CAA0B,WAA1B,CAAsC,IAAtC,EAA4C,KAA5C;AACH;AAED;;;;;;AAMG;;AA/LP;AAAA;AAAA,SAgMI,eAAqB;AACjB,aAAO,KAAK,oBAAZ;AACH;AAED;;;;;AAKG;;AAzMP;AAAA;AAAA,WA0MW,iBAAK;AACR;AACH;AA5ML;AAAA;AAAA,WA8MW,4BAAmB,IAAnB,EAAiC,KAAjC,EAAgD,OAAhD,EAA+E;AAClF,UAAM,iBAAiB,GAA8B,IAAI,CAAC,KAAL,CAAW,KAAK,oBAAL,CAA0B,WAA1B,CAAsC,6BAAtC,EAAqE,IAArE,CAAX,CAArD;AAEA,MAAA,iBAAiB,CAAC,IAAD,CAAjB,GAA0B,KAA1B;AAEA,WAAK,oBAAL,CAA0B,WAA1B,CAAsC,6BAAtC,EAAqE,IAAI,CAAC,SAAL,CAAe,iBAAf,CAArE;AACH;AApNL;AAAA;AAAA,WAsNW,sBAAa,SAAb,EAAuC;AAC1C,WAAK,oBAAL,CAA0B,WAA1B,CAAsC,UAAU,CAAC,qCAAjD,EAAwF,eAAe,CAAC,SAAD,CAAvG;AACH;AAxNL;AAAA;AAAA,WA0NW,8BAAkB;AACrB,WAAK,oBAAL,CAA0B,WAA1B,CAAsC,UAAU,CAAC,0CAAjD,EAA6F,MAA7F;AACH;AA5NL;AAAA;AAAA,WA6NW,sCAA0B;AAC7B,WAAK,oBAAL,CAA0B,WAA1B,CAAsC,UAAU,CAAC,gDAAjD,EAAmG,MAAnG;AACH;AA/NL;AAAA;AAAA,WAgOW,2BAAe;AAClB,WAAK,oBAAL,CAA0B,WAA1B,CAAsC,0BAAtC,EAAkE,MAAlE;AACH;AAlOL;AAAA;AAAA,SAoOI,eAAkC;AAC9B,aAAO,KAAK,oBAAL,CAA0B,WAA1B,CAAsC,UAAU,CAAC,qCAAjD,CAAP;AACH,KAtOL;AAAA,SAwOI,aAAmC,QAAnC,EAAmD;AAC/C,WAAK,oBAAL,CAA0B,WAA1B,CAAsC,UAAU,CAAC,qCAAjD,EAAwF,QAAxF;AACH;AA1OL;AAAA;AAAA,SA4OI,eAAmC;AAC/B,aAAO,KAAK,oBAAL,CAA0B,WAA1B,CAAsC,UAAU,CAAC,kCAAjD,CAAP;AACH,KA9OL;AAAA,SAgPI,aAAoC,KAApC,EAAiD;AAC7C,WAAK,oBAAL,CAA0B,WAA1B,CAAsC,UAAU,CAAC,kCAAjD,EAAqF,KAArF;AACH;AAlPL;AAAA;AAAA,SAoPI,eAAsC;AAClC,aAAQ,2BAAmC,CAAC,KAAK,oBAAL,CAA0B,WAA1B,CAAsC,UAAU,CAAC,yCAAjD,EAA4F,SAA5F,CAAD,CAA3C;AACH,KAtPL;AAAA,SAwPI,aAAuC,MAAvC,EAA0E;AACtE,WAAK,oBAAL,CAA0B,WAA1B,CAAsC,UAAU,CAAC,yCAAjD,EAA4F,2BAA2B,CAAC,MAAD,CAAvH;AACH;AA1PL;;AAAA;AAAA,EAAiD,uBAAjD","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n    ServicePropertiesPropertyName\r\n} from \"../common.speech/Exports\";\r\nimport { IStringDictionary } from \"../common/Exports\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    OutputFormat,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ServicePropertyChannel,\r\n    SpeechConfig, SpeechSynthesisOutputFormat,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Speech translation configuration.\r\n * @class SpeechTranslationConfig\r\n */\r\nexport abstract class SpeechTranslationConfig extends SpeechConfig {\r\n\r\n    /**\r\n     * Creates an instance of recognizer config.\r\n     */\r\n    protected constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Static instance of SpeechTranslationConfig returned by passing a subscription key and service region.\r\n     * @member SpeechTranslationConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechTranslationConfig} The speech translation config.\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, region: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Static instance of SpeechTranslationConfig returned by passing authorization token and service region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     *       expires, the caller needs to refresh it by setting the property authorizationToken with a new\r\n     *       valid token. Otherwise, all the recognizers created by this SpeechTranslationConfig instance\r\n     *       will encounter errors during recognition.\r\n     * As configuration values are copied when creating a new recognizer, the new token value will not apply\r\n     * to recognizers that have already been created.\r\n     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member SpeechTranslationConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} authorizationToken - The authorization token.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechTranslationConfig} The speech translation config.\r\n     */\r\n    public static fromAuthorizationToken(authorizationToken: string, region: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech config with specified host and subscription key.\r\n     * This method is intended only for users who use a non-default service host. Standard resource path will be assumed.\r\n     * For services with a non-standard resource path or no path at all, use fromEndpoint instead.\r\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\r\n     * Note: To use an authorization token with fromHost, use fromHost(URL),\r\n     * and then set the AuthorizationToken property on the created SpeechConfig instance.\r\n     * Note: Added in version 1.9.0.\r\n     * @member SpeechConfig.fromHost\r\n     * @function\r\n     * @public\r\n     * @param {URL} host - The service endpoint to connect to. Format is \"protocol://host:port\" where \":port\" is optional.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromHost(hostName: URL, subscriptionKey?: string): SpeechConfig {\r\n        Contracts.throwIfNull(hostName, \"hostName\");\r\n\r\n        const speechImpl: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Host, hostName.protocol + \"//\" + hostName.hostname + (hostName.port === \"\" ? \"\" : \":\" + hostName.port));\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech translation config with specified endpoint and subscription key.\r\n     * This method is intended only for users who use a non-standard service endpoint or paramters.\r\n     * Note: The query properties specified in the endpoint URL are not changed, even if they are\r\n     *       set by any other APIs. For example, if language is defined in the uri as query parameter\r\n     *       \"language=de-DE\", and also set by the speechRecognitionLanguage property, the language\r\n     *       setting in uri takes precedence, and the effective language is \"de-DE\".\r\n     * Only the properties that are not specified in the endpoint URL can be set by other APIs.\r\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\r\n     *       fromEndpoint method, and then set authorizationToken=\"token\" on the created SpeechConfig instance to\r\n     *       use the authorization token.\r\n     * @member SpeechTranslationConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @returns {SpeechTranslationConfig} A speech config instance.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n        Contracts.throwIfNull(subscriptionKey, \"subscriptionKey\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * @member SpeechTranslationConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set authorizationToken(value: string);\r\n\r\n    /**\r\n     * Gets/Sets the speech recognition language.\r\n     * @member SpeechTranslationConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Add a (text) target language to translate into.\r\n     * @member SpeechTranslationConfig.prototype.addTargetLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public abstract addTargetLanguage(value: string): void;\r\n\r\n    /**\r\n     * Gets the (text) target language to translate into.\r\n     * @member SpeechTranslationConfig.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public abstract get targetLanguages(): string[];\r\n\r\n    /**\r\n     * Gets the selected voice name.\r\n     * @member SpeechTranslationConfig.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} The voice name.\r\n     */\r\n    public abstract get voiceName(): string;\r\n\r\n    /**\r\n     * Gets/Sets voice of the translated language, enable voice synthesis output.\r\n     * @member SpeechTranslationConfig.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The name of the voice.\r\n     */\r\n    public abstract set voiceName(value: string);\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member SpeechTranslationConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property.\r\n     * @param {string} value - The value.\r\n     */\r\n    public abstract setProperty(name: string, value: string): void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechTranslationConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * @private\r\n * @class SpeechTranslationConfigImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SpeechTranslationConfigImpl extends SpeechTranslationConfig {\r\n\r\n    private privSpeechProperties: PropertyCollection;\r\n\r\n    public constructor() {\r\n        super();\r\n        this.privSpeechProperties = new PropertyCollection();\r\n        this.outputFormat = OutputFormat.Simple;\r\n    }\r\n    /**\r\n     * Gets/Sets the authorization token.\r\n     * If this is set, subscription key is ignored.\r\n     * User needs to make sure the provided authorization token is valid and not expired.\r\n     * @member SpeechTranslationConfigImpl.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the speech recognition language.\r\n     * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public set speechRecognitionLanguage(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\r\n    }\r\n\r\n    /**\r\n     * @member SpeechTranslationConfigImpl.prototype.subscriptionKey\r\n     * @function\r\n     * @public\r\n     */\r\n    public get subscriptionKey(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]);\r\n    }\r\n\r\n    /**\r\n     * Gets the output format\r\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        return (OutputFormat as any)[this.privSpeechProperties.getProperty(OutputFormatPropertyName, undefined)];\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the output format\r\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.privSpeechProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\r\n    }\r\n\r\n    /**\r\n     * Gets the endpoint id.\r\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     */\r\n    public get endpointId(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the endpoint id.\r\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     */\r\n    public set endpointId(value: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_EndpointId, value);\r\n    }\r\n\r\n    /**\r\n     * Add a (text) target language to translate into.\r\n     * @member SpeechTranslationConfigImpl.prototype.addTargetLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public addTargetLanguage(value: string): void {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        const languages: string[] = this.targetLanguages;\r\n        languages.push(value);\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n    }\r\n\r\n    /**\r\n     * Gets the (text) target language to translate into.\r\n     * @member SpeechTranslationConfigImpl.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public get targetLanguages(): string[] {\r\n\r\n        if (this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n        } else {\r\n            return [];\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets the voice name.\r\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     */\r\n    public get voiceName(): string {\r\n        return this.getProperty(PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the voice of the translated language, enable voice synthesis output.\r\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The name of the voice.\r\n     */\r\n    public set voiceName(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_TranslationVoice, value);\r\n    }\r\n\r\n    /**\r\n     * Provides the region.\r\n     * @member SpeechTranslationConfigImpl.prototype.region\r\n     * @function\r\n     * @public\r\n     * @returns {string} The region.\r\n     */\r\n    public get region(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n    }\r\n\r\n    public setProxy(proxyHostName: string, proxyPort: number): void;\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n    public setProxy(proxyHostName: any, proxyPort: any, proxyUserName?: any, proxyPassword?: any): void {\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPort], proxyPort);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword);\r\n    }\r\n\r\n    /**\r\n     * Gets an arbitrary property value.\r\n     * @member SpeechTranslationConfigImpl.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property.\r\n     * @param {string} def - The default value of the property in case it is not set.\r\n     * @returns {string} The value of the property.\r\n     */\r\n    public getProperty(name: string, def?: string): string {\r\n        return this.privSpeechProperties.getProperty(name, def);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets an arbitrary property value.\r\n     * @member SpeechTranslationConfigImpl.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property.\r\n     * @param {string} value - The value of the property.\r\n     */\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        this.privSpeechProperties.setProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Provides access to custom properties.\r\n     * @member SpeechTranslationConfigImpl.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The properties.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privSpeechProperties;\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechTranslationConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void {\r\n        const currentProperties: IStringDictionary<string> = JSON.parse(this.privSpeechProperties.getProperty(ServicePropertiesPropertyName, \"{}\"));\r\n\r\n        currentProperties[name] = value;\r\n\r\n        this.privSpeechProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\r\n    }\r\n\r\n    public setProfanity(profanity: ProfanityOption): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceResponse_ProfanityOption, ProfanityOption[profanity]);\r\n    }\r\n\r\n    public enableAudioLogging(): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_EnableAudioLogging, \"true\");\r\n    }\r\n    public requestWordLevelTimestamps(): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"true\");\r\n    }\r\n    public enableDictation(): void {\r\n        this.privSpeechProperties.setProperty(ForceDictationPropertyName, \"true\");\r\n    }\r\n\r\n    public get speechSynthesisLanguage(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage);\r\n    }\r\n\r\n    public set speechSynthesisLanguage(language: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthLanguage, language);\r\n    }\r\n\r\n    public get speechSynthesisVoiceName(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice);\r\n    }\r\n\r\n    public set speechSynthesisVoiceName(voice: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthVoice, voice);\r\n    }\r\n\r\n    public get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat {\r\n        return (SpeechSynthesisOutputFormat as any)[this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)];\r\n    }\r\n\r\n    public set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, SpeechSynthesisOutputFormat[format]);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}