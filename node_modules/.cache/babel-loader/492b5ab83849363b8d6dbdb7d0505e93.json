{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Exports_1 = require(\"../common/Exports\");\n\nvar Exports_2 = require(\"../sdk/Exports\");\n\nvar Exports_3 = require(\"./Exports\"); // tslint:disable-next-line:max-classes-per-file\n\n\nvar TranslationServiceRecognizer =\n/** @class */\nfunction (_super) {\n  __extends(TranslationServiceRecognizer, _super);\n\n  function TranslationServiceRecognizer(authentication, connectionFactory, audioSource, recognizerConfig, translationRecognizer) {\n    var _this = _super.call(this, authentication, connectionFactory, audioSource, recognizerConfig, translationRecognizer) || this;\n\n    _this.privTranslationRecognizer = translationRecognizer;\n    return _this;\n  }\n\n  TranslationServiceRecognizer.prototype.processTypeSpecificMessages = function (connectionMessage) {\n    var resultProps = new Exports_2.PropertyCollection();\n    var processed = false;\n\n    if (connectionMessage.messageType === Exports_1.MessageType.Text) {\n      resultProps.setProperty(Exports_2.PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\n    }\n\n    switch (connectionMessage.path.toLowerCase()) {\n      case \"translation.hypothesis\":\n        var result = this.fireEventForResult(Exports_3.TranslationHypothesis.fromJSON(connectionMessage.textBody), resultProps);\n        this.privRequestSession.onHypothesis(this.privRequestSession.currentTurnAudioOffset + result.offset);\n\n        if (!!this.privTranslationRecognizer.recognizing) {\n          try {\n            this.privTranslationRecognizer.recognizing(this.privTranslationRecognizer, result);\n            /* tslint:disable:no-empty */\n          } catch (error) {// Not going to let errors in the event handler\n            // trip things up.\n          }\n        }\n\n        processed = true;\n        break;\n\n      case \"translation.phrase\":\n        var translatedPhrase = Exports_3.TranslationPhrase.fromJSON(connectionMessage.textBody);\n        this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset + translatedPhrase.Duration);\n\n        if (translatedPhrase.RecognitionStatus === Exports_3.RecognitionStatus.Success) {\n          // OK, the recognition was successful. How'd the translation do?\n          var result_1 = this.fireEventForResult(translatedPhrase, resultProps);\n\n          if (!!this.privTranslationRecognizer.recognized) {\n            try {\n              this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, result_1);\n              /* tslint:disable:no-empty */\n            } catch (error) {// Not going to let errors in the event handler\n              // trip things up.\n            }\n          } // report result to promise.\n\n\n          if (!!this.privSuccessCallback) {\n            try {\n              this.privSuccessCallback(result_1.result);\n            } catch (e) {\n              if (!!this.privErrorCallback) {\n                this.privErrorCallback(e);\n              }\n            } // Only invoke the call back once.\n            // and if it's successful don't invoke the\n            // error after that.\n\n\n            this.privSuccessCallback = undefined;\n            this.privErrorCallback = undefined;\n          }\n\n          break;\n        } else {\n          var reason = Exports_3.EnumTranslation.implTranslateRecognitionResult(translatedPhrase.RecognitionStatus);\n          var result_2 = new Exports_2.TranslationRecognitionResult(undefined, this.privRequestSession.requestId, reason, translatedPhrase.Text, translatedPhrase.Duration, this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset, undefined, connectionMessage.textBody, resultProps);\n\n          if (reason === Exports_2.ResultReason.Canceled) {\n            var cancelReason = Exports_3.EnumTranslation.implTranslateCancelResult(translatedPhrase.RecognitionStatus);\n            this.cancelRecognitionLocal(cancelReason, Exports_3.EnumTranslation.implTranslateCancelErrorCode(translatedPhrase.RecognitionStatus), undefined);\n          } else {\n            if (!(this.privRequestSession.isSpeechEnded && reason === Exports_2.ResultReason.NoMatch && translatedPhrase.RecognitionStatus !== Exports_3.RecognitionStatus.InitialSilenceTimeout)) {\n              var ev = new Exports_2.TranslationRecognitionEventArgs(result_2, result_2.offset, this.privRequestSession.sessionId);\n\n              if (!!this.privTranslationRecognizer.recognized) {\n                try {\n                  this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, ev);\n                  /* tslint:disable:no-empty */\n                } catch (error) {// Not going to let errors in the event handler\n                  // trip things up.\n                }\n              }\n            } // report result to promise.\n\n\n            if (!!this.privSuccessCallback) {\n              try {\n                this.privSuccessCallback(result_2);\n              } catch (e) {\n                if (!!this.privErrorCallback) {\n                  this.privErrorCallback(e);\n                }\n              } // Only invoke the call back once.\n              // and if it's successful don't invoke the\n              // error after that.\n\n\n              this.privSuccessCallback = undefined;\n              this.privErrorCallback = undefined;\n            }\n          }\n        }\n\n        processed = true;\n        break;\n\n      case \"translation.synthesis\":\n        this.sendSynthesisAudio(connectionMessage.binaryBody, this.privRequestSession.sessionId);\n        processed = true;\n        break;\n\n      case \"translation.synthesis.end\":\n        var synthEnd = Exports_3.TranslationSynthesisEnd.fromJSON(connectionMessage.textBody);\n\n        switch (synthEnd.SynthesisStatus) {\n          case Exports_3.SynthesisStatus.Error:\n            if (!!this.privTranslationRecognizer.synthesizing) {\n              var result_3 = new Exports_2.TranslationSynthesisResult(Exports_2.ResultReason.Canceled, undefined);\n              var retEvent = new Exports_2.TranslationSynthesisEventArgs(result_3, this.privRequestSession.sessionId);\n\n              try {\n                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\n                /* tslint:disable:no-empty */\n              } catch (error) {// Not going to let errors in the event handler\n                // trip things up.\n              }\n            }\n\n            if (!!this.privTranslationRecognizer.canceled) {\n              // And raise a canceled event to send the rich(er) error message back.\n              var canceledResult = new Exports_2.TranslationRecognitionCanceledEventArgs(this.privRequestSession.sessionId, Exports_2.CancellationReason.Error, synthEnd.FailureReason, Exports_2.CancellationErrorCode.ServiceError, null);\n\n              try {\n                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, canceledResult);\n                /* tslint:disable:no-empty */\n              } catch (error) {// Not going to let errors in the event handler\n                // trip things up.\n              }\n            }\n\n            break;\n\n          case Exports_3.SynthesisStatus.Success:\n            this.sendSynthesisAudio(undefined, this.privRequestSession.sessionId);\n            break;\n\n          default:\n            break;\n        }\n\n        processed = true;\n        break;\n\n      default:\n        break;\n    }\n\n    return processed;\n  }; // Cancels recognition.\n\n\n  TranslationServiceRecognizer.prototype.cancelRecognition = function (sessionId, requestId, cancellationReason, errorCode, error) {\n    var properties = new Exports_2.PropertyCollection();\n    properties.setProperty(Exports_3.CancellationErrorCodePropertyName, Exports_2.CancellationErrorCode[errorCode]);\n\n    if (!!this.privTranslationRecognizer.canceled) {\n      var cancelEvent = new Exports_2.TranslationRecognitionCanceledEventArgs(sessionId, cancellationReason, error, errorCode, undefined);\n\n      try {\n        this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, cancelEvent);\n        /* tslint:disable:no-empty */\n      } catch (_a) {}\n    }\n\n    if (!!this.privSuccessCallback) {\n      var result = new Exports_2.TranslationRecognitionResult(undefined, // Translations\n      requestId, Exports_2.ResultReason.Canceled, undefined, // Text\n      undefined, // Druation\n      undefined, // Offset\n      error, undefined, // Json\n      properties);\n\n      try {\n        this.privSuccessCallback(result);\n        /* tslint:disable:no-empty */\n\n        this.privSuccessCallback = undefined;\n      } catch (_b) {}\n    }\n  };\n\n  TranslationServiceRecognizer.prototype.fireEventForResult = function (serviceResult, properties) {\n    var translations;\n\n    if (undefined !== serviceResult.Translation.Translations) {\n      translations = new Exports_2.Translations();\n\n      for (var _i = 0, _a = serviceResult.Translation.Translations; _i < _a.length; _i++) {\n        var translation = _a[_i];\n        translations.set(translation.Language, translation.Text);\n      }\n    }\n\n    var resultReason;\n\n    if (serviceResult instanceof Exports_3.TranslationPhrase) {\n      if (serviceResult.Translation.TranslationStatus === Exports_1.TranslationStatus.Success) {\n        resultReason = Exports_2.ResultReason.TranslatedSpeech;\n      } else {\n        resultReason = Exports_2.ResultReason.RecognizedSpeech;\n      }\n    } else {\n      resultReason = Exports_2.ResultReason.TranslatingSpeech;\n    }\n\n    var offset = serviceResult.Offset + this.privRequestSession.currentTurnAudioOffset;\n    var result = new Exports_2.TranslationRecognitionResult(translations, this.privRequestSession.requestId, resultReason, serviceResult.Text, serviceResult.Duration, offset, serviceResult.Translation.FailureReason, JSON.stringify(serviceResult), properties);\n    var ev = new Exports_2.TranslationRecognitionEventArgs(result, offset, this.privRequestSession.sessionId);\n    return ev;\n  };\n\n  TranslationServiceRecognizer.prototype.sendSynthesisAudio = function (audio, sessionId) {\n    var reason = undefined === audio ? Exports_2.ResultReason.SynthesizingAudioCompleted : Exports_2.ResultReason.SynthesizingAudio;\n    var result = new Exports_2.TranslationSynthesisResult(reason, audio);\n    var retEvent = new Exports_2.TranslationSynthesisEventArgs(result, sessionId);\n\n    if (!!this.privTranslationRecognizer.synthesizing) {\n      try {\n        this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\n        /* tslint:disable:no-empty */\n      } catch (error) {// Not going to let errors in the event handler\n        // trip things up.\n      }\n    }\n  };\n\n  return TranslationServiceRecognizer;\n}(Exports_3.ServiceRecognizerBase);\n\nexports.TranslationServiceRecognizer = TranslationServiceRecognizer;","map":{"version":3,"sources":["src/common.speech/TranslationServiceRecognizer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAudioSource,\r\n    MessageType,\r\n    TranslationStatus,\r\n} from \"../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionResult,\r\n    TranslationRecognitionCanceledEventArgs,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognitionResult,\r\n    TranslationRecognizer,\r\n    Translations,\r\n    TranslationSynthesisEventArgs,\r\n    TranslationSynthesisResult,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    EnumTranslation,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SynthesisStatus,\r\n    TranslationHypothesis,\r\n    TranslationPhrase,\r\n    TranslationSynthesisEnd,\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class TranslationServiceRecognizer extends ServiceRecognizerBase {\r\n    private privTranslationRecognizer: TranslationRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        translationRecognizer: TranslationRecognizer) {\r\n\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, translationRecognizer);\r\n        this.privTranslationRecognizer = translationRecognizer;\r\n\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): boolean {\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        let processed: boolean = false;\r\n\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"translation.hypothesis\":\r\n\r\n                const result: TranslationRecognitionEventArgs = this.fireEventForResult(TranslationHypothesis.fromJSON(connectionMessage.textBody), resultProps);\r\n                this.privRequestSession.onHypothesis(this.privRequestSession.currentTurnAudioOffset + result.offset);\r\n\r\n                if (!!this.privTranslationRecognizer.recognizing) {\r\n                    try {\r\n                        this.privTranslationRecognizer.recognizing(this.privTranslationRecognizer, result);\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"translation.phrase\":\r\n                const translatedPhrase: TranslationPhrase = TranslationPhrase.fromJSON(connectionMessage.textBody);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset + translatedPhrase.Duration);\r\n\r\n                if (translatedPhrase.RecognitionStatus === RecognitionStatus.Success) {\r\n\r\n                    // OK, the recognition was successful. How'd the translation do?\r\n                    const result: TranslationRecognitionEventArgs = this.fireEventForResult(translatedPhrase, resultProps);\r\n                    if (!!this.privTranslationRecognizer.recognized) {\r\n                        try {\r\n                            this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, result);\r\n                            /* tslint:disable:no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n\r\n                    // report result to promise.\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result.result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n\r\n                    break;\r\n                } else {\r\n                    const reason: ResultReason = EnumTranslation.implTranslateRecognitionResult(translatedPhrase.RecognitionStatus);\r\n\r\n                    const result = new TranslationRecognitionResult(\r\n                        undefined,\r\n                        this.privRequestSession.requestId,\r\n                        reason,\r\n                        translatedPhrase.Text,\r\n                        translatedPhrase.Duration,\r\n                        this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset,\r\n                        undefined,\r\n                        connectionMessage.textBody,\r\n                        resultProps);\r\n\r\n                    if (reason === ResultReason.Canceled) {\r\n                        const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(translatedPhrase.RecognitionStatus);\r\n\r\n                        this.cancelRecognitionLocal(\r\n                            cancelReason,\r\n                            EnumTranslation.implTranslateCancelErrorCode(translatedPhrase.RecognitionStatus),\r\n                            undefined);\r\n                    } else {\r\n                        if (!(this.privRequestSession.isSpeechEnded && reason === ResultReason.NoMatch && translatedPhrase.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                            const ev = new TranslationRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                            if (!!this.privTranslationRecognizer.recognized) {\r\n                                try {\r\n                                    this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, ev);\r\n                                    /* tslint:disable:no-empty */\r\n                                } catch (error) {\r\n                                    // Not going to let errors in the event handler\r\n                                    // trip things up.\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        // report result to promise.\r\n                        if (!!this.privSuccessCallback) {\r\n                            try {\r\n                                this.privSuccessCallback(result);\r\n                            } catch (e) {\r\n                                if (!!this.privErrorCallback) {\r\n                                    this.privErrorCallback(e);\r\n                                }\r\n                            }\r\n                            // Only invoke the call back once.\r\n                            // and if it's successful don't invoke the\r\n                            // error after that.\r\n                            this.privSuccessCallback = undefined;\r\n                            this.privErrorCallback = undefined;\r\n                        }\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n\r\n            case \"translation.synthesis\":\r\n                this.sendSynthesisAudio(connectionMessage.binaryBody, this.privRequestSession.sessionId);\r\n                processed = true;\r\n                break;\r\n\r\n            case \"translation.synthesis.end\":\r\n                const synthEnd: TranslationSynthesisEnd = TranslationSynthesisEnd.fromJSON(connectionMessage.textBody);\r\n\r\n                switch (synthEnd.SynthesisStatus) {\r\n                    case SynthesisStatus.Error:\r\n                        if (!!this.privTranslationRecognizer.synthesizing) {\r\n                            const result = new TranslationSynthesisResult(ResultReason.Canceled, undefined);\r\n                            const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, this.privRequestSession.sessionId);\r\n\r\n                            try {\r\n                                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n\r\n                        if (!!this.privTranslationRecognizer.canceled) {\r\n                            // And raise a canceled event to send the rich(er) error message back.\r\n                            const canceledResult: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\r\n                                this.privRequestSession.sessionId,\r\n                                CancellationReason.Error,\r\n                                synthEnd.FailureReason,\r\n                                CancellationErrorCode.ServiceError,\r\n                                null);\r\n\r\n                            try {\r\n                                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, canceledResult);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                        break;\r\n                    case SynthesisStatus.Success:\r\n                        this.sendSynthesisAudio(undefined, this.privRequestSession.sessionId);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privTranslationRecognizer.canceled) {\r\n\r\n            const cancelEvent: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\r\n                sessionId,\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined);\r\n\r\n            try {\r\n                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, cancelEvent);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: TranslationRecognitionResult = new TranslationRecognitionResult(\r\n                undefined, // Translations\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Druation\r\n                undefined, // Offset\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                /* tslint:disable:no-empty */\r\n                this.privSuccessCallback = undefined;\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    private fireEventForResult(serviceResult: TranslationHypothesis | TranslationPhrase, properties: PropertyCollection): TranslationRecognitionEventArgs {\r\n        let translations: Translations;\r\n\r\n        if (undefined !== serviceResult.Translation.Translations) {\r\n            translations = new Translations();\r\n            for (const translation of serviceResult.Translation.Translations) {\r\n                translations.set(translation.Language, translation.Text);\r\n            }\r\n        }\r\n\r\n        let resultReason: ResultReason;\r\n        if (serviceResult instanceof TranslationPhrase) {\r\n            if (serviceResult.Translation.TranslationStatus === TranslationStatus.Success) {\r\n                resultReason = ResultReason.TranslatedSpeech;\r\n            } else {\r\n                resultReason = ResultReason.RecognizedSpeech;\r\n            }\r\n        } else {\r\n            resultReason = ResultReason.TranslatingSpeech;\r\n        }\r\n\r\n        const offset: number = serviceResult.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n        const result = new TranslationRecognitionResult(\r\n            translations,\r\n            this.privRequestSession.requestId,\r\n            resultReason,\r\n            serviceResult.Text,\r\n            serviceResult.Duration,\r\n            offset,\r\n            serviceResult.Translation.FailureReason,\r\n            JSON.stringify(serviceResult),\r\n            properties);\r\n\r\n        const ev = new TranslationRecognitionEventArgs(result, offset, this.privRequestSession.sessionId);\r\n        return ev;\r\n    }\r\n\r\n    private sendSynthesisAudio(audio: ArrayBuffer, sessionId: string): void {\r\n        const reason = (undefined === audio) ? ResultReason.SynthesizingAudioCompleted : ResultReason.SynthesizingAudio;\r\n        const result = new TranslationSynthesisResult(reason, audio);\r\n        const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, sessionId);\r\n\r\n        if (!!this.privTranslationRecognizer.synthesizing) {\r\n            try {\r\n                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\r\n                /* tslint:disable:no-empty */\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}