{"ast":null,"code":"import _classCallCheck from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { PropertyId } from \"./Exports\";\n/**\n * Represents collection of properties and their values.\n * @class PropertyCollection\n */\n\nexport var PropertyCollection = /*#__PURE__*/function () {\n  function PropertyCollection() {\n    _classCallCheck(this, PropertyCollection);\n\n    this.privKeys = [];\n    this.privValues = [];\n  }\n  /**\n   * Returns the property value in type String. The parameter must have the same type as String.\n   * Currently only String, int and bool are allowed.\n   * If the name is not available, the specified defaultValue is returned.\n   * @member PropertyCollection.prototype.getProperty\n   * @function\n   * @public\n   * @param {string} key - The parameter name.\n   * @param {string} def - The default value which is returned if the parameter\n   *        is not available in the collection.\n   * @returns {string} value of the parameter.\n   */\n\n\n  _createClass(PropertyCollection, [{\n    key: \"getProperty\",\n    value: function getProperty(key, def) {\n      var keyToUse;\n\n      if (typeof key === \"string\") {\n        keyToUse = key;\n      } else {\n        keyToUse = PropertyId[key];\n      }\n\n      for (var n = 0; n < this.privKeys.length; n++) {\n        if (this.privKeys[n] === keyToUse) {\n          return this.privValues[n];\n        }\n      }\n\n      return def;\n    }\n    /**\n     * Sets the String value of the parameter specified by name.\n     * @member PropertyCollection.prototype.setProperty\n     * @function\n     * @public\n     * @param {string} key - The parameter name.\n     * @param {string} value - The value of the parameter.\n     */\n\n  }, {\n    key: \"setProperty\",\n    value: function setProperty(key, value) {\n      var keyToUse;\n\n      if (typeof key === \"string\") {\n        keyToUse = key;\n      } else {\n        keyToUse = PropertyId[key];\n      }\n\n      for (var n = 0; n < this.privKeys.length; n++) {\n        if (this.privKeys[n] === keyToUse) {\n          this.privValues[n] = value;\n          return;\n        }\n      }\n\n      this.privKeys.push(keyToUse);\n      this.privValues.push(value);\n    }\n    /**\n     * Clones the collection.\n     * @member PropertyCollection.prototype.clone\n     * @function\n     * @public\n     * @returns {PropertyCollection} A copy of the collection.\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var clonedMap = new PropertyCollection();\n\n      for (var n = 0; n < this.privKeys.length; n++) {\n        clonedMap.privKeys.push(this.privKeys[n]);\n        clonedMap.privValues.push(this.privValues[n]);\n      }\n\n      return clonedMap;\n    }\n    /**\n     * Merges this set of properties into another, no overwrites.\n     * @member PropertyCollection.prototype.mergeTo\n     * @function\n     * @public\n     * @param {PropertyCollection} The collection to merge into.\n     */\n\n  }, {\n    key: \"mergeTo\",\n    value: function mergeTo(destinationCollection) {\n      var _this = this;\n\n      this.privKeys.forEach(function (key) {\n        if (destinationCollection.getProperty(key, undefined) === undefined) {\n          var value = _this.getProperty(key);\n\n          destinationCollection.setProperty(key, value);\n        }\n      });\n    }\n  }]);\n\n  return PropertyCollection;\n}();","map":{"version":3,"sources":["src/sdk/PropertyCollection.ts"],"names":[],"mappings":";;AAAA;AACA;AAEA,SAAS,UAAT,QAA2B,WAA3B;AAEA;;;AAGG;;AACH,WAAa,kBAAb;AAAA,gCAAA;AAAA;;AACY,SAAA,QAAA,GAAqB,EAArB;AACA,SAAA,UAAA,GAAuB,EAAvB;AA6FX;AA3FG;;;;;;;;;;;AAWG;;;AAfP;AAAA;AAAA,WAgBW,qBAAY,GAAZ,EAAsC,GAAtC,EAAkD;AACrD,UAAI,QAAJ;;AAEA,UAAI,OAAO,GAAP,KAAe,QAAnB,EAA6B;AACzB,QAAA,QAAQ,GAAG,GAAX;AACH,OAFD,MAEO;AACH,QAAA,QAAQ,GAAG,UAAU,CAAC,GAAD,CAArB;AACH;;AAED,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,QAAL,CAAc,MAAlC,EAA0C,CAAC,EAA3C,EAA+C;AAC3C,YAAI,KAAK,QAAL,CAAc,CAAd,MAAqB,QAAzB,EAAmC;AAC/B,iBAAO,KAAK,UAAL,CAAgB,CAAhB,CAAP;AACH;AACJ;;AAED,aAAO,GAAP;AACH;AAED;;;;;;;AAOG;;AAzCP;AAAA;AAAA,WA0CW,qBAAY,GAAZ,EAAsC,KAAtC,EAAmD;AACtD,UAAI,QAAJ;;AAEA,UAAI,OAAO,GAAP,KAAe,QAAnB,EAA6B;AACzB,QAAA,QAAQ,GAAG,GAAX;AACH,OAFD,MAEO;AACH,QAAA,QAAQ,GAAG,UAAU,CAAC,GAAD,CAArB;AACH;;AAED,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,QAAL,CAAc,MAAlC,EAA0C,CAAC,EAA3C,EAA+C;AAC3C,YAAI,KAAK,QAAL,CAAc,CAAd,MAAqB,QAAzB,EAAmC;AAC/B,eAAK,UAAL,CAAgB,CAAhB,IAAqB,KAArB;AACA;AACH;AACJ;;AAED,WAAK,QAAL,CAAc,IAAd,CAAmB,QAAnB;AACA,WAAK,UAAL,CAAgB,IAAhB,CAAqB,KAArB;AACH;AAED;;;;;;AAMG;;AApEP;AAAA;AAAA,WAqEW,iBAAK;AACR,UAAM,SAAS,GAAG,IAAI,kBAAJ,EAAlB;;AAEA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,QAAL,CAAc,MAAlC,EAA0C,CAAC,EAA3C,EAA+C;AAC3C,QAAA,SAAS,CAAC,QAAV,CAAmB,IAAnB,CAAwB,KAAK,QAAL,CAAc,CAAd,CAAxB;AACA,QAAA,SAAS,CAAC,UAAV,CAAqB,IAArB,CAA0B,KAAK,UAAL,CAAgB,CAAhB,CAA1B;AACH;;AAED,aAAO,SAAP;AACH;AAED;;;;;;AAMG;;AAtFP;AAAA;AAAA,WAuFW,iBAAQ,qBAAR,EAAiD;AAAA;;AACpD,WAAK,QAAL,CAAc,OAAd,CAAsB,UAAC,GAAD,EAA6B;AAC/C,YAAI,qBAAqB,CAAC,WAAtB,CAAkC,GAAlC,EAAuC,SAAvC,MAAsD,SAA1D,EAAqE;AACjE,cAAM,KAAK,GAAG,KAAI,CAAC,WAAL,CAAiB,GAAjB,CAAd;;AACA,UAAA,qBAAqB,CAAC,WAAtB,CAAkC,GAAlC,EAAuC,KAAvC;AACH;AACJ,OALD;AAMH;AA9FL;;AAAA;AAAA","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyId } from \"./Exports\";\r\n\r\n/**\r\n * Represents collection of properties and their values.\r\n * @class PropertyCollection\r\n */\r\nexport class PropertyCollection {\r\n    private privKeys: string[] = [] as string[];\r\n    private privValues: string[] = [] as string[];\r\n\r\n    /**\r\n     * Returns the property value in type String. The parameter must have the same type as String.\r\n     * Currently only String, int and bool are allowed.\r\n     * If the name is not available, the specified defaultValue is returned.\r\n     * @member PropertyCollection.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} def - The default value which is returned if the parameter\r\n     *        is not available in the collection.\r\n     * @returns {string} value of the parameter.\r\n     */\r\n    public getProperty(key: PropertyId | string, def?: string): string {\r\n        let keyToUse: string;\r\n\r\n        if (typeof key === \"string\") {\r\n            keyToUse = key;\r\n        } else {\r\n            keyToUse = PropertyId[key];\r\n        }\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            if (this.privKeys[n] === keyToUse) {\r\n                return this.privValues[n];\r\n            }\r\n        }\r\n\r\n        return def;\r\n    }\r\n\r\n    /**\r\n     * Sets the String value of the parameter specified by name.\r\n     * @member PropertyCollection.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} value - The value of the parameter.\r\n     */\r\n    public setProperty(key: string | PropertyId, value: string): void {\r\n        let keyToUse: string;\r\n\r\n        if (typeof key === \"string\") {\r\n            keyToUse = key;\r\n        } else {\r\n            keyToUse = PropertyId[key];\r\n        }\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            if (this.privKeys[n] === keyToUse) {\r\n                this.privValues[n] = value;\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.privKeys.push(keyToUse);\r\n        this.privValues.push(value);\r\n    }\r\n\r\n    /**\r\n     * Clones the collection.\r\n     * @member PropertyCollection.prototype.clone\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} A copy of the collection.\r\n     */\r\n    public clone(): PropertyCollection {\r\n        const clonedMap = new PropertyCollection();\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            clonedMap.privKeys.push(this.privKeys[n]);\r\n            clonedMap.privValues.push(this.privValues[n]);\r\n        }\r\n\r\n        return clonedMap;\r\n    }\r\n\r\n    /**\r\n     * Merges this set of properties into another, no overwrites.\r\n     * @member PropertyCollection.prototype.mergeTo\r\n     * @function\r\n     * @public\r\n     * @param {PropertyCollection} The collection to merge into.\r\n     */\r\n    public mergeTo(destinationCollection: PropertyCollection): void {\r\n        this.privKeys.forEach((key: string | PropertyId) => {\r\n            if (destinationCollection.getProperty(key, undefined) === undefined) {\r\n                const value = this.getProperty(key);\r\n                destinationCollection.setProperty(key, value);\r\n            }\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}