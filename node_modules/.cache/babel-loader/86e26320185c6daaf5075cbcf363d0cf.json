{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Exports_1 = require(\"../sdk/Exports\");\n\nvar Exports_2 = require(\"./Exports\"); // tslint:disable-next-line:max-classes-per-file\n\n\nvar SpeechServiceRecognizer =\n/** @class */\nfunction (_super) {\n  __extends(SpeechServiceRecognizer, _super);\n\n  function SpeechServiceRecognizer(authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer) {\n    var _this = _super.call(this, authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer) || this;\n\n    _this.privSpeechRecognizer = speechRecognizer;\n\n    if (recognizerConfig.autoDetectSourceLanguages !== undefined) {\n      var sourceLanguages = recognizerConfig.autoDetectSourceLanguages.split(\",\");\n\n      _this.privSpeechContext.setSection(\"languageId\", {\n        languages: sourceLanguages,\n        onSuccess: {\n          action: \"Recognize\"\n        },\n        onUnknown: {\n          action: \"None\"\n        }\n      });\n\n      _this.privSpeechContext.setSection(\"phraseOutput\", {\n        interimResults: {\n          resultType: \"Auto\"\n        },\n        phraseResults: {\n          resultType: \"Always\"\n        }\n      });\n    }\n\n    return _this;\n  }\n\n  SpeechServiceRecognizer.prototype.processTypeSpecificMessages = function (connectionMessage) {\n    var result;\n    var resultProps = new Exports_1.PropertyCollection();\n    resultProps.setProperty(Exports_1.PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\n    var processed = false;\n\n    switch (connectionMessage.path.toLowerCase()) {\n      case \"speech.hypothesis\":\n      case \"speech.fragment\":\n        var hypothesis = Exports_2.SpeechHypothesis.fromJSON(connectionMessage.textBody);\n        var offset = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\n        result = new Exports_1.SpeechRecognitionResult(this.privRequestSession.requestId, Exports_1.ResultReason.RecognizingSpeech, hypothesis.Text, hypothesis.Duration, offset, hypothesis.Language, hypothesis.LanguageDetectionConfidence, undefined, connectionMessage.textBody, resultProps);\n        this.privRequestSession.onHypothesis(offset);\n        var ev = new Exports_1.SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\n\n        if (!!this.privSpeechRecognizer.recognizing) {\n          try {\n            this.privSpeechRecognizer.recognizing(this.privSpeechRecognizer, ev);\n            /* tslint:disable:no-empty */\n          } catch (error) {// Not going to let errors in the event handler\n            // trip things up.\n          }\n        }\n\n        processed = true;\n        break;\n\n      case \"speech.phrase\":\n        var simple = Exports_2.SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\n        var resultReason = Exports_2.EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\n        this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\n\n        if (Exports_1.ResultReason.Canceled === resultReason) {\n          var cancelReason = Exports_2.EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\n          this.cancelRecognitionLocal(cancelReason, Exports_2.EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus), undefined);\n        } else {\n          if (!(this.privRequestSession.isSpeechEnded && resultReason === Exports_1.ResultReason.NoMatch && simple.RecognitionStatus !== Exports_2.RecognitionStatus.InitialSilenceTimeout)) {\n            if (this.privRecognizerConfig.parameters.getProperty(Exports_2.OutputFormatPropertyName) === Exports_1.OutputFormat[Exports_1.OutputFormat.Simple]) {\n              result = new Exports_1.SpeechRecognitionResult(this.privRequestSession.requestId, resultReason, simple.DisplayText, simple.Duration, simple.Offset + this.privRequestSession.currentTurnAudioOffset, simple.Language, simple.LanguageDetectionConfidence, undefined, connectionMessage.textBody, resultProps);\n            } else {\n              var detailed = Exports_2.DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\n              result = new Exports_1.SpeechRecognitionResult(this.privRequestSession.requestId, resultReason, detailed.RecognitionStatus === Exports_2.RecognitionStatus.Success ? detailed.NBest[0].Display : undefined, detailed.Duration, detailed.Offset + this.privRequestSession.currentTurnAudioOffset, detailed.Language, detailed.LanguageDetectionConfidence, undefined, connectionMessage.textBody, resultProps);\n            }\n\n            var event_1 = new Exports_1.SpeechRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\n\n            if (!!this.privSpeechRecognizer.recognized) {\n              try {\n                this.privSpeechRecognizer.recognized(this.privSpeechRecognizer, event_1);\n                /* tslint:disable:no-empty */\n              } catch (error) {// Not going to let errors in the event handler\n                // trip things up.\n              }\n            }\n          }\n\n          if (!!this.privSuccessCallback) {\n            try {\n              this.privSuccessCallback(result);\n            } catch (e) {\n              if (!!this.privErrorCallback) {\n                this.privErrorCallback(e);\n              }\n            } // Only invoke the call back once.\n            // and if it's successful don't invoke the\n            // error after that.\n\n\n            this.privSuccessCallback = undefined;\n            this.privErrorCallback = undefined;\n          }\n        }\n\n        processed = true;\n        break;\n\n      default:\n        break;\n    }\n\n    return processed;\n  }; // Cancels recognition.\n\n\n  SpeechServiceRecognizer.prototype.cancelRecognition = function (sessionId, requestId, cancellationReason, errorCode, error) {\n    var properties = new Exports_1.PropertyCollection();\n    properties.setProperty(Exports_2.CancellationErrorCodePropertyName, Exports_1.CancellationErrorCode[errorCode]);\n\n    if (!!this.privSpeechRecognizer.canceled) {\n      var cancelEvent = new Exports_1.SpeechRecognitionCanceledEventArgs(cancellationReason, error, errorCode, undefined, sessionId);\n\n      try {\n        this.privSpeechRecognizer.canceled(this.privSpeechRecognizer, cancelEvent);\n        /* tslint:disable:no-empty */\n      } catch (_a) {}\n    }\n\n    if (!!this.privSuccessCallback) {\n      var result = new Exports_1.SpeechRecognitionResult(requestId, Exports_1.ResultReason.Canceled, undefined, // Text\n      undefined, // Duration\n      undefined, // Offset\n      undefined, // Language\n      undefined, // Language Detection Confidence\n      error, undefined, // Json\n      properties);\n\n      try {\n        this.privSuccessCallback(result);\n        this.privSuccessCallback = undefined;\n        /* tslint:disable:no-empty */\n      } catch (_b) {}\n    }\n  };\n\n  return SpeechServiceRecognizer;\n}(Exports_2.ServiceRecognizerBase);\n\nexports.SpeechServiceRecognizer = SpeechServiceRecognizer;","map":{"version":3,"sources":["src/common.speech/SpeechServiceRecognizer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IAudioSource } from \"../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n    SpeechRecognizer,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    RequestSession,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SpeechServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    private privSpeechRecognizer: SpeechRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        speechRecognizer: SpeechRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer);\r\n        this.privSpeechRecognizer = speechRecognizer;\r\n        if (recognizerConfig.autoDetectSourceLanguages !== undefined) {\r\n            const sourceLanguages: string[] = recognizerConfig.autoDetectSourceLanguages.split(\",\");\r\n            this.privSpeechContext.setSection(\"languageId\", {\r\n                languages: sourceLanguages,\r\n                onSuccess: { action: \"Recognize\" },\r\n                onUnknown: { action: \"None\" }\r\n            });\r\n            this.privSpeechContext.setSection(\"phraseOutput\", {\r\n                interimResults: {\r\n                    resultType: \"Auto\"\r\n                },\r\n                phraseResults: {\r\n                    resultType: \"Always\"\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): boolean {\r\n\r\n        let result: SpeechRecognitionResult;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        let processed: boolean = false;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privSpeechRecognizer.recognizing) {\r\n                    try {\r\n                        this.privSpeechRecognizer.recognizing(this.privSpeechRecognizer, ev);\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\r\n\r\n                if (ResultReason.Canceled === resultReason) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n\r\n                    this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus),\r\n                        undefined);\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                simple.DisplayText,\r\n                                simple.Duration,\r\n                                simple.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                                simple.Language,\r\n                                simple.LanguageDetectionConfidence,\r\n                                undefined,\r\n                                connectionMessage.textBody,\r\n                                resultProps);\r\n                        } else {\r\n                            const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                detailed.RecognitionStatus === RecognitionStatus.Success ? detailed.NBest[0].Display : undefined,\r\n                                detailed.Duration,\r\n                                detailed.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                                detailed.Language,\r\n                                detailed.LanguageDetectionConfidence,\r\n                                undefined,\r\n                                connectionMessage.textBody,\r\n                                resultProps);\r\n                        }\r\n\r\n                        const event: SpeechRecognitionEventArgs = new SpeechRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privSpeechRecognizer.recognized) {\r\n                            try {\r\n                                this.privSpeechRecognizer.recognized(this.privSpeechRecognizer, event);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privSpeechRecognizer.canceled) {\r\n            const cancelEvent: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privSpeechRecognizer.canceled(this.privSpeechRecognizer, cancelEvent);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // Language Detection Confidence\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}