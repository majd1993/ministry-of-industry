{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = sendEventToPostActivitySaga;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _effects = require(\"redux-saga/effects\");\n\nvar _sendEvent = require(\"../actions/sendEvent\");\n\nvar _postActivity = _interopRequireDefault(require(\"../actions/postActivity\"));\n\nvar _whileConnected = _interopRequireDefault(require(\"./effects/whileConnected\"));\n\nvar _marked = /*#__PURE__*/_regenerator[\"default\"].mark(postActivityWithEvent),\n    _marked2 = /*#__PURE__*/_regenerator[\"default\"].mark(sendEventToPostActivity),\n    _marked3 = /*#__PURE__*/_regenerator[\"default\"].mark(sendEventToPostActivitySaga);\n\nfunction postActivityWithEvent(_ref) {\n  var _ref$payload, name, value;\n\n  return _regenerator[\"default\"].wrap(function postActivityWithEvent$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _ref$payload = _ref.payload, name = _ref$payload.name, value = _ref$payload.value;\n          _context.next = 3;\n          return (0, _effects.put)((0, _postActivity[\"default\"])({\n            name: name,\n            type: 'event',\n            value: value\n          }));\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction sendEventToPostActivity() {\n  return _regenerator[\"default\"].wrap(function sendEventToPostActivity$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return (0, _effects.takeEvery)(function (_ref2) {\n            var payload = _ref2.payload,\n                type = _ref2.type;\n            return type === _sendEvent.SEND_EVENT && payload.name;\n          }, postActivityWithEvent);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction sendEventToPostActivitySaga() {\n  return _regenerator[\"default\"].wrap(function sendEventToPostActivitySaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return (0, _whileConnected[\"default\"])(sendEventToPostActivity);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["../../src/sagas/sendEventToPostActivitySaga.js"],"names":["postActivityWithEvent","name","value","type","sendEventToPostActivity","payload","SEND_EVENT","sendEventToPostActivitySaga"],"mappings":";;;;;;;;;;;AAAA,IAAA,QAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAEA,IAAA,UAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AACA,IAAA,aAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,yBAAA,CAAA,CAAA;;AACA,IAAA,eAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,0BAAA,CAAA,CAAA;;wDAEUA,qB;yDAUAI,uB;yDAIeG,2B;;AAdzB,SAAA,qBAAA,CAAA,IAAA,EAAA;AAAA,MAAA,YAAA,EAAA,IAAA,EAAA,KAAA;;AAAA,SAAA,YAAA,CAAA,SAAA,CAAA,CAAA,IAAA,CAAA,SAAA,sBAAA,CAAA,QAAA,EAAA;AAAA,WAAA,CAAA,EAAA;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,aAAA,CAAA;AAAA,UAAA,YAAA,GAAA,IAAA,CAAA,OAAA,EAA6CN,IAA7C,GAAA,YAAA,CAAA,IAAA,EAAmDC,KAAnD,GAAA,YAAA,CAAA,KAAA;AAAA,UAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AACE,iBAAM,CAAA,GAAA,QAAA,CAAA,GAAA,EACJ,CAAA,GAAA,aAAA,CAAA,SAAA,CAAA,EAAa;AACXD,YAAAA,IAAI,EADO,IAAA;AAEXE,YAAAA,IAAI,EAFO,OAAA;AAGXD,YAAAA,KAAK,EAALA;AAHW,WAAb,CADI,CAAN;;AADF,aAAA,CAAA;AAAA,aAAA,KAAA;AAAA,iBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,GAAA,EAAA,OAAA,CAAA;AAAA;;AAUA,SAAA,uBAAA,GAAA;AAAA,SAAA,YAAA,CAAA,SAAA,CAAA,CAAA,IAAA,CAAA,SAAA,wBAAA,CAAA,SAAA,EAAA;AAAA,WAAA,CAAA,EAAA;AAAA,cAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,aAAA,CAAA;AAAA,UAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AACE,iBAAM,CAAA,GAAA,QAAA,CAAA,SAAA,EAAU,UAAA,KAAA,EAAA;AAAA,gBAAGG,OAAH,GAAA,KAAA,CAAA,OAAA;AAAA,gBAAYF,IAAZ,GAAA,KAAA,CAAA,IAAA;AAAA,mBAAuBA,IAAI,KAAKG,UAAAA,CAATH,UAAAA,IAAuBE,OAAO,CAArD,IAAA;AAAV,WAAA,EAAN,qBAAM,CAAN;;AADF,aAAA,CAAA;AAAA,aAAA,KAAA;AAAA,iBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,GAAA,EAAA,QAAA,CAAA;AAAA;;AAIe,SAAA,2BAAA,GAAA;AAAA,SAAA,YAAA,CAAA,SAAA,CAAA,CAAA,IAAA,CAAA,SAAA,4BAAA,CAAA,SAAA,EAAA;AAAA,WAAA,CAAA,EAAA;AAAA,cAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,aAAA,CAAA;AAAA,UAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AACb,iBAAM,CAAA,GAAA,eAAA,CAAA,SAAA,CAAA,EAAN,uBAAM,CAAN;;AADa,aAAA,CAAA;AAAA,aAAA,KAAA;AAAA,iBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,GAAA,EAAA,QAAA,CAAA;AAAA","sourcesContent":["import { put, takeEvery } from 'redux-saga/effects';\n\nimport { SEND_EVENT } from '../actions/sendEvent';\nimport postActivity from '../actions/postActivity';\nimport whileConnected from './effects/whileConnected';\n\nfunction* postActivityWithEvent({ payload: { name, value } }) {\n  yield put(\n    postActivity({\n      name,\n      type: 'event',\n      value\n    })\n  );\n}\n\nfunction* sendEventToPostActivity() {\n  yield takeEvery(({ payload, type }) => type === SEND_EVENT && payload.name, postActivityWithEvent);\n}\n\nexport default function* sendEventToPostActivitySaga() {\n  yield whileConnected(sendEventToPostActivity);\n}\n"],"sourceRoot":"core:///"},"metadata":{},"sourceType":"script"}