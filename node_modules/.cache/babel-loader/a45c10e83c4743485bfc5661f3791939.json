{"ast":null,"code":"import _classCallCheck from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ArgumentNullError, PromiseHelper } from \"../common/Exports\";\nimport { AuthInfo } from \"./IAuthentication\";\nvar AuthHeader = \"Ocp-Apim-Subscription-Key\";\n/**\n * @class\n */\n\nexport var CognitiveSubscriptionKeyAuthentication =\n/**\n * Creates and initializes an instance of the CognitiveSubscriptionKeyAuthentication class.\n * @constructor\n * @param {string} subscriptionKey - The subscription key\n */\nfunction CognitiveSubscriptionKeyAuthentication(subscriptionKey) {\n  var _this = this;\n\n  _classCallCheck(this, CognitiveSubscriptionKeyAuthentication);\n\n  /**\n   * Fetches the subscription key.\n   * @member\n   * @function\n   * @public\n   * @param {string} authFetchEventId - The id to fetch.\n   */\n  this.fetch = function (authFetchEventId) {\n    return PromiseHelper.fromResult(_this.privAuthInfo);\n  };\n  /**\n   * Fetches the subscription key.\n   * @member\n   * @function\n   * @public\n   * @param {string} authFetchEventId - The id to fetch.\n   */\n\n\n  this.fetchOnExpiry = function (authFetchEventId) {\n    return PromiseHelper.fromResult(_this.privAuthInfo);\n  };\n\n  if (!subscriptionKey) {\n    throw new ArgumentNullError(\"subscriptionKey\");\n  }\n\n  this.privAuthInfo = new AuthInfo(AuthHeader, subscriptionKey);\n};","map":{"version":3,"sources":["src/common.speech/CognitiveSubscriptionKeyAuthentication.ts"],"names":[],"mappings":";AAAA;AACA;AAEA,SAAS,iBAAT,EAAqC,aAArC,QAA0D,mBAA1D;AACA,SAAS,QAAT,QAA0C,mBAA1C;AAEA,IAAM,UAAU,GAAW,2BAA3B;AAEA;;AAEG;;AACH,WAAa,sCAAb;AAGI;;;;AAIG;AACH,gDAAY,eAAZ,EAAmC;AAAA;;AAAA;;AAQnC;;;;;;AAMG;AACI,OAAA,KAAA,GAAQ,UAAC,gBAAD,EAAgD;AAC3D,WAAO,aAAa,CAAC,UAAd,CAAyB,KAAI,CAAC,YAA9B,CAAP;AACH,GAFM;AAIP;;;;;;AAMG;;;AACI,OAAA,aAAA,GAAgB,UAAC,gBAAD,EAAgD;AACnE,WAAO,aAAa,CAAC,UAAd,CAAyB,KAAI,CAAC,YAA9B,CAAP;AACH,GAFM;;AAzBH,MAAI,CAAC,eAAL,EAAsB;AAClB,UAAM,IAAI,iBAAJ,CAAsB,iBAAtB,CAAN;AACH;;AAED,OAAK,YAAL,GAAoB,IAAI,QAAJ,CAAa,UAAb,EAAyB,eAAzB,CAApB;AACH,CAdL","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError, Promise, PromiseHelper } from \"../common/Exports\";\r\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\r\n\r\nconst AuthHeader: string = \"Ocp-Apim-Subscription-Key\";\r\n\r\n/**\r\n * @class\r\n */\r\nexport class CognitiveSubscriptionKeyAuthentication implements IAuthentication {\r\n    private privAuthInfo: AuthInfo;\r\n\r\n    /**\r\n     * Creates and initializes an instance of the CognitiveSubscriptionKeyAuthentication class.\r\n     * @constructor\r\n     * @param {string} subscriptionKey - The subscription key\r\n     */\r\n    constructor(subscriptionKey: string) {\r\n        if (!subscriptionKey) {\r\n            throw new ArgumentNullError(\"subscriptionKey\");\r\n        }\r\n\r\n        this.privAuthInfo = new AuthInfo(AuthHeader, subscriptionKey);\r\n    }\r\n\r\n    /**\r\n     * Fetches the subscription key.\r\n     * @member\r\n     * @function\r\n     * @public\r\n     * @param {string} authFetchEventId - The id to fetch.\r\n     */\r\n    public fetch = (authFetchEventId: string): Promise<AuthInfo> => {\r\n        return PromiseHelper.fromResult(this.privAuthInfo);\r\n    }\r\n\r\n    /**\r\n     * Fetches the subscription key.\r\n     * @member\r\n     * @function\r\n     * @public\r\n     * @param {string} authFetchEventId - The id to fetch.\r\n     */\r\n    public fetchOnExpiry = (authFetchEventId: string): Promise<AuthInfo> => {\r\n        return PromiseHelper.fromResult(this.privAuthInfo);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}