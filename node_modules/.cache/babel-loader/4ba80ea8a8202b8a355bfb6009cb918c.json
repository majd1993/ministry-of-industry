{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) {\n    if (b.hasOwnProperty(p)) d[p] = b[p];\n  }\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Scheduler_1 = require('../Scheduler');\n\nvar AsyncScheduler = function (_super) {\n  __extends(AsyncScheduler, _super);\n\n  function AsyncScheduler() {\n    _super.apply(this, arguments);\n\n    this.actions = [];\n    /**\n     * A flag to indicate whether the Scheduler is currently executing a batch of\n     * queued actions.\n     * @type {boolean}\n     */\n\n    this.active = false;\n    /**\n     * An internal ID used to track the latest asynchronous task such as those\n     * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n     * others.\n     * @type {any}\n     */\n\n    this.scheduled = undefined;\n  }\n\n  AsyncScheduler.prototype.flush = function (action) {\n    var actions = this.actions;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    var error;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n\n      throw error;\n    }\n  };\n\n  return AsyncScheduler;\n}(Scheduler_1.Scheduler);\n\nexports.AsyncScheduler = AsyncScheduler;","map":{"version":3,"sources":["../../src/scheduler/AsyncScheduler.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,IAAA,WAAA,GAAA,OAAA,CAA0B,cAA1B,CAAA;;AAGA,IAAA,cAAA,GAAA,UAAA,MAAA,EAAA;AAAoC,EAAA,SAAA,CAAA,cAAA,EAAA,MAAA,CAAA;;AAApC,WAAA,cAAA,GAAA;AAAoC,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA;;AAC3B,SAAA,OAAA,GAAmC,EAAnC;AACP;;;;AAIG;;AACI,SAAA,MAAA,GAAkB,KAAlB;AACP;;;;;AAKG;;AACI,SAAA,SAAA,GAAiB,SAAjB;AA6BR;;AA3BQ,EAAA,cAAA,CAAA,SAAA,CAAA,KAAA,GAAP,UAAa,MAAb,EAAqC;AAE5B,QAAA,OAAA,GAAA,KAAA,OAAA;;AAEP,QAAI,KAAK,MAAT,EAAiB;AACf,MAAA,OAAO,CAAC,IAAR,CAAa,MAAb;AACA;AACD;;AAED,QAAI,KAAJ;AACA,SAAK,MAAL,GAAc,IAAd;;AAEA,OAAG;AACD,UAAI,KAAK,GAAG,MAAM,CAAC,OAAP,CAAe,MAAM,CAAC,KAAtB,EAA6B,MAAM,CAAC,KAApC,CAAZ,EAAwD;AACtD;AACD;AACF,KAJD,QAIS,MAAM,GAAG,OAAO,CAAC,KAAR,EAJlB,EAZmC,CAgBC;;;AAEpC,SAAK,MAAL,GAAc,KAAd;;AAEA,QAAI,KAAJ,EAAW;AACT,aAAO,MAAM,GAAG,OAAO,CAAC,KAAR,EAAhB,EAAiC;AAC/B,QAAA,MAAM,CAAC,WAAP;AACD;;AACD,YAAM,KAAN;AACD;AACF,GA1BM;;AA2BT,SAAA,cAAA;AAAC,CA3CD,CAAoC,WAAA,CAAA,SAApC,CAAA;;AAAa,OAAA,CAAA,cAAA,GAAc,cAAd","sourcesContent":["import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}