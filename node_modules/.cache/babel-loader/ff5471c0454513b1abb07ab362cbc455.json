{"ast":null,"code":"/**\n * Globalize Runtime v1.5.0\n *\n * http://github.com/jquery/globalize\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2020-03-25T12:19Z\n */\n\n/*!\n * Globalize Runtime v1.5.0 2020-03-25T12:19Z Released under the MIT license\n * http://git.io/TrdQbw\n */\n(function (root, factory) {\n  \"use strict\"; // UMD returnExports\n\n  if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define([\"../globalize-runtime\", \"./number\", \"./plural\"], factory);\n  } else if (typeof exports === \"object\") {\n    // Node, CommonJS\n    module.exports = factory(require(\"../globalize-runtime\"), require(\"./number\"), require(\"./plural\"));\n  } else {\n    // Extend global\n    factory(root.Globalize);\n  }\n})(this, function (Globalize) {\n  var formatMessage = Globalize._formatMessage,\n      runtimeKey = Globalize._runtimeKey,\n      validateParameterPresence = Globalize._validateParameterPresence,\n      validateParameterTypeNumber = Globalize._validateParameterTypeNumber;\n  /**\n   * format( value, numberFormatter, pluralGenerator, unitProperies )\n   *\n   * @value [Number]\n   *\n   * @numberFormatter [Object]: A numberFormatter from Globalize.numberFormatter.\n   *\n   * @pluralGenerator [Object]: A pluralGenerator from Globalize.pluralGenerator.\n   *\n   * @unitProperies [Object]: localized unit data from cldr.\n   *\n   * Format units such as seconds, minutes, days, weeks, etc.\n   *\n   * OBS:\n   *\n   * Unit Sequences are not implemented.\n   * http://www.unicode.org/reports/tr35/tr35-35/tr35-general.html#Unit_Sequences\n   *\n   * Duration Unit (for composed time unit durations) is not implemented.\n   * http://www.unicode.org/reports/tr35/tr35-35/tr35-general.html#durationUnit\n   */\n\n  var unitFormat = function unitFormat(value, numberFormatter, pluralGenerator, unitProperties) {\n    var compoundUnitPattern = unitProperties.compoundUnitPattern,\n        dividend,\n        dividendProperties,\n        formattedValue,\n        divisor,\n        divisorProperties,\n        message,\n        pluralValue,\n        oneProperty;\n    unitProperties = unitProperties.unitProperties;\n    formattedValue = numberFormatter(value);\n    pluralValue = pluralGenerator(value); // computed compound unit, eg. \"megabyte-per-second\".\n\n    if (unitProperties instanceof Array) {\n      dividendProperties = unitProperties[0];\n      divisorProperties = unitProperties[1];\n      oneProperty = divisorProperties.hasOwnProperty(\"one\") ? \"one\" : \"other\";\n      dividend = formatMessage(dividendProperties[pluralValue], [formattedValue]);\n      divisor = formatMessage(divisorProperties[oneProperty], [\"\"]).trim();\n      return formatMessage(compoundUnitPattern, [dividend, divisor]);\n    }\n\n    message = unitProperties[pluralValue];\n    return formatMessage(message, [formattedValue]);\n  };\n\n  var unitFormatterFn = function unitFormatterFn(numberFormatter, pluralGenerator, unitProperties) {\n    return function unitFormatter(value) {\n      validateParameterPresence(value, \"value\");\n      validateParameterTypeNumber(value, \"value\");\n      return unitFormat(value, numberFormatter, pluralGenerator, unitProperties);\n    };\n  };\n\n  Globalize._unitFormatterFn = unitFormatterFn;\n\n  Globalize.formatUnit = Globalize.prototype.formatUnit = function (value, unit, options) {\n    return this.unitFormatter(unit, options)(value);\n  };\n\n  Globalize.unitFormatter = Globalize.prototype.unitFormatter = function (unit, options) {\n    options = options || {};\n    return Globalize[runtimeKey(\"unitFormatter\", this._locale, [unit, options])];\n  };\n\n  return Globalize;\n});","map":{"version":3,"sources":["/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/globalize/dist/globalize-runtime/unit.js"],"names":["root","factory","define","amd","exports","module","require","Globalize","formatMessage","_formatMessage","runtimeKey","_runtimeKey","validateParameterPresence","_validateParameterPresence","validateParameterTypeNumber","_validateParameterTypeNumber","unitFormat","value","numberFormatter","pluralGenerator","unitProperties","compoundUnitPattern","dividend","dividendProperties","formattedValue","divisor","divisorProperties","message","pluralValue","oneProperty","Array","hasOwnProperty","trim","unitFormatterFn","unitFormatter","_unitFormatterFn","formatUnit","prototype","unit","options","_locale"],"mappings":"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","sourcesContent":["/**\n * Globalize Runtime v1.5.0\n *\n * http://github.com/jquery/globalize\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2020-03-25T12:19Z\n */\n/*!\n * Globalize Runtime v1.5.0 2020-03-25T12:19Z Released under the MIT license\n * http://git.io/TrdQbw\n */\n(function( root, factory ) {\n\n\t\"use strict\";\n\n\t// UMD returnExports\n\tif ( typeof define === \"function\" && define.amd ) {\n\n\t\t// AMD\n\t\tdefine([\n\t\t\t\"../globalize-runtime\",\n\t\t\t\"./number\",\n\t\t\t\"./plural\"\n\t\t], factory );\n\t} else if ( typeof exports === \"object\" ) {\n\n\t\t// Node, CommonJS\n\t\tmodule.exports = factory(\n\t\t\trequire( \"../globalize-runtime\" ),\n\t\t\trequire( \"./number\" ),\n\t\t\trequire( \"./plural\" )\n\t\t);\n\t} else {\n\n\t\t// Extend global\n\t\tfactory( root.Globalize );\n\t}\n}(this, function( Globalize ) {\n\n\n\nvar formatMessage = Globalize._formatMessage,\n\truntimeKey = Globalize._runtimeKey,\n\tvalidateParameterPresence = Globalize._validateParameterPresence,\n\tvalidateParameterTypeNumber = Globalize._validateParameterTypeNumber;\n\n\n/**\n * format( value, numberFormatter, pluralGenerator, unitProperies )\n *\n * @value [Number]\n *\n * @numberFormatter [Object]: A numberFormatter from Globalize.numberFormatter.\n *\n * @pluralGenerator [Object]: A pluralGenerator from Globalize.pluralGenerator.\n *\n * @unitProperies [Object]: localized unit data from cldr.\n *\n * Format units such as seconds, minutes, days, weeks, etc.\n *\n * OBS:\n *\n * Unit Sequences are not implemented.\n * http://www.unicode.org/reports/tr35/tr35-35/tr35-general.html#Unit_Sequences\n *\n * Duration Unit (for composed time unit durations) is not implemented.\n * http://www.unicode.org/reports/tr35/tr35-35/tr35-general.html#durationUnit\n */\nvar unitFormat = function( value, numberFormatter, pluralGenerator, unitProperties ) {\n\tvar compoundUnitPattern = unitProperties.compoundUnitPattern, dividend, dividendProperties,\n\t\tformattedValue, divisor, divisorProperties, message, pluralValue, oneProperty;\n\n\tunitProperties = unitProperties.unitProperties;\n\tformattedValue = numberFormatter( value );\n\tpluralValue = pluralGenerator( value );\n\n\t// computed compound unit, eg. \"megabyte-per-second\".\n\tif ( unitProperties instanceof Array ) {\n\t\tdividendProperties = unitProperties[ 0 ];\n\t\tdivisorProperties = unitProperties[ 1 ];\n\t\toneProperty = divisorProperties.hasOwnProperty( \"one\" ) ? \"one\" : \"other\";\n\n\t\tdividend = formatMessage( dividendProperties[ pluralValue ], [ formattedValue ] );\n\t\tdivisor = formatMessage( divisorProperties[oneProperty], [ \"\" ] ).trim();\n\n\t\treturn formatMessage( compoundUnitPattern, [ dividend, divisor ] );\n\t}\n\n\tmessage = unitProperties[ pluralValue ];\n\n\treturn formatMessage( message, [ formattedValue ] );\n};\n\n\n\n\nvar unitFormatterFn = function( numberFormatter, pluralGenerator, unitProperties ) {\n\treturn function unitFormatter( value ) {\n\t\tvalidateParameterPresence( value, \"value\" );\n\t\tvalidateParameterTypeNumber( value, \"value\" );\n\n\t\treturn unitFormat( value, numberFormatter, pluralGenerator, unitProperties );\n\t};\n\n};\n\n\n\n\nGlobalize._unitFormatterFn = unitFormatterFn;\n\nGlobalize.formatUnit =\nGlobalize.prototype.formatUnit = function( value, unit, options ) {\n\treturn this.unitFormatter( unit, options )( value );\n};\n\nGlobalize.unitFormatter =\nGlobalize.prototype.unitFormatter = function( unit, options ) {\n\toptions = options || {};\n\treturn Globalize[ runtimeKey( \"unitFormatter\", this._locale, [ unit, options ] ) ];\n};\n\nreturn Globalize;\n\n\n\n\n}));\n"]},"metadata":{},"sourceType":"script"}