{"ast":null,"code":"import _classCallCheck from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { DialogConnectionFactory } from \"../common.speech/DialogConnectorFactory\";\nimport { DialogServiceAdapter, RecognitionMode, RecognizerConfig } from \"../common.speech/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport { Recognizer } from \"./Exports\";\nimport { PropertyId } from \"./PropertyId\";\nimport { SpeechSynthesisOutputFormat } from \"./SpeechSynthesisOutputFormat\";\n/**\n * Dialog Service Connector\n * @class DialogServiceConnector\n */\n\nexport var DialogServiceConnector = /*#__PURE__*/function (_Recognizer) {\n  _inherits(DialogServiceConnector, _Recognizer);\n\n  var _super = _createSuper(DialogServiceConnector);\n\n  /**\n   * Initializes an instance of the DialogServiceConnector.\n   * @constructor\n   * @param {DialogServiceConfig} dialogConfig - Set of properties to configure this recognizer.\n   * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\n   */\n  function DialogServiceConnector(dialogConfig, audioConfig) {\n    var _this;\n\n    _classCallCheck(this, DialogServiceConnector);\n\n    var dialogServiceConfigImpl = dialogConfig;\n    Contracts.throwIfNull(dialogConfig, \"dialogConfig\");\n    _this = _super.call(this, audioConfig, dialogServiceConfigImpl.properties, new DialogConnectionFactory());\n    _this.isTurnComplete = true;\n    _this.privIsDisposed = false;\n    _this.privProperties = dialogServiceConfigImpl.properties.clone();\n\n    var agentConfig = _this.buildAgentConfig();\n\n    _this.privReco.agentConfig.set(agentConfig);\n\n    return _this;\n  }\n  /**\n   * Starts a connection to the service.\n   * Users can optionally call connect() to manually set up a connection in advance, before starting interactions.\n   *\n   * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to\n   * be notified when the connection is established.\n   * @member DialogServiceConnector.prototype.connect\n   * @function\n   * @public\n   */\n\n\n  _createClass(DialogServiceConnector, [{\n    key: \"connect\",\n    value: function connect() {\n      this.privReco.connect();\n    }\n    /**\n     * Closes the connection the service.\n     * Users can optionally call disconnect() to manually shutdown the connection of the associated DialogServiceConnector.\n     *\n     * If disconnect() is called during a recognition, recognition will fail and cancel with an error.\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      this.privReco.disconnect();\n    }\n    /**\n     * Gets the authorization token used to communicate with the service.\n     * @member DialogServiceConnector.prototype.authorizationToken\n     * @function\n     * @public\n     * @returns {string} Authorization token.\n     */\n\n  }, {\n    key: \"authorizationToken\",\n    get: function get() {\n      return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n    }\n    /**\n     * Sets the authorization token used to communicate with the service.\n     * @member DialogServiceConnector.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} token - Authorization token.\n     */\n    ,\n    set: function set(token) {\n      Contracts.throwIfNullOrWhitespace(token, \"token\");\n      this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n    }\n    /**\n     * The collection of properties and their values defined for this DialogServiceConnector.\n     * @member DialogServiceConnector.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The collection of properties and their values defined for this DialogServiceConnector.\n     */\n\n  }, {\n    key: \"properties\",\n    get: function get() {\n      return this.privProperties;\n    }\n    /** Gets the template for the activity generated by service from speech.\n     * Properties from the template will be stamped on the generated activity.\n     * It can be empty\n     */\n\n  }, {\n    key: \"speechActivityTemplate\",\n    get: function get() {\n      return this.properties.getProperty(PropertyId.Conversation_Speech_Activity_Template);\n    }\n    /** Sets the template for the activity generated by service from speech.\n     * Properties from the template will be stamped on the generated activity.\n     * It can be null or empty.\n     * Note: it has to be a valid Json object.\n     */\n    ,\n    set: function set(speechActivityTemplate) {\n      this.properties.setProperty(PropertyId.Conversation_Speech_Activity_Template, speechActivityTemplate);\n    }\n    /**\n     * Starts recognition and stops after the first utterance is recognized.\n     * @member DialogServiceConnector.prototype.listenOnceAsync\n     * @function\n     * @public\n     * @param cb - Callback that received the result when the reco has completed.\n     * @param err - Callback invoked in case of an error.\n     */\n\n  }, {\n    key: \"listenOnceAsync\",\n    value: function listenOnceAsync(cb, err) {\n      var _this2 = this;\n\n      if (this.isTurnComplete) {\n        try {\n          Contracts.throwIfDisposed(this.privIsDisposed);\n          this.connect();\n          this.implRecognizerStop();\n          this.isTurnComplete = false;\n          this.privReco.recognize(RecognitionMode.Conversation, function (e) {\n            _this2.implRecognizerStop();\n\n            _this2.isTurnComplete = true;\n\n            if (!!cb) {\n              cb(e);\n            }\n          }, function (e) {\n            _this2.implRecognizerStop();\n\n            _this2.isTurnComplete = true;\n\n            if (!!err) {\n              err(e);\n            }\n            /* tslint:disable:no-empty */\n\n          }).on(function (_) {}, function (error) {\n            if (!!err) {\n              err(error);\n            }\n          });\n        } catch (error) {\n          if (!!err) {\n            if (error instanceof Error) {\n              var typedError = error;\n              err(typedError.name + \": \" + typedError.message);\n            } else {\n              err(error);\n            }\n          } // Destroy the recognizer.\n\n\n          this.dispose(true);\n        }\n      }\n    }\n  }, {\n    key: \"sendActivityAsync\",\n    value: function sendActivityAsync(activity) {\n      this.privReco.sendMessage(activity);\n    }\n    /**\n     * closes all external resources held by an instance of this class.\n     * @member DialogServiceConnector.prototype.close\n     * @function\n     * @public\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n      this.dispose(true);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose(disposing) {\n      if (this.privIsDisposed) {\n        return;\n      }\n\n      if (disposing) {\n        this.implRecognizerStop();\n        this.privIsDisposed = true;\n\n        _get(_getPrototypeOf(DialogServiceConnector.prototype), \"dispose\", this).call(this, disposing);\n      }\n    }\n  }, {\n    key: \"createRecognizerConfig\",\n    value: function createRecognizerConfig(speechConfig) {\n      return new RecognizerConfig(speechConfig, this.privProperties);\n    }\n  }, {\n    key: \"createServiceRecognizer\",\n    value: function createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {\n      var audioSource = audioConfig;\n      return new DialogServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\n    }\n  }, {\n    key: \"buildAgentConfig\",\n    value: function buildAgentConfig() {\n      var communicationType = this.properties.getProperty(\"Conversation_Communication_Type\", \"Default\");\n      return {\n        botInfo: {\n          commType: communicationType,\n          commandsCulture: undefined,\n          connectionId: this.properties.getProperty(PropertyId.Conversation_ApplicationId),\n          conversationId: this.properties.getProperty(PropertyId.Conversation_Conversation_Id, undefined),\n          fromId: this.properties.getProperty(PropertyId.Conversation_From_Id, undefined),\n          ttsAudioFormat: SpeechSynthesisOutputFormat[this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)]\n        },\n        version: 0.2\n      };\n    }\n  }]);\n\n  return DialogServiceConnector;\n}(Recognizer);","map":{"version":3,"sources":["src/sdk/DialogServiceConnector.ts"],"names":[],"mappings":";;;;;;AAAA;AACA;AAEA,SAAS,uBAAT,QAAwC,yCAAxC;AACA,SACI,oBADJ,EAKI,eALJ,EAMI,gBANJ,QASO,0BATP;AAYA,SAAS,SAAT,QAA0B,aAA1B;AAEA,SAGI,UAHJ,QAOO,WAPP;AAQA,SAAS,UAAT,QAA2B,cAA3B;AACA,SAAS,2BAAT,QAA4C,+BAA5C;AAEA;;;AAGG;;AACH,WAAa,sBAAb;AAAA;;AAAA;;AAII;;;;;AAKG;AACH,kCAAmB,YAAnB,EAAsD,WAAtD,EAA+E;AAAA;;AAAA;;AAC3E,QAAM,uBAAuB,GAAG,YAAhC;AACA,IAAA,SAAS,CAAC,WAAV,CAAsB,YAAtB,EAAoC,cAApC;AAEA,8BAAM,WAAN,EAAmB,uBAAuB,CAAC,UAA3C,EAAuD,IAAI,uBAAJ,EAAvD;AAEA,UAAK,cAAL,GAAsB,IAAtB;AACA,UAAK,cAAL,GAAsB,KAAtB;AACA,UAAK,cAAL,GAAsB,uBAAuB,CAAC,UAAxB,CAAmC,KAAnC,EAAtB;;AAEA,QAAM,WAAW,GAAG,MAAK,gBAAL,EAApB;;AACA,UAAK,QAAL,CAAc,WAAd,CAA0B,GAA1B,CAA8B,WAA9B;;AAX2E;AAY9E;AAkCD;;;;;;;;;AASG;;;AAjEP;AAAA;AAAA,WAkEW,mBAAO;AACV,WAAK,QAAL,CAAc,OAAd;AACH;AAED;;;;;AAKG;;AA3EP;AAAA;AAAA,WA4EW,sBAAU;AACb,WAAK,QAAL,CAAc,UAAd;AACH;AAED;;;;;;AAMG;;AAtFP;AAAA;AAAA,SAuFI,eAA6B;AACzB,aAAO,KAAK,UAAL,CAAgB,WAAhB,CAA4B,UAAU,CAAC,gCAAvC,CAAP;AACH;AAED;;;;;;AAMG;AAjGP;AAAA,SAkGI,aAA8B,KAA9B,EAA2C;AACvC,MAAA,SAAS,CAAC,uBAAV,CAAkC,KAAlC,EAAyC,OAAzC;AACA,WAAK,UAAL,CAAgB,WAAhB,CAA4B,UAAU,CAAC,gCAAvC,EAAyE,KAAzE;AACH;AAED;;;;;;AAMG;;AA7GP;AAAA;AAAA,SA8GI,eAAqB;AACjB,aAAO,KAAK,cAAZ;AACH;AAED;;;AAGG;;AArHP;AAAA;AAAA,SAsHI,eAAiC;AAC7B,aAAO,KAAK,UAAL,CAAgB,WAAhB,CAA4B,UAAU,CAAC,qCAAvC,CAAP;AACH;AAED;;;;AAIG;AA9HP;AAAA,SA+HI,aAAkC,sBAAlC,EAAgE;AAC5D,WAAK,UAAL,CAAgB,WAAhB,CAA4B,UAAU,CAAC,qCAAvC,EAA8E,sBAA9E;AACH;AAED;;;;;;;AAOG;;AA1IP;AAAA;AAAA,WA2IW,yBAAgB,EAAhB,EAA2D,GAA3D,EAAoF;AAAA;;AACvF,UAAI,KAAK,cAAT,EAAyB;AACrB,YAAI;AACA,UAAA,SAAS,CAAC,eAAV,CAA0B,KAAK,cAA/B;AAEA,eAAK,OAAL;AAEA,eAAK,kBAAL;AACA,eAAK,cAAL,GAAsB,KAAtB;AAEA,eAAK,QAAL,CAAc,SAAd,CACI,eAAe,CAAC,YADpB,EAEI,UAAC,CAAD,EAA+B;AAC3B,YAAA,MAAI,CAAC,kBAAL;;AAEA,YAAA,MAAI,CAAC,cAAL,GAAsB,IAAtB;;AAEA,gBAAI,CAAC,CAAC,EAAN,EAAU;AACN,cAAA,EAAE,CAAC,CAAD,CAAF;AACH;AACJ,WAVL,EAWI,UAAC,CAAD,EAAc;AACV,YAAA,MAAI,CAAC,kBAAL;;AACA,YAAA,MAAI,CAAC,cAAL,GAAsB,IAAtB;;AACA,gBAAI,CAAC,CAAC,GAAN,EAAW;AACP,cAAA,GAAG,CAAC,CAAD,CAAH;AACH;AACD;;AACH,WAlBL,EAkBO,EAlBP,CAkBU,UAAC,CAAD,EAAqB,CAAI,CAlBnC,EAmBQ,UAAC,KAAD,EAAwB;AACpB,gBAAI,CAAC,CAAC,GAAN,EAAW;AACP,cAAA,GAAG,CAAC,KAAD,CAAH;AACH;AACJ,WAvBT;AAwBH,SAhCD,CAgCE,OAAO,KAAP,EAAc;AACZ,cAAI,CAAC,CAAC,GAAN,EAAW;AACP,gBAAI,KAAK,YAAY,KAArB,EAA4B;AACxB,kBAAM,UAAU,GAAU,KAA1B;AACA,cAAA,GAAG,CAAC,UAAU,CAAC,IAAX,GAAkB,IAAlB,GAAyB,UAAU,CAAC,OAArC,CAAH;AACH,aAHD,MAGO;AACH,cAAA,GAAG,CAAC,KAAD,CAAH;AACH;AACJ,WARW,CAUZ;;;AACA,eAAK,OAAL,CAAa,IAAb;AACH;AACJ;AACJ;AA3LL;AAAA;AAAA,WA6LW,2BAAkB,QAAlB,EAAkC;AACrC,WAAK,QAAL,CAAc,WAAd,CAA0B,QAA1B;AACH;AAED;;;;;AAKG;;AAtMP;AAAA;AAAA,WAuMW,iBAAK;AACR,MAAA,SAAS,CAAC,eAAV,CAA0B,KAAK,cAA/B;AAEA,WAAK,OAAL,CAAa,IAAb;AACH;AA3ML;AAAA;AAAA,WA6Mc,iBAAQ,SAAR,EAA0B;AAChC,UAAI,KAAK,cAAT,EAAyB;AACrB;AACH;;AAED,UAAI,SAAJ,EAAe;AACX,aAAK,kBAAL;AACA,aAAK,cAAL,GAAsB,IAAtB;;AACA,4FAAc,SAAd;AACH;AACJ;AAvNL;AAAA;AAAA,WAyNc,gCAAuB,YAAvB,EAAwD;AAC9D,aAAO,IAAI,gBAAJ,CAAqB,YAArB,EAAmC,KAAK,cAAxC,CAAP;AACH;AA3NL;AAAA;AAAA,WA6Nc,iCACN,cADM,EAEN,iBAFM,EAGN,WAHM,EAIN,gBAJM,EAI4B;AAElC,UAAM,WAAW,GAAoB,WAArC;AAEA,aAAO,IAAI,oBAAJ,CAAyB,cAAzB,EAAyC,iBAAzC,EAA4D,WAA5D,EAAyE,gBAAzE,EAA2F,IAA3F,CAAP;AACH;AAtOL;AAAA;AAAA,WAwOY,4BAAgB;AACpB,UAAM,iBAAiB,GAAG,KAAK,UAAL,CAAgB,WAAhB,CAA4B,iCAA5B,EAA+D,SAA/D,CAA1B;AAEA,aAAO;AACH,QAAA,OAAO,EAAE;AACL,UAAA,QAAQ,EAAE,iBADL;AAEL,UAAA,eAAe,EAAE,SAFZ;AAGL,UAAA,YAAY,EAAE,KAAK,UAAL,CAAgB,WAAhB,CAA4B,UAAU,CAAC,0BAAvC,CAHT;AAIL,UAAA,cAAc,EAAE,KAAK,UAAL,CAAgB,WAAhB,CAA4B,UAAU,CAAC,4BAAvC,EAAqE,SAArE,CAJX;AAKL,UAAA,MAAM,EAAE,KAAK,UAAL,CAAgB,WAAhB,CAA4B,UAAU,CAAC,oBAAvC,EAA6D,SAA7D,CALH;AAML,UAAA,cAAc,EAAG,2BAAmC,CAAC,KAAK,UAAL,CAAgB,WAAhB,CAA4B,UAAU,CAAC,yCAAvC,EAAkF,SAAlF,CAAD;AAN/C,SADN;AASH,QAAA,OAAO,EAAE;AATN,OAAP;AAWH;AAtPL;;AAAA;AAAA,EAA4C,UAA5C","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { DialogConnectionFactory } from \"../common.speech/DialogConnectorFactory\";\r\nimport {\r\n    DialogServiceAdapter,\r\n    IAgentConfig,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n} from \"../common.speech/Exports\";\r\nimport { ActivityReceivedEventArgs } from \"./ActivityReceivedEventArgs\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig\";\r\nimport {\r\n    AudioConfig,\r\n    PropertyCollection,\r\n    Recognizer,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult\r\n} from \"./Exports\";\r\nimport { PropertyId } from \"./PropertyId\";\r\nimport { SpeechSynthesisOutputFormat } from \"./SpeechSynthesisOutputFormat\";\r\n\r\n/**\r\n * Dialog Service Connector\r\n * @class DialogServiceConnector\r\n */\r\nexport class DialogServiceConnector extends Recognizer {\r\n    private privIsDisposed: boolean;\r\n    private isTurnComplete: boolean;\r\n\r\n    /**\r\n     * Initializes an instance of the DialogServiceConnector.\r\n     * @constructor\r\n     * @param {DialogServiceConfig} dialogConfig - Set of properties to configure this recognizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\r\n     */\r\n    public constructor(dialogConfig: DialogServiceConfig, audioConfig?: AudioConfig) {\r\n        const dialogServiceConfigImpl = dialogConfig as DialogServiceConfigImpl;\r\n        Contracts.throwIfNull(dialogConfig, \"dialogConfig\");\r\n\r\n        super(audioConfig, dialogServiceConfigImpl.properties, new DialogConnectionFactory());\r\n\r\n        this.isTurnComplete = true;\r\n        this.privIsDisposed = false;\r\n        this.privProperties = dialogServiceConfigImpl.properties.clone();\r\n\r\n        const agentConfig = this.buildAgentConfig();\r\n        this.privReco.agentConfig.set(agentConfig);\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member DialogServiceConnector.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: DialogServiceConnector, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member DialogServiceConfig.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: DialogServiceConnector, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member DialogServiceConnector.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: DialogServiceConnector, event: SpeechRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * The event activityReceived signals that an activity has been received.\r\n     * @member DialogServiceConnector.prototype.activityReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public activityReceived: (sender: DialogServiceConnector, event: ActivityReceivedEventArgs) => void;\r\n\r\n    /**\r\n     * Starts a connection to the service.\r\n     * Users can optionally call connect() to manually set up a connection in advance, before starting interactions.\r\n     *\r\n     * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to\r\n     * be notified when the connection is established.\r\n     * @member DialogServiceConnector.prototype.connect\r\n     * @function\r\n     * @public\r\n     */\r\n    public connect(): void {\r\n        this.privReco.connect();\r\n    }\r\n\r\n    /**\r\n     * Closes the connection the service.\r\n     * Users can optionally call disconnect() to manually shutdown the connection of the associated DialogServiceConnector.\r\n     *\r\n     * If disconnect() is called during a recognition, recognition will fail and cancel with an error.\r\n     */\r\n    public disconnect(): void {\r\n        this.privReco.disconnect();\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member DialogServiceConnector.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Sets the authorization token used to communicate with the service.\r\n     * @member DialogServiceConnector.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this DialogServiceConnector.\r\n     * @member DialogServiceConnector.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this DialogServiceConnector.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /** Gets the template for the activity generated by service from speech.\r\n     * Properties from the template will be stamped on the generated activity.\r\n     * It can be empty\r\n     */\r\n    public get speechActivityTemplate(): string {\r\n        return this.properties.getProperty(PropertyId.Conversation_Speech_Activity_Template);\r\n    }\r\n\r\n    /** Sets the template for the activity generated by service from speech.\r\n     * Properties from the template will be stamped on the generated activity.\r\n     * It can be null or empty.\r\n     * Note: it has to be a valid Json object.\r\n     */\r\n    public set speechActivityTemplate(speechActivityTemplate: string) {\r\n        this.properties.setProperty(PropertyId.Conversation_Speech_Activity_Template, speechActivityTemplate);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and stops after the first utterance is recognized.\r\n     * @member DialogServiceConnector.prototype.listenOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the result when the reco has completed.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public listenOnceAsync(cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\r\n        if (this.isTurnComplete) {\r\n            try {\r\n                Contracts.throwIfDisposed(this.privIsDisposed);\r\n\r\n                this.connect();\r\n\r\n                this.implRecognizerStop();\r\n                this.isTurnComplete = false;\r\n\r\n                this.privReco.recognize(\r\n                    RecognitionMode.Conversation,\r\n                    (e: SpeechRecognitionResult) => {\r\n                        this.implRecognizerStop();\r\n\r\n                        this.isTurnComplete = true;\r\n\r\n                        if (!!cb) {\r\n                            cb(e);\r\n                        }\r\n                    },\r\n                    (e: string) => {\r\n                        this.implRecognizerStop();\r\n                        this.isTurnComplete = true;\r\n                        if (!!err) {\r\n                            err(e);\r\n                        }\r\n                        /* tslint:disable:no-empty */\r\n                    }).on((_: boolean): void => { },\r\n                        (error: string): void => {\r\n                            if (!!err) {\r\n                                err(error);\r\n                            }\r\n                        });\r\n            } catch (error) {\r\n                if (!!err) {\r\n                    if (error instanceof Error) {\r\n                        const typedError: Error = error as Error;\r\n                        err(typedError.name + \": \" + typedError.message);\r\n                    } else {\r\n                        err(error);\r\n                    }\r\n                }\r\n\r\n                // Destroy the recognizer.\r\n                this.dispose(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    public sendActivityAsync(activity: string): void {\r\n        this.privReco.sendMessage(activity);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member DialogServiceConnector.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        Contracts.throwIfDisposed(this.privIsDisposed);\r\n\r\n        this.dispose(true);\r\n    }\r\n\r\n    protected dispose(disposing: boolean): boolean {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.implRecognizerStop();\r\n            this.privIsDisposed = true;\r\n            super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const audioSource: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new DialogServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\r\n    }\r\n\r\n    private buildAgentConfig(): IAgentConfig {\r\n        const communicationType = this.properties.getProperty(\"Conversation_Communication_Type\", \"Default\");\r\n\r\n        return {\r\n            botInfo: {\r\n                commType: communicationType,\r\n                commandsCulture: undefined,\r\n                connectionId: this.properties.getProperty(PropertyId.Conversation_ApplicationId),\r\n                conversationId: this.properties.getProperty(PropertyId.Conversation_Conversation_Id, undefined),\r\n                fromId: this.properties.getProperty(PropertyId.Conversation_From_Id, undefined),\r\n                ttsAudioFormat: (SpeechSynthesisOutputFormat as any)[this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)]\r\n            },\r\n            version: 0.2\r\n        };\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}