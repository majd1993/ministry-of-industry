{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _callee;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _effects = require(\"redux-saga/effects\");\n\nvar _botframeworkDirectlinejs = require(\"botframework-directlinejs\");\n\nvar _jsonwebtoken = require(\"jsonwebtoken\");\n\nvar _connect = require(\"../actions/connect\");\n\nvar _createPromiseQueue = _interopRequireDefault(require(\"../createPromiseQueue\"));\n\nvar _forkPut = _interopRequireDefault(require(\"./effects/forkPut\"));\n\nvar _uniqueID = _interopRequireDefault(require(\"../utils/uniqueID\"));\n\nvar _updateConnectionStatus = _interopRequireWildcard(require(\"../actions/updateConnectionStatus\"));\n\nvar _disconnect = require(\"../actions/disconnect\");\n\nvar _reconnect = require(\"../actions/reconnect\");\n\nvar _marked = /*#__PURE__*/_regenerator[\"default\"].mark(observeAndPutConnectionStatusUpdate),\n    _marked2 = /*#__PURE__*/_regenerator[\"default\"].mark(connectSaga),\n    _marked3 = /*#__PURE__*/_regenerator[\"default\"].mark(reconnectSaga),\n    _marked4 = /*#__PURE__*/_regenerator[\"default\"].mark(runAsyncEffect),\n    _marked5 = /*#__PURE__*/_regenerator[\"default\"].mark(takeDisconnectAsError),\n    _marked6 = /*#__PURE__*/_regenerator[\"default\"].mark(_callee);\n\nvar CONNECTING = _botframeworkDirectlinejs.ConnectionStatus.Connecting,\n    ONLINE = _botframeworkDirectlinejs.ConnectionStatus.Online,\n    UNINITIALIZED = _botframeworkDirectlinejs.ConnectionStatus.Uninitialized;\n\nfunction randomUserID() {\n  return \"r_\".concat((0, _uniqueID[\"default\"])().substr(0, 10));\n}\n\nfunction observeAndPutConnectionStatusUpdate(directLine) {\n  var connectionStatusQueue, connectionStatusSubscription, connectionStatus;\n  return _regenerator[\"default\"].wrap(function observeAndPutConnectionStatusUpdate$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          connectionStatusQueue = (0, _createPromiseQueue[\"default\"])();\n          connectionStatusSubscription = directLine.connectionStatus$.subscribe({\n            next: connectionStatusQueue.push\n          });\n          _context.prev = 2;\n\n        case 3:\n          _context.next = 5;\n          return (0, _effects.call)(connectionStatusQueue.shift);\n\n        case 5:\n          connectionStatus = _context.sent;\n          _context.next = 8;\n          return (0, _effects.put)((0, _updateConnectionStatus[\"default\"])(connectionStatus));\n\n        case 8:\n          _context.next = 3;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          connectionStatusSubscription.unsubscribe();\n          return _context.finish(10);\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[2,, 10, 13]]);\n} // TODO: [P2] We should move this check and rectification to DirectLineJS.\n\n\nfunction rectifyUserID(directLine, userIDFromAction) {\n  var token = directLine.token;\n\n  var _ref = (0, _jsonwebtoken.decode)(token) || {},\n      userIDFromToken = _ref.user;\n\n  if (userIDFromToken) {\n    if (userIDFromAction && userIDFromAction !== userIDFromToken) {\n      console.warn('Web Chat: user ID is both specified in the Direct Line token and passed in, will use the user ID from the token.');\n    }\n\n    return userIDFromToken;\n  } else if (userIDFromAction) {\n    if (typeof userIDFromAction !== 'string') {\n      console.warn('Web Chat: user ID must be a string.');\n      return randomUserID();\n    } else if (/^dl_/.test(userIDFromAction)) {\n      console.warn('Web Chat: user ID prefixed with \"dl_\" is reserved and must be embedded into the Direct Line token to prevent forgery.');\n      return randomUserID();\n    }\n  } else {\n    return randomUserID();\n  }\n\n  return userIDFromAction;\n} // We could make this a Promise instead of saga (function generator) to make the code cleaner, if:\n// 1. We found a way to cancel Promise\n// 2. subscribe() are shared amongst all subscriptions, e.g. turn Observable into events\n\n\nfunction connectSaga(directLine) {\n  var activitySubscription, unsubscribeActivity, _yield$take, connectionStatus;\n\n  return _regenerator[\"default\"].wrap(function connectSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          // DirectLineJS starts the connection only after the first subscriber for activity$, not connectionStatus$\n          activitySubscription = directLine.activity$.subscribe({\n            next: function next() {\n              return 0;\n            }\n          });\n          unsubscribeActivity = activitySubscription.unsubscribe.bind(activitySubscription);\n          _context2.prev = 2;\n\n        case 3:\n          _context2.next = 5;\n          return (0, _effects.take)(_updateConnectionStatus.UPDATE_CONNECTION_STATUS);\n\n        case 5:\n          _yield$take = _context2.sent;\n          connectionStatus = _yield$take.payload.connectionStatus;\n\n          if (!(connectionStatus === ONLINE)) {\n            _context2.next = 11;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", function () {\n            unsubscribeActivity();\n            directLine.end();\n          });\n\n        case 11:\n          if (!(connectionStatus !== UNINITIALIZED && connectionStatus !== CONNECTING)) {\n            _context2.next = 13;\n            break;\n          }\n\n          throw new Error(\"Failed to connect, DirectLineJS returned \".concat(connectionStatus, \".\"));\n\n        case 13:\n          _context2.next = 3;\n          break;\n\n        case 15:\n          _context2.next = 21;\n          break;\n\n        case 17:\n          _context2.prev = 17;\n          _context2.t0 = _context2[\"catch\"](2); // We will unsubscribe if we failed to connect or got cancelled only.\n          // We should not unsubscribe in happy case, because DirectLineJS should relying on the subscription to connect/disconnect.\n\n          unsubscribeActivity();\n          throw _context2.t0;\n\n        case 21:\n          _context2.prev = 21;\n          _context2.next = 24;\n          return (0, _effects.cancelled)();\n\n        case 24:\n          if (!_context2.sent) {\n            _context2.next = 26;\n            break;\n          }\n\n          unsubscribeActivity();\n\n        case 26:\n          return _context2.finish(21);\n\n        case 27:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[2, 17, 21, 27]]);\n}\n\nfunction reconnectSaga() {\n  var _yield$take2, connectionStatus;\n\n  return _regenerator[\"default\"].wrap(function reconnectSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return (0, _effects.take)(_updateConnectionStatus.UPDATE_CONNECTION_STATUS);\n\n        case 2:\n          _yield$take2 = _context3.sent;\n          connectionStatus = _yield$take2.payload.connectionStatus;\n\n          if (!(connectionStatus === ONLINE)) {\n            _context3.next = 8;\n            break;\n          }\n\n          return _context3.abrupt(\"break\", 12);\n\n        case 8:\n          if (!(connectionStatus !== CONNECTING)) {\n            _context3.next = 10;\n            break;\n          }\n\n          throw new Error(\"Failed to reconnect. DirectLineJS returned \".concat(connectionStatus, \".\"));\n\n        case 10:\n          _context3.next = 0;\n          break;\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n} // This is similar to behavior of redux-promise-middleware, but using saga instead of Promise.\n// We guarantee PENDING -> FULFILLING -> FULFILLED, or PENDING -> REJECTED. This will help us simplify logic in other part of code.\n// Note that after the saga is cancelled, subsequent call to put() will be ignored silently.\n\n\nfunction runAsyncEffect(_ref2, callEffectFactory) {\n  var type, meta, payload, result;\n  return _regenerator[\"default\"].wrap(function runAsyncEffect$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          type = _ref2.type, meta = _ref2.meta, payload = _ref2.payload;\n          _context4.prev = 1;\n          _context4.next = 4;\n          return (0, _forkPut[\"default\"])({\n            type: \"\".concat(type, \"_PENDING\"),\n            meta: meta,\n            payload: payload\n          });\n\n        case 4:\n          _context4.next = 6;\n          return callEffectFactory();\n\n        case 6:\n          result = _context4.sent;\n          _context4.next = 9;\n          return (0, _forkPut[\"default\"])({\n            type: \"\".concat(type, \"_FULFILLING\"),\n            meta: meta,\n            payload: payload\n          }, {\n            type: \"\".concat(type, \"_FULFILLED\"),\n            meta: meta,\n            payload: payload\n          });\n\n        case 9:\n          return _context4.abrupt(\"return\", result);\n\n        case 12:\n          _context4.prev = 12;\n          _context4.t0 = _context4[\"catch\"](1);\n          _context4.next = 16;\n          return (0, _forkPut[\"default\"])({\n            type: \"\".concat(type, \"_REJECTED\"),\n            error: true,\n            meta: meta,\n            payload: _context4.t0\n          });\n\n        case 16:\n          throw _context4.t0;\n\n        case 17:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[1, 12]]);\n}\n\nfunction takeDisconnectAsError() {\n  return _regenerator[\"default\"].wrap(function takeDisconnectAsError$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return (0, _effects.take)(_disconnect.DISCONNECT);\n\n        case 2:\n          throw new Error('disconnected');\n\n        case 3:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction runAsyncEffectUntilDisconnect(baseAction, callEffectFactory) {\n  // We cannot use saga cancel() here, because cancelling saga will prohibit us from sending *_REJECTED.\n  // Without REJECTED, it impacts our assumptions around PENDING/FULFILLED/REJECTED.\n  return runAsyncEffect(baseAction, /*#__PURE__*/_regenerator[\"default\"].mark(function runUntilDisconnect() {\n    var _yield$race, result;\n\n    return _regenerator[\"default\"].wrap(function runUntilDisconnect$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return (0, _effects.race)({\n              _: takeDisconnectAsError(),\n              result: callEffectFactory()\n            });\n\n          case 2:\n            _yield$race = _context6.sent;\n            result = _yield$race.result;\n            return _context6.abrupt(\"return\", result);\n\n          case 5:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, runUntilDisconnect);\n  }));\n}\n\nfunction _callee() {\n  var _loop;\n\n  return _regenerator[\"default\"].wrap(function _callee$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _loop = /*#__PURE__*/_regenerator[\"default\"].mark(function _loop() {\n            var _yield$take3, _yield$take3$payload, directLine, userIDFromAction, username, updateConnectionStatusTask, disconnectMeta, meta, endDirectLine, _yield$race2, _yield$race2$updateCo, _yield$race2$updateCo2, connectionStatus;\n\n            return _regenerator[\"default\"].wrap(function _loop$(_context7) {\n              while (1) {\n                switch (_context7.prev = _context7.next) {\n                  case 0:\n                    _context7.next = 2;\n                    return (0, _effects.take)(_connect.CONNECT);\n\n                  case 2:\n                    _yield$take3 = _context7.sent;\n                    _yield$take3$payload = _yield$take3.payload;\n                    directLine = _yield$take3$payload.directLine;\n                    userIDFromAction = _yield$take3$payload.userID;\n                    username = _yield$take3$payload.username;\n                    _context7.next = 9;\n                    return (0, _effects.fork)(observeAndPutConnectionStatusUpdate, directLine);\n\n                  case 9:\n                    updateConnectionStatusTask = _context7.sent;\n                    disconnectMeta = void 0; // TODO: [P2] Checks if this attached subtask will get killed if the parent task is complete (peacefully), errored out, or cancelled.\n\n                    meta = {\n                      userID: rectifyUserID(directLine, userIDFromAction),\n                      username: username\n                    }; // We will dispatch CONNECT_PENDING, wait for connect completed, errored, or cancelled (thru disconnect).\n                    // Then dispatch CONNECT_FULFILLED/CONNECT_REJECTED as needed.\n\n                    _context7.prev = 12;\n                    _context7.next = 15;\n                    return runAsyncEffectUntilDisconnect({\n                      type: _connect.CONNECT,\n                      meta: meta,\n                      payload: {\n                        directLine: directLine\n                      }\n                    }, function () {\n                      return (0, _effects.call)(connectSaga, directLine);\n                    });\n\n                  case 15:\n                    endDirectLine = _context7.sent;\n                    _context7.prev = 16;\n\n                  case 17:\n                    _context7.next = 19;\n                    return (0, _effects.race)({\n                      _: (0, _effects.take)(_disconnect.DISCONNECT),\n                      updateConnectionStatusAction: (0, _effects.take)(_updateConnectionStatus.UPDATE_CONNECTION_STATUS)\n                    });\n\n                  case 19:\n                    _yield$race2 = _context7.sent;\n                    _yield$race2$updateCo = _yield$race2.updateConnectionStatusAction;\n                    _yield$race2$updateCo = _yield$race2$updateCo === void 0 ? {} : _yield$race2$updateCo;\n                    _yield$race2$updateCo2 = _yield$race2$updateCo.payload;\n                    _yield$race2$updateCo2 = _yield$race2$updateCo2 === void 0 ? {} : _yield$race2$updateCo2;\n                    connectionStatus = _yield$race2$updateCo2.connectionStatus; // If it is not disconnect action, connectionStatus will not be undefined.\n\n                    if (!(connectionStatus === CONNECTING)) {\n                      _context7.next = 30;\n                      break;\n                    }\n\n                    _context7.next = 28;\n                    return runAsyncEffectUntilDisconnect({\n                      type: _reconnect.RECONNECT,\n                      meta: meta,\n                      payload: {\n                        directLine: directLine\n                      }\n                    }, function () {\n                      return (0, _effects.call)(reconnectSaga);\n                    });\n\n                  case 28:\n                    _context7.next = 36;\n                    break;\n\n                  case 30:\n                    if (!(connectionStatus !== ONLINE)) {\n                      _context7.next = 36;\n                      break;\n                    }\n\n                    if (!(typeof connectionStatus !== 'undefined')) {\n                      _context7.next = 35;\n                      break;\n                    }\n\n                    throw new Error(\"Connection status changed to \".concat(connectionStatus));\n\n                  case 35:\n                    return _context7.abrupt(\"break\", 38);\n\n                  case 36:\n                    _context7.next = 17;\n                    break;\n\n                  case 38:\n                    _context7.prev = 38;\n                    endDirectLine();\n                    return _context7.finish(38);\n\n                  case 41:\n                    _context7.next = 46;\n                    break;\n\n                  case 43:\n                    _context7.prev = 43;\n                    _context7.t0 = _context7[\"catch\"](12);\n                    disconnectMeta = {\n                      error: _context7.t0\n                    };\n\n                  case 46:\n                    _context7.prev = 46;\n                    _context7.next = 49;\n                    return (0, _effects.cancel)(updateConnectionStatusTask);\n\n                  case 49:\n                    _context7.next = 51;\n                    return (0, _forkPut[\"default\"])({\n                      type: _disconnect.DISCONNECT_PENDING,\n                      meta: disconnectMeta,\n                      payload: {\n                        directLine: directLine\n                      }\n                    }, {\n                      type: _disconnect.DISCONNECT_FULFILLED,\n                      meta: disconnectMeta,\n                      payload: {\n                        directLine: directLine\n                      }\n                    });\n\n                  case 51:\n                    return _context7.finish(46);\n\n                  case 52:\n                  case \"end\":\n                    return _context7.stop();\n                }\n              }\n            }, _loop, null, [[12, 43, 46, 52], [16,, 38, 41]]);\n          });\n\n        case 1:\n          return _context8.delegateYield(_loop(), \"t0\", 2);\n\n        case 2:\n          _context8.next = 1;\n          break;\n\n        case 4:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked6);\n}","map":{"version":3,"sources":["../../src/sagas/connectSaga.js"],"names":["Connecting","CONNECTING","Online","ONLINE","Uninitialized","UNINITIALIZED","ConnectionStatus","observeAndPutConnectionStatusUpdate","connectionStatusQueue","connectionStatusSubscription","next","push","connectionStatus","token","directLine","userIDFromToken","userIDFromAction","console","randomUserID","connectSaga","activitySubscription","unsubscribeActivity","UPDATE_CONNECTION_STATUS","reconnectSaga","runAsyncEffect","type","meta","payload","result","callEffectFactory","error","takeDisconnectAsError","DISCONNECT","_","username","CONNECT","updateConnectionStatusTask","disconnectMeta","userID","rectifyUserID","endDirectLine","runAsyncEffectUntilDisconnect","updateConnectionStatusAction","RECONNECT","DISCONNECT_PENDING","DISCONNECT_FULFILLED"],"mappings":"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","sourcesContent":["/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 10] }] */\n\nimport { call, cancel, cancelled, fork, put, race, take } from 'redux-saga/effects';\n\nimport { ConnectionStatus } from 'botframework-directlinejs';\nimport { decode } from 'jsonwebtoken';\n\nimport { CONNECT } from '../actions/connect';\nimport createPromiseQueue from '../createPromiseQueue';\nimport forkPut from './effects/forkPut';\nimport uniqueID from '../utils/uniqueID';\nimport updateConnectionStatus, { UPDATE_CONNECTION_STATUS } from '../actions/updateConnectionStatus';\n\nimport { DISCONNECT, DISCONNECT_PENDING, DISCONNECT_FULFILLED } from '../actions/disconnect';\n\nimport { RECONNECT } from '../actions/reconnect';\n\nconst { Connecting: CONNECTING, Online: ONLINE, Uninitialized: UNINITIALIZED } = ConnectionStatus;\n\nfunction randomUserID() {\n  return `r_${uniqueID().substr(0, 10)}`;\n}\n\nfunction* observeAndPutConnectionStatusUpdate(directLine) {\n  const connectionStatusQueue = createPromiseQueue();\n  const connectionStatusSubscription = directLine.connectionStatus$.subscribe({ next: connectionStatusQueue.push });\n\n  try {\n    for (;;) {\n      const connectionStatus = yield call(connectionStatusQueue.shift);\n\n      yield put(updateConnectionStatus(connectionStatus));\n    }\n  } finally {\n    connectionStatusSubscription.unsubscribe();\n  }\n}\n\n// TODO: [P2] We should move this check and rectification to DirectLineJS.\nfunction rectifyUserID(directLine, userIDFromAction) {\n  const { token } = directLine;\n  const { user: userIDFromToken } = decode(token) || {};\n\n  if (userIDFromToken) {\n    if (userIDFromAction && userIDFromAction !== userIDFromToken) {\n      console.warn(\n        'Web Chat: user ID is both specified in the Direct Line token and passed in, will use the user ID from the token.'\n      );\n    }\n\n    return userIDFromToken;\n  } else if (userIDFromAction) {\n    if (typeof userIDFromAction !== 'string') {\n      console.warn('Web Chat: user ID must be a string.');\n\n      return randomUserID();\n    } else if (/^dl_/u.test(userIDFromAction)) {\n      console.warn(\n        'Web Chat: user ID prefixed with \"dl_\" is reserved and must be embedded into the Direct Line token to prevent forgery.'\n      );\n\n      return randomUserID();\n    }\n  } else {\n    return randomUserID();\n  }\n\n  return userIDFromAction;\n}\n\n// We could make this a Promise instead of saga (function generator) to make the code cleaner, if:\n// 1. We found a way to cancel Promise\n// 2. subscribe() are shared amongst all subscriptions, e.g. turn Observable into events\nfunction* connectSaga(directLine) {\n  // DirectLineJS starts the connection only after the first subscriber for activity$, not connectionStatus$\n  const activitySubscription = directLine.activity$.subscribe({ next: () => 0 });\n  const unsubscribeActivity = activitySubscription.unsubscribe.bind(activitySubscription);\n\n  try {\n    for (;;) {\n      const {\n        payload: { connectionStatus }\n      } = yield take(UPDATE_CONNECTION_STATUS);\n\n      if (connectionStatus === ONLINE) {\n        // TODO: [P2] DirectLineJS should kill the connection when we unsubscribe\n        //       But currently in v3, DirectLineJS does not have this functionality\n        //       Thus, we need to call \"end()\" explicitly\n\n        return () => {\n          unsubscribeActivity();\n          directLine.end();\n        };\n      } else if (connectionStatus !== UNINITIALIZED && connectionStatus !== CONNECTING) {\n        throw new Error(`Failed to connect, DirectLineJS returned ${connectionStatus}.`);\n      }\n    }\n  } catch (err) {\n    // We will unsubscribe if we failed to connect or got cancelled only.\n    // We should not unsubscribe in happy case, because DirectLineJS should relying on the subscription to connect/disconnect.\n    unsubscribeActivity();\n\n    throw err;\n  } finally {\n    if (yield cancelled()) {\n      unsubscribeActivity();\n    }\n  }\n}\n\nfunction* reconnectSaga() {\n  for (;;) {\n    const {\n      payload: { connectionStatus }\n    } = yield take(UPDATE_CONNECTION_STATUS);\n\n    if (connectionStatus === ONLINE) {\n      break;\n    } else if (connectionStatus !== CONNECTING) {\n      throw new Error(`Failed to reconnect. DirectLineJS returned ${connectionStatus}.`);\n    }\n  }\n}\n\n// This is similar to behavior of redux-promise-middleware, but using saga instead of Promise.\n// We guarantee PENDING -> FULFILLING -> FULFILLED, or PENDING -> REJECTED. This will help us simplify logic in other part of code.\n// Note that after the saga is cancelled, subsequent call to put() will be ignored silently.\nfunction* runAsyncEffect({ type, meta, payload }, callEffectFactory) {\n  try {\n    yield forkPut({ type: `${type}_PENDING`, meta, payload });\n\n    const result = yield callEffectFactory();\n\n    yield forkPut({ type: `${type}_FULFILLING`, meta, payload }, { type: `${type}_FULFILLED`, meta, payload });\n\n    return result;\n  } catch (payload) {\n    yield forkPut({ type: `${type}_REJECTED`, error: true, meta, payload });\n\n    throw payload;\n  }\n}\n\nfunction* takeDisconnectAsError() {\n  yield take(DISCONNECT);\n\n  throw new Error('disconnected');\n}\n\nfunction runAsyncEffectUntilDisconnect(baseAction, callEffectFactory) {\n  // We cannot use saga cancel() here, because cancelling saga will prohibit us from sending *_REJECTED.\n  // Without REJECTED, it impacts our assumptions around PENDING/FULFILLED/REJECTED.\n  return runAsyncEffect(baseAction, function* runUntilDisconnect() {\n    const { result } = yield race({\n      _: takeDisconnectAsError(),\n      result: callEffectFactory()\n    });\n\n    return result;\n  });\n}\n\nexport default function*() {\n  for (;;) {\n    const {\n      payload: { directLine, userID: userIDFromAction, username }\n    } = yield take(CONNECT);\n\n    const updateConnectionStatusTask = yield fork(observeAndPutConnectionStatusUpdate, directLine);\n    let disconnectMeta;\n\n    // TODO: [P2] Checks if this attached subtask will get killed if the parent task is complete (peacefully), errored out, or cancelled.\n    const meta = {\n      userID: rectifyUserID(directLine, userIDFromAction),\n      username\n    };\n\n    // We will dispatch CONNECT_PENDING, wait for connect completed, errored, or cancelled (thru disconnect).\n    // Then dispatch CONNECT_FULFILLED/CONNECT_REJECTED as needed.\n    try {\n      const endDirectLine = yield runAsyncEffectUntilDisconnect(\n        {\n          type: CONNECT,\n          meta,\n          payload: { directLine }\n        },\n        () => call(connectSaga, directLine)\n      );\n\n      try {\n        for (;;) {\n          // We are waiting for connection status change or disconnect action.\n          const { updateConnectionStatusAction: { payload: { connectionStatus } = {} } = {} } = yield race({\n            _: take(DISCONNECT),\n            updateConnectionStatusAction: take(UPDATE_CONNECTION_STATUS)\n          });\n\n          // If it is not disconnect action, connectionStatus will not be undefined.\n          if (connectionStatus === CONNECTING) {\n            // If DirectLineJS changed connectionStatus to CONNECTING, we will treat it as reconnect status.\n            yield runAsyncEffectUntilDisconnect(\n              {\n                type: RECONNECT,\n                meta,\n                payload: { directLine }\n              },\n              () => call(reconnectSaga)\n            );\n          } else if (connectionStatus !== ONLINE) {\n            if (typeof connectionStatus !== 'undefined') {\n              // We need to kill the connection because DirectLineJS want to close it.\n              throw new Error(`Connection status changed to ${connectionStatus}`);\n            } else {\n              // Someone dispatched disconnect action.\n              break;\n            }\n          }\n        }\n      } finally {\n        endDirectLine();\n      }\n    } catch (error) {\n      disconnectMeta = { error };\n    } finally {\n      yield cancel(updateConnectionStatusTask);\n\n      // Even if the connection is interrupted, we will still emit DISCONNECT_PENDING.\n      // This will makes handling logic easier. If CONNECT_FULFILLED, we guarantee DISCONNECT_PENDING.\n      yield forkPut(\n        { type: DISCONNECT_PENDING, meta: disconnectMeta, payload: { directLine } },\n        { type: DISCONNECT_FULFILLED, meta: disconnectMeta, payload: { directLine } }\n      );\n    }\n  }\n}\n"],"sourceRoot":"core:///"},"metadata":{},"sourceType":"script"}