{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useLocalizer;\n\nvar _react = require(\"react\");\n\nvar _getAllLocalizedStrings = _interopRequireDefault(require(\"../localization/getAllLocalizedStrings\"));\n\nvar _useLocalizedGlobalize = _interopRequireDefault(require(\"./internal/useLocalizedGlobalize\"));\n\nvar _useLocalizedStrings = _interopRequireDefault(require(\"./internal/useLocalizedStrings\"));\n\nvar _isObject = _interopRequireDefault(require(\"../utils/isObject\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar DEFAULT_STRINGS = (0, _getAllLocalizedStrings.default)()['en-US'];\n\nfunction useLocalizer() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      plural = _ref.plural;\n\n  var _useLocalizedGlobaliz = (0, _useLocalizedGlobalize.default)(),\n      _useLocalizedGlobaliz2 = _slicedToArray(_useLocalizedGlobaliz, 1),\n      globalize = _useLocalizedGlobaliz2[0];\n\n  var localizedStrings = (0, _useLocalizedStrings.default)();\n  return (0, _react.useCallback)(function (id) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (plural) {\n      if (!(0, _isObject.default)(id)) {\n        throw new Error('useLocalizer: Plural string must pass \"id\" as a map instead of string.');\n      } else if (typeof id.other !== 'string') {\n        throw new Error('useLocalizer: Plural string must have \"id.other\" of string.');\n      } else if (typeof args[0] !== 'number') {\n        throw new Error('useLocalizer: Plural string must have first argument as a number.');\n      }\n\n      for (var _i2 = 0, _arr2 = ['zero', 'one', 'two', 'few', 'many']; _i2 < _arr2.length; _i2++) {\n        var pluralForm = _arr2[_i2];\n\n        var type = _typeof(id[pluralForm]);\n\n        if (type !== 'string' && type !== 'undefined') {\n          throw new Error(\"useLocalizer: Plural string must have \\\"id.\".concat(pluralForm, \"\\\" of string or undefined.\"));\n        }\n      }\n\n      var unsupportedPluralForms = Object.keys(id).filter(function (pluralForm) {\n        return !['zero', 'one', 'two', 'few', 'many', 'other'].includes(pluralForm);\n      });\n\n      if (unsupportedPluralForms.length) {\n        throw new Error(\"useLocalizer: Plural string \\\"id\\\" must be either \\\"zero\\\", \\\"one\\\", \\\"two\\\", \\\"few\\\", \\\"many\\\", \\\"other\\\". But not \".concat(unsupportedPluralForms.map(function (pluralForm) {\n          return \"\\\"\".concat(pluralForm, \"\\\"\");\n        }).join(', '), \".\"));\n      }\n\n      id = id[globalize.plural(args[0])] || id.other;\n    } else if (typeof id !== 'string') {\n      throw new Error('useLocalizer: \"id\" must be a string.');\n    }\n\n    return Object.entries(args).reduce(function (str, _ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n          index = _ref3[0],\n          arg = _ref3[1];\n\n      return str.replace(\"$\".concat(+index + 1), arg);\n    }, localizedStrings[id] || DEFAULT_STRINGS[id] || '');\n  }, [globalize, localizedStrings, plural]);\n}","map":{"version":3,"sources":["../../src/hooks/useLocalizer.js"],"names":["DEFAULT_STRINGS","plural","globalize","localizedStrings","args","id","pluralForm","type","unsupportedPluralForms","index","arg","str"],"mappings":"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","sourcesContent":["import { useCallback } from 'react';\n\nimport getAllLocalizedStrings from '../localization/getAllLocalizedStrings';\nimport useLocalizedGlobalize from './internal/useLocalizedGlobalize';\nimport useLocalizedStrings from './internal/useLocalizedStrings';\nimport isObject from '../utils/isObject';\n\nconst DEFAULT_STRINGS = getAllLocalizedStrings()['en-US'];\n\nexport default function useLocalizer({ plural } = {}) {\n  const [globalize] = useLocalizedGlobalize();\n  const localizedStrings = useLocalizedStrings();\n\n  return useCallback(\n    (id, ...args) => {\n      if (plural) {\n        if (!isObject(id)) {\n          throw new Error('useLocalizer: Plural string must pass \"id\" as a map instead of string.');\n        } else if (typeof id.other !== 'string') {\n          throw new Error('useLocalizer: Plural string must have \"id.other\" of string.');\n        } else if (typeof args[0] !== 'number') {\n          throw new Error('useLocalizer: Plural string must have first argument as a number.');\n        }\n\n        for (const pluralForm of ['zero', 'one', 'two', 'few', 'many']) {\n          const type = typeof id[pluralForm];\n\n          if (type !== 'string' && type !== 'undefined') {\n            throw new Error(`useLocalizer: Plural string must have \"id.${pluralForm}\" of string or undefined.`);\n          }\n        }\n\n        const unsupportedPluralForms = Object.keys(id).filter(\n          pluralForm => !['zero', 'one', 'two', 'few', 'many', 'other'].includes(pluralForm)\n        );\n\n        if (unsupportedPluralForms.length) {\n          throw new Error(\n            `useLocalizer: Plural string \"id\" must be either \"zero\", \"one\", \"two\", \"few\", \"many\", \"other\". But not ${unsupportedPluralForms\n              .map(pluralForm => `\"${pluralForm}\"`)\n              .join(', ')}.`\n          );\n        }\n\n        id = id[globalize.plural(args[0])] || id.other;\n      } else if (typeof id !== 'string') {\n        throw new Error('useLocalizer: \"id\" must be a string.');\n      }\n\n      return Object.entries(args).reduce(\n        (str, [index, arg]) => str.replace(`$${+index + 1}`, arg),\n        localizedStrings[id] || DEFAULT_STRINGS[id] || ''\n      );\n    },\n    [globalize, localizedStrings, plural]\n  );\n}\n"],"sourceRoot":"component:///"},"metadata":{},"sourceType":"script"}