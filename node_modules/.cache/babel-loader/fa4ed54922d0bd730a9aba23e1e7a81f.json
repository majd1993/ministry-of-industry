{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Exports_1 = require(\"../common.speech/Exports\");\n\nvar Contracts_1 = require(\"./Contracts\");\n\nvar Exports_2 = require(\"./Exports\");\n/**\n * Defines VoiceProfileClient class for Speaker Recognition\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\n * @class VoiceProfileClient\n */\n\n\nvar VoiceProfileClient =\n/** @class */\nfunction () {\n  /**\n   * VoiceProfileClient constructor.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer (authentication key, region, &c)\n   */\n  function VoiceProfileClient(speechConfig) {\n    var speechConfigImpl = speechConfig;\n    Contracts_1.Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\n    this.privProperties = speechConfigImpl.properties.clone();\n    this.implClientSetup();\n  }\n\n  Object.defineProperty(VoiceProfileClient.prototype, \"authorizationToken\", {\n    /**\n     * Gets the authorization token used to communicate with the service.\n     * @member VoiceProfileClient.prototype.authorizationToken\n     * @function\n     * @public\n     * @returns {string} Authorization token.\n     */\n    get: function get() {\n      return this.properties.getProperty(Exports_2.PropertyId.SpeechServiceAuthorization_Token);\n    },\n\n    /**\n     * Gets/Sets the authorization token used to communicate with the service.\n     * @member VoiceProfileClient.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} token - Authorization token.\n     */\n    set: function set(token) {\n      Contracts_1.Contracts.throwIfNullOrWhitespace(token, \"token\");\n      this.properties.setProperty(Exports_2.PropertyId.SpeechServiceAuthorization_Token, token);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(VoiceProfileClient.prototype, \"properties\", {\n    /**\n     * The collection of properties and their values defined for this VoiceProfileClient.\n     * @member VoiceProfileClient.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The collection of properties and their values defined for this VoiceProfileClient.\n     */\n    get: function get() {\n      return this.privProperties;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Create a speaker recognition voice profile\n   * @member VoiceProfileClient.prototype.createProfileAsync\n   * @function\n   * @public\n   * @param {VoiceProfileType} profileType Type of Voice Profile to be created\n   *        specifies the keyword to be recognized.\n   * @param {string} lang Language string (locale) for Voice Profile\n   * @param cb - Callback invoked once Voice Profile has been created.\n   * @param err - Callback invoked in case of an error.\n   */\n\n  VoiceProfileClient.prototype.createProfileAsync = function (profileType, lang, cb, err) {\n    this.privAdapter.createProfile(profileType, lang).on(function (result) {\n      if (!!cb) {\n        var response = result.json();\n        var profile = new Exports_2.VoiceProfile(response.profileId, profileType);\n        cb(profile);\n      }\n    }, function (error) {\n      if (!!err) {\n        err(error);\n      }\n    });\n  };\n  /**\n   * Create a speaker recognition voice profile\n   * @member VoiceProfileClient.prototype.enrollProfileAsync\n   * @function\n   * @public\n   * @param {VoiceProfile} profile Voice Profile to create enrollment for\n   * @param {AudioConfig} audioConfig source info from which to create enrollment\n   * @param cb - Callback invoked once Enrollment request has been submitted.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  VoiceProfileClient.prototype.enrollProfileAsync = function (profile, audioConfig, cb, err) {\n    var configImpl = audioConfig;\n    Contracts_1.Contracts.throwIfNullOrUndefined(configImpl, \"audioConfig\");\n    this.privAdapter.createEnrollment(profile, configImpl).on(function (result) {\n      if (!!cb) {\n        cb(new Exports_2.VoiceProfileEnrollmentResult(result.ok ? Exports_2.ResultReason.EnrolledVoiceProfile : Exports_2.ResultReason.Canceled, result.data, result.statusText));\n      }\n    }, function (error) {\n      if (!!err) {\n        err(error);\n      }\n    });\n  };\n  /**\n   * Delete a speaker recognition voice profile\n   * @member VoiceProfileClient.prototype.deleteProfileAsync\n   * @function\n   * @public\n   * @param {VoiceProfile} profile Voice Profile to be deleted\n   * @param cb - Callback invoked once Voice Profile has been deleted.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  VoiceProfileClient.prototype.deleteProfileAsync = function (profile, cb, err) {\n    var _this = this;\n\n    this.privAdapter.deleteProfile(profile).on(function (result) {\n      _this.handleResultCallbacks(result, Exports_2.ResultReason.DeletedVoiceProfile, cb);\n    }, function (error) {\n      if (!!err) {\n        err(error);\n      }\n    });\n  };\n  /**\n   * Remove all enrollments for a speaker recognition voice profile\n   * @member VoiceProfileClient.prototype.resetProfileAsync\n   * @function\n   * @public\n   * @param {VoiceProfile} profile Voice Profile to be reset\n   * @param cb - Callback invoked once Voice Profile has been reset.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  VoiceProfileClient.prototype.resetProfileAsync = function (profile, cb, err) {\n    var _this = this;\n\n    this.privAdapter.resetProfile(profile).on(function (result) {\n      _this.handleResultCallbacks(result, Exports_2.ResultReason.ResetVoiceProfile, cb);\n    }, function (error) {\n      if (!!err) {\n        err(error);\n      }\n    });\n  };\n  /**\n   * Included for compatibility\n   * @member VoiceProfileClient.prototype.close\n   * @function\n   * @public\n   */\n\n\n  VoiceProfileClient.prototype.close = function () {\n    return;\n  }; // Does class setup, swiped from Recognizer.\n\n\n  VoiceProfileClient.prototype.implClientSetup = function () {\n    var osPlatform = typeof window !== \"undefined\" ? \"Browser\" : \"Node\";\n    var osName = \"unknown\";\n    var osVersion = \"unknown\";\n\n    if (typeof navigator !== \"undefined\") {\n      osPlatform = osPlatform + \"/\" + navigator.platform;\n      osName = navigator.userAgent;\n      osVersion = navigator.appVersion;\n    }\n\n    var recognizerConfig = new Exports_1.SpeakerRecognitionConfig(new Exports_1.Context(new Exports_1.OS(osPlatform, osName, osVersion)), this.privProperties);\n    this.privAdapter = new Exports_1.SpeakerIdMessageAdapter(recognizerConfig);\n  };\n\n  VoiceProfileClient.prototype.handleResultCallbacks = function (result, successReason, cb) {\n    if (!!cb) {\n      var response = new Exports_2.VoiceProfileResult(result.ok ? successReason : Exports_2.ResultReason.Canceled, result.statusText);\n      cb(response);\n    }\n  };\n\n  return VoiceProfileClient;\n}();\n\nexports.VoiceProfileClient = VoiceProfileClient;","map":{"version":3,"sources":["src/sdk/VoiceProfileClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    FileAudioSource,\r\n    IRestResponse,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    Context,\r\n    OS,\r\n    SpeakerIdMessageAdapter,\r\n    SpeakerRecognitionConfig,\r\n} from \"../common.speech/Exports\";\r\nimport { IAudioSource, PromiseResult } from \"../common/Exports\";\r\nimport { AudioConfig, AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    VoiceProfile,\r\n    VoiceProfileEnrollmentResult,\r\n    VoiceProfileResult,\r\n    VoiceProfileType,\r\n} from \"./Exports\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Defines VoiceProfileClient class for Speaker Recognition\r\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\r\n * @class VoiceProfileClient\r\n */\r\nexport class VoiceProfileClient {\r\n    protected privProperties: PropertyCollection;\r\n    private privAdapter: SpeakerIdMessageAdapter;\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member VoiceProfileClient.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member VoiceProfileClient.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this VoiceProfileClient.\r\n     * @member VoiceProfileClient.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this VoiceProfileClient.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * VoiceProfileClient constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer (authentication key, region, &c)\r\n     */\r\n    public constructor(speechConfig: SpeechConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        this.privProperties = speechConfigImpl.properties.clone();\r\n        this.implClientSetup();\r\n    }\r\n\r\n    /**\r\n     * Create a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.createProfileAsync\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfileType} profileType Type of Voice Profile to be created\r\n     *        specifies the keyword to be recognized.\r\n     * @param {string} lang Language string (locale) for Voice Profile\r\n     * @param cb - Callback invoked once Voice Profile has been created.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public createProfileAsync(profileType: VoiceProfileType, lang: string, cb?: (e: VoiceProfile) => void, err?: (e: string) => void): void {\r\n        this.privAdapter.createProfile(profileType, lang).on((result: IRestResponse) => {\r\n            if (!!cb) {\r\n                const response: { profileId: string } = result.json();\r\n                const profile = new VoiceProfile(response.profileId, profileType);\r\n                cb(profile);\r\n            }\r\n        },\r\n        (error: string) => {\r\n            if (!!err) {\r\n                err(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Create a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.enrollProfileAsync\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfile} profile Voice Profile to create enrollment for\r\n     * @param {AudioConfig} audioConfig source info from which to create enrollment\r\n     * @param cb - Callback invoked once Enrollment request has been submitted.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public enrollProfileAsync(profile: VoiceProfile, audioConfig: AudioConfig, cb?: (e: VoiceProfileEnrollmentResult) => void, err?: (e: string) => void): void {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"audioConfig\");\r\n        this.privAdapter.createEnrollment(profile, configImpl).on((result: IRestResponse) => {\r\n            if (!!cb) {\r\n                cb(\r\n                    new VoiceProfileEnrollmentResult(\r\n                        result.ok ? ResultReason.EnrolledVoiceProfile : ResultReason.Canceled,\r\n                        result.data,\r\n                        result.statusText,\r\n                    )\r\n                );\r\n            }\r\n        },\r\n        (error: string) => {\r\n            if (!!err) {\r\n                err(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Delete a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.deleteProfileAsync\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfile} profile Voice Profile to be deleted\r\n     * @param cb - Callback invoked once Voice Profile has been deleted.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public deleteProfileAsync(profile: VoiceProfile, cb?: (response: VoiceProfileResult) => void, err?: (e: string) => void): void {\r\n        this.privAdapter.deleteProfile(profile).on((result: IRestResponse) => {\r\n            this.handleResultCallbacks(result, ResultReason.DeletedVoiceProfile, cb);\r\n        },\r\n        (error: string) => {\r\n            if (!!err) {\r\n                err(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Remove all enrollments for a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.resetProfileAsync\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfile} profile Voice Profile to be reset\r\n     * @param cb - Callback invoked once Voice Profile has been reset.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public resetProfileAsync(profile: VoiceProfile, cb?: (response: VoiceProfileResult) => void, err?: (e: string) => void): void {\r\n        this.privAdapter.resetProfile(profile).on((result: IRestResponse) => {\r\n            this.handleResultCallbacks(result, ResultReason.ResetVoiceProfile, cb);\r\n        },\r\n        (error: string) => {\r\n            if (!!err) {\r\n                err(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Included for compatibility\r\n     * @member VoiceProfileClient.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n\r\n    // Does class setup, swiped from Recognizer.\r\n    protected implClientSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const recognizerConfig =\r\n            new SpeakerRecognitionConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion)),\r\n                this.privProperties);\r\n\r\n        this.privAdapter = new SpeakerIdMessageAdapter(recognizerConfig);\r\n    }\r\n\r\n    private handleResultCallbacks(result: IRestResponse, successReason: ResultReason, cb?: (response: VoiceProfileResult) => void): void {\r\n        if (!!cb) {\r\n            const response: VoiceProfileResult =\r\n                new VoiceProfileResult(\r\n                    result.ok ? successReason : ResultReason.Canceled,\r\n                    result.statusText\r\n                );\r\n            cb(response);\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}