{"ast":null,"code":"import _classCallCheck from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { MessageType } from \"./ConnectionMessage\";\nimport { ArgumentNullError, InvalidOperationError } from \"./Error\";\nimport { createNoDashGuid } from \"./Guid\";\nexport var RawWebsocketMessage = /*#__PURE__*/function () {\n  function RawWebsocketMessage(messageType, payload, id) {\n    _classCallCheck(this, RawWebsocketMessage);\n\n    this.privPayload = null;\n\n    if (!payload) {\n      throw new ArgumentNullError(\"payload\");\n    }\n\n    if (messageType === MessageType.Binary && !(payload instanceof ArrayBuffer)) {\n      throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\n    }\n\n    if (messageType === MessageType.Text && !(typeof payload === \"string\")) {\n      throw new InvalidOperationError(\"Payload must be a string\");\n    }\n\n    this.privMessageType = messageType;\n    this.privPayload = payload;\n    this.privId = id ? id : createNoDashGuid();\n  }\n\n  _createClass(RawWebsocketMessage, [{\n    key: \"messageType\",\n    get: function get() {\n      return this.privMessageType;\n    }\n  }, {\n    key: \"payload\",\n    get: function get() {\n      return this.privPayload;\n    }\n  }, {\n    key: \"textContent\",\n    get: function get() {\n      if (this.privMessageType === MessageType.Binary) {\n        throw new InvalidOperationError(\"Not supported for binary message\");\n      }\n\n      return this.privPayload;\n    }\n  }, {\n    key: \"binaryContent\",\n    get: function get() {\n      if (this.privMessageType === MessageType.Text) {\n        throw new InvalidOperationError(\"Not supported for text message\");\n      }\n\n      return this.privPayload;\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this.privId;\n    }\n  }]);\n\n  return RawWebsocketMessage;\n}();","map":{"version":3,"sources":["src/common/RawWebsocketMessage.ts"],"names":[],"mappings":";;AAAA;AACA;AAEA,SAAS,WAAT,QAA4B,qBAA5B;AACA,SAAS,iBAAT,EAA4B,qBAA5B,QAAyD,SAAzD;AACA,SAAS,gBAAT,QAAiC,QAAjC;AAEA,WAAa,mBAAb;AAKI,+BAAmB,WAAnB,EAA6C,OAA7C,EAA2D,EAA3D,EAAsE;AAAA;;AAH9D,SAAA,WAAA,GAAmB,IAAnB;;AAIJ,QAAI,CAAC,OAAL,EAAc;AACV,YAAM,IAAI,iBAAJ,CAAsB,SAAtB,CAAN;AACH;;AAED,QAAI,WAAW,KAAK,WAAW,CAAC,MAA5B,IAAsC,EAAE,OAAO,YAAY,WAArB,CAA1C,EAA6E;AACzE,YAAM,IAAI,qBAAJ,CAA0B,6BAA1B,CAAN;AACH;;AAED,QAAI,WAAW,KAAK,WAAW,CAAC,IAA5B,IAAoC,EAAE,OAAQ,OAAR,KAAqB,QAAvB,CAAxC,EAA0E;AACtE,YAAM,IAAI,qBAAJ,CAA0B,0BAA1B,CAAN;AACH;;AAED,SAAK,eAAL,GAAuB,WAAvB;AACA,SAAK,WAAL,GAAmB,OAAnB;AACA,SAAK,MAAL,GAAc,EAAE,GAAG,EAAH,GAAQ,gBAAgB,EAAxC;AACH;;AArBL;AAAA;AAAA,SAuBI,eAAsB;AAClB,aAAO,KAAK,eAAZ;AACH;AAzBL;AAAA;AAAA,SA2BI,eAAkB;AACd,aAAO,KAAK,WAAZ;AACH;AA7BL;AAAA;AAAA,SA+BI,eAAsB;AAClB,UAAI,KAAK,eAAL,KAAyB,WAAW,CAAC,MAAzC,EAAiD;AAC7C,cAAM,IAAI,qBAAJ,CAA0B,kCAA1B,CAAN;AACH;;AAED,aAAO,KAAK,WAAZ;AACH;AArCL;AAAA;AAAA,SAuCI,eAAwB;AACpB,UAAI,KAAK,eAAL,KAAyB,WAAW,CAAC,IAAzC,EAA+C;AAC3C,cAAM,IAAI,qBAAJ,CAA0B,gCAA1B,CAAN;AACH;;AAED,aAAO,KAAK,WAAZ;AACH;AA7CL;AAAA;AAAA,SA+CI,eAAa;AACT,aAAO,KAAK,MAAZ;AACH;AAjDL;;AAAA;AAAA","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { MessageType } from \"./ConnectionMessage\";\r\nimport { ArgumentNullError, InvalidOperationError } from \"./Error\";\r\nimport { createNoDashGuid } from \"./Guid\";\r\n\r\nexport class RawWebsocketMessage {\r\n    private privMessageType: MessageType;\r\n    private privPayload: any = null;\r\n    private privId: string;\r\n\r\n    public constructor(messageType: MessageType, payload: any, id?: string) {\r\n        if (!payload) {\r\n            throw new ArgumentNullError(\"payload\");\r\n        }\r\n\r\n        if (messageType === MessageType.Binary && !(payload instanceof ArrayBuffer)) {\r\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\r\n        }\r\n\r\n        if (messageType === MessageType.Text && !(typeof (payload) === \"string\")) {\r\n            throw new InvalidOperationError(\"Payload must be a string\");\r\n        }\r\n\r\n        this.privMessageType = messageType;\r\n        this.privPayload = payload;\r\n        this.privId = id ? id : createNoDashGuid();\r\n    }\r\n\r\n    public get messageType(): MessageType {\r\n        return this.privMessageType;\r\n    }\r\n\r\n    public get payload(): any {\r\n        return this.privPayload;\r\n    }\r\n\r\n    public get textContent(): string {\r\n        if (this.privMessageType === MessageType.Binary) {\r\n            throw new InvalidOperationError(\"Not supported for binary message\");\r\n        }\r\n\r\n        return this.privPayload as string;\r\n    }\r\n\r\n    public get binaryContent(): ArrayBuffer {\r\n        if (this.privMessageType === MessageType.Text) {\r\n            throw new InvalidOperationError(\"Not supported for text message\");\r\n        }\r\n\r\n        return this.privPayload;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}