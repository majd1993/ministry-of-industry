{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar TOKEN_URL_TEMPLATE = 'https://{region}.api.cognitive.microsoft.com/sts/v1.0/issueToken';\n\nfunction _default(_x) {\n  return _ref2.apply(this, arguments);\n}\n\nfunction _ref2() {\n  _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(_ref) {\n    var region, subscriptionKey, res;\n    return _regenerator.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            region = _ref.region, subscriptionKey = _ref.subscriptionKey;\n            _context.next = 3;\n            return fetch(TOKEN_URL_TEMPLATE.replace(/\\{region\\}/, region), {\n              headers: {\n                'Ocp-Apim-Subscription-Key': subscriptionKey\n              },\n              method: 'POST'\n            });\n\n          case 3:\n            res = _context.sent;\n\n            if (res.ok) {\n              _context.next = 6;\n              break;\n            }\n\n            throw new Error(\"Failed to fetch authorization token, server returned \".concat(res.status));\n\n          case 6:\n            return _context.abrupt(\"return\", res.text());\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _ref2.apply(this, arguments);\n}","map":{"version":3,"sources":["../../src/SpeechServices/fetchAuthorizationToken.js"],"names":["TOKEN_URL_TEMPLATE","region","subscriptionKey","res","fetch","headers","method"],"mappings":";;;;;;;;;;;;;AAAA,IAAMA,kBAAkB,GAAxB,kEAAA;;;;;;;kFAEe,SAAA,OAAA,CAAA,IAAA,EAAA;AAAA,QAAA,MAAA,EAAA,eAAA,EAAA,GAAA;AAAA,WAAA,YAAA,CAAA,OAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,aAAA,CAAA,EAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,eAAA,CAAA;AAAkBC,YAAAA,MAAlB,GAAA,IAAA,CAAA,MAAkBA,EAAQC,eAA1B,GAAA,IAAA,CAAA,eAAkBD;AAAlB,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,mBACKG,KAAK,CACrBJ,kBAAkB,CAAlBA,OAAAA,CAAAA,YAAAA,EADqB,MACrBA,CADqB,EAErB;AACEK,cAAAA,OAAO,EAAE;AACP,6CAA6BH;AADtB,eADX;AAIEI,cAAAA,MAAM,EAAE;AAJV,aAFqB,CADV;;AAAA,eAAA,CAAA;AACPH,YAAAA,GADO,GAAA,QAAA,CAAA,IACPA;;AADO,gBAWRA,GAAG,CAXK,EAAA,EAAA;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,kBAYL,IAAA,KAAA,CAAA,wDAAA,MAAA,CAAmEA,GAAG,CAZjE,MAYL,CAAA,CAZK;;AAAA,eAAA,CAAA;AAAA,mBAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAeNA,GAAG,CAfG,IAeNA,EAfM,CAAA;;AAAA,eAAA,CAAA;AAAA,eAAA,KAAA;AAAA,mBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,KAAA,EAAA,OAAA,CAAA","sourcesContent":["const TOKEN_URL_TEMPLATE = 'https://{region}.api.cognitive.microsoft.com/sts/v1.0/issueToken';\n\nexport default async function ({ region, subscriptionKey }) {\n  const res = await fetch(\n    TOKEN_URL_TEMPLATE.replace(/\\{region\\}/u, region),\n    {\n      headers: {\n        'Ocp-Apim-Subscription-Key': subscriptionKey\n      },\n      method: 'POST'\n    }\n  );\n\n  if (!res.ok) {\n    throw new Error(`Failed to fetch authorization token, server returned ${ res.status }`);\n  }\n\n  return res.text();\n}\n"]},"metadata":{},"sourceType":"script"}