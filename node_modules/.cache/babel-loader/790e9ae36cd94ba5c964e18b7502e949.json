{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ConnectionMessage_1 = require(\"./ConnectionMessage\");\n\nvar Error_1 = require(\"./Error\");\n\nvar Guid_1 = require(\"./Guid\");\n\nvar RawWebsocketMessage =\n/** @class */\nfunction () {\n  function RawWebsocketMessage(messageType, payload, id) {\n    this.privPayload = null;\n\n    if (!payload) {\n      throw new Error_1.ArgumentNullError(\"payload\");\n    }\n\n    if (messageType === ConnectionMessage_1.MessageType.Binary && !(payload instanceof ArrayBuffer)) {\n      throw new Error_1.InvalidOperationError(\"Payload must be ArrayBuffer\");\n    }\n\n    if (messageType === ConnectionMessage_1.MessageType.Text && !(typeof payload === \"string\")) {\n      throw new Error_1.InvalidOperationError(\"Payload must be a string\");\n    }\n\n    this.privMessageType = messageType;\n    this.privPayload = payload;\n    this.privId = id ? id : Guid_1.createNoDashGuid();\n  }\n\n  Object.defineProperty(RawWebsocketMessage.prototype, \"messageType\", {\n    get: function get() {\n      return this.privMessageType;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RawWebsocketMessage.prototype, \"payload\", {\n    get: function get() {\n      return this.privPayload;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RawWebsocketMessage.prototype, \"textContent\", {\n    get: function get() {\n      if (this.privMessageType === ConnectionMessage_1.MessageType.Binary) {\n        throw new Error_1.InvalidOperationError(\"Not supported for binary message\");\n      }\n\n      return this.privPayload;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RawWebsocketMessage.prototype, \"binaryContent\", {\n    get: function get() {\n      if (this.privMessageType === ConnectionMessage_1.MessageType.Text) {\n        throw new Error_1.InvalidOperationError(\"Not supported for text message\");\n      }\n\n      return this.privPayload;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RawWebsocketMessage.prototype, \"id\", {\n    get: function get() {\n      return this.privId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return RawWebsocketMessage;\n}();\n\nexports.RawWebsocketMessage = RawWebsocketMessage;","map":{"version":3,"sources":["src/common/RawWebsocketMessage.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;AAEA,IAAA,mBAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAEA,IAAA,mBAAA;AAAA;AAAA,YAAA;AAKI,WAAA,mBAAA,CAAmB,WAAnB,EAA6C,OAA7C,EAA2D,EAA3D,EAAsE;AAH9D,SAAA,WAAA,GAAmB,IAAnB;;AAIJ,QAAI,CAAC,OAAL,EAAc;AACV,YAAM,IAAI,OAAA,CAAA,iBAAJ,CAAsB,SAAtB,CAAN;AACH;;AAED,QAAI,WAAW,KAAK,mBAAA,CAAA,WAAA,CAAY,MAA5B,IAAsC,EAAE,OAAO,YAAY,WAArB,CAA1C,EAA6E;AACzE,YAAM,IAAI,OAAA,CAAA,qBAAJ,CAA0B,6BAA1B,CAAN;AACH;;AAED,QAAI,WAAW,KAAK,mBAAA,CAAA,WAAA,CAAY,IAA5B,IAAoC,EAAE,OAAQ,OAAR,KAAqB,QAAvB,CAAxC,EAA0E;AACtE,YAAM,IAAI,OAAA,CAAA,qBAAJ,CAA0B,0BAA1B,CAAN;AACH;;AAED,SAAK,eAAL,GAAuB,WAAvB;AACA,SAAK,WAAL,GAAmB,OAAnB;AACA,SAAK,MAAL,GAAc,EAAE,GAAG,EAAH,GAAQ,MAAA,CAAA,gBAAA,EAAxB;AACH;;AAED,EAAA,MAAA,CAAA,cAAA,CAAW,mBAAA,CAAA,SAAX,EAAW,aAAX,EAAsB;SAAtB,eAAA;AACI,aAAO,KAAK,eAAZ;AACH,KAFqB;oBAAA;;AAAA,GAAtB;AAIA,EAAA,MAAA,CAAA,cAAA,CAAW,mBAAA,CAAA,SAAX,EAAW,SAAX,EAAkB;SAAlB,eAAA;AACI,aAAO,KAAK,WAAZ;AACH,KAFiB;oBAAA;;AAAA,GAAlB;AAIA,EAAA,MAAA,CAAA,cAAA,CAAW,mBAAA,CAAA,SAAX,EAAW,aAAX,EAAsB;SAAtB,eAAA;AACI,UAAI,KAAK,eAAL,KAAyB,mBAAA,CAAA,WAAA,CAAY,MAAzC,EAAiD;AAC7C,cAAM,IAAI,OAAA,CAAA,qBAAJ,CAA0B,kCAA1B,CAAN;AACH;;AAED,aAAO,KAAK,WAAZ;AACH,KANqB;oBAAA;;AAAA,GAAtB;AAQA,EAAA,MAAA,CAAA,cAAA,CAAW,mBAAA,CAAA,SAAX,EAAW,eAAX,EAAwB;SAAxB,eAAA;AACI,UAAI,KAAK,eAAL,KAAyB,mBAAA,CAAA,WAAA,CAAY,IAAzC,EAA+C;AAC3C,cAAM,IAAI,OAAA,CAAA,qBAAJ,CAA0B,gCAA1B,CAAN;AACH;;AAED,aAAO,KAAK,WAAZ;AACH,KANuB;oBAAA;;AAAA,GAAxB;AAQA,EAAA,MAAA,CAAA,cAAA,CAAW,mBAAA,CAAA,SAAX,EAAW,IAAX,EAAa;SAAb,eAAA;AACI,aAAO,KAAK,MAAZ;AACH,KAFY;oBAAA;;AAAA,GAAb;AAGJ,SAAA,mBAAA;AAAC,CAlDD,EAAA;;AAAa,OAAA,CAAA,mBAAA,GAAA,mBAAA","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { MessageType } from \"./ConnectionMessage\";\r\nimport { ArgumentNullError, InvalidOperationError } from \"./Error\";\r\nimport { createNoDashGuid } from \"./Guid\";\r\n\r\nexport class RawWebsocketMessage {\r\n    private privMessageType: MessageType;\r\n    private privPayload: any = null;\r\n    private privId: string;\r\n\r\n    public constructor(messageType: MessageType, payload: any, id?: string) {\r\n        if (!payload) {\r\n            throw new ArgumentNullError(\"payload\");\r\n        }\r\n\r\n        if (messageType === MessageType.Binary && !(payload instanceof ArrayBuffer)) {\r\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\r\n        }\r\n\r\n        if (messageType === MessageType.Text && !(typeof (payload) === \"string\")) {\r\n            throw new InvalidOperationError(\"Payload must be a string\");\r\n        }\r\n\r\n        this.privMessageType = messageType;\r\n        this.privPayload = payload;\r\n        this.privId = id ? id : createNoDashGuid();\r\n    }\r\n\r\n    public get messageType(): MessageType {\r\n        return this.privMessageType;\r\n    }\r\n\r\n    public get payload(): any {\r\n        return this.privPayload;\r\n    }\r\n\r\n    public get textContent(): string {\r\n        if (this.privMessageType === MessageType.Binary) {\r\n            throw new InvalidOperationError(\"Not supported for binary message\");\r\n        }\r\n\r\n        return this.privPayload as string;\r\n    }\r\n\r\n    public get binaryContent(): ArrayBuffer {\r\n        if (this.privMessageType === MessageType.Text) {\r\n            throw new InvalidOperationError(\"Not supported for text message\");\r\n        }\r\n\r\n        return this.privPayload;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}