{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Exports_1 = require(\"../common/Exports\");\n\nvar CRLF = \"\\r\\n\";\n\nvar WebsocketMessageFormatter =\n/** @class */\nfunction () {\n  function WebsocketMessageFormatter() {\n    var _this = this;\n\n    this.toConnectionMessage = function (message) {\n      var deferral = new Exports_1.Deferred();\n\n      try {\n        if (message.messageType === Exports_1.MessageType.Text) {\n          var textMessage = message.textContent;\n          var headers = {};\n          var body = null;\n\n          if (textMessage) {\n            var headerBodySplit = textMessage.split(\"\\r\\n\\r\\n\");\n\n            if (headerBodySplit && headerBodySplit.length > 0) {\n              headers = _this.parseHeaders(headerBodySplit[0]);\n\n              if (headerBodySplit.length > 1) {\n                body = headerBodySplit[1];\n              }\n            }\n          }\n\n          deferral.resolve(new Exports_1.ConnectionMessage(message.messageType, body, headers, message.id));\n        } else if (message.messageType === Exports_1.MessageType.Binary) {\n          var binaryMessage = message.binaryContent;\n          var headers = {};\n          var body = null;\n\n          if (!binaryMessage || binaryMessage.byteLength < 2) {\n            throw new Error(\"Invalid binary message format. Header length missing.\");\n          }\n\n          var dataView = new DataView(binaryMessage);\n          var headerLength = dataView.getInt16(0);\n\n          if (binaryMessage.byteLength < headerLength + 2) {\n            throw new Error(\"Invalid binary message format. Header content missing.\");\n          }\n\n          var headersString = \"\";\n\n          for (var i = 0; i < headerLength; i++) {\n            headersString += String.fromCharCode(dataView.getInt8(i + 2));\n          }\n\n          headers = _this.parseHeaders(headersString);\n\n          if (binaryMessage.byteLength > headerLength + 2) {\n            body = binaryMessage.slice(2 + headerLength);\n          }\n\n          deferral.resolve(new Exports_1.ConnectionMessage(message.messageType, body, headers, message.id));\n        }\n      } catch (e) {\n        deferral.reject(\"Error formatting the message. Error: \" + e);\n      }\n\n      return deferral.promise();\n    };\n\n    this.fromConnectionMessage = function (message) {\n      var deferral = new Exports_1.Deferred();\n\n      try {\n        if (message.messageType === Exports_1.MessageType.Text) {\n          var payload = \"\" + _this.makeHeaders(message) + CRLF + (message.textBody ? message.textBody : \"\");\n          deferral.resolve(new Exports_1.RawWebsocketMessage(Exports_1.MessageType.Text, payload, message.id));\n        } else if (message.messageType === Exports_1.MessageType.Binary) {\n          var headersString = _this.makeHeaders(message);\n\n          var content = message.binaryBody;\n          var headerInt8Array = new Int8Array(_this.stringToArrayBuffer(headersString));\n          var payload = new ArrayBuffer(2 + headerInt8Array.byteLength + (content ? content.byteLength : 0));\n          var dataView = new DataView(payload);\n          dataView.setInt16(0, headerInt8Array.length);\n\n          for (var i = 0; i < headerInt8Array.byteLength; i++) {\n            dataView.setInt8(2 + i, headerInt8Array[i]);\n          }\n\n          if (content) {\n            var bodyInt8Array = new Int8Array(content);\n\n            for (var i = 0; i < bodyInt8Array.byteLength; i++) {\n              dataView.setInt8(2 + headerInt8Array.byteLength + i, bodyInt8Array[i]);\n            }\n          }\n\n          deferral.resolve(new Exports_1.RawWebsocketMessage(Exports_1.MessageType.Binary, payload, message.id));\n        }\n      } catch (e) {\n        deferral.reject(\"Error formatting the message. \" + e);\n      }\n\n      return deferral.promise();\n    };\n\n    this.makeHeaders = function (message) {\n      var headersString = \"\";\n\n      if (message.headers) {\n        for (var header in message.headers) {\n          if (header) {\n            headersString += header + \": \" + message.headers[header] + CRLF;\n          }\n        }\n      }\n\n      return headersString;\n    };\n\n    this.parseHeaders = function (headersString) {\n      var headers = {};\n\n      if (headersString) {\n        var headerMatches = headersString.match(/[^\\r\\n]+/g);\n\n        if (headers) {\n          for (var _i = 0, headerMatches_1 = headerMatches; _i < headerMatches_1.length; _i++) {\n            var header = headerMatches_1[_i];\n\n            if (header) {\n              var separatorIndex = header.indexOf(\":\");\n              var headerName = separatorIndex > 0 ? header.substr(0, separatorIndex).trim().toLowerCase() : header;\n              var headerValue = separatorIndex > 0 && header.length > separatorIndex + 1 ? header.substr(separatorIndex + 1).trim() : \"\";\n              headers[headerName] = headerValue;\n            }\n          }\n        }\n      }\n\n      return headers;\n    };\n\n    this.stringToArrayBuffer = function (str) {\n      var buffer = new ArrayBuffer(str.length);\n      var view = new DataView(buffer);\n\n      for (var i = 0; i < str.length; i++) {\n        view.setUint8(i, str.charCodeAt(i));\n      }\n\n      return buffer;\n    };\n  }\n\n  return WebsocketMessageFormatter;\n}();\n\nexports.WebsocketMessageFormatter = WebsocketMessageFormatter;","map":{"version":3,"sources":["src/common.speech/WebsocketMessageFormatter.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionMessage,\r\n    Deferred,\r\n    IStringDictionary,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    Promise,\r\n    RawWebsocketMessage,\r\n} from \"../common/Exports\";\r\n\r\nconst CRLF: string = \"\\r\\n\";\r\n\r\nexport class WebsocketMessageFormatter implements IWebsocketMessageFormatter {\r\n\r\n    public toConnectionMessage = (message: RawWebsocketMessage): Promise<ConnectionMessage> => {\r\n        const deferral = new Deferred<ConnectionMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const textMessage: string = message.textContent;\r\n                let headers: IStringDictionary<string> = {};\r\n                let body: string = null;\r\n\r\n                if (textMessage) {\r\n                    const headerBodySplit = textMessage.split(\"\\r\\n\\r\\n\");\r\n                    if (headerBodySplit && headerBodySplit.length > 0) {\r\n                        headers = this.parseHeaders(headerBodySplit[0]);\r\n                        if (headerBodySplit.length > 1) {\r\n                            body = headerBodySplit[1];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                deferral.resolve(new ConnectionMessage(message.messageType, body, headers, message.id));\r\n            } else if (message.messageType === MessageType.Binary) {\r\n                const binaryMessage: ArrayBuffer = message.binaryContent;\r\n                let headers: IStringDictionary<string> = {};\r\n                let body: ArrayBuffer = null;\r\n\r\n                if (!binaryMessage || binaryMessage.byteLength < 2) {\r\n                    throw new Error(\"Invalid binary message format. Header length missing.\");\r\n                }\r\n\r\n                const dataView = new DataView(binaryMessage);\r\n                const headerLength = dataView.getInt16(0);\r\n\r\n                if (binaryMessage.byteLength < headerLength + 2) {\r\n                    throw new Error(\"Invalid binary message format. Header content missing.\");\r\n                }\r\n\r\n                let headersString = \"\";\r\n                for (let i = 0; i < headerLength; i++) {\r\n                    headersString += String.fromCharCode((dataView).getInt8(i + 2));\r\n                }\r\n\r\n                headers = this.parseHeaders(headersString);\r\n\r\n                if (binaryMessage.byteLength > headerLength + 2) {\r\n                    body = binaryMessage.slice(2 + headerLength);\r\n                }\r\n\r\n                deferral.resolve(new ConnectionMessage(message.messageType, body, headers, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. Error: ${e}`);\r\n        }\r\n\r\n        return deferral.promise();\r\n    }\r\n\r\n    public fromConnectionMessage = (message: ConnectionMessage): Promise<RawWebsocketMessage> => {\r\n        const deferral = new Deferred<RawWebsocketMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const payload = `${this.makeHeaders(message)}${CRLF}${message.textBody ? message.textBody : \"\"}`;\r\n\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Text, payload, message.id));\r\n\r\n            } else if (message.messageType === MessageType.Binary) {\r\n                const headersString = this.makeHeaders(message);\r\n                const content = message.binaryBody;\r\n\r\n                const headerInt8Array = new Int8Array(this.stringToArrayBuffer(headersString));\r\n\r\n                const payload = new ArrayBuffer(2 + headerInt8Array.byteLength + (content ? content.byteLength : 0));\r\n                const dataView = new DataView(payload);\r\n\r\n                dataView.setInt16(0, headerInt8Array.length);\r\n\r\n                for (let i = 0; i < headerInt8Array.byteLength; i++) {\r\n                    dataView.setInt8(2 + i, headerInt8Array[i]);\r\n                }\r\n\r\n                if (content) {\r\n                    const bodyInt8Array = new Int8Array(content);\r\n                    for (let i = 0; i < bodyInt8Array.byteLength; i++) {\r\n                        dataView.setInt8(2 + headerInt8Array.byteLength + i, bodyInt8Array[i]);\r\n                    }\r\n                }\r\n\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Binary, payload, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. ${e}`);\r\n        }\r\n\r\n        return deferral.promise();\r\n    }\r\n\r\n    private makeHeaders = (message: ConnectionMessage): string => {\r\n        let headersString: string = \"\";\r\n\r\n        if (message.headers) {\r\n            for (const header in message.headers) {\r\n                if (header) {\r\n                    headersString += `${header}: ${message.headers[header]}${CRLF}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        return headersString;\r\n    }\r\n\r\n    private parseHeaders = (headersString: string): IStringDictionary<string> => {\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (headersString) {\r\n            const headerMatches = headersString.match(/[^\\r\\n]+/g);\r\n            if (headers) {\r\n                for (const header of headerMatches) {\r\n                    if (header) {\r\n                        const separatorIndex = header.indexOf(\":\");\r\n                        const headerName = separatorIndex > 0 ? header.substr(0, separatorIndex).trim().toLowerCase() : header;\r\n                        const headerValue =\r\n                            separatorIndex > 0 && header.length > (separatorIndex + 1) ?\r\n                                header.substr(separatorIndex + 1).trim() :\r\n                                \"\";\r\n\r\n                        headers[headerName] = headerValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return headers;\r\n    }\r\n\r\n    private stringToArrayBuffer = (str: string): ArrayBuffer => {\r\n        const buffer = new ArrayBuffer(str.length);\r\n        const view = new DataView(buffer);\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(i, str.charCodeAt(i));\r\n        }\r\n        return buffer;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}