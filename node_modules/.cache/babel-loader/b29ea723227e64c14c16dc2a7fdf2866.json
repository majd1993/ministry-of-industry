{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Exports_1 = require(\"../common.speech/Exports\");\n\nvar Exports_2 = require(\"../sdk/Exports\");\n\nvar QueryParameterNames_1 = require(\"./QueryParameterNames\");\n\nvar ConnectionFactoryBase =\n/** @class */\nfunction () {\n  function ConnectionFactoryBase() {}\n\n  ConnectionFactoryBase.prototype.setCommonUrlParams = function (config, queryParams, endpoint) {\n    this.setUrlParameter(Exports_2.PropertyId.SpeechServiceConnection_EnableAudioLogging, QueryParameterNames_1.QueryParameterNames.EnableAudioLogging, config, queryParams, endpoint);\n    this.setUrlParameter(Exports_2.PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, QueryParameterNames_1.QueryParameterNames.EnableWordLevelTimestamps, config, queryParams, endpoint);\n    this.setUrlParameter(Exports_2.PropertyId.SpeechServiceResponse_ProfanityOption, QueryParameterNames_1.QueryParameterNames.Profanify, config, queryParams, endpoint);\n    this.setUrlParameter(Exports_2.PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs, QueryParameterNames_1.QueryParameterNames.InitialSilenceTimeoutMs, config, queryParams, endpoint);\n    this.setUrlParameter(Exports_2.PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs, QueryParameterNames_1.QueryParameterNames.EndSilenceTimeoutMs, config, queryParams, endpoint);\n    this.setUrlParameter(Exports_2.PropertyId.SpeechServiceResponse_StablePartialResultThreshold, QueryParameterNames_1.QueryParameterNames.StableIntermediateThreshold, config, queryParams, endpoint);\n    var serviceProperties = JSON.parse(config.parameters.getProperty(Exports_1.ServicePropertiesPropertyName, \"{}\"));\n    Object.keys(serviceProperties).forEach(function (value, num, array) {\n      queryParams[value] = serviceProperties[value];\n    });\n  };\n\n  ConnectionFactoryBase.prototype.setUrlParameter = function (propId, parameterName, config, queryParams, endpoint) {\n    var value = config.parameters.getProperty(propId, undefined);\n\n    if (value && (!endpoint || endpoint.search(parameterName) === -1)) {\n      queryParams[parameterName] = value.toLocaleLowerCase();\n    }\n  };\n\n  return ConnectionFactoryBase;\n}();\n\nexports.ConnectionFactoryBase = ConnectionFactoryBase;","map":{"version":3,"sources":["src/common.speech/ConnectionFactoryBase.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;AAEA,IAAA,SAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;;AAIA,IAAA,SAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AAEA,IAAA,qBAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AAEA,IAAA,qBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,qBAAA,GAAA,CAmEC;;AA7Da,EAAA,qBAAA,CAAA,SAAA,CAAA,kBAAA,GAAV,UACI,MADJ,EAEI,WAFJ,EAGI,QAHJ,EAGoB;AAEhB,SAAK,eAAL,CAAqB,SAAA,CAAA,UAAA,CAAW,0CAAhC,EACI,qBAAA,CAAA,mBAAA,CAAoB,kBADxB,EAEI,MAFJ,EAGI,WAHJ,EAII,QAJJ;AAMA,SAAK,eAAL,CAAqB,SAAA,CAAA,UAAA,CAAW,gDAAhC,EACI,qBAAA,CAAA,mBAAA,CAAoB,yBADxB,EAEI,MAFJ,EAGI,WAHJ,EAII,QAJJ;AAMA,SAAK,eAAL,CAAqB,SAAA,CAAA,UAAA,CAAW,qCAAhC,EACI,qBAAA,CAAA,mBAAA,CAAoB,SADxB,EAEI,MAFJ,EAGI,WAHJ,EAII,QAJJ;AAMA,SAAK,eAAL,CAAqB,SAAA,CAAA,UAAA,CAAW,+CAAhC,EACI,qBAAA,CAAA,mBAAA,CAAoB,uBADxB,EAEI,MAFJ,EAGI,WAHJ,EAII,QAJJ;AAMA,SAAK,eAAL,CAAqB,SAAA,CAAA,UAAA,CAAW,2CAAhC,EACI,qBAAA,CAAA,mBAAA,CAAoB,mBADxB,EAEI,MAFJ,EAGI,WAHJ,EAII,QAJJ;AAMA,SAAK,eAAL,CAAqB,SAAA,CAAA,UAAA,CAAW,kDAAhC,EACI,qBAAA,CAAA,mBAAA,CAAoB,2BADxB,EAEI,MAFJ,EAGI,WAHJ,EAII,QAJJ;AAMA,QAAM,iBAAiB,GAA8B,IAAI,CAAC,KAAL,CAAW,MAAM,CAAC,UAAP,CAAkB,WAAlB,CAA8B,SAAA,CAAA,6BAA9B,EAA6D,IAA7D,CAAX,CAArD;AAEA,IAAA,MAAM,CAAC,IAAP,CAAY,iBAAZ,EAA+B,OAA/B,CAAuC,UAAC,KAAD,EAAgB,GAAhB,EAA6B,KAA7B,EAA4C;AAC/E,MAAA,WAAW,CAAC,KAAD,CAAX,GAAqB,iBAAiB,CAAC,KAAD,CAAtC;AACH,KAFD;AAGH,GA9CS;;AAgDA,EAAA,qBAAA,CAAA,SAAA,CAAA,eAAA,GAAV,UACI,MADJ,EAEI,aAFJ,EAGI,MAHJ,EAII,WAJJ,EAKI,QALJ,EAKoB;AAEhB,QAAM,KAAK,GAAW,MAAM,CAAC,UAAP,CAAkB,WAAlB,CAA8B,MAA9B,EAAsC,SAAtC,CAAtB;;AAEA,QAAI,KAAK,KAAK,CAAC,QAAD,IAAa,QAAQ,CAAC,MAAT,CAAgB,aAAhB,MAAmC,CAAC,CAAtD,CAAT,EAAmE;AAC/D,MAAA,WAAW,CAAC,aAAD,CAAX,GAA6B,KAAK,CAAC,iBAAN,EAA7B;AACH;AACJ,GAZS;;AAad,SAAA,qBAAA;AAAC,CAnED,EAAA;;AAAsB,OAAA,CAAA,qBAAA,GAAA,qBAAA","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ServicePropertiesPropertyName,\r\n} from \"../common.speech/Exports\";\r\nimport { IConnection, IStringDictionary } from \"../common/Exports\";\r\nimport { OutputFormat, PropertyId } from \"../sdk/Exports\";\r\nimport { AuthInfo, IConnectionFactory, RecognitionMode, RecognizerConfig, WebsocketMessageFormatter } from \"./Exports\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames\";\r\n\r\nexport abstract class ConnectionFactoryBase implements IConnectionFactory {\r\n    public abstract create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection;\r\n\r\n    protected setCommonUrlParams(\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        this.setUrlParameter(PropertyId.SpeechServiceConnection_EnableAudioLogging,\r\n            QueryParameterNames.EnableAudioLogging,\r\n            config,\r\n            queryParams,\r\n            endpoint);\r\n\r\n        this.setUrlParameter(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps,\r\n            QueryParameterNames.EnableWordLevelTimestamps,\r\n            config,\r\n            queryParams,\r\n            endpoint);\r\n\r\n        this.setUrlParameter(PropertyId.SpeechServiceResponse_ProfanityOption,\r\n            QueryParameterNames.Profanify,\r\n            config,\r\n            queryParams,\r\n            endpoint);\r\n\r\n        this.setUrlParameter(PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs,\r\n            QueryParameterNames.InitialSilenceTimeoutMs,\r\n            config,\r\n            queryParams,\r\n            endpoint);\r\n\r\n        this.setUrlParameter(PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs,\r\n            QueryParameterNames.EndSilenceTimeoutMs,\r\n            config,\r\n            queryParams,\r\n            endpoint);\r\n\r\n        this.setUrlParameter(PropertyId.SpeechServiceResponse_StablePartialResultThreshold,\r\n            QueryParameterNames.StableIntermediateThreshold,\r\n            config,\r\n            queryParams,\r\n            endpoint);\r\n\r\n        const serviceProperties: IStringDictionary<string> = JSON.parse(config.parameters.getProperty(ServicePropertiesPropertyName, \"{}\"));\r\n\r\n        Object.keys(serviceProperties).forEach((value: string, num: number, array: string[]) => {\r\n            queryParams[value] = serviceProperties[value];\r\n        });\r\n    }\r\n\r\n    protected setUrlParameter(\r\n        propId: PropertyId,\r\n        parameterName: string,\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        const value: string = config.parameters.getProperty(propId, undefined);\r\n\r\n        if (value && (!endpoint || endpoint.search(parameterName) === -1)) {\r\n            queryParams[parameterName] = value.toLocaleLowerCase();\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}