{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n/* eslint object-shorthand: \"off\" */\n\n/* eslint prefer-destructuring: \"off\" */\n\n/* eslint prefer-arrow-callback: \"off\" */\n// This file is the entrypoint of Web Worker and is minimally transpiled through Babel.\n// Do not include any dependencies here because they will not be bundled.\n// This file will also get loaded by IE11, please make sure you hand-transpile it correctly.\n\nfunction _default() {\n  function blobToDataURL(blob) {\n    return new Promise(function (resolve, reject) {\n      var reader = new FileReader();\n\n      reader.onerror = function (event) {\n        reject(event.error || new Error(event.message));\n      };\n\n      reader.onloadend = function () {\n        resolve(reader.result);\n      };\n\n      reader.readAsDataURL(blob);\n    });\n  }\n\n  function keepAspectRatio(width, height, maxWidth, maxHeight) {\n    if (width < maxWidth && height < maxHeight) {\n      // Photo is smaller than both maximum dimensions, take it as-is\n      return {\n        height: height,\n        width: width\n      };\n    }\n\n    var aspectRatio = width / height;\n\n    if (aspectRatio > maxWidth / maxHeight) {\n      // Photo is wider than maximum dimension, downscale it based on maxWidth.\n      return {\n        height: maxWidth / aspectRatio,\n        width: maxWidth\n      };\n    } // Photo is taller than maximum dimension, downscale it based on maxHeight.\n\n\n    return {\n      height: maxHeight,\n      width: maxHeight * aspectRatio\n    };\n  }\n\n  onmessage = function onmessage(event) {\n    var data = event.data;\n    var arrayBuffer = data.arrayBuffer;\n    var maxHeight = data.maxHeight;\n    var maxWidth = data.maxWidth;\n    var type = data.type;\n    var quality = data.quality;\n    var port = event.ports[0];\n    return Promise.resolve().then(function () {\n      return createImageBitmap(new Blob([arrayBuffer], {\n        resizeQuality: 'high'\n      }));\n    }).then(function (imageBitmap) {\n      var dimension = keepAspectRatio(imageBitmap.width, imageBitmap.height, maxWidth, maxHeight);\n      var height = dimension.height;\n      var width = dimension.width;\n      var offscreenCanvas = new OffscreenCanvas(width, height);\n      var context = offscreenCanvas.getContext('2d');\n      context.drawImage(imageBitmap, 0, 0, width, height); // Firefox quirks: 68.0.1 call named OffscreenCanvas.convertToBlob as OffscreenCanvas.toBlob.\n\n      var convertToBlob = (offscreenCanvas.convertToBlob || offscreenCanvas.toBlob).bind(offscreenCanvas);\n      return convertToBlob({\n        type: type,\n        quality: quality\n      });\n    }).then(function (blob) {\n      return blobToDataURL(blob);\n    }).then(function (dataURL) {\n      return port.postMessage({\n        result: dataURL\n      });\n    }).catch(function (err) {\n      console.error(err);\n      port.postMessage({\n        error: {\n          message: err.message,\n          stack: err.stack\n        }\n      });\n    });\n  };\n\n  postMessage('ready');\n}","map":{"version":3,"sources":["../../../src/Utils/downscaleImageToDataURL/downscaleImageToDataURLUsingWorker.worker.js"],"names":["reader","reject","event","resolve","width","height","aspectRatio","maxWidth","maxHeight","onmessage","data","arrayBuffer","type","quality","port","createImageBitmap","resizeQuality","dimension","keepAspectRatio","imageBitmap","offscreenCanvas","context","convertToBlob","blobToDataURL","result","dataURL","console","error","message","err","stack","postMessage"],"mappings":"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","sourcesContent":["/* eslint object-shorthand: \"off\" */\n/* eslint prefer-destructuring: \"off\" */\n/* eslint prefer-arrow-callback: \"off\" */\n\n// This file is the entrypoint of Web Worker and is minimally transpiled through Babel.\n// Do not include any dependencies here because they will not be bundled.\n\n// This file will also get loaded by IE11, please make sure you hand-transpile it correctly.\n\nexport default function () {\n  function blobToDataURL(blob) {\n    return new Promise(function (resolve, reject) {\n      const reader = new FileReader();\n\n      reader.onerror = function (event) {\n        reject(event.error || new Error(event.message));\n      };\n\n      reader.onloadend = function () {\n        resolve(reader.result);\n      };\n\n      reader.readAsDataURL(blob);\n    });\n  }\n\n  function keepAspectRatio(width, height, maxWidth, maxHeight) {\n    if (width < maxWidth && height < maxHeight) {\n      // Photo is smaller than both maximum dimensions, take it as-is\n      return {\n        height: height,\n        width: width\n      };\n    }\n\n    const aspectRatio = width / height;\n\n    if (aspectRatio > maxWidth / maxHeight) {\n      // Photo is wider than maximum dimension, downscale it based on maxWidth.\n      return {\n        height: maxWidth / aspectRatio,\n        width: maxWidth\n      };\n    }\n\n    // Photo is taller than maximum dimension, downscale it based on maxHeight.\n    return {\n      height: maxHeight,\n      width: maxHeight * aspectRatio\n    };\n  }\n\n  onmessage = function (event) {\n    const data = event.data;\n    const arrayBuffer = data.arrayBuffer;\n    const maxHeight = data.maxHeight;\n    const maxWidth = data.maxWidth;\n    const type = data.type;\n    const quality = data.quality;\n    const port = event.ports[0];\n\n    return Promise.resolve()\n      .then(function () {\n        return createImageBitmap(new Blob([arrayBuffer], { resizeQuality: 'high' }));\n      })\n      .then(function (imageBitmap) {\n        const dimension = keepAspectRatio(imageBitmap.width, imageBitmap.height, maxWidth, maxHeight);\n        const height = dimension.height;\n        const width = dimension.width;\n        const offscreenCanvas = new OffscreenCanvas(width, height);\n        const context = offscreenCanvas.getContext('2d');\n\n        context.drawImage(imageBitmap, 0, 0, width, height);\n\n        // Firefox quirks: 68.0.1 call named OffscreenCanvas.convertToBlob as OffscreenCanvas.toBlob.\n        const convertToBlob = (offscreenCanvas.convertToBlob || offscreenCanvas.toBlob).bind(offscreenCanvas);\n\n        return convertToBlob({ type: type, quality: quality });\n      })\n      .then(function (blob) {\n        return blobToDataURL(blob);\n      })\n      .then(function (dataURL) {\n        return port.postMessage({ result: dataURL });\n      })\n      .catch(function (err) {\n        console.error(err);\n\n        port.postMessage({\n          error: {\n            message: err.message,\n            stack: err.stack\n          }\n        });\n      });\n  };\n\n  postMessage('ready');\n}\n"],"sourceRoot":"component:///"},"metadata":{},"sourceType":"script"}