{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ArgumentNullError } from \"./Error\";\nexport var PromiseState;\n\n(function (PromiseState) {\n  PromiseState[PromiseState[\"None\"] = 0] = \"None\";\n  PromiseState[PromiseState[\"Resolved\"] = 1] = \"Resolved\";\n  PromiseState[PromiseState[\"Rejected\"] = 2] = \"Rejected\";\n})(PromiseState || (PromiseState = {}));\n\nexport var PromiseResult = /*#__PURE__*/function () {\n  function PromiseResult(promiseResultEventSource) {\n    var _this = this;\n\n    _classCallCheck(this, PromiseResult);\n\n    this.throwIfError = function () {\n      if (_this.isError) {\n        throw _this.error;\n      }\n    };\n\n    promiseResultEventSource.on(function (result) {\n      if (!_this.privIsCompleted) {\n        _this.privIsCompleted = true;\n        _this.privIsError = false;\n        _this.privResult = result;\n      }\n    }, function (error) {\n      if (!_this.privIsCompleted) {\n        _this.privIsCompleted = true;\n        _this.privIsError = true;\n        _this.privError = error;\n      }\n    });\n  }\n\n  _createClass(PromiseResult, [{\n    key: \"isCompleted\",\n    get: function get() {\n      return this.privIsCompleted;\n    }\n  }, {\n    key: \"isError\",\n    get: function get() {\n      return this.privIsError;\n    }\n  }, {\n    key: \"error\",\n    get: function get() {\n      return this.privError;\n    }\n  }, {\n    key: \"result\",\n    get: function get() {\n      return this.privResult;\n    }\n  }]);\n\n  return PromiseResult;\n}(); // tslint:disable-next-line:max-classes-per-file\n\nexport var PromiseResultEventSource = function PromiseResultEventSource() {\n  var _this2 = this;\n\n  _classCallCheck(this, PromiseResultEventSource);\n\n  this.setResult = function (result) {\n    _this2.privOnSetResult(result);\n  };\n\n  this.setError = function (error) {\n    _this2.privOnSetError(error);\n  };\n\n  this.on = function (onSetResult, onSetError) {\n    _this2.privOnSetResult = onSetResult;\n    _this2.privOnSetError = onSetError;\n  };\n}; // tslint:disable-next-line:max-classes-per-file\n\nexport var PromiseHelper = function PromiseHelper() {\n  _classCallCheck(this, PromiseHelper);\n};\n\nPromiseHelper.whenAll = function (promises) {\n  if (!promises || promises.length === 0) {\n    throw new ArgumentNullError(\"promises\");\n  }\n\n  var deferred = new Deferred();\n  var errors = [];\n  var completedPromises = 0;\n\n  var checkForCompletion = function checkForCompletion() {\n    completedPromises++;\n\n    if (completedPromises === promises.length) {\n      if (errors.length === 0) {\n        deferred.resolve(true);\n      } else {\n        deferred.reject(errors.join(\", \"));\n      }\n    }\n  };\n\n  var _iterator = _createForOfIteratorHelper(promises),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var promise = _step.value;\n      promise.on(function (r) {\n        checkForCompletion();\n      }, function (e) {\n        errors.push(e);\n        checkForCompletion();\n      });\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return deferred.promise();\n};\n\nPromiseHelper.fromResult = function (result) {\n  var deferred = new Deferred();\n  deferred.resolve(result);\n  return deferred.promise();\n};\n\nPromiseHelper.fromError = function (error) {\n  var deferred = new Deferred();\n  deferred.reject(error);\n  return deferred.promise();\n}; // TODO: replace with ES6 promises\n// tslint:disable-next-line:max-classes-per-file\n\n\nexport var Promise = function Promise(sink) {\n  var _this3 = this;\n\n  _classCallCheck(this, Promise);\n\n  this.result = function () {\n    return _this3.privSink.result;\n  };\n\n  this.continueWith = function (continuationCallback) {\n    if (!continuationCallback) {\n      throw new ArgumentNullError(\"continuationCallback\");\n    }\n\n    var continuationDeferral = new Deferred();\n\n    _this3.privSink.on(function (r) {\n      try {\n        var continuationResult = continuationCallback(_this3.privSink.result);\n        continuationDeferral.resolve(continuationResult);\n      } catch (e) {\n        continuationDeferral.reject(e);\n      }\n    }, function (error) {\n      try {\n        var continuationResult = continuationCallback(_this3.privSink.result);\n        continuationDeferral.resolve(continuationResult);\n      } catch (e) {\n        continuationDeferral.reject(\"'Error handler for error \".concat(error, \" threw error \").concat(e, \"'\"));\n      }\n    });\n\n    return continuationDeferral.promise();\n  };\n\n  this.onSuccessContinueWith = function (continuationCallback) {\n    if (!continuationCallback) {\n      throw new ArgumentNullError(\"continuationCallback\");\n    }\n\n    var continuationDeferral = new Deferred();\n\n    _this3.privSink.on(function (r) {\n      try {\n        var continuationResult = continuationCallback(r);\n        continuationDeferral.resolve(continuationResult);\n      } catch (e) {\n        continuationDeferral.reject(e);\n      }\n    }, function (error) {\n      continuationDeferral.reject(error);\n    });\n\n    return continuationDeferral.promise();\n  };\n\n  this.continueWithPromise = function (continuationCallback) {\n    if (!continuationCallback) {\n      throw new ArgumentNullError(\"continuationCallback\");\n    }\n\n    var continuationDeferral = new Deferred();\n\n    _this3.privSink.on(function (r) {\n      try {\n        var continuationPromise = continuationCallback(_this3.privSink.result);\n\n        if (!continuationPromise) {\n          throw new Error(\"'Continuation callback did not return promise'\");\n        }\n\n        continuationPromise.on(function (continuationResult) {\n          continuationDeferral.resolve(continuationResult);\n        }, function (e) {\n          continuationDeferral.reject(e);\n        });\n      } catch (e) {\n        continuationDeferral.reject(e);\n      }\n    }, function (error) {\n      try {\n        var continuationPromise = continuationCallback(_this3.privSink.result);\n\n        if (!continuationPromise) {\n          throw new Error(\"Continuation callback did not return promise\");\n        }\n\n        continuationPromise.on(function (continuationResult) {\n          continuationDeferral.resolve(continuationResult);\n        }, function (e) {\n          continuationDeferral.reject(e);\n        });\n      } catch (e) {\n        continuationDeferral.reject(\"'Error handler for error \".concat(error, \" threw error \").concat(e, \"'\"));\n      }\n    });\n\n    return continuationDeferral.promise();\n  };\n\n  this.onSuccessContinueWithPromise = function (continuationCallback) {\n    if (!continuationCallback) {\n      throw new ArgumentNullError(\"continuationCallback\");\n    }\n\n    var continuationDeferral = new Deferred();\n\n    _this3.privSink.on(function (r) {\n      try {\n        var continuationPromise = continuationCallback(r);\n\n        if (!continuationPromise) {\n          throw new Error(\"Continuation callback did not return promise\");\n        }\n\n        continuationPromise.on(function (continuationResult) {\n          continuationDeferral.resolve(continuationResult);\n        }, function (e) {\n          continuationDeferral.reject(e);\n        });\n      } catch (e) {\n        continuationDeferral.reject(e);\n      }\n    }, function (error) {\n      continuationDeferral.reject(error);\n    });\n\n    return continuationDeferral.promise();\n  };\n\n  this.on = function (successCallback, errorCallback) {\n    if (!successCallback) {\n      throw new ArgumentNullError(\"successCallback\");\n    }\n\n    if (!errorCallback) {\n      throw new ArgumentNullError(\"errorCallback\");\n    }\n\n    _this3.privSink.on(successCallback, errorCallback);\n\n    return _this3;\n  };\n\n  this.finally = function (callback) {\n    if (!callback) {\n      throw new ArgumentNullError(\"callback\");\n    }\n\n    var callbackWrapper = function callbackWrapper(_) {\n      callback();\n    };\n\n    return _this3.on(callbackWrapper, callbackWrapper);\n  };\n\n  this.privSink = sink;\n}; // tslint:disable-next-line:max-classes-per-file\n\nexport var Deferred = function Deferred() {\n  var _this4 = this;\n\n  _classCallCheck(this, Deferred);\n\n  this.state = function () {\n    return _this4.privSink.state;\n  };\n\n  this.promise = function () {\n    return _this4.privPromise;\n  };\n\n  this.resolve = function (result) {\n    _this4.privSink.resolve(result);\n\n    return _this4;\n  };\n\n  this.reject = function (error) {\n    _this4.privSink.reject(error);\n\n    return _this4;\n  };\n\n  this.privSink = new Sink();\n  this.privPromise = new Promise(this.privSink);\n}; // tslint:disable-next-line:max-classes-per-file\n\nexport var Sink = /*#__PURE__*/function () {\n  function Sink() {\n    var _this5 = this;\n\n    _classCallCheck(this, Sink);\n\n    this.privState = PromiseState.None;\n    this.privPromiseResult = null;\n    this.privPromiseResultEvents = null;\n    this.privSuccessHandlers = [];\n    this.privErrorHandlers = [];\n\n    this.resolve = function (result) {\n      if (_this5.privState !== PromiseState.None) {\n        throw new Error(\"'Cannot resolve a completed promise'\");\n      }\n\n      _this5.privState = PromiseState.Resolved;\n\n      _this5.privPromiseResultEvents.setResult(result);\n\n      for (var i = 0; i < _this5.privSuccessHandlers.length; i++) {\n        _this5.executeSuccessCallback(result, _this5.privSuccessHandlers[i], _this5.privErrorHandlers[i]);\n      }\n\n      _this5.detachHandlers();\n    };\n\n    this.reject = function (error) {\n      if (_this5.privState !== PromiseState.None) {\n        throw new Error(\"'Cannot reject a completed promise'\");\n      }\n\n      _this5.privState = PromiseState.Rejected;\n\n      _this5.privPromiseResultEvents.setError(error);\n\n      var _iterator2 = _createForOfIteratorHelper(_this5.privErrorHandlers),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var errorHandler = _step2.value;\n\n          _this5.executeErrorCallback(error, errorHandler);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      _this5.detachHandlers();\n    };\n\n    this.on = function (successCallback, errorCallback) {\n      if (successCallback == null) {\n        successCallback = function successCallback(r) {\n          return;\n        };\n      }\n\n      if (_this5.privState === PromiseState.None) {\n        _this5.privSuccessHandlers.push(successCallback);\n\n        _this5.privErrorHandlers.push(errorCallback);\n      } else {\n        if (_this5.privState === PromiseState.Resolved) {\n          _this5.executeSuccessCallback(_this5.privPromiseResult.result, successCallback, errorCallback);\n        } else if (_this5.privState === PromiseState.Rejected) {\n          _this5.executeErrorCallback(_this5.privPromiseResult.error, errorCallback);\n        }\n\n        _this5.detachHandlers();\n      }\n    };\n\n    this.executeSuccessCallback = function (result, successCallback, errorCallback) {\n      try {\n        successCallback(result);\n      } catch (e) {\n        _this5.executeErrorCallback(\"'Unhandled callback error: \".concat(e, \"'\"), errorCallback);\n      }\n    };\n\n    this.executeErrorCallback = function (error, errorCallback) {\n      if (errorCallback) {\n        try {\n          errorCallback(error);\n        } catch (e) {\n          throw new Error(\"'Unhandled callback error: \".concat(e, \". InnerError: \").concat(error, \"'\"));\n        }\n      } else {\n        throw new Error(\"'Unhandled error: \".concat(error, \"'\"));\n      }\n    };\n\n    this.detachHandlers = function () {\n      _this5.privErrorHandlers = [];\n      _this5.privSuccessHandlers = [];\n    };\n\n    this.privPromiseResultEvents = new PromiseResultEventSource();\n    this.privPromiseResult = new PromiseResult(this.privPromiseResultEvents);\n  }\n\n  _createClass(Sink, [{\n    key: \"state\",\n    get: function get() {\n      return this.privState;\n    }\n  }, {\n    key: \"result\",\n    get: function get() {\n      return this.privPromiseResult;\n    }\n  }]);\n\n  return Sink;\n}();","map":{"version":3,"sources":["src/common/Promise.ts"],"names":[],"mappings":";;;AAAA;AACA;AAEA,SAAS,iBAAT,QAAmC,SAAnC;AAEA,OAAA,IAAY,YAAZ;;AAAA,CAAA,UAAY,YAAZ,EAAwB;AACpB,EAAA,YAAA,CAAA,YAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA;AACA,EAAA,YAAA,CAAA,YAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;AACA,EAAA,YAAA,CAAA,YAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;AACH,CAJD,EAAY,YAAY,KAAZ,YAAY,GAAA,EAAA,CAAxB;;AAoCA,WAAa,aAAb;AAMI,yBAAmB,wBAAnB,EAAwE;AAAA;;AAAA;;AAgCjE,SAAA,YAAA,GAAe,YAAW;AAC7B,UAAI,KAAI,CAAC,OAAT,EAAkB;AACd,cAAM,KAAI,CAAC,KAAX;AACH;AACJ,KAJM;;AA/BH,IAAA,wBAAwB,CAAC,EAAzB,CAA4B,UAAC,MAAD,EAAc;AACtC,UAAI,CAAC,KAAI,CAAC,eAAV,EAA2B;AACvB,QAAA,KAAI,CAAC,eAAL,GAAuB,IAAvB;AACA,QAAA,KAAI,CAAC,WAAL,GAAmB,KAAnB;AACA,QAAA,KAAI,CAAC,UAAL,GAAkB,MAAlB;AACH;AACJ,KAND,EAMG,UAAC,KAAD,EAAkB;AACjB,UAAI,CAAC,KAAI,CAAC,eAAV,EAA2B;AACvB,QAAA,KAAI,CAAC,eAAL,GAAuB,IAAvB;AACA,QAAA,KAAI,CAAC,WAAL,GAAmB,IAAnB;AACA,QAAA,KAAI,CAAC,SAAL,GAAiB,KAAjB;AACH;AACJ,KAZD;AAaH;;AApBL;AAAA;AAAA,SAsBI,eAAsB;AAClB,aAAO,KAAK,eAAZ;AACH;AAxBL;AAAA;AAAA,SA0BI,eAAkB;AACd,aAAO,KAAK,WAAZ;AACH;AA5BL;AAAA;AAAA,SA8BI,eAAgB;AACZ,aAAO,KAAK,SAAZ;AACH;AAhCL;AAAA;AAAA,SAkCI,eAAiB;AACb,aAAO,KAAK,UAAZ;AACH;AApCL;;AAAA;AAAA,I,CA6CA;;AACA,WAAa,wBAAb,GAAA,oCAAA;AAAA;;AAAA;;AAKW,OAAA,SAAA,GAAY,UAAC,MAAD,EAAoB;AACnC,IAAA,MAAI,CAAC,eAAL,CAAqB,MAArB;AACH,GAFM;;AAIA,OAAA,QAAA,GAAW,UAAC,KAAD,EAAwB;AACtC,IAAA,MAAI,CAAC,cAAL,CAAoB,KAApB;AACH,GAFM;;AAIA,OAAA,EAAA,GAAK,UAAC,WAAD,EAAmC,UAAnC,EAAgF;AACxF,IAAA,MAAI,CAAC,eAAL,GAAuB,WAAvB;AACA,IAAA,MAAI,CAAC,cAAL,GAAsB,UAAtB;AACH,GAHM;AAIV,CAjBD,C,CAmBA;;AACA,WAAa,aAAb;AAAA;AAAA;;AACkB,aAAA,CAAA,OAAA,GAAU,UAAC,QAAD,EAAoD;AACxE,MAAI,CAAC,QAAD,IAAa,QAAQ,CAAC,MAAT,KAAoB,CAArC,EAAwC;AACpC,UAAM,IAAI,iBAAJ,CAAsB,UAAtB,CAAN;AACH;;AAED,MAAM,QAAQ,GAAG,IAAI,QAAJ,EAAjB;AACA,MAAM,MAAM,GAAa,EAAzB;AACA,MAAI,iBAAiB,GAAW,CAAhC;;AAEA,MAAM,kBAAkB,GAAG,SAArB,kBAAqB,GAAK;AAC5B,IAAA,iBAAiB;;AACjB,QAAI,iBAAiB,KAAK,QAAQ,CAAC,MAAnC,EAA2C;AACvC,UAAI,MAAM,CAAC,MAAP,KAAkB,CAAtB,EAAyB;AACrB,QAAA,QAAQ,CAAC,OAAT,CAAiB,IAAjB;AACH,OAFD,MAEO;AACH,QAAA,QAAQ,CAAC,MAAT,CAAgB,MAAM,CAAC,IAAP,CAAY,IAAZ,CAAhB;AACH;AACJ;AACJ,GATD;;AATwE,6CAoBlD,QApBkD;AAAA;;AAAA;AAoBxE,wDAAgC;AAAA,UAArB,OAAqB;AAC5B,MAAA,OAAO,CAAC,EAAR,CAAW,UAAC,CAAD,EAAW;AAClB,QAAA,kBAAkB;AACrB,OAFD,EAEG,UAAC,CAAD,EAAc;AACb,QAAA,MAAM,CAAC,IAAP,CAAY,CAAZ;AACA,QAAA,kBAAkB;AACrB,OALD;AAMH;AA3BuE;AAAA;AAAA;AAAA;AAAA;;AA6BxE,SAAO,QAAQ,CAAC,OAAT,EAAP;AACH,CA9Ba;;AAgCA,aAAA,CAAA,UAAA,GAAa,UAAU,MAAV,EAA+C;AACtE,MAAM,QAAQ,GAAG,IAAI,QAAJ,EAAjB;AACA,EAAA,QAAQ,CAAC,OAAT,CAAiB,MAAjB;AACA,SAAO,QAAQ,CAAC,OAAT,EAAP;AACH,CAJa;;AAMA,aAAA,CAAA,SAAA,GAAY,UAAU,KAAV,EAA6C;AACnE,MAAM,QAAQ,GAAG,IAAI,QAAJ,EAAjB;AACA,EAAA,QAAQ,CAAC,MAAT,CAAgB,KAAhB;AACA,SAAO,QAAQ,CAAC,OAAT,EAAP;AACH,CAJa,C,CAOlB;AACA;;;AACA,WAAa,OAAb,GAGI,iBAAmB,IAAnB,EAAgC;AAAA;;AAAA;;AAIzB,OAAA,MAAA,GAAS,YAAuB;AACnC,WAAO,MAAI,CAAC,QAAL,CAAc,MAArB;AACH,GAFM;;AAIA,OAAA,YAAA,GAAe,UAClB,oBADkB,EAC8F;AAEhH,QAAI,CAAC,oBAAL,EAA2B;AACvB,YAAM,IAAI,iBAAJ,CAAsB,sBAAtB,CAAN;AACH;;AAED,QAAM,oBAAoB,GAAG,IAAI,QAAJ,EAA7B;;AAEA,IAAA,MAAI,CAAC,QAAL,CAAc,EAAd,CACI,UAAC,CAAD,EAAS;AACL,UAAI;AACA,YAAM,kBAAkB,GAAwB,oBAAoB,CAAC,MAAI,CAAC,QAAL,CAAc,MAAf,CAApE;AACA,QAAA,oBAAoB,CAAC,OAArB,CAA6B,kBAA7B;AACH,OAHD,CAGE,OAAO,CAAP,EAAU;AACR,QAAA,oBAAoB,CAAC,MAArB,CAA4B,CAA5B;AACH;AACJ,KARL,EASI,UAAC,KAAD,EAAkB;AACd,UAAI;AACA,YAAM,kBAAkB,GAAwB,oBAAoB,CAAC,MAAI,CAAC,QAAL,CAAc,MAAf,CAApE;AACA,QAAA,oBAAoB,CAAC,OAArB,CAA6B,kBAA7B;AACH,OAHD,CAGE,OAAO,CAAP,EAAU;AACR,QAAA,oBAAoB,CAAC,MAArB,oCAAwD,KAAxD,0BAA6E,CAA7E;AACH;AACJ,KAhBL;;AAmBA,WAAO,oBAAoB,CAAC,OAArB,EAAP;AACH,GA7BM;;AA+BA,OAAA,qBAAA,GAAwB,UAC3B,oBAD2B,EAC+D;AAE1F,QAAI,CAAC,oBAAL,EAA2B;AACvB,YAAM,IAAI,iBAAJ,CAAsB,sBAAtB,CAAN;AACH;;AAED,QAAM,oBAAoB,GAAG,IAAI,QAAJ,EAA7B;;AAEA,IAAA,MAAI,CAAC,QAAL,CAAc,EAAd,CACI,UAAC,CAAD,EAAS;AACL,UAAI;AACA,YAAM,kBAAkB,GAAwB,oBAAoB,CAAC,CAAD,CAApE;AACA,QAAA,oBAAoB,CAAC,OAArB,CAA6B,kBAA7B;AACH,OAHD,CAGE,OAAO,CAAP,EAAU;AACR,QAAA,oBAAoB,CAAC,MAArB,CAA4B,CAA5B;AACH;AACJ,KARL,EASI,UAAC,KAAD,EAAkB;AACd,MAAA,oBAAoB,CAAC,MAArB,CAA4B,KAA5B;AACH,KAXL;;AAcA,WAAO,oBAAoB,CAAC,OAArB,EAAP;AACH,GAxBM;;AA0BA,OAAA,mBAAA,GAAsB,UACzB,oBADyB,EACgG;AAEzH,QAAI,CAAC,oBAAL,EAA2B;AACvB,YAAM,IAAI,iBAAJ,CAAsB,sBAAtB,CAAN;AACH;;AAED,QAAM,oBAAoB,GAAG,IAAI,QAAJ,EAA7B;;AAEA,IAAA,MAAI,CAAC,QAAL,CAAc,EAAd,CACI,UAAC,CAAD,EAAS;AACL,UAAI;AACA,YAAM,mBAAmB,GAAiC,oBAAoB,CAAC,MAAI,CAAC,QAAL,CAAc,MAAf,CAA9E;;AACA,YAAI,CAAC,mBAAL,EAA0B;AACtB,gBAAM,IAAI,KAAJ,CAAU,gDAAV,CAAN;AACH;;AACD,QAAA,mBAAmB,CAAC,EAApB,CAAuB,UAAC,kBAAD,EAA4C;AAC/D,UAAA,oBAAoB,CAAC,OAArB,CAA6B,kBAA7B;AACH,SAFD,EAEG,UAAC,CAAD,EAAc;AACb,UAAA,oBAAoB,CAAC,MAArB,CAA4B,CAA5B;AACH,SAJD;AAKH,OAVD,CAUE,OAAO,CAAP,EAAU;AACR,QAAA,oBAAoB,CAAC,MAArB,CAA4B,CAA5B;AACH;AACJ,KAfL,EAgBI,UAAC,KAAD,EAAkB;AACd,UAAI;AACA,YAAM,mBAAmB,GAAiC,oBAAoB,CAAC,MAAI,CAAC,QAAL,CAAc,MAAf,CAA9E;;AACA,YAAI,CAAC,mBAAL,EAA0B;AACtB,gBAAM,IAAI,KAAJ,CAAU,8CAAV,CAAN;AACH;;AACD,QAAA,mBAAmB,CAAC,EAApB,CAAuB,UAAC,kBAAD,EAA4C;AAC/D,UAAA,oBAAoB,CAAC,OAArB,CAA6B,kBAA7B;AACH,SAFD,EAEG,UAAC,CAAD,EAAc;AACb,UAAA,oBAAoB,CAAC,MAArB,CAA4B,CAA5B;AACH,SAJD;AAKH,OAVD,CAUE,OAAO,CAAP,EAAU;AACR,QAAA,oBAAoB,CAAC,MAArB,oCAAwD,KAAxD,0BAA6E,CAA7E;AACH;AACJ,KA9BL;;AAiCA,WAAO,oBAAoB,CAAC,OAArB,EAAP;AACH,GA3CM;;AA6CA,OAAA,4BAAA,GAA+B,UAClC,oBADkC,EACiE;AAEnG,QAAI,CAAC,oBAAL,EAA2B;AACvB,YAAM,IAAI,iBAAJ,CAAsB,sBAAtB,CAAN;AACH;;AAED,QAAM,oBAAoB,GAAG,IAAI,QAAJ,EAA7B;;AAEA,IAAA,MAAI,CAAC,QAAL,CAAc,EAAd,CACI,UAAC,CAAD,EAAS;AACL,UAAI;AACA,YAAM,mBAAmB,GAAiC,oBAAoB,CAAC,CAAD,CAA9E;;AACA,YAAI,CAAC,mBAAL,EAA0B;AACtB,gBAAM,IAAI,KAAJ,CAAU,8CAAV,CAAN;AACH;;AACD,QAAA,mBAAmB,CAAC,EAApB,CAAuB,UAAC,kBAAD,EAA4C;AAC/D,UAAA,oBAAoB,CAAC,OAArB,CAA6B,kBAA7B;AACH,SAFD,EAEG,UAAC,CAAD,EAAc;AACb,UAAA,oBAAoB,CAAC,MAArB,CAA4B,CAA5B;AACH,SAJD;AAKH,OAVD,CAUE,OAAO,CAAP,EAAU;AACR,QAAA,oBAAoB,CAAC,MAArB,CAA4B,CAA5B;AACH;AACJ,KAfL,EAgBI,UAAC,KAAD,EAAkB;AACd,MAAA,oBAAoB,CAAC,MAArB,CAA4B,KAA5B;AACH,KAlBL;;AAqBA,WAAO,oBAAoB,CAAC,OAArB,EAAP;AACH,GA/BM;;AAiCA,OAAA,EAAA,GAAK,UACR,eADQ,EAER,aAFQ,EAE8C;AACtD,QAAI,CAAC,eAAL,EAAsB;AAClB,YAAM,IAAI,iBAAJ,CAAsB,iBAAtB,CAAN;AACH;;AAED,QAAI,CAAC,aAAL,EAAoB;AAChB,YAAM,IAAI,iBAAJ,CAAsB,eAAtB,CAAN;AACH;;AAED,IAAA,MAAI,CAAC,QAAL,CAAc,EAAd,CAAiB,eAAjB,EAAkC,aAAlC;;AACA,WAAO,MAAP;AACH,GAbM;;AAeA,OAAA,OAAA,GAAU,UAAC,QAAD,EAAqC;AAClD,QAAI,CAAC,QAAL,EAAe;AACX,YAAM,IAAI,iBAAJ,CAAsB,UAAtB,CAAN;AACH;;AAED,QAAM,eAAe,GAAG,SAAlB,eAAkB,CAAC,CAAD,EAAW;AAC/B,MAAA,QAAQ;AACX,KAFD;;AAIA,WAAO,MAAI,CAAC,EAAL,CAAQ,eAAR,EAAyB,eAAzB,CAAP;AACH,GAVM;;AA7JH,OAAK,QAAL,GAAgB,IAAhB;AACH,CALL,C,CA8KA;;AACA,WAAa,QAAb,GAII,oBAAA;AAAA;;AAAA;;AAKO,OAAA,KAAA,GAAQ,YAAmB;AAC9B,WAAO,MAAI,CAAC,QAAL,CAAc,KAArB;AACH,GAFM;;AAIA,OAAA,OAAA,GAAU,YAAiB;AAC9B,WAAO,MAAI,CAAC,WAAZ;AACH,GAFM;;AAIA,OAAA,OAAA,GAAU,UAAC,MAAD,EAA2B;AACxC,IAAA,MAAI,CAAC,QAAL,CAAc,OAAd,CAAsB,MAAtB;;AACA,WAAO,MAAP;AACH,GAHM;;AAKA,OAAA,MAAA,GAAS,UAAC,KAAD,EAA+B;AAC3C,IAAA,MAAI,CAAC,QAAL,CAAc,MAAd,CAAqB,KAArB;;AACA,WAAO,MAAP;AACH,GAHM;;AAjBH,OAAK,QAAL,GAAgB,IAAI,IAAJ,EAAhB;AACA,OAAK,WAAL,GAAmB,IAAI,OAAJ,CAAe,KAAK,QAApB,CAAnB;AACH,CAPL,C,CA4BA;;AACA,WAAa,IAAb;AAQI,kBAAA;AAAA;;AAAA;;AAPQ,SAAA,SAAA,GAA0B,YAAY,CAAC,IAAvC;AACA,SAAA,iBAAA,GAAsC,IAAtC;AACA,SAAA,uBAAA,GAAuD,IAAvD;AAEA,SAAA,mBAAA,GAAoD,EAApD;AACA,SAAA,iBAAA,GAAgD,EAAhD;;AAeD,SAAA,OAAA,GAAU,UAAC,MAAD,EAAoB;AACjC,UAAI,MAAI,CAAC,SAAL,KAAmB,YAAY,CAAC,IAApC,EAA0C;AACtC,cAAM,IAAI,KAAJ,CAAU,sCAAV,CAAN;AACH;;AAED,MAAA,MAAI,CAAC,SAAL,GAAiB,YAAY,CAAC,QAA9B;;AACA,MAAA,MAAI,CAAC,uBAAL,CAA6B,SAA7B,CAAuC,MAAvC;;AAEA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAI,CAAC,mBAAL,CAAyB,MAA7C,EAAqD,CAAC,EAAtD,EAA0D;AACtD,QAAA,MAAI,CAAC,sBAAL,CAA4B,MAA5B,EAAoC,MAAI,CAAC,mBAAL,CAAyB,CAAzB,CAApC,EAAiE,MAAI,CAAC,iBAAL,CAAuB,CAAvB,CAAjE;AACH;;AAED,MAAA,MAAI,CAAC,cAAL;AACH,KAbM;;AAeA,SAAA,MAAA,GAAS,UAAC,KAAD,EAAwB;AACpC,UAAI,MAAI,CAAC,SAAL,KAAmB,YAAY,CAAC,IAApC,EAA0C;AACtC,cAAM,IAAI,KAAJ,CAAU,qCAAV,CAAN;AACH;;AAED,MAAA,MAAI,CAAC,SAAL,GAAiB,YAAY,CAAC,QAA9B;;AACA,MAAA,MAAI,CAAC,uBAAL,CAA6B,QAA7B,CAAsC,KAAtC;;AANoC,kDAQT,MAAI,CAAC,iBARI;AAAA;;AAAA;AAQpC,+DAAmD;AAAA,cAAxC,YAAwC;;AAC/C,UAAA,MAAI,CAAC,oBAAL,CAA0B,KAA1B,EAAiC,YAAjC;AACH;AAVmC;AAAA;AAAA;AAAA;AAAA;;AAYpC,MAAA,MAAI,CAAC,cAAL;AACH,KAbM;;AAeA,SAAA,EAAA,GAAK,UACR,eADQ,EAER,aAFQ,EAEwC;AAEhD,UAAI,eAAe,IAAI,IAAvB,EAA6B;AACzB,QAAA,eAAe,GAAG,yBAAC,CAAD,EAAS;AAAG;AAAS,SAAvC;AACH;;AAED,UAAI,MAAI,CAAC,SAAL,KAAmB,YAAY,CAAC,IAApC,EAA0C;AACtC,QAAA,MAAI,CAAC,mBAAL,CAAyB,IAAzB,CAA8B,eAA9B;;AACA,QAAA,MAAI,CAAC,iBAAL,CAAuB,IAAvB,CAA4B,aAA5B;AACH,OAHD,MAGO;AACH,YAAI,MAAI,CAAC,SAAL,KAAmB,YAAY,CAAC,QAApC,EAA8C;AAC1C,UAAA,MAAI,CAAC,sBAAL,CAA4B,MAAI,CAAC,iBAAL,CAAuB,MAAnD,EAA2D,eAA3D,EAA4E,aAA5E;AACH,SAFD,MAEO,IAAI,MAAI,CAAC,SAAL,KAAmB,YAAY,CAAC,QAApC,EAA8C;AACjD,UAAA,MAAI,CAAC,oBAAL,CAA0B,MAAI,CAAC,iBAAL,CAAuB,KAAjD,EAAwD,aAAxD;AACH;;AAED,QAAA,MAAI,CAAC,cAAL;AACH;AACJ,KApBM;;AAsBC,SAAA,sBAAA,GAAyB,UAAC,MAAD,EAAY,eAAZ,EAAkD,aAAlD,EAAkG;AAC/H,UAAI;AACA,QAAA,eAAe,CAAC,MAAD,CAAf;AACH,OAFD,CAEE,OAAO,CAAP,EAAU;AACR,QAAA,MAAI,CAAC,oBAAL,sCAAwD,CAAxD,QAA8D,aAA9D;AACH;AACJ,KANO;;AAQA,SAAA,oBAAA,GAAuB,UAAC,KAAD,EAAgB,aAAhB,EAAgE;AAC3F,UAAI,aAAJ,EAAmB;AACf,YAAI;AACA,UAAA,aAAa,CAAC,KAAD,CAAb;AACH,SAFD,CAEE,OAAO,CAAP,EAAU;AACR,gBAAM,IAAI,KAAJ,sCAAwC,CAAxC,2BAA0D,KAA1D,OAAN;AACH;AACJ,OAND,MAMO;AACH,cAAM,IAAI,KAAJ,6BAA+B,KAA/B,OAAN;AACH;AACJ,KAVO;;AAYA,SAAA,cAAA,GAAiB,YAAW;AAChC,MAAA,MAAI,CAAC,iBAAL,GAAyB,EAAzB;AACA,MAAA,MAAI,CAAC,mBAAL,GAA2B,EAA3B;AACH,KAHO;;AApFJ,SAAK,uBAAL,GAA+B,IAAI,wBAAJ,EAA/B;AACA,SAAK,iBAAL,GAAyB,IAAI,aAAJ,CAAkB,KAAK,uBAAvB,CAAzB;AACH;;AAXL;AAAA;AAAA,SAaI,eAAgB;AACZ,aAAO,KAAK,SAAZ;AACH;AAfL;AAAA;AAAA,SAiBI,eAAiB;AACb,aAAO,KAAK,iBAAZ;AACH;AAnBL;;AAAA;AAAA","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError  } from \"./Error\";\r\n\r\nexport enum PromiseState {\r\n    None,\r\n    Resolved,\r\n    Rejected,\r\n}\r\n\r\nexport interface IPromise<T> {\r\n    result(): PromiseResult<T>;\r\n\r\n    continueWith<TContinuationResult>(\r\n        continuationCallback: (promiseResult: PromiseResult<T>) => TContinuationResult): IPromise<TContinuationResult>;\r\n\r\n    continueWithPromise<TContinuationResult>(\r\n        continuationCallback: (promiseResult: PromiseResult<T>) => IPromise<TContinuationResult>): IPromise<TContinuationResult>;\r\n\r\n    onSuccessContinueWith<TContinuationResult>(\r\n        continuationCallback: (result: T) => TContinuationResult): IPromise<TContinuationResult>;\r\n\r\n    onSuccessContinueWithPromise<TContinuationResult>(\r\n        continuationCallback: (result: T) => IPromise<TContinuationResult>): IPromise<TContinuationResult>;\r\n\r\n    on(successCallback: (result: T) => void, errorCallback: (error: string) => void): IPromise<T>;\r\n\r\n    finally(callback: () => void): IPromise<T>;\r\n}\r\n\r\nexport interface IDeferred<T> {\r\n    state(): PromiseState;\r\n\r\n    promise(): IPromise<T>;\r\n\r\n    resolve(result: T): IDeferred<T>;\r\n\r\n    reject(error: string): IDeferred<T>;\r\n}\r\n\r\nexport class PromiseResult<T> {\r\n    protected privIsCompleted: boolean;\r\n    protected privIsError: boolean;\r\n    protected privError: string;\r\n    protected privResult: T;\r\n\r\n    public constructor(promiseResultEventSource: PromiseResultEventSource<T>) {\r\n        promiseResultEventSource.on((result: T) => {\r\n            if (!this.privIsCompleted) {\r\n                this.privIsCompleted = true;\r\n                this.privIsError = false;\r\n                this.privResult = result;\r\n            }\r\n        }, (error: string) => {\r\n            if (!this.privIsCompleted) {\r\n                this.privIsCompleted = true;\r\n                this.privIsError = true;\r\n                this.privError = error;\r\n            }\r\n        });\r\n    }\r\n\r\n    public get isCompleted(): boolean {\r\n        return this.privIsCompleted;\r\n    }\r\n\r\n    public get isError(): boolean {\r\n        return this.privIsError;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n\r\n    public get result(): T {\r\n        return this.privResult;\r\n    }\r\n\r\n    public throwIfError = (): void => {\r\n        if (this.isError) {\r\n            throw this.error;\r\n        }\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class PromiseResultEventSource<T>  {\r\n\r\n    private privOnSetResult: (result: T) => void;\r\n    private privOnSetError: (error: string) => void;\r\n\r\n    public setResult = (result: T): void => {\r\n        this.privOnSetResult(result);\r\n    }\r\n\r\n    public setError = (error: string): void => {\r\n        this.privOnSetError(error);\r\n    }\r\n\r\n    public on = (onSetResult: (result: T) => void, onSetError: (error: string) => void): void => {\r\n        this.privOnSetResult = onSetResult;\r\n        this.privOnSetError = onSetError;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class PromiseHelper {\r\n    public static whenAll = (promises: Array<Promise<any>>): Promise<boolean> => {\r\n        if (!promises || promises.length === 0) {\r\n            throw new ArgumentNullError(\"promises\");\r\n        }\r\n\r\n        const deferred = new Deferred<boolean>();\r\n        const errors: string[] = [];\r\n        let completedPromises: number = 0;\r\n\r\n        const checkForCompletion = () => {\r\n            completedPromises++;\r\n            if (completedPromises === promises.length) {\r\n                if (errors.length === 0) {\r\n                    deferred.resolve(true);\r\n                } else {\r\n                    deferred.reject(errors.join(\", \"));\r\n                }\r\n            }\r\n        };\r\n\r\n        for (const promise of promises) {\r\n            promise.on((r: any) => {\r\n                checkForCompletion();\r\n            }, (e: string) => {\r\n                errors.push(e);\r\n                checkForCompletion();\r\n            });\r\n        }\r\n\r\n        return deferred.promise();\r\n    }\r\n\r\n    public static fromResult = <TResult>(result: TResult): Promise<TResult> => {\r\n        const deferred = new Deferred<TResult>();\r\n        deferred.resolve(result);\r\n        return deferred.promise();\r\n    }\r\n\r\n    public static fromError = <TResult>(error: string): Promise<TResult> => {\r\n        const deferred = new Deferred<TResult>();\r\n        deferred.reject(error);\r\n        return deferred.promise();\r\n    }\r\n}\r\n\r\n// TODO: replace with ES6 promises\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class Promise<T> implements IPromise<T> {\r\n    private privSink: Sink<T>;\r\n\r\n    public constructor(sink: Sink<T>) {\r\n        this.privSink = sink;\r\n    }\r\n\r\n    public result = (): PromiseResult<T> => {\r\n        return this.privSink.result;\r\n    }\r\n\r\n    public continueWith = <TContinuationResult>(\r\n        continuationCallback: (promiseResult: PromiseResult<T>) => TContinuationResult): Promise<TContinuationResult> => {\r\n\r\n        if (!continuationCallback) {\r\n            throw new ArgumentNullError(\"continuationCallback\");\r\n        }\r\n\r\n        const continuationDeferral = new Deferred<TContinuationResult>();\r\n\r\n        this.privSink.on(\r\n            (r: T) => {\r\n                try {\r\n                    const continuationResult: TContinuationResult = continuationCallback(this.privSink.result);\r\n                    continuationDeferral.resolve(continuationResult);\r\n                } catch (e) {\r\n                    continuationDeferral.reject(e);\r\n                }\r\n            },\r\n            (error: string) => {\r\n                try {\r\n                    const continuationResult: TContinuationResult = continuationCallback(this.privSink.result);\r\n                    continuationDeferral.resolve(continuationResult);\r\n                } catch (e) {\r\n                    continuationDeferral.reject(`'Error handler for error ${error} threw error ${e}'`);\r\n                }\r\n            },\r\n        );\r\n\r\n        return continuationDeferral.promise();\r\n    }\r\n\r\n    public onSuccessContinueWith = <TContinuationResult>(\r\n        continuationCallback: (result: T) => TContinuationResult): Promise<TContinuationResult> => {\r\n\r\n        if (!continuationCallback) {\r\n            throw new ArgumentNullError(\"continuationCallback\");\r\n        }\r\n\r\n        const continuationDeferral = new Deferred<TContinuationResult>();\r\n\r\n        this.privSink.on(\r\n            (r: T) => {\r\n                try {\r\n                    const continuationResult: TContinuationResult = continuationCallback(r);\r\n                    continuationDeferral.resolve(continuationResult);\r\n                } catch (e) {\r\n                    continuationDeferral.reject(e);\r\n                }\r\n            },\r\n            (error: string) => {\r\n                continuationDeferral.reject(error);\r\n            },\r\n        );\r\n\r\n        return continuationDeferral.promise();\r\n    }\r\n\r\n    public continueWithPromise = <TContinuationResult>(\r\n        continuationCallback: (promiseResult: PromiseResult<T>) => Promise<TContinuationResult>): Promise<TContinuationResult> => {\r\n\r\n        if (!continuationCallback) {\r\n            throw new ArgumentNullError(\"continuationCallback\");\r\n        }\r\n\r\n        const continuationDeferral = new Deferred<TContinuationResult>();\r\n\r\n        this.privSink.on(\r\n            (r: T) => {\r\n                try {\r\n                    const continuationPromise: Promise<TContinuationResult> = continuationCallback(this.privSink.result);\r\n                    if (!continuationPromise) {\r\n                        throw new Error(\"'Continuation callback did not return promise'\");\r\n                    }\r\n                    continuationPromise.on((continuationResult: TContinuationResult) => {\r\n                        continuationDeferral.resolve(continuationResult);\r\n                    }, (e: string) => {\r\n                        continuationDeferral.reject(e);\r\n                    });\r\n                } catch (e) {\r\n                    continuationDeferral.reject(e);\r\n                }\r\n            },\r\n            (error: string) => {\r\n                try {\r\n                    const continuationPromise: Promise<TContinuationResult> = continuationCallback(this.privSink.result);\r\n                    if (!continuationPromise) {\r\n                        throw new Error(\"Continuation callback did not return promise\");\r\n                    }\r\n                    continuationPromise.on((continuationResult: TContinuationResult) => {\r\n                        continuationDeferral.resolve(continuationResult);\r\n                    }, (e: string) => {\r\n                        continuationDeferral.reject(e);\r\n                    });\r\n                } catch (e) {\r\n                    continuationDeferral.reject(`'Error handler for error ${error} threw error ${e}'`);\r\n                }\r\n            },\r\n        );\r\n\r\n        return continuationDeferral.promise();\r\n    }\r\n\r\n    public onSuccessContinueWithPromise = <TContinuationResult>(\r\n        continuationCallback: (result: T) => Promise<TContinuationResult>): Promise<TContinuationResult> => {\r\n\r\n        if (!continuationCallback) {\r\n            throw new ArgumentNullError(\"continuationCallback\");\r\n        }\r\n\r\n        const continuationDeferral = new Deferred<TContinuationResult>();\r\n\r\n        this.privSink.on(\r\n            (r: T) => {\r\n                try {\r\n                    const continuationPromise: Promise<TContinuationResult> = continuationCallback(r);\r\n                    if (!continuationPromise) {\r\n                        throw new Error(\"Continuation callback did not return promise\");\r\n                    }\r\n                    continuationPromise.on((continuationResult: TContinuationResult) => {\r\n                        continuationDeferral.resolve(continuationResult);\r\n                    }, (e: string) => {\r\n                        continuationDeferral.reject(e);\r\n                    });\r\n                } catch (e) {\r\n                    continuationDeferral.reject(e);\r\n                }\r\n            },\r\n            (error: string) => {\r\n                continuationDeferral.reject(error);\r\n            },\r\n        );\r\n\r\n        return continuationDeferral.promise();\r\n    }\r\n\r\n    public on = (\r\n        successCallback: (result: T) => void,\r\n        errorCallback: (error: string) => void): Promise<T> => {\r\n        if (!successCallback) {\r\n            throw new ArgumentNullError(\"successCallback\");\r\n        }\r\n\r\n        if (!errorCallback) {\r\n            throw new ArgumentNullError(\"errorCallback\");\r\n        }\r\n\r\n        this.privSink.on(successCallback, errorCallback);\r\n        return this;\r\n    }\r\n\r\n    public finally = (callback: () => void): Promise<T> => {\r\n        if (!callback) {\r\n            throw new ArgumentNullError(\"callback\");\r\n        }\r\n\r\n        const callbackWrapper = (_: any) => {\r\n            callback();\r\n        };\r\n\r\n        return this.on(callbackWrapper, callbackWrapper);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class Deferred<T> implements IDeferred<T> {\r\n    private privPromise: Promise<T>;\r\n    private privSink: Sink<T>;\r\n\r\n    public constructor() {\r\n        this.privSink = new Sink<T>();\r\n        this.privPromise = new Promise<T>(this.privSink);\r\n    }\r\n\r\n    public state = (): PromiseState => {\r\n        return this.privSink.state;\r\n    }\r\n\r\n    public promise = (): Promise<T> => {\r\n        return this.privPromise;\r\n    }\r\n\r\n    public resolve = (result: T): Deferred<T> => {\r\n        this.privSink.resolve(result);\r\n        return this;\r\n    }\r\n\r\n    public reject = (error: string): Deferred<T> => {\r\n        this.privSink.reject(error);\r\n        return this;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class Sink<T> {\r\n    private privState: PromiseState = PromiseState.None;\r\n    private privPromiseResult: PromiseResult<T> = null;\r\n    private privPromiseResultEvents: PromiseResultEventSource<T> = null;\r\n\r\n    private privSuccessHandlers: Array<((result: T) => void)> = [];\r\n    private privErrorHandlers: Array<(e: string) => void> = [];\r\n\r\n    public constructor() {\r\n        this.privPromiseResultEvents = new PromiseResultEventSource();\r\n        this.privPromiseResult = new PromiseResult(this.privPromiseResultEvents);\r\n    }\r\n\r\n    public get state(): PromiseState {\r\n        return this.privState;\r\n    }\r\n\r\n    public get result(): PromiseResult<T> {\r\n        return this.privPromiseResult;\r\n    }\r\n\r\n    public resolve = (result: T): void => {\r\n        if (this.privState !== PromiseState.None) {\r\n            throw new Error(\"'Cannot resolve a completed promise'\");\r\n        }\r\n\r\n        this.privState = PromiseState.Resolved;\r\n        this.privPromiseResultEvents.setResult(result);\r\n\r\n        for (let i = 0; i < this.privSuccessHandlers.length; i++) {\r\n            this.executeSuccessCallback(result, this.privSuccessHandlers[i], this.privErrorHandlers[i]);\r\n        }\r\n\r\n        this.detachHandlers();\r\n    }\r\n\r\n    public reject = (error: string): void => {\r\n        if (this.privState !== PromiseState.None) {\r\n            throw new Error(\"'Cannot reject a completed promise'\");\r\n        }\r\n\r\n        this.privState = PromiseState.Rejected;\r\n        this.privPromiseResultEvents.setError(error);\r\n\r\n        for (const errorHandler of this.privErrorHandlers) {\r\n            this.executeErrorCallback(error, errorHandler);\r\n        }\r\n\r\n        this.detachHandlers();\r\n    }\r\n\r\n    public on = (\r\n        successCallback: (result: T) => void,\r\n        errorCallback: (error: string) => void): void => {\r\n\r\n        if (successCallback == null) {\r\n            successCallback = (r: T) => { return; };\r\n        }\r\n\r\n        if (this.privState === PromiseState.None) {\r\n            this.privSuccessHandlers.push(successCallback);\r\n            this.privErrorHandlers.push(errorCallback);\r\n        } else {\r\n            if (this.privState === PromiseState.Resolved) {\r\n                this.executeSuccessCallback(this.privPromiseResult.result, successCallback, errorCallback);\r\n            } else if (this.privState === PromiseState.Rejected) {\r\n                this.executeErrorCallback(this.privPromiseResult.error, errorCallback);\r\n            }\r\n\r\n            this.detachHandlers();\r\n        }\r\n    }\r\n\r\n    private executeSuccessCallback = (result: T, successCallback: (result: T) => void, errorCallback: (error: string) => void): void => {\r\n        try {\r\n            successCallback(result);\r\n        } catch (e) {\r\n            this.executeErrorCallback(`'Unhandled callback error: ${e}'`, errorCallback);\r\n        }\r\n    }\r\n\r\n    private executeErrorCallback = (error: string, errorCallback: (error: string) => void): void => {\r\n        if (errorCallback) {\r\n            try {\r\n                errorCallback(error);\r\n            } catch (e) {\r\n                throw new Error(`'Unhandled callback error: ${e}. InnerError: ${error}'`);\r\n            }\r\n        } else {\r\n            throw new Error(`'Unhandled error: ${error}'`);\r\n        }\r\n    }\r\n\r\n    private detachHandlers = (): void => {\r\n        this.privErrorHandlers = [];\r\n        this.privSuccessHandlers = [];\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}