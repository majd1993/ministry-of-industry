{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Contracts_1 = require(\"./Contracts\");\n\nvar DialogServiceConfig_1 = require(\"./DialogServiceConfig\");\n\nvar Exports_1 = require(\"./Exports\");\n/**\n * Class that defines configurations for the dialog service connector object for using a CustomCommands backend.\n * @class CustomCommandsConfig\n */\n\n\nvar CustomCommandsConfig =\n/** @class */\nfunction (_super) {\n  __extends(CustomCommandsConfig, _super);\n  /**\n   * Creates an instance of CustomCommandsConfig.\n   */\n\n\n  function CustomCommandsConfig() {\n    return _super.call(this) || this;\n  }\n  /**\n   * Creates an instance of the bot framework config with the specified subscription and region.\n   * @member CustomCommandsConfig.fromSubscription\n   * @function\n   * @public\n   * @param applicationId Speech Commands application id.\n   * @param subscription Subscription key associated with the bot\n   * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n   * @returns {CustomCommandsConfig} A new bot framework config.\n   */\n\n\n  CustomCommandsConfig.fromSubscription = function (applicationId, subscription, region) {\n    Contracts_1.Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\n    Contracts_1.Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\n    Contracts_1.Contracts.throwIfNullOrWhitespace(region, \"region\");\n    var customCommandsConfig = new DialogServiceConfig_1.DialogServiceConfigImpl();\n    customCommandsConfig.setProperty(Exports_1.PropertyId.Conversation_DialogType, \"custom_commands\");\n    customCommandsConfig.setProperty(Exports_1.PropertyId.Conversation_ApplicationId, applicationId);\n    customCommandsConfig.setProperty(Exports_1.PropertyId.SpeechServiceConnection_Key, subscription);\n    customCommandsConfig.setProperty(Exports_1.PropertyId.SpeechServiceConnection_Region, region);\n    return customCommandsConfig;\n  };\n  /**\n   * Creates an instance of the bot framework config with the specified Speech Commands application id, authorization token and region.\n   * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\n   * expires, the caller needs to refresh it by calling this setter with a new valid token.\n   * As configuration values are copied when creating a new recognizer, the new token value will not apply to recognizers that have already been created.\n   * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\n   * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\n   * @member CustomCommandsConfig.fromAuthorizationToken\n   * @function\n   * @public\n   * @param applicationId Speech Commands application id.\n   * @param authorizationToken The authorization token associated with the application.\n   * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n   * @returns {CustomCommandsConfig} A new speech commands config.\n   */\n\n\n  CustomCommandsConfig.fromAuthorizationToken = function (applicationId, authorizationToken, region) {\n    Contracts_1.Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\n    Contracts_1.Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\n    Contracts_1.Contracts.throwIfNullOrWhitespace(region, \"region\");\n    var customCommandsConfig = new DialogServiceConfig_1.DialogServiceConfigImpl();\n    customCommandsConfig.setProperty(Exports_1.PropertyId.Conversation_DialogType, \"custom_commands\");\n    customCommandsConfig.setProperty(Exports_1.PropertyId.Conversation_ApplicationId, applicationId);\n    customCommandsConfig.setProperty(Exports_1.PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\n    customCommandsConfig.setProperty(Exports_1.PropertyId.SpeechServiceConnection_Region, region);\n    return customCommandsConfig;\n  };\n\n  Object.defineProperty(CustomCommandsConfig.prototype, \"applicationId\", {\n    /**\n     * Gets the corresponding backend application identifier.\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\n     * @function\n     * @public\n     * @param {string} value - The application identifier to get.\n     */\n    get: function get() {\n      return this.getProperty(Exports_1.PropertyId.Conversation_ApplicationId);\n    },\n\n    /**\n     * Sets the corresponding backend application identifier.\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\n     * @function\n     * @public\n     * @param {string} value - The application identifier to set.\n     */\n    set: function set(value) {\n      Contracts_1.Contracts.throwIfNullOrWhitespace(value, \"value\");\n      this.setProperty(Exports_1.PropertyId.Conversation_ApplicationId, value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return CustomCommandsConfig;\n}(DialogServiceConfig_1.DialogServiceConfigImpl);\n\nexports.CustomCommandsConfig = CustomCommandsConfig;","map":{"version":3,"sources":["src/sdk/CustomCommandsConfig.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\nimport { DialogServiceConfigImpl } from \"./DialogServiceConfig\";\r\nimport { PropertyId } from \"./Exports\";\r\n\r\n/**\r\n * Class that defines configurations for the dialog service connector object for using a CustomCommands backend.\r\n * @class CustomCommandsConfig\r\n */\r\nexport class CustomCommandsConfig extends DialogServiceConfigImpl {\r\n\r\n    /**\r\n     * Creates an instance of CustomCommandsConfig.\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the bot framework config with the specified subscription and region.\r\n     * @member CustomCommandsConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param applicationId Speech Commands application id.\r\n     * @param subscription Subscription key associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {CustomCommandsConfig} A new bot framework config.\r\n     */\r\n    public static fromSubscription(applicationId: string, subscription: string, region: string): CustomCommandsConfig {\r\n        Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\r\n        Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const customCommandsConfig: CustomCommandsConfig = new DialogServiceConfigImpl();\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, \"custom_commands\");\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return customCommandsConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the bot framework config with the specified Speech Commands application id, authorization token and region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * As configuration values are copied when creating a new recognizer, the new token value will not apply to recognizers that have already been created.\r\n     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member CustomCommandsConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param applicationId Speech Commands application id.\r\n     * @param authorizationToken The authorization token associated with the application.\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {CustomCommandsConfig} A new speech commands config.\r\n     */\r\n    public static fromAuthorizationToken(applicationId: string, authorizationToken: string, region: string): CustomCommandsConfig {\r\n        Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const customCommandsConfig: CustomCommandsConfig = new DialogServiceConfigImpl();\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, \"custom_commands\");\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return customCommandsConfig;\r\n    }\r\n\r\n    /**\r\n     * Sets the corresponding backend application identifier.\r\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to set.\r\n     */\r\n    public set applicationId(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.setProperty(PropertyId.Conversation_ApplicationId, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the corresponding backend application identifier.\r\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to get.\r\n     */\r\n    public get applicationId(): string {\r\n        return this.getProperty(PropertyId.Conversation_ApplicationId);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}