{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Responsible for building the object to be sent to the speech service to support dynamic grammars.\n * @class DynamicGrammarBuilder\n */\n\nvar DynamicGrammarBuilder =\n/** @class */\nfunction () {\n  function DynamicGrammarBuilder() {} // Adds one more reference phrases to the dynamic grammar to send.\n  // All added phrases are generic phrases.\n\n\n  DynamicGrammarBuilder.prototype.addPhrase = function (phrase) {\n    if (!this.privPhrases) {\n      this.privPhrases = [];\n    }\n\n    if (phrase instanceof Array) {\n      this.privPhrases = this.privPhrases.concat(phrase);\n    } else {\n      this.privPhrases.push(phrase);\n    }\n  }; // Clears all phrases stored in the current object.\n\n\n  DynamicGrammarBuilder.prototype.clearPhrases = function () {\n    this.privPhrases = undefined;\n  }; // Adds one or more reference grammars to the current grammar.\n\n\n  DynamicGrammarBuilder.prototype.addReferenceGrammar = function (grammar) {\n    if (!this.privGrammars) {\n      this.privGrammars = [];\n    }\n\n    if (grammar instanceof Array) {\n      this.privGrammars = this.privGrammars.concat(grammar);\n    } else {\n      this.privGrammars.push(grammar);\n    }\n  }; // clears all grammars stored on the recognizer.\n\n\n  DynamicGrammarBuilder.prototype.clearGrammars = function () {\n    this.privGrammars = undefined;\n  }; // Generates an object that represents the dynamic grammar used by the Speech Service.\n  // This is done by building an object with the correct layout based on the phrases and reference grammars added to this instance\n  // of a DynamicGrammarBuilder\n\n\n  DynamicGrammarBuilder.prototype.generateGrammarObject = function () {\n    if (this.privGrammars === undefined && this.privPhrases === undefined) {\n      return undefined;\n    }\n\n    var retObj = {};\n    retObj.ReferenceGrammars = this.privGrammars;\n\n    if (undefined !== this.privPhrases && 0 !== this.privPhrases.length) {\n      var retPhrases_1 = [];\n      this.privPhrases.forEach(function (value, index, array) {\n        retPhrases_1.push({\n          Text: value\n        });\n      });\n      retObj.Groups = [{\n        Type: \"Generic\",\n        Items: retPhrases_1\n      }];\n    }\n\n    return retObj;\n  };\n\n  return DynamicGrammarBuilder;\n}();\n\nexports.DynamicGrammarBuilder = DynamicGrammarBuilder;","map":{"version":3,"sources":["src/common.speech/DynamicGrammarBuilder.ts"],"names":[],"mappings":"cAAA;AACA;;;;;AAOA;;;AAGG;;AACH,IAAA,qBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,qBAAA,GAAA,CAmEC,CAnED,CAKI;AACA;;;AACO,EAAA,qBAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,MAAjB,EAA0C;AACtC,QAAI,CAAC,KAAK,WAAV,EAAuB;AACnB,WAAK,WAAL,GAAmB,EAAnB;AACH;;AAED,QAAI,MAAM,YAAY,KAAtB,EAA6B;AACzB,WAAK,WAAL,GAAmB,KAAK,WAAL,CAAiB,MAAjB,CAAwB,MAAxB,CAAnB;AACH,KAFD,MAEO;AACH,WAAK,WAAL,CAAiB,IAAjB,CAAsB,MAAtB;AACH;AACJ,GAVM,CAPX,CAmBI;;;AACO,EAAA,qBAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACI,SAAK,WAAL,GAAmB,SAAnB;AACH,GAFM,CApBX,CAwBI;;;AACO,EAAA,qBAAA,CAAA,SAAA,CAAA,mBAAA,GAAP,UAA2B,OAA3B,EAAqD;AACjD,QAAI,CAAC,KAAK,YAAV,EAAwB;AACpB,WAAK,YAAL,GAAoB,EAApB;AACH;;AAED,QAAI,OAAO,YAAY,KAAvB,EAA8B;AAC1B,WAAK,YAAL,GAAoB,KAAK,YAAL,CAAkB,MAAlB,CAAyB,OAAzB,CAApB;AACH,KAFD,MAEO;AACH,WAAK,YAAL,CAAkB,IAAlB,CAAuB,OAAvB;AACH;AACJ,GAVM,CAzBX,CAqCI;;;AACO,EAAA,qBAAA,CAAA,SAAA,CAAA,aAAA,GAAP,YAAA;AACI,SAAK,YAAL,GAAoB,SAApB;AACH,GAFM,CAtCX,CA0CI;AACA;AACA;;;AACO,EAAA,qBAAA,CAAA,SAAA,CAAA,qBAAA,GAAP,YAAA;AACI,QAAI,KAAK,YAAL,KAAsB,SAAtB,IAAmC,KAAK,WAAL,KAAqB,SAA5D,EAAuE;AACnE,aAAO,SAAP;AACH;;AAED,QAAM,MAAM,GAAoB,EAAhC;AACA,IAAA,MAAM,CAAC,iBAAP,GAA2B,KAAK,YAAhC;;AAEA,QAAI,SAAS,KAAK,KAAK,WAAnB,IAAkC,MAAM,KAAK,WAAL,CAAiB,MAA7D,EAAqE;AACjE,UAAM,YAAU,GAA6B,EAA7C;AAEA,WAAK,WAAL,CAAiB,OAAjB,CAAyB,UAAC,KAAD,EAAgB,KAAhB,EAA+B,KAA/B,EAA8C;AACnE,QAAA,YAAU,CAAC,IAAX,CAAgB;AACZ,UAAA,IAAI,EAAE;AADM,SAAhB;AAGH,OAJD;AAMA,MAAA,MAAM,CAAC,MAAP,GAAgB,CAAC;AAAE,QAAA,IAAI,EAAE,SAAR;AAAmB,QAAA,KAAK,EAAE;AAA1B,OAAD,CAAhB;AACH;;AAED,WAAO,MAAP;AACH,GArBM;;AAsBX,SAAA,qBAAA;AAAC,CAnED,EAAA;;AAAa,OAAA,CAAA,qBAAA,GAAA,qBAAA","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IDynamicGrammar,\r\n    IDynamicGrammarGeneric,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Responsible for building the object to be sent to the speech service to support dynamic grammars.\r\n * @class DynamicGrammarBuilder\r\n */\r\nexport class DynamicGrammarBuilder {\r\n\r\n    private privPhrases: string[];\r\n    private privGrammars: string[];\r\n\r\n    // Adds one more reference phrases to the dynamic grammar to send.\r\n    // All added phrases are generic phrases.\r\n    public addPhrase(phrase: string | string[]): void {\r\n        if (!this.privPhrases) {\r\n            this.privPhrases = [];\r\n        }\r\n\r\n        if (phrase instanceof Array) {\r\n            this.privPhrases = this.privPhrases.concat(phrase as string[]);\r\n        } else {\r\n            this.privPhrases.push(phrase as string);\r\n        }\r\n    }\r\n\r\n    // Clears all phrases stored in the current object.\r\n    public clearPhrases(): void {\r\n        this.privPhrases = undefined;\r\n    }\r\n\r\n    // Adds one or more reference grammars to the current grammar.\r\n    public addReferenceGrammar(grammar: string | string[]): void {\r\n        if (!this.privGrammars) {\r\n            this.privGrammars = [];\r\n        }\r\n\r\n        if (grammar instanceof Array) {\r\n            this.privGrammars = this.privGrammars.concat(grammar as string[]);\r\n        } else {\r\n            this.privGrammars.push(grammar as string);\r\n        }\r\n    }\r\n\r\n    // clears all grammars stored on the recognizer.\r\n    public clearGrammars(): void {\r\n        this.privGrammars = undefined;\r\n    }\r\n\r\n    // Generates an object that represents the dynamic grammar used by the Speech Service.\r\n    // This is done by building an object with the correct layout based on the phrases and reference grammars added to this instance\r\n    // of a DynamicGrammarBuilder\r\n    public generateGrammarObject(): IDynamicGrammar {\r\n        if (this.privGrammars === undefined && this.privPhrases === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        const retObj: IDynamicGrammar = {};\r\n        retObj.ReferenceGrammars = this.privGrammars;\r\n\r\n        if (undefined !== this.privPhrases && 0 !== this.privPhrases.length) {\r\n            const retPhrases: IDynamicGrammarGeneric[] = [];\r\n\r\n            this.privPhrases.forEach((value: string, index: number, array: string[]): void => {\r\n                retPhrases.push({\r\n                    Text: value,\r\n                });\r\n            });\r\n\r\n            retObj.Groups = [{ Type: \"Generic\", Items: retPhrases }];\r\n        }\r\n\r\n        return retObj;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}