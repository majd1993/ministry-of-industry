{"ast":null,"code":"import _classCallCheck from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { OutputFormatPropertyName, RecognitionMode, RecognizerConfig, SpeechServiceRecognizer } from \"../common.speech/Exports\";\nimport { SpeechConnectionFactory } from \"../common.speech/SpeechConnectionFactory\";\nimport { Contracts } from \"./Contracts\";\nimport { OutputFormat, PropertyId, Recognizer } from \"./Exports\";\n/**\n * Performs speech recognition from microphone, file, or other audio input streams, and gets transcribed text as result.\n * @class SpeechRecognizer\n */\n\nexport var SpeechRecognizer = /*#__PURE__*/function (_Recognizer) {\n  _inherits(SpeechRecognizer, _Recognizer);\n\n  var _super = _createSuper(SpeechRecognizer);\n\n  /**\n   * SpeechRecognizer constructor.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\n   * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\n   */\n  function SpeechRecognizer(speechConfig, audioConfig) {\n    var _this;\n\n    _classCallCheck(this, SpeechRecognizer);\n\n    var speechConfigImpl = speechConfig;\n    Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\n    Contracts.throwIfNullOrWhitespace(speechConfigImpl.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage), PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n    _this = _super.call(this, audioConfig, speechConfigImpl.properties, new SpeechConnectionFactory());\n    _this.privDisposedSpeechRecognizer = false;\n    return _this;\n  }\n  /**\n   * SpeechRecognizer constructor.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\n   * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\n   * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\n   */\n\n\n  _createClass(SpeechRecognizer, [{\n    key: \"endpointId\",\n    get:\n    /**\n     * Gets the endpoint id of a customized speech model that is used for speech recognition.\n     * @member SpeechRecognizer.prototype.endpointId\n     * @function\n     * @public\n     * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.\n     */\n    function get() {\n      Contracts.throwIfDisposed(this.privDisposedSpeechRecognizer);\n      return this.properties.getProperty(PropertyId.SpeechServiceConnection_EndpointId, \"00000000-0000-0000-0000-000000000000\");\n    }\n    /**\n     * Gets the authorization token used to communicate with the service.\n     * @member SpeechRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @returns {string} Authorization token.\n     */\n\n  }, {\n    key: \"authorizationToken\",\n    get: function get() {\n      return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n    }\n    /**\n     * Gets/Sets the authorization token used to communicate with the service.\n     * @member SpeechRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} token - Authorization token.\n     */\n    ,\n    set: function set(token) {\n      Contracts.throwIfNullOrWhitespace(token, \"token\");\n      this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n    }\n    /**\n     * Gets the spoken language of recognition.\n     * @member SpeechRecognizer.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     * @returns {string} The spoken language of recognition.\n     */\n\n  }, {\n    key: \"speechRecognitionLanguage\",\n    get: function get() {\n      Contracts.throwIfDisposed(this.privDisposedSpeechRecognizer);\n      return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\n    }\n    /**\n     * Gets the output format of recognition.\n     * @member SpeechRecognizer.prototype.outputFormat\n     * @function\n     * @public\n     * @returns {OutputFormat} The output format of recognition.\n     */\n\n  }, {\n    key: \"outputFormat\",\n    get: function get() {\n      Contracts.throwIfDisposed(this.privDisposedSpeechRecognizer);\n\n      if (this.properties.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) === OutputFormat[OutputFormat.Simple]) {\n        return OutputFormat.Simple;\n      } else {\n        return OutputFormat.Detailed;\n      }\n    }\n    /**\n     * The collection of properties and their values defined for this SpeechRecognizer.\n     * @member SpeechRecognizer.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.\n     */\n\n  }, {\n    key: \"properties\",\n    get: function get() {\n      return this.privProperties;\n    }\n    /**\n     * Starts speech recognition, and stops after the first utterance is recognized.\n     * The task returns the recognition text as result.\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\n     *       so it is suitable only for single shot recognition\n     *       like command or query. For long-running recognition, use StartContinuousRecognitionAsync() instead.\n     * @member SpeechRecognizer.prototype.recognizeOnceAsync\n     * @function\n     * @public\n     * @param cb - Callback that received the SpeechRecognitionResult.\n     * @param err - Callback invoked in case of an error.\n     */\n\n  }, {\n    key: \"recognizeOnceAsync\",\n    value: function recognizeOnceAsync(cb, err) {\n      this.recognizeOnceAsyncImpl(RecognitionMode.Interactive, cb, err);\n    }\n    /**\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\n     * User must subscribe to events to receive recognition results.\n     * @member SpeechRecognizer.prototype.startContinuousRecognitionAsync\n     * @function\n     * @public\n     * @param cb - Callback invoked once the recognition has started.\n     * @param err - Callback invoked in case of an error.\n     */\n\n  }, {\n    key: \"startContinuousRecognitionAsync\",\n    value: function startContinuousRecognitionAsync(cb, err) {\n      this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation, cb, err);\n    }\n    /**\n     * Stops continuous speech recognition.\n     * @member SpeechRecognizer.prototype.stopContinuousRecognitionAsync\n     * @function\n     * @public\n     * @param cb - Callback invoked once the recognition has stopped.\n     * @param err - Callback invoked in case of an error.\n     */\n\n  }, {\n    key: \"stopContinuousRecognitionAsync\",\n    value: function stopContinuousRecognitionAsync(cb, err) {\n      this.stopContinuousRecognitionAsyncImpl(cb, err);\n    }\n    /**\n     * Starts speech recognition with keyword spotting, until\n     * stopKeywordRecognitionAsync() is called.\n     * User must subscribe to events to receive recognition results.\n     * Note: Key word spotting functionality is only available on the\n     *      Speech Devices SDK. This functionality is currently not included in the SDK itself.\n     * @member SpeechRecognizer.prototype.startKeywordRecognitionAsync\n     * @function\n     * @public\n     * @param {KeywordRecognitionModel} model The keyword recognition model that\n     *        specifies the keyword to be recognized.\n     * @param cb - Callback invoked once the recognition has started.\n     * @param err - Callback invoked in case of an error.\n     */\n\n  }, {\n    key: \"startKeywordRecognitionAsync\",\n    value: function startKeywordRecognitionAsync(model, cb, err) {\n      Contracts.throwIfNull(model, \"model\");\n\n      if (!!err) {\n        err(\"Not yet implemented.\");\n      }\n    }\n    /**\n     * Stops continuous speech recognition.\n     * Note: Key word spotting functionality is only available on the\n     *       Speech Devices SDK. This functionality is currently not included in the SDK itself.\n     * @member SpeechRecognizer.prototype.stopKeywordRecognitionAsync\n     * @function\n     * @public\n     * @param cb - Callback invoked once the recognition has stopped.\n     * @param err - Callback invoked in case of an error.\n     */\n\n  }, {\n    key: \"stopKeywordRecognitionAsync\",\n    value: function stopKeywordRecognitionAsync(cb, err) {\n      if (!!cb) {\n        cb();\n      }\n    }\n    /**\n     * closes all external resources held by an instance of this class.\n     * @member SpeechRecognizer.prototype.close\n     * @function\n     * @public\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      Contracts.throwIfDisposed(this.privDisposedSpeechRecognizer);\n      this.dispose(true);\n    }\n    /**\n     * Disposes any resources held by the object.\n     * @member SpeechRecognizer.prototype.dispose\n     * @function\n     * @public\n     * @param {boolean} disposing - true if disposing the object.\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose(disposing) {\n      if (this.privDisposedSpeechRecognizer) {\n        return;\n      }\n\n      if (disposing) {\n        this.implRecognizerStop(); // Dispose is synchronous, so just start it....\n\n        this.privDisposedSpeechRecognizer = true;\n      }\n\n      _get(_getPrototypeOf(SpeechRecognizer.prototype), \"dispose\", this).call(this, disposing);\n    }\n  }, {\n    key: \"createRecognizerConfig\",\n    value: function createRecognizerConfig(speechConfig) {\n      return new RecognizerConfig(speechConfig, this.properties);\n    }\n  }, {\n    key: \"createServiceRecognizer\",\n    value: function createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {\n      var configImpl = audioConfig;\n      return new SpeechServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\n    }\n  }], [{\n    key: \"FromConfig\",\n    value: function FromConfig(speechConfig, autoDetectSourceLanguageConfig, audioConfig) {\n      var speechConfigImpl = speechConfig;\n      autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\n      var recognizer = new SpeechRecognizer(speechConfig, audioConfig);\n      return recognizer;\n    }\n  }]);\n\n  return SpeechRecognizer;\n}(Recognizer);","map":{"version":3,"sources":["src/sdk/SpeechRecognizer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OutputFormatPropertyName,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    SpeechServiceRecognizer,\r\n} from \"../common.speech/Exports\";\r\nimport { SpeechConnectionFactory } from \"../common.speech/SpeechConnectionFactory\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    AutoDetectSourceLanguageConfig,\r\n    KeywordRecognitionModel,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"./Exports\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Performs speech recognition from microphone, file, or other audio input streams, and gets transcribed text as result.\r\n * @class SpeechRecognizer\r\n */\r\nexport class SpeechRecognizer extends Recognizer {\r\n    private privDisposedSpeechRecognizer: boolean;\r\n\r\n    /**\r\n     * SpeechRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            speechConfigImpl.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        super(audioConfig, speechConfigImpl.properties, new SpeechConnectionFactory());\r\n        this.privDisposedSpeechRecognizer = false;\r\n    }\r\n\r\n    /**\r\n     * SpeechRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public static FromConfig(speechConfig: SpeechConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): SpeechRecognizer {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\r\n        const recognizer = new SpeechRecognizer(speechConfig, audioConfig);\r\n        return recognizer;\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member SpeechRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member SpeechRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member SpeechRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: Recognizer, event: SpeechRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the endpoint id of a customized speech model that is used for speech recognition.\r\n     * @member SpeechRecognizer.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.\r\n     */\r\n    public get endpointId(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedSpeechRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_EndpointId, \"00000000-0000-0000-0000-000000000000\");\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member SpeechRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member SpeechRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member SpeechRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} The spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedSpeechRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the output format of recognition.\r\n     * @member SpeechRecognizer.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} The output format of recognition.\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        Contracts.throwIfDisposed(this.privDisposedSpeechRecognizer);\r\n\r\n        if (this.properties.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) === OutputFormat[OutputFormat.Simple]) {\r\n            return OutputFormat.Simple;\r\n        } else {\r\n            return OutputFormat.Detailed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this SpeechRecognizer.\r\n     * @member SpeechRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, and stops after the first utterance is recognized.\r\n     * The task returns the recognition text as result.\r\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\r\n     *       so it is suitable only for single shot recognition\r\n     *       like command or query. For long-running recognition, use StartContinuousRecognitionAsync() instead.\r\n     * @member SpeechRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the SpeechRecognitionResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\r\n            this.recognizeOnceAsyncImpl(RecognitionMode.Interactive, cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * @member SpeechRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation, cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * @member SpeechRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        this.stopContinuousRecognitionAsyncImpl(cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition with keyword spotting, until\r\n     * stopKeywordRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * Note: Key word spotting functionality is only available on the\r\n     *      Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n     * @member SpeechRecognizer.prototype.startKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param {KeywordRecognitionModel} model The keyword recognition model that\r\n     *        specifies the keyword to be recognized.\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startKeywordRecognitionAsync(model: KeywordRecognitionModel, cb?: () => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        if (!!err) {\r\n            err(\"Not yet implemented.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * Note: Key word spotting functionality is only available on the\r\n     *       Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n     * @member SpeechRecognizer.prototype.stopKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopKeywordRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        if (!!cb) {\r\n            cb();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member SpeechRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        Contracts.throwIfDisposed(this.privDisposedSpeechRecognizer);\r\n\r\n        this.dispose(true);\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member SpeechRecognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected dispose(disposing: boolean): void {\r\n        if (this.privDisposedSpeechRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.implRecognizerStop(); // Dispose is synchronous, so just start it....\r\n            this.privDisposedSpeechRecognizer = true;\r\n        }\r\n\r\n        super.dispose(disposing);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(\r\n            speechConfig,\r\n            this.properties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new SpeechServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}