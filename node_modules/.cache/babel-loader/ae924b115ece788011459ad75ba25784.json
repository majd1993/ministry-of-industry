{"ast":null,"code":"import _classCallCheck from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { AutoDetectSourceLanguagesOpenRangeOptionName, CognitiveSubscriptionKeyAuthentication, CognitiveTokenAuthentication, Context, OS, SpeechServiceConfig, SpeechSynthesisConnectionFactory, SynthesisAdapterBase, SynthesizerConfig } from \"../common.speech/Exports\";\nimport { createNoDashGuid, PromiseHelper, Queue } from \"../common/Exports\";\nimport { AudioFileWriter } from \"./Audio/AudioFileWriter\";\nimport { AudioOutputFormatImpl } from \"./Audio/AudioOutputFormat\";\nimport { PushAudioOutputStreamImpl } from \"./Audio/AudioOutputStream\";\nimport { Contracts } from \"./Contracts\";\nimport { AudioConfig, PropertyId, PullAudioOutputStream, PushAudioOutputStreamCallback, SpeechSynthesisOutputFormat } from \"./Exports\";\n/**\n * Defines the class SpeechSynthesizer for text to speech.\n * Added in version 1.11.0\n * @class SpeechSynthesizer\n */\n\nexport var SpeechSynthesizer = /*#__PURE__*/function () {\n  /**\n   * SpeechSynthesizer constructor.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer\n   * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer\n   */\n  function SpeechSynthesizer(speechConfig, audioConfig) {\n    _classCallCheck(this, SpeechSynthesizer);\n\n    var speechConfigImpl = speechConfig;\n    Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\n\n    if (audioConfig !== null) {\n      this.audioConfig = audioConfig !== undefined ? audioConfig : AudioConfig.fromDefaultSpeakerOutput();\n    }\n\n    this.privProperties = speechConfigImpl.properties.clone();\n    this.privDisposed = false;\n    this.privSynthesizing = false;\n    this.privConnectionFactory = new SpeechSynthesisConnectionFactory();\n    this.synthesisRequestQueue = new Queue();\n    this.implCommonSynthesizeSetup();\n  }\n  /**\n   * Gets the authorization token used to communicate with the service.\n   * @member SpeechSynthesizer.prototype.authorizationToken\n   * @function\n   * @public\n   * @returns {string} Authorization token.\n   */\n\n\n  _createClass(SpeechSynthesizer, [{\n    key: \"authorizationToken\",\n    get: function get() {\n      return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n    }\n    /**\n     * Gets/Sets the authorization token used to communicate with the service.\n     * @member SpeechSynthesizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} token - Authorization token.\n     */\n    ,\n    set: function set(token) {\n      Contracts.throwIfNullOrWhitespace(token, \"token\");\n      this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n    }\n    /**\n     * The collection of properties and their values defined for this SpeechSynthesizer.\n     * @member SpeechSynthesizer.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechSynthesizer.\n     */\n\n  }, {\n    key: \"properties\",\n    get: function get() {\n      return this.privProperties;\n    }\n    /**\n     * Indicates if auto detect source language is enabled\n     * @member SpeechSynthesizer.prototype.properties\n     * @function\n     * @public\n     * @returns {boolean} if auto detect source language is enabled\n     */\n\n  }, {\n    key: \"autoDetectSourceLanguage\",\n    get: function get() {\n      return this.properties.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages) === AutoDetectSourceLanguagesOpenRangeOptionName;\n    }\n    /**\n     * SpeechSynthesizer constructor.\n     * @constructor\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this synthesizer\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the synthesizer\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer\n     */\n\n  }, {\n    key: \"buildSsml\",\n    value: function buildSsml(text) {\n      var languageToDefaultVoice = {\n        [\"ar-EG\"]: \"Microsoft Server Speech Text to Speech Voice (ar-EG, Hoda)\",\n        [\"ar-SA\"]: \"Microsoft Server Speech Text to Speech Voice (ar-SA, Naayf)\",\n        [\"bg-BG\"]: \"Microsoft Server Speech Text to Speech Voice (bg-BG, Ivan)\",\n        [\"ca-ES\"]: \"Microsoft Server Speech Text to Speech Voice (ca-ES, HerenaRUS)\",\n        [\"cs-CZ\"]: \"Microsoft Server Speech Text to Speech Voice (cs-CZ, Jakub)\",\n        [\"da-DK\"]: \"Microsoft Server Speech Text to Speech Voice (da-DK, HelleRUS)\",\n        [\"de-AT\"]: \"Microsoft Server Speech Text to Speech Voice (de-AT, Michael)\",\n        [\"de-CH\"]: \"Microsoft Server Speech Text to Speech Voice (de-CH, Karsten)\",\n        [\"de-DE\"]: \"Microsoft Server Speech Text to Speech Voice (de-DE, HeddaRUS)\",\n        [\"el-GR\"]: \"Microsoft Server Speech Text to Speech Voice (el-GR, Stefanos)\",\n        [\"en-AU\"]: \"Microsoft Server Speech Text to Speech Voice (en-AU, HayleyRUS)\",\n        [\"en-CA\"]: \"Microsoft Server Speech Text to Speech Voice (en-CA, HeatherRUS)\",\n        [\"en-GB\"]: \"Microsoft Server Speech Text to Speech Voice (en-GB, HazelRUS)\",\n        [\"en-IE\"]: \"Microsoft Server Speech Text to Speech Voice (en-IE, Sean)\",\n        [\"en-IN\"]: \"Microsoft Server Speech Text to Speech Voice (en-IN, PriyaRUS)\",\n        [\"en-US\"]: \"Microsoft Server Speech Text to Speech Voice (en-US, AriaRUS)\",\n        [\"es-ES\"]: \"Microsoft Server Speech Text to Speech Voice (es-ES, HelenaRUS)\",\n        [\"es-MX\"]: \"Microsoft Server Speech Text to Speech Voice (es-MX, HildaRUS)\",\n        [\"fi-FI\"]: \"Microsoft Server Speech Text to Speech Voice (fi-FI, HeidiRUS)\",\n        [\"fr-CA\"]: \"Microsoft Server Speech Text to Speech Voice (fr-CA, HarmonieRUS)\",\n        [\"fr-CH\"]: \"Microsoft Server Speech Text to Speech Voice (fr-CH, Guillaume)\",\n        [\"fr-FR\"]: \"Microsoft Server Speech Text to Speech Voice (fr-FR, HortenseRUS)\",\n        [\"he-IL\"]: \"Microsoft Server Speech Text to Speech Voice (he-IL, Asaf)\",\n        [\"hi-IN\"]: \"Microsoft Server Speech Text to Speech Voice (hi-IN, Kalpana)\",\n        [\"hr-HR\"]: \"Microsoft Server Speech Text to Speech Voice (hr-HR, Matej)\",\n        [\"hu-HU\"]: \"Microsoft Server Speech Text to Speech Voice (hu-HU, Szabolcs)\",\n        [\"id-ID\"]: \"Microsoft Server Speech Text to Speech Voice (id-ID, Andika)\",\n        [\"it-IT\"]: \"Microsoft Server Speech Text to Speech Voice (it-IT, LuciaRUS)\",\n        [\"ja-JP\"]: \"Microsoft Server Speech Text to Speech Voice (ja-JP, HarukaRUS)\",\n        [\"ko-KR\"]: \"Microsoft Server Speech Text to Speech Voice (ko-KR, HeamiRUS)\",\n        [\"ms-MY\"]: \"Microsoft Server Speech Text to Speech Voice (ms-MY, Rizwan)\",\n        [\"nb-NO\"]: \"Microsoft Server Speech Text to Speech Voice (nb-NO, HuldaRUS)\",\n        [\"nl-NL\"]: \"Microsoft Server Speech Text to Speech Voice (nl-NL, HannaRUS)\",\n        [\"pl-PL\"]: \"Microsoft Server Speech Text to Speech Voice (pl-PL, PaulinaRUS)\",\n        [\"pt-BR\"]: \"Microsoft Server Speech Text to Speech Voice (pt-BR, HeloisaRUS)\",\n        [\"pt-PT\"]: \"Microsoft Server Speech Text to Speech Voice (pt-PT, HeliaRUS)\",\n        [\"ro-RO\"]: \"Microsoft Server Speech Text to Speech Voice (ro-RO, Andrei)\",\n        [\"ru-RU\"]: \"Microsoft Server Speech Text to Speech Voice (ru-RU, EkaterinaRUS)\",\n        [\"sk-SK\"]: \"Microsoft Server Speech Text to Speech Voice (sk-SK, Filip)\",\n        [\"sl-SI\"]: \"Microsoft Server Speech Text to Speech Voice (sl-SI, Lado)\",\n        [\"sv-SE\"]: \"Microsoft Server Speech Text to Speech Voice (sv-SE, HedvigRUS)\",\n        [\"ta-IN\"]: \"Microsoft Server Speech Text to Speech Voice (ta-IN, Valluvar)\",\n        [\"te-IN\"]: \"Microsoft Server Speech Text to Speech Voice (te-IN, Chitra)\",\n        [\"th-TH\"]: \"Microsoft Server Speech Text to Speech Voice (th-TH, Pattara)\",\n        [\"tr-TR\"]: \"Microsoft Server Speech Text to Speech Voice (tr-TR, SedaRUS)\",\n        [\"vi-VN\"]: \"Microsoft Server Speech Text to Speech Voice (vi-VN, An)\",\n        [\"zh-CN\"]: \"Microsoft Server Speech Text to Speech Voice (zh-CN, HuihuiRUS)\",\n        [\"zh-HK\"]: \"Microsoft Server Speech Text to Speech Voice (zh-HK, TracyRUS)\",\n        [\"zh-TW\"]: \"Microsoft Server Speech Text to Speech Voice (zh-TW, HanHanRUS)\"\n      };\n      var language = this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage, \"en-US\");\n      var voice = this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice, \"\");\n      var ssml = SpeechSynthesizer.XMLEncode(text);\n\n      if (this.autoDetectSourceLanguage) {\n        language = \"en-US\";\n      } else {\n        voice = voice || languageToDefaultVoice[language];\n      }\n\n      if (voice) {\n        ssml = \"<voice name='\".concat(voice, \"'>\").concat(ssml, \"</voice>\");\n      }\n\n      ssml = \"<speak version='1.0' xmlns='http://www.w3.org/2001/10/synthesis' xmlns:mstts='http://www.w3.org/2001/mstts' xmlns:emo='http://www.w3.org/2009/10/emotionml' xml:lang='\".concat(language, \"'>\").concat(ssml, \"</speak>\");\n      return ssml;\n    }\n    /**\n     * Executes speech synthesis on plain text.\n     * The task returns the synthesis result.\n     * @member SpeechSynthesizer.prototype.speakTextAsync\n     * @function\n     * @public\n     * @param text - Text to be synthesized.\n     * @param cb - Callback that received the SpeechSynthesisResult.\n     * @param err - Callback invoked in case of an error.\n     * @param stream - AudioOutputStream to receive the synthesized audio.\n     */\n\n  }, {\n    key: \"speakTextAsync\",\n    value: function speakTextAsync(text, cb, err, stream) {\n      this.speakImpl(text, false, cb, err, stream);\n    }\n    /**\n     * Executes speech synthesis on SSML.\n     * The task returns the synthesis result.\n     * @member SpeechSynthesizer.prototype.speakSsmlAsync\n     * @function\n     * @public\n     * @param ssml - SSML to be synthesized.\n     * @param cb - Callback that received the SpeechSynthesisResult.\n     * @param err - Callback invoked in case of an error.\n     * @param stream - AudioOutputStream to receive the synthesized audio.\n     */\n\n  }, {\n    key: \"speakSsmlAsync\",\n    value: function speakSsmlAsync(ssml, cb, err, stream) {\n      this.speakImpl(ssml, true, cb, err, stream);\n    }\n    /**\n     * Dispose of associated resources.\n     * @member SpeechSynthesizer.prototype.close\n     * @function\n     * @public\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      Contracts.throwIfDisposed(this.privDisposed);\n      this.dispose(true);\n    }\n    /**\n     * @Internal\n     * Do not use externally, object returned will change without warning or notice.\n     */\n\n  }, {\n    key: \"internalData\",\n    get: function get() {\n      return this.privAdapter;\n    }\n    /**\n     * This method performs cleanup of resources.\n     * The Boolean parameter disposing indicates whether the method is called\n     * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\n     * Derived classes should override this method to dispose resource if needed.\n     * @member SpeechSynthesizer.prototype.dispose\n     * @function\n     * @public\n     * @param {boolean} disposing - Flag to request disposal.\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose(disposing) {\n      if (this.privDisposed) {\n        return;\n      }\n\n      if (disposing) {\n        if (this.privAdapter) {\n          this.privAdapter.dispose();\n        }\n      }\n\n      this.privDisposed = true;\n    } //\n    // ################################################################################################################\n    // IMPLEMENTATION.\n    // Move to independent class\n    // ################################################################################################################\n    //\n\n  }, {\n    key: \"createSynthesizerConfig\",\n    value: function createSynthesizerConfig(speechConfig) {\n      return new SynthesizerConfig(speechConfig, this.privProperties);\n    } // Creates the synthesis adapter\n\n  }, {\n    key: \"createSynthesisAdapter\",\n    value: function createSynthesisAdapter(authentication, connectionFactory, audioConfig, synthesizerConfig) {\n      return new SynthesisAdapterBase(authentication, connectionFactory, synthesizerConfig, this, this.audioConfig);\n    }\n  }, {\n    key: \"implCommonSynthesizeSetup\",\n    value: function implCommonSynthesizeSetup() {\n      var _this = this;\n\n      var osPlatform = typeof window !== \"undefined\" ? \"Browser\" : \"Node\";\n      var osName = \"unknown\";\n      var osVersion = \"unknown\";\n\n      if (typeof navigator !== \"undefined\") {\n        osPlatform = osPlatform + \"/\" + navigator.platform;\n        osName = navigator.userAgent;\n        osVersion = navigator.appVersion;\n      }\n\n      var synthesizerConfig = this.createSynthesizerConfig(new SpeechServiceConfig(new Context(new OS(osPlatform, osName, osVersion))));\n      var subscriptionKey = this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\n      var authentication = subscriptionKey && subscriptionKey !== \"\" ? new CognitiveSubscriptionKeyAuthentication(subscriptionKey) : new CognitiveTokenAuthentication(function (authFetchEventId) {\n        var authorizationToken = _this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\n\n        return PromiseHelper.fromResult(authorizationToken);\n      }, function (authFetchEventId) {\n        var authorizationToken = _this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\n\n        return PromiseHelper.fromResult(authorizationToken);\n      });\n      this.privAdapter = this.createSynthesisAdapter(authentication, this.privConnectionFactory, this.audioConfig, synthesizerConfig);\n      this.privAdapter.audioOutputFormat = AudioOutputFormatImpl.fromSpeechSynthesisOutputFormat(SpeechSynthesisOutputFormat[this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)]);\n    }\n  }, {\n    key: \"speakImpl\",\n    value: function speakImpl(text, IsSsml, cb, err, dataStream) {\n      var _this2 = this;\n\n      try {\n        Contracts.throwIfDisposed(this.privDisposed);\n        var requestId = createNoDashGuid();\n        var audioDestination;\n\n        if (dataStream instanceof PushAudioOutputStreamCallback) {\n          audioDestination = new PushAudioOutputStreamImpl(dataStream);\n        } else if (dataStream instanceof PullAudioOutputStream) {\n          audioDestination = dataStream;\n        } else if (dataStream !== undefined) {\n          audioDestination = new AudioFileWriter(dataStream);\n        } else {\n          audioDestination = undefined;\n        }\n\n        this.synthesisRequestQueue.enqueue(new SynthesisRequest(requestId, text, IsSsml, function (e) {\n          _this2.privSynthesizing = false;\n\n          if (!!cb) {\n            try {\n              cb(e);\n            } catch (e) {\n              if (!!err) {\n                err(e);\n              }\n            }\n          }\n\n          cb = undefined;\n\n          _this2.adapterSpeak();\n        }, function (e) {\n          if (!!err) {\n            err(e);\n          }\n        }, audioDestination));\n        this.adapterSpeak();\n      } catch (error) {\n        if (!!err) {\n          if (error instanceof Error) {\n            var typedError = error;\n            err(typedError.name + \": \" + typedError.message);\n          } else {\n            err(error);\n          }\n        } // Destroy the synthesizer.\n\n\n        this.dispose(true);\n      }\n    }\n  }, {\n    key: \"adapterSpeak\",\n    value: function adapterSpeak() {\n      var _this3 = this;\n\n      if (!this.privDisposed && !this.privSynthesizing) {\n        this.privSynthesizing = true;\n        return this.synthesisRequestQueue.dequeue().onSuccessContinueWithPromise(function (request) {\n          return _this3.privAdapter.Speak(request.text, request.isSSML, request.requestId, request.cb, request.err, request.dataStream);\n        });\n      }\n\n      return PromiseHelper.fromResult(true);\n    }\n  }], [{\n    key: \"FromConfig\",\n    value: function FromConfig(speechConfig, autoDetectSourceLanguageConfig, audioConfig) {\n      var speechConfigImpl = speechConfig;\n      autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\n      return new SpeechSynthesizer(speechConfig, audioConfig);\n    }\n  }, {\n    key: \"XMLEncode\",\n    value: function XMLEncode(text) {\n      return text.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&apos;\");\n    }\n  }]);\n\n  return SpeechSynthesizer;\n}(); // tslint:disable-next-line:max-classes-per-file\n\nexport var SynthesisRequest = function SynthesisRequest(requestId, text, isSSML, cb, err, dataStream) {\n  _classCallCheck(this, SynthesisRequest);\n\n  this.requestId = requestId;\n  this.text = text;\n  this.isSSML = isSSML;\n  this.cb = cb;\n  this.err = err;\n  this.dataStream = dataStream;\n};","map":{"version":3,"sources":["src/sdk/SpeechSynthesizer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {PathLike} from \"fs\";\r\nimport {\r\n    AutoDetectSourceLanguagesOpenRangeOptionName,\r\n    CognitiveSubscriptionKeyAuthentication,\r\n    CognitiveTokenAuthentication,\r\n    Context,\r\n    IAuthentication,\r\n    ISynthesisConnectionFactory,\r\n    OS,\r\n    SpeechServiceConfig,\r\n    SpeechSynthesisConnectionFactory,\r\n    SynthesisAdapterBase,\r\n    SynthesizerConfig,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    createNoDashGuid,\r\n    IAudioDestination,\r\n    IStringDictionary,\r\n    Promise,\r\n    PromiseHelper,\r\n    Queue\r\n} from \"../common/Exports\";\r\nimport { AudioOutputConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { AudioFileWriter } from \"./Audio/AudioFileWriter\";\r\nimport { AudioOutputFormatImpl } from \"./Audio/AudioOutputFormat\";\r\nimport {\r\n    PullAudioOutputStreamImpl,\r\n    PushAudioOutputStreamImpl\r\n} from \"./Audio/AudioOutputStream\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    AudioOutputStream,\r\n    AutoDetectSourceLanguageConfig,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    PullAudioOutputStream,\r\n    PushAudioOutputStreamCallback,\r\n    SpeechConfig,\r\n    SpeechSynthesisEventArgs,\r\n    SpeechSynthesisOutputFormat,\r\n    SpeechSynthesisResult,\r\n    SpeechSynthesisWordBoundaryEventArgs,\r\n} from \"./Exports\";\r\nimport { SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Defines the class SpeechSynthesizer for text to speech.\r\n * Added in version 1.11.0\r\n * @class SpeechSynthesizer\r\n */\r\nexport class SpeechSynthesizer {\r\n    protected audioConfig: AudioConfig;\r\n    protected privAdapter: SynthesisAdapterBase;\r\n    protected privProperties: PropertyCollection;\r\n    protected synthesisRequestQueue: Queue<SynthesisRequest>;\r\n\r\n    /**\r\n     * Defines event handler for synthesis start events.\r\n     * @member SpeechSynthesizer.prototype.synthesisStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesisStarted: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesizing events.\r\n     * @member SpeechSynthesizer.prototype.synthesizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesizing: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesis completed events.\r\n     * @member SpeechSynthesizer.prototype.synthesisCompleted\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesisCompleted: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesis cancelled events.\r\n     * @member SpeechSynthesizer.prototype.SynthesisCanceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public SynthesisCanceled: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for word boundary events\r\n     * @member SpeechSynthesizer.prototype.wordBoundary\r\n     * @function\r\n     * @public\r\n     */\r\n    public wordBoundary: (sender: SpeechSynthesizer, event: SpeechSynthesisWordBoundaryEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member SpeechSynthesizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member SpeechSynthesizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this SpeechSynthesizer.\r\n     * @member SpeechSynthesizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechSynthesizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Indicates if auto detect source language is enabled\r\n     * @member SpeechSynthesizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {boolean} if auto detect source language is enabled\r\n     */\r\n    public get autoDetectSourceLanguage(): boolean {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages) === AutoDetectSourceLanguagesOpenRangeOptionName;\r\n    }\r\n\r\n    private privDisposed: boolean;\r\n    private privConnectionFactory: ISynthesisConnectionFactory;\r\n    private privSynthesizing: boolean;\r\n\r\n    /**\r\n     * SpeechSynthesizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        if (audioConfig !== null) {\r\n            this.audioConfig = (audioConfig !== undefined) ? audioConfig : AudioConfig.fromDefaultSpeakerOutput();\r\n        }\r\n        this.privProperties = speechConfigImpl.properties.clone();\r\n        this.privDisposed = false;\r\n        this.privSynthesizing = false;\r\n        this.privConnectionFactory = new SpeechSynthesisConnectionFactory();\r\n        this.synthesisRequestQueue = new Queue<SynthesisRequest>();\r\n        this.implCommonSynthesizeSetup();\r\n    }\r\n\r\n    /**\r\n     * SpeechSynthesizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this synthesizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the synthesizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer\r\n     */\r\n    public static FromConfig(speechConfig: SpeechConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): SpeechSynthesizer {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\r\n        return new SpeechSynthesizer(speechConfig, audioConfig);\r\n    }\r\n\r\n    public buildSsml(text: string): string {\r\n        const languageToDefaultVoice: IStringDictionary<string>  = {\r\n            [\"ar-EG\"]: \"Microsoft Server Speech Text to Speech Voice (ar-EG, Hoda)\",\r\n            [\"ar-SA\"]: \"Microsoft Server Speech Text to Speech Voice (ar-SA, Naayf)\",\r\n            [\"bg-BG\"]: \"Microsoft Server Speech Text to Speech Voice (bg-BG, Ivan)\",\r\n            [\"ca-ES\"]: \"Microsoft Server Speech Text to Speech Voice (ca-ES, HerenaRUS)\",\r\n            [\"cs-CZ\"]: \"Microsoft Server Speech Text to Speech Voice (cs-CZ, Jakub)\",\r\n            [\"da-DK\"]: \"Microsoft Server Speech Text to Speech Voice (da-DK, HelleRUS)\",\r\n            [\"de-AT\"]: \"Microsoft Server Speech Text to Speech Voice (de-AT, Michael)\",\r\n            [\"de-CH\"]: \"Microsoft Server Speech Text to Speech Voice (de-CH, Karsten)\",\r\n            [\"de-DE\"]: \"Microsoft Server Speech Text to Speech Voice (de-DE, HeddaRUS)\",\r\n            [\"el-GR\"]: \"Microsoft Server Speech Text to Speech Voice (el-GR, Stefanos)\",\r\n            [\"en-AU\"]: \"Microsoft Server Speech Text to Speech Voice (en-AU, HayleyRUS)\",\r\n            [\"en-CA\"]: \"Microsoft Server Speech Text to Speech Voice (en-CA, HeatherRUS)\",\r\n            [\"en-GB\"]: \"Microsoft Server Speech Text to Speech Voice (en-GB, HazelRUS)\",\r\n            [\"en-IE\"]: \"Microsoft Server Speech Text to Speech Voice (en-IE, Sean)\",\r\n            [\"en-IN\"]: \"Microsoft Server Speech Text to Speech Voice (en-IN, PriyaRUS)\",\r\n            [\"en-US\"]: \"Microsoft Server Speech Text to Speech Voice (en-US, AriaRUS)\",\r\n            [\"es-ES\"]: \"Microsoft Server Speech Text to Speech Voice (es-ES, HelenaRUS)\",\r\n            [\"es-MX\"]: \"Microsoft Server Speech Text to Speech Voice (es-MX, HildaRUS)\",\r\n            [\"fi-FI\"]: \"Microsoft Server Speech Text to Speech Voice (fi-FI, HeidiRUS)\",\r\n            [\"fr-CA\"]: \"Microsoft Server Speech Text to Speech Voice (fr-CA, HarmonieRUS)\",\r\n            [\"fr-CH\"]: \"Microsoft Server Speech Text to Speech Voice (fr-CH, Guillaume)\",\r\n            [\"fr-FR\"]: \"Microsoft Server Speech Text to Speech Voice (fr-FR, HortenseRUS)\",\r\n            [\"he-IL\"]: \"Microsoft Server Speech Text to Speech Voice (he-IL, Asaf)\",\r\n            [\"hi-IN\"]: \"Microsoft Server Speech Text to Speech Voice (hi-IN, Kalpana)\",\r\n            [\"hr-HR\"]: \"Microsoft Server Speech Text to Speech Voice (hr-HR, Matej)\",\r\n            [\"hu-HU\"]: \"Microsoft Server Speech Text to Speech Voice (hu-HU, Szabolcs)\",\r\n            [\"id-ID\"]: \"Microsoft Server Speech Text to Speech Voice (id-ID, Andika)\",\r\n            [\"it-IT\"]: \"Microsoft Server Speech Text to Speech Voice (it-IT, LuciaRUS)\",\r\n            [\"ja-JP\"]: \"Microsoft Server Speech Text to Speech Voice (ja-JP, HarukaRUS)\",\r\n            [\"ko-KR\"]: \"Microsoft Server Speech Text to Speech Voice (ko-KR, HeamiRUS)\",\r\n            [\"ms-MY\"]: \"Microsoft Server Speech Text to Speech Voice (ms-MY, Rizwan)\",\r\n            [\"nb-NO\"]: \"Microsoft Server Speech Text to Speech Voice (nb-NO, HuldaRUS)\",\r\n            [\"nl-NL\"]: \"Microsoft Server Speech Text to Speech Voice (nl-NL, HannaRUS)\",\r\n            [\"pl-PL\"]: \"Microsoft Server Speech Text to Speech Voice (pl-PL, PaulinaRUS)\",\r\n            [\"pt-BR\"]: \"Microsoft Server Speech Text to Speech Voice (pt-BR, HeloisaRUS)\",\r\n            [\"pt-PT\"]: \"Microsoft Server Speech Text to Speech Voice (pt-PT, HeliaRUS)\",\r\n            [\"ro-RO\"]: \"Microsoft Server Speech Text to Speech Voice (ro-RO, Andrei)\",\r\n            [\"ru-RU\"]: \"Microsoft Server Speech Text to Speech Voice (ru-RU, EkaterinaRUS)\",\r\n            [\"sk-SK\"]: \"Microsoft Server Speech Text to Speech Voice (sk-SK, Filip)\",\r\n            [\"sl-SI\"]: \"Microsoft Server Speech Text to Speech Voice (sl-SI, Lado)\",\r\n            [\"sv-SE\"]: \"Microsoft Server Speech Text to Speech Voice (sv-SE, HedvigRUS)\",\r\n            [\"ta-IN\"]: \"Microsoft Server Speech Text to Speech Voice (ta-IN, Valluvar)\",\r\n            [\"te-IN\"]: \"Microsoft Server Speech Text to Speech Voice (te-IN, Chitra)\",\r\n            [\"th-TH\"]: \"Microsoft Server Speech Text to Speech Voice (th-TH, Pattara)\",\r\n            [\"tr-TR\"]: \"Microsoft Server Speech Text to Speech Voice (tr-TR, SedaRUS)\",\r\n            [\"vi-VN\"]: \"Microsoft Server Speech Text to Speech Voice (vi-VN, An)\",\r\n            [\"zh-CN\"]: \"Microsoft Server Speech Text to Speech Voice (zh-CN, HuihuiRUS)\",\r\n            [\"zh-HK\"]: \"Microsoft Server Speech Text to Speech Voice (zh-HK, TracyRUS)\",\r\n            [\"zh-TW\"]: \"Microsoft Server Speech Text to Speech Voice (zh-TW, HanHanRUS)\",\r\n        };\r\n\r\n        let language = this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage, \"en-US\");\r\n        let voice = this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice, \"\");\r\n        let ssml: string = SpeechSynthesizer.XMLEncode(text);\r\n        if (this.autoDetectSourceLanguage) {\r\n            language = \"en-US\";\r\n        } else {\r\n            voice = voice || languageToDefaultVoice[language];\r\n        }\r\n        if (voice) {\r\n            ssml = `<voice name='${voice}'>${ssml}</voice>`;\r\n        }\r\n        ssml = `<speak version='1.0' xmlns='http://www.w3.org/2001/10/synthesis' xmlns:mstts='http://www.w3.org/2001/mstts' xmlns:emo='http://www.w3.org/2009/10/emotionml' xml:lang='${language}'>${ssml}</speak>`;\r\n        return ssml;\r\n    }\r\n\r\n    /**\r\n     * Executes speech synthesis on plain text.\r\n     * The task returns the synthesis result.\r\n     * @member SpeechSynthesizer.prototype.speakTextAsync\r\n     * @function\r\n     * @public\r\n     * @param text - Text to be synthesized.\r\n     * @param cb - Callback that received the SpeechSynthesisResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     * @param stream - AudioOutputStream to receive the synthesized audio.\r\n     */\r\n    public speakTextAsync(text: string, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, stream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        this.speakImpl(text, false, cb, err, stream);\r\n    }\r\n\r\n    /**\r\n     * Executes speech synthesis on SSML.\r\n     * The task returns the synthesis result.\r\n     * @member SpeechSynthesizer.prototype.speakSsmlAsync\r\n     * @function\r\n     * @public\r\n     * @param ssml - SSML to be synthesized.\r\n     * @param cb - Callback that received the SpeechSynthesisResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     * @param stream - AudioOutputStream to receive the synthesized audio.\r\n     */\r\n    public speakSsmlAsync(ssml: string, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, stream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        this.speakImpl(ssml, true, cb, err, stream);\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechSynthesizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n\r\n        this.dispose(true);\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public get internalData(): object {\r\n        return this.privAdapter;\r\n    }\r\n\r\n    /**\r\n     * This method performs cleanup of resources.\r\n     * The Boolean parameter disposing indicates whether the method is called\r\n     * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\r\n     * Derived classes should override this method to dispose resource if needed.\r\n     * @member SpeechSynthesizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - Flag to request disposal.\r\n     */\r\n    protected dispose(disposing: boolean): void {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            if (this.privAdapter) {\r\n                this.privAdapter.dispose();\r\n            }\r\n        }\r\n\r\n        this.privDisposed = true;\r\n    }\r\n\r\n    //\r\n    // ################################################################################################################\r\n    // IMPLEMENTATION.\r\n    // Move to independent class\r\n    // ################################################################################################################\r\n    //\r\n    protected createSynthesizerConfig(speechConfig: SpeechServiceConfig): SynthesizerConfig {\r\n        return new SynthesizerConfig(\r\n            speechConfig,\r\n            this.privProperties);\r\n    }\r\n\r\n    // Creates the synthesis adapter\r\n    protected createSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisAdapterBase {\r\n            return new SynthesisAdapterBase(authentication, connectionFactory,\r\n                synthesizerConfig, this, this.audioConfig as AudioOutputConfigImpl);\r\n        }\r\n\r\n    protected implCommonSynthesizeSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const synthesizerConfig = this.createSynthesizerConfig(\r\n            new SpeechServiceConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion))));\r\n\r\n        const subscriptionKey = this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n        const authentication = (subscriptionKey && subscriptionKey !== \"\") ?\r\n            new CognitiveSubscriptionKeyAuthentication(subscriptionKey) :\r\n            new CognitiveTokenAuthentication(\r\n                (authFetchEventId: string): Promise<string> => {\r\n                    const authorizationToken = this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return PromiseHelper.fromResult(authorizationToken);\r\n                },\r\n                (authFetchEventId: string): Promise<string> => {\r\n                    const authorizationToken = this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return PromiseHelper.fromResult(authorizationToken);\r\n                });\r\n\r\n        this.privAdapter = this.createSynthesisAdapter(\r\n            authentication,\r\n            this.privConnectionFactory,\r\n            this.audioConfig,\r\n            synthesizerConfig);\r\n\r\n        this.privAdapter.audioOutputFormat = AudioOutputFormatImpl.fromSpeechSynthesisOutputFormat(\r\n            (SpeechSynthesisOutputFormat as any)[this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)]\r\n        );\r\n    }\r\n\r\n    protected speakImpl(text: string, IsSsml: boolean, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, dataStream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privDisposed);\r\n            const requestId = createNoDashGuid();\r\n            let audioDestination;\r\n            if (dataStream instanceof PushAudioOutputStreamCallback) {\r\n                audioDestination = new PushAudioOutputStreamImpl(dataStream);\r\n            } else if (dataStream instanceof PullAudioOutputStream) {\r\n                audioDestination = dataStream as PullAudioOutputStreamImpl;\r\n            } else if (dataStream !== undefined) {\r\n                audioDestination = new AudioFileWriter(dataStream as PathLike);\r\n            } else {\r\n                audioDestination = undefined;\r\n            }\r\n            this.synthesisRequestQueue.enqueue(new SynthesisRequest(requestId, text, IsSsml, (e: SpeechSynthesisResult): void => {\r\n                this.privSynthesizing = false;\r\n                if (!!cb) {\r\n                    try {\r\n                        cb(e);\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(e);\r\n                        }\r\n                    }\r\n                }\r\n                cb = undefined;\r\n                this.adapterSpeak();\r\n            }, (e: string): void => {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }, audioDestination));\r\n\r\n            this.adapterSpeak();\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n\r\n            // Destroy the synthesizer.\r\n            this.dispose(true);\r\n        }\r\n    }\r\n\r\n    protected adapterSpeak(): Promise<boolean> {\r\n        if (!this.privDisposed && !this.privSynthesizing) {\r\n            this.privSynthesizing = true;\r\n            return this.synthesisRequestQueue.dequeue().\r\n                onSuccessContinueWithPromise((request: SynthesisRequest): Promise<boolean> => {\r\n                    return this.privAdapter.Speak(request.text, request.isSSML, request.requestId, request.cb, request.err, request.dataStream);\r\n            });\r\n        }\r\n        return PromiseHelper.fromResult(true);\r\n    }\r\n\r\n    private static XMLEncode(text: string): string {\r\n        return text.replace(/&/g, \"&amp;\")\r\n            .replace(/</g, \"&lt;\")\r\n            .replace(/>/g, \"&gt;\")\r\n            .replace(/\"/g, \"&quot;\")\r\n            .replace(/'/g, \"&apos;\");\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SynthesisRequest {\r\n    public requestId: string;\r\n    public text: string;\r\n    public isSSML: boolean;\r\n    public cb: (e: SpeechSynthesisResult) => void;\r\n    public err: (e: string) => void;\r\n    public dataStream: IAudioDestination;\r\n\r\n    constructor(requestId: string, text: string, isSSML: boolean, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, dataStream?: IAudioDestination) {\r\n        this.requestId = requestId;\r\n        this.text = text;\r\n        this.isSSML = isSSML;\r\n        this.cb = cb;\r\n        this.err = err;\r\n        this.dataStream = dataStream;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}