{"ast":null,"code":"import _createClass from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n//\n// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\n//\nimport { MessageType } from \"../common/Exports\";\nimport { PropertyCollection } from \"./PropertyCollection\";\nimport { PropertyId } from \"./PropertyId\";\n/**\n * ConnectionMessage represents implementation specific messages sent to and received from\n * the speech service. These messages are provided for debugging purposes and should not\n * be used for production use cases with the Azure Cognitive Services Speech Service.\n * Messages sent to and received from the Speech Service are subject to change without\n * notice. This includes message contents, headers, payloads, ordering, etc.\n * Added in version 1.11.0.\n */\n\nexport var ConnectionMessage = function ConnectionMessage() {\n  _classCallCheck(this, ConnectionMessage);\n}; // tslint:disable-next-line:max-classes-per-file\n\nexport var ConnectionMessageImpl = /*#__PURE__*/function () {\n  function ConnectionMessageImpl(message) {\n    var _this = this;\n\n    _classCallCheck(this, ConnectionMessageImpl);\n\n    this.privConnectionMessage = message;\n    this.privProperties = new PropertyCollection();\n\n    if (!!this.privConnectionMessage.headers[\"X-ConnectionId\"]) {\n      this.privProperties.setProperty(PropertyId.Speech_SessionId, this.privConnectionMessage.headers[\"X-ConnectionId\"]);\n    }\n\n    Object.keys(this.privConnectionMessage.headers).forEach(function (header, index, array) {\n      _this.privProperties.setProperty(header, _this.privConnectionMessage.headers[header]);\n    });\n  }\n  /**\n   * The message path.\n   */\n\n\n  _createClass(ConnectionMessageImpl, [{\n    key: \"path\",\n    get: function get() {\n      return this.privConnectionMessage.headers[Object.keys(this.privConnectionMessage.headers).find(function (key) {\n        return key.toLowerCase() === \"path\".toLowerCase();\n      })];\n    }\n    /**\n     * Checks to see if the ConnectionMessage is a text message.\n     * See also IsBinaryMessage().\n     */\n\n  }, {\n    key: \"isTextMessage\",\n    get: function get() {\n      return this.privConnectionMessage.messageType === MessageType.Text;\n    }\n    /**\n     * Checks to see if the ConnectionMessage is a binary message.\n     * See also GetBinaryMessage().\n     */\n\n  }, {\n    key: \"isBinaryMessage\",\n    get: function get() {\n      return this.privConnectionMessage.messageType === MessageType.Binary;\n    }\n    /**\n     * Gets the text message payload. Typically the text message content-type is\n     * application/json. To determine other content-types use\n     * Properties.GetProperty(\"Content-Type\").\n     */\n\n  }, {\n    key: \"TextMessage\",\n    get: function get() {\n      return this.privConnectionMessage.textBody;\n    }\n    /**\n     * Gets the binary message payload.\n     */\n\n  }, {\n    key: \"binaryMessage\",\n    get: function get() {\n      return this.privConnectionMessage.binaryBody;\n    }\n    /**\n     * A collection of properties and their values defined for this <see cref=\"ConnectionMessage\"/>.\n     * Message headers can be accessed via this collection (e.g. \"Content-Type\").\n     */\n\n  }, {\n    key: \"properties\",\n    get: function get() {\n      return this.privProperties;\n    }\n    /**\n     * Returns a string that represents the connection message.\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"\";\n    }\n  }]);\n\n  return ConnectionMessageImpl;\n}();","map":{"version":3,"sources":["src/sdk/ConnectionMessage.ts"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA;AAEA,SAEI,WAFJ,QAGO,mBAHP;AAIA,SACI,kBADJ,QAEO,sBAFP;AAGA,SAAS,UAAT,QAA2B,cAA3B;AAEA;;;;;;;AAOG;;AACH,WAAsB,iBAAtB;AAAA;AAAA,E,CA0CA;;AACA,WAAa,qBAAb;AAKI,iCAAY,OAAZ,EAAyC;AAAA;;AAAA;;AACrC,SAAK,qBAAL,GAA6B,OAA7B;AACA,SAAK,cAAL,GAAsB,IAAI,kBAAJ,EAAtB;;AACA,QAAI,CAAC,CAAC,KAAK,qBAAL,CAA2B,OAA3B,CAAmC,gBAAnC,CAAN,EAA4D;AACxD,WAAK,cAAL,CAAoB,WAApB,CAAgC,UAAU,CAAC,gBAA3C,EAA6D,KAAK,qBAAL,CAA2B,OAA3B,CAAmC,gBAAnC,CAA7D;AACH;;AAED,IAAA,MAAM,CAAC,IAAP,CAAY,KAAK,qBAAL,CAA2B,OAAvC,EAAgD,OAAhD,CAAwD,UAAC,MAAD,EAAiB,KAAjB,EAAgC,KAAhC,EAAyD;AAC7G,MAAA,KAAI,CAAC,cAAL,CAAoB,WAApB,CAAgC,MAAhC,EAAwC,KAAI,CAAC,qBAAL,CAA2B,OAA3B,CAAmC,MAAnC,CAAxC;AACH,KAFD;AAGH;AAED;;AAEG;;;AAnBP;AAAA;AAAA,SAoBI,eAAe;AACX,aAAO,KAAK,qBAAL,CAA2B,OAA3B,CAAmC,MAAM,CAAC,IAAP,CAAY,KAAK,qBAAL,CAA2B,OAAvC,EAAgD,IAAhD,CAAqD,UAAC,GAAD;AAAA,eAAiB,GAAG,CAAC,WAAJ,OAAsB,OAAO,WAAP,EAAvC;AAAA,OAArD,CAAnC,CAAP;AACH;AAED;;;AAGG;;AA3BP;AAAA;AAAA,SA4BI,eAAwB;AACpB,aAAO,KAAK,qBAAL,CAA2B,WAA3B,KAA2C,WAAW,CAAC,IAA9D;AACH;AAED;;;AAGG;;AAnCP;AAAA;AAAA,SAoCI,eAA0B;AACtB,aAAO,KAAK,qBAAL,CAA2B,WAA3B,KAA2C,WAAW,CAAC,MAA9D;AACH;AAED;;;;AAIG;;AA5CP;AAAA;AAAA,SA6CI,eAAsB;AAClB,aAAO,KAAK,qBAAL,CAA2B,QAAlC;AACH;AAED;;AAEG;;AAnDP;AAAA;AAAA,SAoDI,eAAwB;AACpB,aAAO,KAAK,qBAAL,CAA2B,UAAlC;AACH;AAED;;;AAGG;;AA3DP;AAAA;AAAA,SA4DI,eAAqB;AACjB,aAAO,KAAK,cAAZ;AACH;AAED;;AAEG;;AAlEP;AAAA;AAAA,WAmEW,oBAAQ;AACX,aAAO,EAAP;AACH;AArEL;;AAAA;AAAA","sourcesContent":["//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport {\r\n    ConnectionMessage as IntConnectionMessage,\r\n    MessageType\r\n} from \"../common/Exports\";\r\nimport {\r\n    PropertyCollection\r\n} from \"./PropertyCollection\";\r\nimport { PropertyId } from \"./PropertyId\";\r\n\r\n/**\r\n * ConnectionMessage represents implementation specific messages sent to and received from\r\n * the speech service. These messages are provided for debugging purposes and should not\r\n * be used for production use cases with the Azure Cognitive Services Speech Service.\r\n * Messages sent to and received from the Speech Service are subject to change without\r\n * notice. This includes message contents, headers, payloads, ordering, etc.\r\n * Added in version 1.11.0.\r\n */\r\nexport abstract class ConnectionMessage {\r\n    /**\r\n     * The message path.\r\n     */\r\n    public abstract get path(): string;\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a text message.\r\n     * See also IsBinaryMessage().\r\n     */\r\n    public abstract get isTextMessage(): boolean;\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a binary message.\r\n     * See also GetBinaryMessage().\r\n     */\r\n    public abstract get isBinaryMessage(): boolean;\r\n\r\n    /**\r\n     * Gets the text message payload. Typically the text message content-type is\r\n     * application/json. To determine other content-types use\r\n     * Properties.GetProperty(\"Content-Type\").\r\n     */\r\n    public abstract get TextMessage(): string;\r\n\r\n    /**\r\n     * Gets the binary message payload.\r\n     */\r\n    public abstract get binaryMessage(): ArrayBuffer;\r\n\r\n    /**\r\n     * A collection of properties and their values defined for this <see cref=\"ConnectionMessage\"/>.\r\n     * Message headers can be accessed via this collection (e.g. \"Content-Type\").\r\n     */\r\n    public abstract get properties(): PropertyCollection;\r\n\r\n    /**\r\n     * Returns a string that represents the connection message.\r\n     */\r\n    public abstract toString(): string;\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ConnectionMessageImpl {\r\n\r\n    private privConnectionMessage: IntConnectionMessage;\r\n    private privProperties: PropertyCollection;\r\n\r\n    constructor(message: IntConnectionMessage) {\r\n        this.privConnectionMessage = message;\r\n        this.privProperties = new PropertyCollection();\r\n        if (!!this.privConnectionMessage.headers[\"X-ConnectionId\"]) {\r\n            this.privProperties.setProperty(PropertyId.Speech_SessionId, this.privConnectionMessage.headers[\"X-ConnectionId\"]);\r\n        }\r\n\r\n        Object.keys(this.privConnectionMessage.headers).forEach((header: string, index: number, array: string[]): void => {\r\n            this.privProperties.setProperty(header, this.privConnectionMessage.headers[header]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * The message path.\r\n     */\r\n    public get path(): string {\r\n        return this.privConnectionMessage.headers[Object.keys(this.privConnectionMessage.headers).find((key: string) => key.toLowerCase() === \"path\".toLowerCase())];\r\n    }\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a text message.\r\n     * See also IsBinaryMessage().\r\n     */\r\n    public get isTextMessage(): boolean {\r\n        return this.privConnectionMessage.messageType === MessageType.Text;\r\n    }\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a binary message.\r\n     * See also GetBinaryMessage().\r\n     */\r\n    public get isBinaryMessage(): boolean {\r\n        return this.privConnectionMessage.messageType === MessageType.Binary;\r\n    }\r\n\r\n    /**\r\n     * Gets the text message payload. Typically the text message content-type is\r\n     * application/json. To determine other content-types use\r\n     * Properties.GetProperty(\"Content-Type\").\r\n     */\r\n    public get TextMessage(): string {\r\n        return this.privConnectionMessage.textBody;\r\n    }\r\n\r\n    /**\r\n     * Gets the binary message payload.\r\n     */\r\n    public get binaryMessage(): ArrayBuffer {\r\n        return this.privConnectionMessage.binaryBody;\r\n    }\r\n\r\n    /**\r\n     * A collection of properties and their values defined for this <see cref=\"ConnectionMessage\"/>.\r\n     * Message headers can be accessed via this collection (e.g. \"Content-Type\").\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Returns a string that represents the connection message.\r\n     */\r\n    public toString(): string {\r\n        return \"\";\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}