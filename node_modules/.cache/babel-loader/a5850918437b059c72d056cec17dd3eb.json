{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) {\n    if (b.hasOwnProperty(p)) d[p] = b[p];\n  }\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Subscriber_1 = require('../Subscriber');\n\nvar Notification_1 = require('../Notification');\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\n\n\nfunction observeOn(scheduler, delay) {\n  if (delay === void 0) {\n    delay = 0;\n  }\n\n  return function observeOnOperatorFunction(source) {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexports.observeOn = observeOn;\n\nvar ObserveOnOperator = function () {\n  function ObserveOnOperator(scheduler, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    this.scheduler = scheduler;\n    this.delay = delay;\n  }\n\n  ObserveOnOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  };\n\n  return ObserveOnOperator;\n}();\n\nexports.ObserveOnOperator = ObserveOnOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\nvar ObserveOnSubscriber = function (_super) {\n  __extends(ObserveOnSubscriber, _super);\n\n  function ObserveOnSubscriber(destination, scheduler, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    _super.call(this, destination);\n\n    this.scheduler = scheduler;\n    this.delay = delay;\n  }\n\n  ObserveOnSubscriber.dispatch = function (arg) {\n    var notification = arg.notification,\n        destination = arg.destination;\n    notification.observe(destination);\n    this.unsubscribe();\n  };\n\n  ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {\n    this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n  };\n\n  ObserveOnSubscriber.prototype._next = function (value) {\n    this.scheduleMessage(Notification_1.Notification.createNext(value));\n  };\n\n  ObserveOnSubscriber.prototype._error = function (err) {\n    this.scheduleMessage(Notification_1.Notification.createError(err));\n  };\n\n  ObserveOnSubscriber.prototype._complete = function () {\n    this.scheduleMessage(Notification_1.Notification.createComplete());\n  };\n\n  return ObserveOnSubscriber;\n}(Subscriber_1.Subscriber);\n\nexports.ObserveOnSubscriber = ObserveOnSubscriber;\n\nvar ObserveOnMessage = function () {\n  function ObserveOnMessage(notification, destination) {\n    this.notification = notification;\n    this.destination = destination;\n  }\n\n  return ObserveOnMessage;\n}();\n\nexports.ObserveOnMessage = ObserveOnMessage;","map":{"version":3,"sources":["../../src/operators/observeOn.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\nimport { Action } from '../scheduler/Action';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(this: Action<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: IScheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    this.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}