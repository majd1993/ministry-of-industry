{"ast":null,"code":"\"use strict\";\n\nexports.empty = {\n  closed: true,\n  next: function next(value) {},\n  error: function error(err) {\n    throw err;\n  },\n  complete: function complete() {}\n};","map":{"version":3,"sources":["../src/Observer.ts"],"names":[],"mappings":";;AA8Ba,OAAA,CAAA,KAAA,GAAuB;AAClC,EAAA,MAAM,EAAE,IAD0B;AAElC,EAAA,IAAI,EAAA,cAAC,KAAD,EAAW,CAAqB,CAFF;AAGlC,EAAA,KAAK,EAAA,eAAC,GAAD,EAAS;AAAU,UAAM,GAAN;AAAY,GAHF;AAIlC,EAAA,QAAQ,EAAA,oBAAA,CAAqB;AAJK,CAAvB","sourcesContent":["export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}