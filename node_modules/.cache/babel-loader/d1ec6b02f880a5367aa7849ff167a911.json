{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Exports_1 = require(\"../../common.browser/Exports\");\n\nvar Contracts_1 = require(\"../Contracts\");\n\nvar Exports_2 = require(\"../Exports\");\n\nvar AudioFileWriter_1 = require(\"./AudioFileWriter\");\n\nvar AudioInputStream_1 = require(\"./AudioInputStream\");\n\nvar AudioOutputStream_1 = require(\"./AudioOutputStream\");\n/**\n * Represents audio input configuration used for specifying what type of input to use (microphone, file, stream).\n * @class AudioConfig\n * Updated in version 1.11.0\n */\n\n\nvar AudioConfig =\n/** @class */\nfunction () {\n  function AudioConfig() {}\n  /**\n   * Creates an AudioConfig object representing the default microphone on the system.\n   * @member AudioConfig.fromDefaultMicrophoneInput\n   * @function\n   * @public\n   * @returns {AudioConfig} The audio input configuration being created.\n   */\n\n\n  AudioConfig.fromDefaultMicrophoneInput = function () {\n    var pcmRecorder = new Exports_1.PcmRecorder();\n    return new AudioConfigImpl(new Exports_1.MicAudioSource(pcmRecorder));\n  };\n  /**\n   * Creates an AudioConfig object representing a microphone with the specified device ID.\n   * @member AudioConfig.fromMicrophoneInput\n   * @function\n   * @public\n   * @param {string | undefined} deviceId - Specifies the device ID of the microphone to be used.\n   *        Default microphone is used the value is omitted.\n   * @returns {AudioConfig} The audio input configuration being created.\n   */\n\n\n  AudioConfig.fromMicrophoneInput = function (deviceId) {\n    var pcmRecorder = new Exports_1.PcmRecorder();\n    return new AudioConfigImpl(new Exports_1.MicAudioSource(pcmRecorder, deviceId));\n  };\n  /**\n   * Creates an AudioConfig object representing the specified file.\n   * @member AudioConfig.fromWavFileInput\n   * @function\n   * @public\n   * @param {File} fileName - Specifies the audio input file. Currently, only WAV / PCM is supported.\n   * @returns {AudioConfig} The audio input configuration being created.\n   */\n\n\n  AudioConfig.fromWavFileInput = function (file) {\n    return new AudioConfigImpl(new Exports_1.FileAudioSource(file));\n  };\n  /**\n   * Creates an AudioConfig object representing the specified stream.\n   * @member AudioConfig.fromStreamInput\n   * @function\n   * @public\n   * @param {AudioInputStream | PullAudioInputStreamCallback} audioStream - Specifies the custom audio input\n   *        stream. Currently, only WAV / PCM is supported.\n   * @returns {AudioConfig} The audio input configuration being created.\n   */\n\n\n  AudioConfig.fromStreamInput = function (audioStream) {\n    if (audioStream instanceof Exports_2.PullAudioInputStreamCallback) {\n      return new AudioConfigImpl(new AudioInputStream_1.PullAudioInputStreamImpl(audioStream));\n    }\n\n    if (audioStream instanceof Exports_2.AudioInputStream) {\n      return new AudioConfigImpl(audioStream);\n    }\n\n    throw new Error(\"Not Supported Type\");\n  };\n  /**\n   * Creates an AudioConfig object representing the default speaker.\n   * @member AudioConfig.fromDefaultSpeakerOutput\n   * @function\n   * @public\n   * @returns {AudioConfig} The audio output configuration being created.\n   * Added in version 1.11.0\n   */\n\n\n  AudioConfig.fromDefaultSpeakerOutput = function () {\n    return new AudioOutputConfigImpl(new Exports_2.SpeakerAudioDestination());\n  };\n  /**\n   * Creates an AudioConfig object representing the custom IPlayer object.\n   * You can use the IPlayer object to control pause, resume, etc.\n   * @member AudioConfig.fromSpeakerOutput\n   * @function\n   * @public\n   * @param {IPlayer} player - the IPlayer object for playback.\n   * @returns {AudioConfig} The audio output configuration being created.\n   * Added in version 1.12.0\n   */\n\n\n  AudioConfig.fromSpeakerOutput = function (player) {\n    if (player === undefined) {\n      return AudioConfig.fromDefaultSpeakerOutput();\n    }\n\n    if (player instanceof Exports_2.SpeakerAudioDestination) {\n      return new AudioOutputConfigImpl(player);\n    }\n\n    throw new Error(\"Not Supported Type\");\n  };\n  /**\n   * Creates an AudioConfig object representing a specified output audio file\n   * @member AudioConfig.fromAudioFileOutput\n   * @function\n   * @public\n   * @param {PathLike} filename - the filename of the output audio file\n   * @returns {AudioConfig} The audio output configuration being created.\n   * Added in version 1.11.0\n   */\n\n\n  AudioConfig.fromAudioFileOutput = function (filename) {\n    return new AudioOutputConfigImpl(new AudioFileWriter_1.AudioFileWriter(filename));\n  };\n  /**\n   * Creates an AudioConfig object representing a specified audio output stream\n   * @member AudioConfig.fromStreamOutput\n   * @function\n   * @public\n   * @param {AudioOutputStream | PushAudioOutputStreamCallback} audioStream - Specifies the custom audio output\n   *        stream.\n   * @returns {AudioConfig} The audio output configuration being created.\n   * Added in version 1.11.0\n   */\n\n\n  AudioConfig.fromStreamOutput = function (audioStream) {\n    if (audioStream instanceof Exports_2.PushAudioOutputStreamCallback) {\n      return new AudioOutputConfigImpl(new AudioOutputStream_1.PushAudioOutputStreamImpl(audioStream));\n    }\n\n    if (audioStream instanceof Exports_2.PushAudioOutputStream) {\n      return new AudioOutputConfigImpl(audioStream);\n    }\n\n    if (audioStream instanceof Exports_2.PullAudioOutputStream) {\n      return new AudioOutputConfigImpl(audioStream);\n    }\n\n    throw new Error(\"Not Supported Type\");\n  };\n\n  return AudioConfig;\n}();\n\nexports.AudioConfig = AudioConfig;\n/**\n * Represents audio input stream used for custom audio input configurations.\n * @private\n * @class AudioConfigImpl\n */\n// tslint:disable-next-line:max-classes-per-file\n\nvar AudioConfigImpl =\n/** @class */\nfunction (_super) {\n  __extends(AudioConfigImpl, _super);\n  /**\n   * Creates and initializes an instance of this class.\n   * @constructor\n   * @param {IAudioSource} source - An audio source.\n   */\n\n\n  function AudioConfigImpl(source) {\n    var _this = _super.call(this) || this;\n\n    _this.privSource = source;\n    return _this;\n  }\n\n  Object.defineProperty(AudioConfigImpl.prototype, \"format\", {\n    /**\n     * Format information for the audio\n     */\n    get: function get() {\n      return this.privSource.format;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @member AudioConfigImpl.prototype.close\n   * @function\n   * @public\n   */\n\n  AudioConfigImpl.prototype.close = function () {\n    this.privSource.turnOff();\n  };\n  /**\n   * @member AudioConfigImpl.prototype.id\n   * @function\n   * @public\n   */\n\n\n  AudioConfigImpl.prototype.id = function () {\n    return this.privSource.id();\n  };\n\n  Object.defineProperty(AudioConfigImpl.prototype, \"blob\", {\n    /**\n     * @member AudioConfigImpl.prototype.blob\n     * @function\n     * @public\n     */\n    get: function get() {\n      return this.privSource.blob;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @member AudioConfigImpl.prototype.turnOn\n   * @function\n   * @public\n   * @returns {Promise<boolean>} A promise.\n   */\n\n  AudioConfigImpl.prototype.turnOn = function () {\n    return this.privSource.turnOn();\n  };\n  /**\n   * @member AudioConfigImpl.prototype.attach\n   * @function\n   * @public\n   * @param {string} audioNodeId - The audio node id.\n   * @returns {Promise<IAudioStreamNode>} A promise.\n   */\n\n\n  AudioConfigImpl.prototype.attach = function (audioNodeId) {\n    return this.privSource.attach(audioNodeId);\n  };\n  /**\n   * @member AudioConfigImpl.prototype.detach\n   * @function\n   * @public\n   * @param {string} audioNodeId - The audio node id.\n   */\n\n\n  AudioConfigImpl.prototype.detach = function (audioNodeId) {\n    return this.privSource.detach(audioNodeId);\n  };\n  /**\n   * @member AudioConfigImpl.prototype.turnOff\n   * @function\n   * @public\n   * @returns {Promise<boolean>} A promise.\n   */\n\n\n  AudioConfigImpl.prototype.turnOff = function () {\n    return this.privSource.turnOff();\n  };\n\n  Object.defineProperty(AudioConfigImpl.prototype, \"events\", {\n    /**\n     * @member AudioConfigImpl.prototype.events\n     * @function\n     * @public\n     * @returns {EventSource<AudioSourceEvent>} An event source for audio events.\n     */\n    get: function get() {\n      return this.privSource.events;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  AudioConfigImpl.prototype.setProperty = function (name, value) {\n    Contracts_1.Contracts.throwIfNull(value, \"value\");\n\n    if (undefined !== this.privSource.setProperty) {\n      this.privSource.setProperty(name, value);\n    } else {\n      throw new Error(\"This AudioConfig instance does not support setting properties.\");\n    }\n  };\n\n  AudioConfigImpl.prototype.getProperty = function (name, def) {\n    if (undefined !== this.privSource.getProperty) {\n      return this.privSource.getProperty(name, def);\n    } else {\n      throw new Error(\"This AudioConfig instance does not support getting properties.\");\n    }\n\n    return def;\n  };\n\n  Object.defineProperty(AudioConfigImpl.prototype, \"deviceInfo\", {\n    get: function get() {\n      return this.privSource.deviceInfo;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return AudioConfigImpl;\n}(AudioConfig);\n\nexports.AudioConfigImpl = AudioConfigImpl; // tslint:disable-next-line:max-classes-per-file\n\nvar AudioOutputConfigImpl =\n/** @class */\nfunction (_super) {\n  __extends(AudioOutputConfigImpl, _super);\n  /**\n   * Creates and initializes an instance of this class.\n   * @constructor\n   * @param {IAudioDestination} destination - An audio destination.\n   */\n\n\n  function AudioOutputConfigImpl(destination) {\n    var _this = _super.call(this) || this;\n\n    _this.privDestination = destination;\n    return _this;\n  }\n\n  Object.defineProperty(AudioOutputConfigImpl.prototype, \"format\", {\n    set: function set(format) {\n      this.privDestination.format = format;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  AudioOutputConfigImpl.prototype.write = function (buffer) {\n    this.privDestination.write(buffer);\n  };\n\n  AudioOutputConfigImpl.prototype.close = function () {\n    this.privDestination.close();\n  };\n\n  AudioOutputConfigImpl.prototype.id = function () {\n    return this.privDestination.id();\n  };\n\n  AudioOutputConfigImpl.prototype.setProperty = function (name, value) {\n    throw new Error(\"This AudioConfig instance does not support setting properties.\");\n  };\n\n  AudioOutputConfigImpl.prototype.getProperty = function (name, def) {\n    throw new Error(\"This AudioConfig instance does not support getting properties.\");\n  };\n\n  return AudioOutputConfigImpl;\n}(AudioConfig);\n\nexports.AudioOutputConfigImpl = AudioOutputConfigImpl;","map":{"version":3,"sources":["src/sdk/Audio/AudioConfig.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PathLike } from \"fs\";\r\nimport {\r\n    FileAudioSource,\r\n    MicAudioSource,\r\n    PcmRecorder,\r\n} from \"../../common.browser/Exports\";\r\nimport { ISpeechConfigAudioDevice } from \"../../common.speech/Exports\";\r\nimport {\r\n    AudioSourceEvent,\r\n    Deferred,\r\n    EventSource,\r\n    IAudioDestination,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    Promise\r\n} from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    AudioInputStream,\r\n    AudioOutputStream,\r\n    AudioStreamFormat,\r\n    IPlayer,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    PullAudioInputStreamCallback,\r\n    PullAudioOutputStream,\r\n    PushAudioOutputStream,\r\n    PushAudioOutputStreamCallback,\r\n    SpeakerAudioDestination\r\n} from \"../Exports\";\r\nimport { AudioFileWriter } from \"./AudioFileWriter\";\r\nimport { PullAudioInputStreamImpl, PushAudioInputStreamImpl } from \"./AudioInputStream\";\r\nimport { PullAudioOutputStreamImpl, PushAudioOutputStreamImpl } from \"./AudioOutputStream\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\r\n\r\n/**\r\n * Represents audio input configuration used for specifying what type of input to use (microphone, file, stream).\r\n * @class AudioConfig\r\n * Updated in version 1.11.0\r\n */\r\nexport abstract class AudioConfig {\r\n    /**\r\n     * Creates an AudioConfig object representing the default microphone on the system.\r\n     * @member AudioConfig.fromDefaultMicrophoneInput\r\n     * @function\r\n     * @public\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromDefaultMicrophoneInput(): AudioConfig {\r\n        const pcmRecorder = new PcmRecorder();\r\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a microphone with the specified device ID.\r\n     * @member AudioConfig.fromMicrophoneInput\r\n     * @function\r\n     * @public\r\n     * @param {string | undefined} deviceId - Specifies the device ID of the microphone to be used.\r\n     *        Default microphone is used the value is omitted.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromMicrophoneInput(deviceId?: string): AudioConfig {\r\n        const pcmRecorder = new PcmRecorder();\r\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder, deviceId));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the specified file.\r\n     * @member AudioConfig.fromWavFileInput\r\n     * @function\r\n     * @public\r\n     * @param {File} fileName - Specifies the audio input file. Currently, only WAV / PCM is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromWavFileInput(file: File): AudioConfig {\r\n        return new AudioConfigImpl(new FileAudioSource(file));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the specified stream.\r\n     * @member AudioConfig.fromStreamInput\r\n     * @function\r\n     * @public\r\n     * @param {AudioInputStream | PullAudioInputStreamCallback} audioStream - Specifies the custom audio input\r\n     *        stream. Currently, only WAV / PCM is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromStreamInput(audioStream: AudioInputStream | PullAudioInputStreamCallback): AudioConfig {\r\n        if (audioStream instanceof PullAudioInputStreamCallback) {\r\n            return new AudioConfigImpl(new PullAudioInputStreamImpl(audioStream as PullAudioInputStreamCallback));\r\n        }\r\n\r\n        if (audioStream instanceof AudioInputStream) {\r\n            return new AudioConfigImpl(audioStream as PushAudioInputStreamImpl);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the default speaker.\r\n     * @member AudioConfig.fromDefaultSpeakerOutput\r\n     * @function\r\n     * @public\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromDefaultSpeakerOutput(): AudioConfig {\r\n        return new AudioOutputConfigImpl(new SpeakerAudioDestination());\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the custom IPlayer object.\r\n     * You can use the IPlayer object to control pause, resume, etc.\r\n     * @member AudioConfig.fromSpeakerOutput\r\n     * @function\r\n     * @public\r\n     * @param {IPlayer} player - the IPlayer object for playback.\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.12.0\r\n     */\r\n    public static fromSpeakerOutput(player?: IPlayer): AudioConfig {\r\n        if (player === undefined) {\r\n            return AudioConfig.fromDefaultSpeakerOutput();\r\n        }\r\n        if (player instanceof SpeakerAudioDestination) {\r\n            return new AudioOutputConfigImpl(player as SpeakerAudioDestination);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a specified output audio file\r\n     * @member AudioConfig.fromAudioFileOutput\r\n     * @function\r\n     * @public\r\n     * @param {PathLike} filename - the filename of the output audio file\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromAudioFileOutput(filename: PathLike): AudioConfig {\r\n        return new AudioOutputConfigImpl(new AudioFileWriter(filename));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a specified audio output stream\r\n     * @member AudioConfig.fromStreamOutput\r\n     * @function\r\n     * @public\r\n     * @param {AudioOutputStream | PushAudioOutputStreamCallback} audioStream - Specifies the custom audio output\r\n     *        stream.\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromStreamOutput(audioStream: AudioOutputStream | PushAudioOutputStreamCallback): AudioConfig {\r\n        if (audioStream instanceof PushAudioOutputStreamCallback) {\r\n            return new AudioOutputConfigImpl(new PushAudioOutputStreamImpl(audioStream as PushAudioOutputStreamCallback));\r\n        }\r\n\r\n        if (audioStream instanceof PushAudioOutputStream) {\r\n            return new AudioOutputConfigImpl(audioStream as PushAudioOutputStreamImpl);\r\n        }\r\n\r\n        if (audioStream instanceof PullAudioOutputStream) {\r\n            return new AudioOutputConfigImpl(audioStream as PullAudioOutputStreamImpl);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member SpeechConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member SpeechConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string, def?: string): string;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class AudioConfigImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioConfigImpl extends AudioConfig implements IAudioSource {\r\n    private privSource: IAudioSource;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {IAudioSource} source - An audio source.\r\n     */\r\n    public constructor(source: IAudioSource) {\r\n        super();\r\n        this.privSource = source;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return this.privSource.format;\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privSource.turnOff();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.id\r\n     * @function\r\n     * @public\r\n     */\r\n    public id(): string {\r\n        return this.privSource.id();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.blob\r\n     * @function\r\n     * @public\r\n     */\r\n    public get blob(): Promise<Blob | Buffer> {\r\n        return this.privSource.blob;\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.turnOn\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<boolean>} A promise.\r\n     */\r\n    public turnOn(): Promise<boolean> {\r\n        return this.privSource.turnOn();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.attach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     * @returns {Promise<IAudioStreamNode>} A promise.\r\n     */\r\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        return this.privSource.attach(audioNodeId);\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.detach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     */\r\n    public detach(audioNodeId: string): void {\r\n        return this.privSource.detach(audioNodeId);\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.turnOff\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<boolean>} A promise.\r\n     */\r\n    public turnOff(): Promise<boolean> {\r\n        return this.privSource.turnOff();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.events\r\n     * @function\r\n     * @public\r\n     * @returns {EventSource<AudioSourceEvent>} An event source for audio events.\r\n     */\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privSource.events;\r\n    }\r\n\r\n    public setProperty(name: string, value: string): void {\r\n        Contracts.throwIfNull(value, \"value\");\r\n\r\n        if (undefined !== this.privSource.setProperty) {\r\n            this.privSource.setProperty(name, value);\r\n        } else {\r\n            throw new Error(\"This AudioConfig instance does not support setting properties.\");\r\n        }\r\n\r\n    }\r\n\r\n    public getProperty(name: string, def?: string): string {\r\n        if (undefined !== this.privSource.getProperty) {\r\n            return this.privSource.getProperty(name, def);\r\n        } else {\r\n            throw new Error(\"This AudioConfig instance does not support getting properties.\");\r\n        }\r\n\r\n        return def;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.privSource.deviceInfo;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioOutputConfigImpl extends AudioConfig implements IAudioDestination {\r\n    private privDestination: IAudioDestination;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {IAudioDestination} destination - An audio destination.\r\n     */\r\n    public constructor(destination: IAudioDestination) {\r\n        super();\r\n        this.privDestination = destination;\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        this.privDestination.format = format;\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        this.privDestination.write(buffer);\r\n    }\r\n\r\n    public close(): void {\r\n        this.privDestination.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privDestination.id();\r\n    }\r\n\r\n    public setProperty(name: string, value: string): void {\r\n        throw new Error(\"This AudioConfig instance does not support setting properties.\");\r\n    }\r\n\r\n    public getProperty(name: string, def?: string): string {\r\n        throw new Error(\"This AudioConfig instance does not support getting properties.\");\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}