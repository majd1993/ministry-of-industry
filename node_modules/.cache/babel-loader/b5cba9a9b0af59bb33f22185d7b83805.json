{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = stopSpeakingActivityOnInputSaga;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _effects = require(\"redux-saga/effects\");\n\nvar _postActivity = require(\"../actions/postActivity\");\n\nvar _setSendBox = require(\"../actions/setSendBox\");\n\nvar _stopSpeakingActivity = _interopRequireDefault(require(\"../actions/stopSpeakingActivity\"));\n\nvar _whileConnected = _interopRequireDefault(require(\"./effects/whileConnected\"));\n\nvar _marked = /*#__PURE__*/_regenerator[\"default\"].mark(stopSpeakingActivityOnInput),\n    _marked2 = /*#__PURE__*/_regenerator[\"default\"].mark(stopSpeakingActivityOnInputSaga);\n\nfunction stopSpeakingActivityOnInput() {\n  return _regenerator[\"default\"].wrap(function stopSpeakingActivityOnInput$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return (0, _effects.takeEvery)(function (_ref) {\n            var meta = _ref.meta,\n                payload = _ref.payload,\n                type = _ref.type;\n            return type === _setSendBox.SET_SEND_BOX && payload.text || // We want to stop speaking activity when the user click on a card action\n            // But currently there are no actions generated out of a card action\n            // So, right now, we are using best-effort by listening to POST_ACTIVITY_PENDING with a \"message\" event\n            // We filter out speech because we will call startSpeakingActivity() for POST_ACTIVITY_PENDING dispatched by speech\n            type === _postActivity.POST_ACTIVITY_PENDING && meta.method !== 'speech' && payload.activity.type === 'message';\n          }, /*#__PURE__*/_regenerator[\"default\"].mark(function _callee() {\n            return _regenerator[\"default\"].wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.next = 2;\n                    return (0, _effects.put)((0, _stopSpeakingActivity[\"default\"])());\n\n                  case 2:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction stopSpeakingActivityOnInputSaga() {\n  return _regenerator[\"default\"].wrap(function stopSpeakingActivityOnInputSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return (0, _whileConnected[\"default\"])(stopSpeakingActivityOnInput);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["../../src/sagas/stopSpeakingActivityOnInputSaga.js"],"names":["stopSpeakingActivityOnInput","meta","payload","type","SET_SEND_BOX","POST_ACTIVITY_PENDING","stopSpeakingActivityOnInputSaga"],"mappings":";;;;;;;;;;;AAAA,IAAA,QAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAEA,IAAA,aAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AACA,IAAA,qBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,iCAAA,CAAA,CAAA;;AACA,IAAA,eAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,0BAAA,CAAA,CAAA;;wDAEUA,2B;yDAeeM,+B;;AAfzB,SAAA,2BAAA,GAAA;AAAA,SAAA,YAAA,CAAA,SAAA,CAAA,CAAA,IAAA,CAAA,SAAA,4BAAA,CAAA,SAAA,EAAA;AAAA,WAAA,CAAA,EAAA;AAAA,cAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,aAAA,CAAA;AAAA,UAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AACE,iBAAM,CAAA,GAAA,QAAA,CAAA,SAAA,EACJ,UAAA,IAAA,EAAA;AAAA,gBAAGL,IAAH,GAAA,IAAA,CAAA,IAAA;AAAA,gBAASC,OAAT,GAAA,IAAA,CAAA,OAAA;AAAA,gBAAkBC,IAAlB,GAAA,IAAA,CAAA,IAAA;AAAA,mBACGA,IAAI,KAAKC,WAAAA,CAATD,YAAAA,IAAyBD,OAAO,CAAjC,IAACC,IACD;AACA;AACA;AACA;AACCA,YAAAA,IAAI,KAAKE,aAAAA,CAATF,qBAAAA,IAAkCF,IAAI,CAAJA,MAAAA,KAAlCE,QAAAA,IAA8DD,OAAO,CAAPA,QAAAA,CAAAA,IAAAA,KANjE,SAAA;AADI,WAAA,EAAA,aAAA,YAAA,CAAA,SAAA,CAAA,CAAA,IAAA,CAQJ,SAAA,OAAA,GAAA;AAAA,mBAAA,YAAA,CAAA,SAAA,CAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,qBAAA,CAAA,EAAA;AAAA,wBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,uBAAA,CAAA;AAAA,oBAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AACE,2BAAM,CAAA,GAAA,QAAA,CAAA,GAAA,EAAI,CAAA,GAAA,qBAAA,CAAV,SAAU,CAAA,GAAJ,CAAN;;AADF,uBAAA,CAAA;AAAA,uBAAA,KAAA;AAAA,2BAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,aAAA,EAAA,OAAA,CAAA;AARF,WAAM,CAAA,CAAN;;AADF,aAAA,CAAA;AAAA,aAAA,KAAA;AAAA,iBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,GAAA,EAAA,OAAA,CAAA;AAAA;;AAee,SAAA,+BAAA,GAAA;AAAA,SAAA,YAAA,CAAA,SAAA,CAAA,CAAA,IAAA,CAAA,SAAA,gCAAA,CAAA,SAAA,EAAA;AAAA,WAAA,CAAA,EAAA;AAAA,cAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,aAAA,CAAA;AAAA,UAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AACb,iBAAM,CAAA,GAAA,eAAA,CAAA,SAAA,CAAA,EAAN,2BAAM,CAAN;;AADa,aAAA,CAAA;AAAA,aAAA,KAAA;AAAA,iBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,GAAA,EAAA,QAAA,CAAA;AAAA","sourcesContent":["import { put, takeEvery } from 'redux-saga/effects';\n\nimport { POST_ACTIVITY_PENDING } from '../actions/postActivity';\nimport { SET_SEND_BOX } from '../actions/setSendBox';\nimport stopSpeakingActivity from '../actions/stopSpeakingActivity';\nimport whileConnected from './effects/whileConnected';\n\nfunction* stopSpeakingActivityOnInput() {\n  yield takeEvery(\n    ({ meta, payload, type }) =>\n      (type === SET_SEND_BOX && payload.text) ||\n      // We want to stop speaking activity when the user click on a card action\n      // But currently there are no actions generated out of a card action\n      // So, right now, we are using best-effort by listening to POST_ACTIVITY_PENDING with a \"message\" event\n      // We filter out speech because we will call startSpeakingActivity() for POST_ACTIVITY_PENDING dispatched by speech\n      (type === POST_ACTIVITY_PENDING && meta.method !== 'speech' && payload.activity.type === 'message'),\n    function*() {\n      yield put(stopSpeakingActivity());\n    }\n  );\n}\n\nexport default function* stopSpeakingActivityOnInputSaga() {\n  yield whileConnected(stopSpeakingActivityOnInput);\n}\n"],"sourceRoot":"core:///"},"metadata":{},"sourceType":"script"}