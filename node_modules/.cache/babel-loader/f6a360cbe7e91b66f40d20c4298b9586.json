{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = sendMessageToPostActivitySaga;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _effects = require(\"redux-saga/effects\");\n\nvar _sendMessage = require(\"../actions/sendMessage\");\n\nvar _postActivity = _interopRequireDefault(require(\"../actions/postActivity\"));\n\nvar _whileConnected = _interopRequireDefault(require(\"./effects/whileConnected\"));\n\nvar _marked = /*#__PURE__*/_regenerator[\"default\"].mark(postActivityWithMessage),\n    _marked2 = /*#__PURE__*/_regenerator[\"default\"].mark(sendMessageToPostActivity),\n    _marked3 = /*#__PURE__*/_regenerator[\"default\"].mark(sendMessageToPostActivitySaga);\n\nfunction postActivityWithMessage(_ref) {\n  var _ref$payload, channelData, method, text;\n\n  return _regenerator[\"default\"].wrap(function postActivityWithMessage$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _ref$payload = _ref.payload, channelData = _ref$payload.channelData, method = _ref$payload.method, text = _ref$payload.text;\n          _context.next = 3;\n          return (0, _effects.put)((0, _postActivity[\"default\"])({\n            channelData: channelData,\n            text: text,\n            textFormat: 'plain',\n            type: 'message'\n          }, method));\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction sendMessageToPostActivity() {\n  return _regenerator[\"default\"].wrap(function sendMessageToPostActivity$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return (0, _effects.takeEvery)(function (_ref2) {\n            var payload = _ref2.payload,\n                type = _ref2.type;\n            return type === _sendMessage.SEND_MESSAGE && payload.text;\n          }, postActivityWithMessage);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction sendMessageToPostActivitySaga() {\n  return _regenerator[\"default\"].wrap(function sendMessageToPostActivitySaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return (0, _whileConnected[\"default\"])(sendMessageToPostActivity);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["../../src/sagas/sendMessageToPostActivitySaga.js"],"names":["postActivityWithMessage","channelData","method","text","textFormat","type","sendMessageToPostActivity","payload","SEND_MESSAGE","sendMessageToPostActivitySaga"],"mappings":";;;;;;;;;;;AAAA,IAAA,QAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAEA,IAAA,YAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AACA,IAAA,aAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,yBAAA,CAAA,CAAA;;AACA,IAAA,eAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,0BAAA,CAAA,CAAA;;wDAEUA,uB;yDAcAM,yB;yDAIeG,6B;;AAlBzB,SAAA,uBAAA,CAAA,IAAA,EAAA;AAAA,MAAA,YAAA,EAAA,WAAA,EAAA,MAAA,EAAA,IAAA;;AAAA,SAAA,YAAA,CAAA,SAAA,CAAA,CAAA,IAAA,CAAA,SAAA,wBAAA,CAAA,QAAA,EAAA;AAAA,WAAA,CAAA,EAAA;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,aAAA,CAAA;AAAA,UAAA,YAAA,GAAA,IAAA,CAAA,OAAA,EAA+CR,WAA/C,GAAA,YAAA,CAAA,WAAA,EAA4DC,MAA5D,GAAA,YAAA,CAAA,MAAA,EAAoEC,IAApE,GAAA,YAAA,CAAA,IAAA;AAAA,UAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AACE,iBAAM,CAAA,GAAA,QAAA,CAAA,GAAA,EACJ,CAAA,GAAA,aAAA,CAAA,SAAA,CAAA,EACE;AACEF,YAAAA,WAAW,EADb,WAAA;AAEEE,YAAAA,IAAI,EAFN,IAAA;AAGEC,YAAAA,UAAU,EAHZ,OAAA;AAIEC,YAAAA,IAAI,EAAE;AAJR,WADF,EADF,MACE,CADI,CAAN;;AADF,aAAA,CAAA;AAAA,aAAA,KAAA;AAAA,iBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,GAAA,EAAA,OAAA,CAAA;AAAA;;AAcA,SAAA,yBAAA,GAAA;AAAA,SAAA,YAAA,CAAA,SAAA,CAAA,CAAA,IAAA,CAAA,SAAA,0BAAA,CAAA,SAAA,EAAA;AAAA,WAAA,CAAA,EAAA;AAAA,cAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,aAAA,CAAA;AAAA,UAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AACE,iBAAM,CAAA,GAAA,QAAA,CAAA,SAAA,EAAU,UAAA,KAAA,EAAA;AAAA,gBAAGE,OAAH,GAAA,KAAA,CAAA,OAAA;AAAA,gBAAYF,IAAZ,GAAA,KAAA,CAAA,IAAA;AAAA,mBAAuBA,IAAI,KAAKG,YAAAA,CAATH,YAAAA,IAAyBE,OAAO,CAAvD,IAAA;AAAV,WAAA,EAAN,uBAAM,CAAN;;AADF,aAAA,CAAA;AAAA,aAAA,KAAA;AAAA,iBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,GAAA,EAAA,QAAA,CAAA;AAAA;;AAIe,SAAA,6BAAA,GAAA;AAAA,SAAA,YAAA,CAAA,SAAA,CAAA,CAAA,IAAA,CAAA,SAAA,8BAAA,CAAA,SAAA,EAAA;AAAA,WAAA,CAAA,EAAA;AAAA,cAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,aAAA,CAAA;AAAA,UAAA,SAAA,CAAA,IAAA,GAAA,CAAA;AACb,iBAAM,CAAA,GAAA,eAAA,CAAA,SAAA,CAAA,EAAN,yBAAM,CAAN;;AADa,aAAA,CAAA;AAAA,aAAA,KAAA;AAAA,iBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,GAAA,EAAA,QAAA,CAAA;AAAA","sourcesContent":["import { put, takeEvery } from 'redux-saga/effects';\n\nimport { SEND_MESSAGE } from '../actions/sendMessage';\nimport postActivity from '../actions/postActivity';\nimport whileConnected from './effects/whileConnected';\n\nfunction* postActivityWithMessage({ payload: { channelData, method, text } }) {\n  yield put(\n    postActivity(\n      {\n        channelData,\n        text,\n        textFormat: 'plain',\n        type: 'message'\n      },\n      method\n    )\n  );\n}\n\nfunction* sendMessageToPostActivity() {\n  yield takeEvery(({ payload, type }) => type === SEND_MESSAGE && payload.text, postActivityWithMessage);\n}\n\nexport default function* sendMessageToPostActivitySaga() {\n  yield whileConnected(sendMessageToPostActivity);\n}\n"],"sourceRoot":"core:///"},"metadata":{},"sourceType":"script"}