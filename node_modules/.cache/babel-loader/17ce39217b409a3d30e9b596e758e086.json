{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = postActivitySaga;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _effects = require(\"redux-saga/effects\");\n\nvar _observeOnce = _interopRequireDefault(require(\"./effects/observeOnce\"));\n\nvar _whileConnected = _interopRequireDefault(require(\"./effects/whileConnected\"));\n\nvar _clockSkewAdjustment = _interopRequireDefault(require(\"../selectors/clockSkewAdjustment\"));\n\nvar _combineSelectors = _interopRequireDefault(require(\"../selectors/combineSelectors\"));\n\nvar _language = _interopRequireDefault(require(\"../selectors/language\"));\n\nvar _sendTimeout = _interopRequireDefault(require(\"../selectors/sendTimeout\"));\n\nvar _deleteKey = _interopRequireDefault(require(\"../utils/deleteKey\"));\n\nvar _sleep = _interopRequireDefault(require(\"../utils/sleep\"));\n\nvar _uniqueID = _interopRequireDefault(require(\"../utils/uniqueID\"));\n\nvar _postActivity = require(\"../actions/postActivity\");\n\nvar _incomingActivity = require(\"../actions/incomingActivity\");\n\nvar _marked = /*#__PURE__*/_regenerator[\"default\"].mark(postActivity),\n    _marked2 = /*#__PURE__*/_regenerator[\"default\"].mark(postActivitySaga);\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction getTimestamp() {\n  var clockSkewAdjustment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return new Date(Date.now() + clockSkewAdjustment).toISOString();\n}\n\nfunction postActivity(directLine, userID, username, numActivitiesPosted, _ref) {\n  var method, activity, _yield$select, clockSkewAdjustment, locale, _activity, attachments, clientActivityID, meta, echoBackCall, sendTimeout, _yield$race, echoBack;\n\n  return _regenerator[\"default\"].wrap(function postActivity$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          method = _ref.meta.method, activity = _ref.payload.activity;\n          _context2.next = 3;\n          return (0, _effects.select)((0, _combineSelectors[\"default\"])({\n            clockSkewAdjustment: _clockSkewAdjustment[\"default\"],\n            locale: _language[\"default\"]\n          }));\n\n        case 3:\n          _yield$select = _context2.sent;\n          clockSkewAdjustment = _yield$select.clockSkewAdjustment;\n          locale = _yield$select.locale;\n          _activity = activity, attachments = _activity.attachments;\n          clientActivityID = (0, _uniqueID[\"default\"])();\n          activity = _objectSpread(_objectSpread({}, (0, _deleteKey[\"default\"])(activity, 'id')), {}, {\n            attachments: attachments && attachments.map(function (_ref2) {\n              var contentType = _ref2.contentType,\n                  contentUrl = _ref2.contentUrl,\n                  name = _ref2.name,\n                  thumbnailUrl = _ref2.thumbnailUrl;\n              return {\n                contentType: contentType,\n                contentUrl: contentUrl,\n                name: name,\n                thumbnailUrl: thumbnailUrl\n              };\n            }),\n            channelData: _objectSpread(_objectSpread({}, (0, _deleteKey[\"default\"])(activity.channelData, 'state')), {}, {\n              clientActivityID: clientActivityID,\n              // This is unskewed local timestamp for estimating clock skew.\n              clientTimestamp: getTimestamp()\n            }),\n            channelId: 'webchat',\n            from: {\n              id: userID,\n              name: username,\n              role: 'user'\n            },\n            locale: locale,\n            // This timestamp will be replaced by Direct Line Channel in echoback.\n            // We are temporarily adding this timestamp for sorting.\n            timestamp: getTimestamp(clockSkewAdjustment)\n          });\n\n          if (!numActivitiesPosted) {\n            activity.entities = [].concat((0, _toConsumableArray2[\"default\"])(activity.entities || []), [{\n              // TODO: [P4] Currently in v3, we send the capabilities although the client might not actually have them\n              //       We need to understand why we need to send these, and only send capabilities the client have\n              requiresBotState: true,\n              supportsListening: true,\n              supportsTts: true,\n              type: 'ClientCapabilities'\n            }]);\n          }\n\n          meta = {\n            clientActivityID: clientActivityID,\n            method: method\n          };\n          _context2.next = 13;\n          return (0, _effects.put)({\n            type: _postActivity.POST_ACTIVITY_PENDING,\n            meta: meta,\n            payload: {\n              activity: activity\n            }\n          });\n\n        case 13:\n          _context2.prev = 13; // Quirks: We might receive INCOMING_ACTIVITY before the postActivity call completed\n          //         So, we setup expectation first, then postActivity afterward\n\n          echoBackCall = (0, _effects.call)( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee() {\n            var _yield$take, _activity2, _activity2$channelDat, channelData, id;\n\n            return _regenerator[\"default\"].wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.next = 2;\n                    return (0, _effects.take)(_incomingActivity.INCOMING_ACTIVITY);\n\n                  case 2:\n                    _yield$take = _context.sent;\n                    _activity2 = _yield$take.payload.activity;\n                    _activity2$channelDat = _activity2.channelData, channelData = _activity2$channelDat === void 0 ? {} : _activity2$channelDat, id = _activity2.id;\n\n                    if (!(channelData.clientActivityID === clientActivityID && id)) {\n                      _context.next = 7;\n                      break;\n                    }\n\n                    return _context.abrupt(\"return\", _activity2);\n\n                  case 7:\n                    _context.next = 0;\n                    break;\n\n                  case 9:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          })); // Timeout could be due to either:\n          // - Post activity call may take too long time to complete\n          //   - Direct Line service only respond on HTTP after bot respond to Direct Line\n          // - Activity may take too long time to echo back\n\n          _context2.next = 17;\n          return (0, _effects.select)(_sendTimeout[\"default\"]);\n\n        case 17:\n          sendTimeout = _context2.sent;\n          _context2.next = 20;\n          return (0, _effects.race)({\n            send: (0, _effects.all)({\n              echoBack: echoBackCall,\n              postActivity: (0, _observeOnce[\"default\"])(directLine.postActivity(activity))\n            }),\n            timeout: (0, _effects.call)(function () {\n              return (0, _sleep[\"default\"])(sendTimeout).then(function () {\n                return Promise.reject(new Error('timeout'));\n              });\n            })\n          });\n\n        case 20:\n          _yield$race = _context2.sent;\n          echoBack = _yield$race.send.echoBack;\n          _context2.next = 24;\n          return (0, _effects.put)({\n            type: _postActivity.POST_ACTIVITY_FULFILLED,\n            meta: meta,\n            payload: {\n              activity: echoBack\n            }\n          });\n\n        case 24:\n          _context2.next = 31;\n          break;\n\n        case 26:\n          _context2.prev = 26;\n          _context2.t0 = _context2[\"catch\"](13);\n          console.error('botframework-webchat: Failed to post activity to chat adapter.', _context2.t0);\n          _context2.next = 31;\n          return (0, _effects.put)({\n            type: _postActivity.POST_ACTIVITY_REJECTED,\n            error: true,\n            meta: meta,\n            payload: _context2.t0\n          });\n\n        case 31:\n          _context2.prev = 31;\n          _context2.next = 34;\n          return (0, _effects.cancelled)();\n\n        case 34:\n          if (!_context2.sent) {\n            _context2.next = 37;\n            break;\n          }\n\n          _context2.next = 37;\n          return (0, _effects.put)({\n            type: _postActivity.POST_ACTIVITY_REJECTED,\n            error: true,\n            meta: meta,\n            payload: new Error('cancelled')\n          });\n\n        case 37:\n          return _context2.finish(31);\n\n        case 38:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked, null, [[13, 26, 31, 38]]);\n}\n\nfunction postActivitySaga() {\n  return _regenerator[\"default\"].wrap(function postActivitySaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return (0, _whileConnected[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function postActivityWhileConnected(_ref3) {\n            var directLine, userID, username, numActivitiesPosted;\n            return _regenerator[\"default\"].wrap(function postActivityWhileConnected$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    directLine = _ref3.directLine, userID = _ref3.userID, username = _ref3.username;\n                    numActivitiesPosted = 0;\n                    _context4.next = 4;\n                    return (0, _effects.takeEvery)(_postActivity.POST_ACTIVITY, /*#__PURE__*/_regenerator[\"default\"].mark(function postActivityWrapper(action) {\n                      return _regenerator[\"default\"].wrap(function postActivityWrapper$(_context3) {\n                        while (1) {\n                          switch (_context3.prev = _context3.next) {\n                            case 0:\n                              return _context3.delegateYield(postActivity(directLine, userID, username, numActivitiesPosted++, action), \"t0\", 1);\n\n                            case 1:\n                            case \"end\":\n                              return _context3.stop();\n                          }\n                        }\n                      }, postActivityWrapper);\n                    }));\n\n                  case 4:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, postActivityWhileConnected);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["../../src/sagas/postActivitySaga.js"],"names":["clockSkewAdjustment","Date","postActivity","method","activity","locale","clockSkewAdjustmentSelector","languageSelector","attachments","clientActivityID","contentType","contentUrl","name","thumbnailUrl","channelData","clientTimestamp","getTimestamp","channelId","from","id","role","timestamp","requiresBotState","supportsListening","supportsTts","type","meta","POST_ACTIVITY_PENDING","payload","echoBackCall","INCOMING_ACTIVITY","sendTimeout","sendTimeoutSelector","echoBack","send","directLine","timeout","Promise","POST_ACTIVITY_FULFILLED","console","POST_ACTIVITY_REJECTED","error","postActivitySaga","userID","username","numActivitiesPosted","POST_ACTIVITY"],"mappings":"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","sourcesContent":["import { all, call, cancelled, put, race, select, take, takeEvery } from 'redux-saga/effects';\n\nimport observeOnce from './effects/observeOnce';\nimport whileConnected from './effects/whileConnected';\n\nimport clockSkewAdjustmentSelector from '../selectors/clockSkewAdjustment';\nimport combineSelectors from '../selectors/combineSelectors';\nimport languageSelector from '../selectors/language';\nimport sendTimeoutSelector from '../selectors/sendTimeout';\n\nimport deleteKey from '../utils/deleteKey';\nimport sleep from '../utils/sleep';\nimport uniqueID from '../utils/uniqueID';\n\nimport {\n  POST_ACTIVITY,\n  POST_ACTIVITY_FULFILLED,\n  POST_ACTIVITY_PENDING,\n  POST_ACTIVITY_REJECTED\n} from '../actions/postActivity';\n\nimport { INCOMING_ACTIVITY } from '../actions/incomingActivity';\n\nfunction getTimestamp(clockSkewAdjustment = 0) {\n  return new Date(Date.now() + clockSkewAdjustment).toISOString();\n}\n\nfunction* postActivity(directLine, userID, username, numActivitiesPosted, { meta: { method }, payload: { activity } }) {\n  const { clockSkewAdjustment, locale } = yield select(\n    combineSelectors({ clockSkewAdjustment: clockSkewAdjustmentSelector, locale: languageSelector })\n  );\n  const { attachments } = activity;\n  const clientActivityID = uniqueID();\n\n  activity = {\n    ...deleteKey(activity, 'id'),\n    attachments:\n      attachments &&\n      attachments.map(({ contentType, contentUrl, name, thumbnailUrl }) => ({\n        contentType,\n        contentUrl,\n        name,\n        thumbnailUrl\n      })),\n    channelData: {\n      ...deleteKey(activity.channelData, 'state'),\n      clientActivityID,\n      // This is unskewed local timestamp for estimating clock skew.\n      clientTimestamp: getTimestamp()\n    },\n    channelId: 'webchat',\n    from: {\n      id: userID,\n      name: username,\n      role: 'user'\n    },\n    locale,\n    // This timestamp will be replaced by Direct Line Channel in echoback.\n    // We are temporarily adding this timestamp for sorting.\n    timestamp: getTimestamp(clockSkewAdjustment)\n  };\n\n  if (!numActivitiesPosted) {\n    activity.entities = [\n      ...(activity.entities || []),\n      {\n        // TODO: [P4] Currently in v3, we send the capabilities although the client might not actually have them\n        //       We need to understand why we need to send these, and only send capabilities the client have\n        requiresBotState: true,\n        supportsListening: true,\n        supportsTts: true,\n        type: 'ClientCapabilities'\n      }\n    ];\n  }\n\n  const meta = { clientActivityID, method };\n\n  yield put({ type: POST_ACTIVITY_PENDING, meta, payload: { activity } });\n\n  try {\n    // Quirks: We might receive INCOMING_ACTIVITY before the postActivity call completed\n    //         So, we setup expectation first, then postActivity afterward\n\n    const echoBackCall = call(function* () {\n      for (;;) {\n        const {\n          payload: { activity }\n        } = yield take(INCOMING_ACTIVITY);\n        const { channelData = {}, id } = activity;\n\n        if (channelData.clientActivityID === clientActivityID && id) {\n          return activity;\n        }\n      }\n    });\n\n    // Timeout could be due to either:\n    // - Post activity call may take too long time to complete\n    //   - Direct Line service only respond on HTTP after bot respond to Direct Line\n    // - Activity may take too long time to echo back\n\n    const sendTimeout = yield select(sendTimeoutSelector);\n\n    const {\n      send: { echoBack }\n    } = yield race({\n      send: all({\n        echoBack: echoBackCall,\n        postActivity: observeOnce(directLine.postActivity(activity))\n      }),\n      timeout: call(() => sleep(sendTimeout).then(() => Promise.reject(new Error('timeout'))))\n    });\n\n    yield put({ type: POST_ACTIVITY_FULFILLED, meta, payload: { activity: echoBack } });\n  } catch (err) {\n    console.error('botframework-webchat: Failed to post activity to chat adapter.', err);\n\n    yield put({ type: POST_ACTIVITY_REJECTED, error: true, meta, payload: err });\n  } finally {\n    if (yield cancelled()) {\n      yield put({ type: POST_ACTIVITY_REJECTED, error: true, meta, payload: new Error('cancelled') });\n    }\n  }\n}\n\nexport default function* postActivitySaga() {\n  yield whileConnected(function* postActivityWhileConnected({ directLine, userID, username }) {\n    let numActivitiesPosted = 0;\n\n    yield takeEvery(POST_ACTIVITY, function* postActivityWrapper(action) {\n      yield* postActivity(directLine, userID, username, numActivitiesPosted++, action);\n    });\n  });\n}\n"],"sourceRoot":"core:///"},"metadata":{},"sourceType":"script"}