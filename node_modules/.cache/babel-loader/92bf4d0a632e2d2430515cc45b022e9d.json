{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _useRenderMarkdownAsHTML = _interopRequireDefault(require(\"../hooks/useRenderMarkdownAsHTML\"));\n\nvar _useStyleSet3 = _interopRequireDefault(require(\"../hooks/useStyleSet\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar TextContent = function TextContent(_ref) {\n  var contentType = _ref.contentType,\n      text = _ref.text;\n\n  var _useStyleSet = (0, _useStyleSet3.default)(),\n      _useStyleSet2 = _slicedToArray(_useStyleSet, 1),\n      textContentStyleSet = _useStyleSet2[0].textContent;\n\n  var renderMarkdownAsHTML = (0, _useRenderMarkdownAsHTML.default)();\n  var contentTypeMarkdown = contentType === 'text/markdown';\n  return contentTypeMarkdown && renderMarkdownAsHTML ? /*#__PURE__*/_react.default.createElement(\"div\", {\n    className: (0, _classnames.default)('markdown', textContentStyleSet + ''),\n    dangerouslySetInnerHTML: {\n      __html: renderMarkdownAsHTML(text || '')\n    }\n  }) : (text || '').split('\\n').map(function (line, index) {\n    return /*#__PURE__*/_react.default.createElement(\"p\", {\n      className: (0, _classnames.default)('plain', textContentStyleSet + ''),\n      key: index\n    }, line.trim());\n  });\n};\n\nTextContent.defaultProps = {\n  contentType: 'text/markdown'\n};\nTextContent.propTypes = {\n  contentType: _propTypes.default.string,\n  text: _propTypes.default.string.isRequired\n};\nvar _default = TextContent;\nexports.default = _default;","map":{"version":3,"sources":["../../src/Attachment/TextContent.js"],"names":["TextContent","contentType","text","textContentStyleSet","renderMarkdownAsHTML","contentTypeMarkdown","__html","index","line","PropTypes","isRequired"],"mappings":";;;;;;;AAKA,IAAA,WAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;AACA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;AACA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAEA,IAAA,wBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,kCAAA,CAAA,CAAA;;AACA,IAAA,aAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,sBAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAAA,IAAA,EAA2B;AAAA,MAAxBC,WAAwB,GAAA,IAAA,CAAxBA,WAAwB;AAAA,MAAXC,IAAW,GAAA,IAAA,CAAXA,IAAW;;AAAA,MAAA,YAAA,GACE,CAAA,GAAA,aAAA,CADF,OACE,GADF;AAAA,MAAA,aAAA,GAAA,cAAA,CAAA,YAAA,EAAA,CAAA,CAAA;AAAA,MACvBC,mBADuB,GAAA,aAAA,CAAA,CAAA,CAAA,CAAA,WAAA;;AAE7C,MAAMC,oBAAoB,GAAG,CAAA,GAAA,wBAAA,CAA7B,OAA6B,GAA7B;AACA,MAAMC,mBAAmB,GAAGJ,WAAW,KAAvC,eAAA;AAEA,SAAO,mBAAmB,IAAnB,oBAAA,GAAA,aACL,MAAA,CAAA,OAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACE,IAAA,SAAS,EAAE,CAAA,GAAA,WAAA,CAAA,OAAA,EAAA,UAAA,EAAuBE,mBAAmB,GADvD,EACa,CADb;AAEE,IAAA,uBAAuB,EAAE;AAAEG,MAAAA,MAAM,EAAEF,oBAAoB,CAACF,IAAI,IAAL,EAAA;AAA9B;AAF3B,GAAA,CADK,GAML,CAACA,IAAI,IAAL,EAAA,EAAA,KAAA,CAAA,IAAA,EAAA,GAAA,CAA6B,UAAA,IAAA,EAAA,KAAA,EAAA;AAAA,WAAA,aAC3B,MAAA,CAAA,OAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AAAG,MAAA,SAAS,EAAE,CAAA,GAAA,WAAA,CAAA,OAAA,EAAA,OAAA,EAAoBC,mBAAmB,GAArD,EAAc,CAAd;AAA6D,MAAA,GAAG,EAAEI;AAAlE,KAAA,EACGC,IAAI,CAFoB,IAExBA,EADH,CAD2B;AAN/B,GAME,CANF;AALF,CAAA;;AAmBAR,WAAW,CAAXA,YAAAA,GAA2B;AACzBC,EAAAA,WAAW,EAAE;AADY,CAA3BD;AAIAA,WAAW,CAAXA,SAAAA,GAAwB;AACtBC,EAAAA,WAAW,EAAEQ,UAAAA,CAAAA,OAAAA,CADS,MAAA;AAEtBP,EAAAA,IAAI,EAAEO,UAAAA,CAAAA,OAAAA,CAAAA,MAAAA,CAAiBC;AAFD,CAAxBV;eAKeA,W","sourcesContent":["/* eslint react/no-danger: \"off\" */\n/* eslint react/no-array-index-key: \"off\" */\n\n// The content rendered here is sanitized.\n\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport useRenderMarkdownAsHTML from '../hooks/useRenderMarkdownAsHTML';\nimport useStyleSet from '../hooks/useStyleSet';\n\nconst TextContent = ({ contentType, text }) => {\n  const [{ textContent: textContentStyleSet }] = useStyleSet();\n  const renderMarkdownAsHTML = useRenderMarkdownAsHTML();\n  const contentTypeMarkdown = contentType === 'text/markdown';\n\n  return contentTypeMarkdown && renderMarkdownAsHTML ? (\n    <div\n      className={classNames('markdown', textContentStyleSet + '')}\n      dangerouslySetInnerHTML={{ __html: renderMarkdownAsHTML(text || '') }}\n    />\n  ) : (\n    (text || '').split('\\n').map((line, index) => (\n      <p className={classNames('plain', textContentStyleSet + '')} key={index}>\n        {line.trim()}\n      </p>\n    ))\n  );\n};\n\nTextContent.defaultProps = {\n  contentType: 'text/markdown'\n};\n\nTextContent.propTypes = {\n  contentType: PropTypes.string,\n  text: PropTypes.string.isRequired\n};\n\nexport default TextContent;\n"],"sourceRoot":"component:///"},"metadata":{},"sourceType":"script"}