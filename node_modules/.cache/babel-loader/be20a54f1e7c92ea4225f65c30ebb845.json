{"ast":null,"code":"import _classCallCheck from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n// Multi-device Conversation is a Preview feature.\nimport { PropertyCollection } from \"../Exports\";\nexport var User = /*#__PURE__*/function () {\n  function User(userId) {\n    _classCallCheck(this, User);\n\n    this.privUserId = userId;\n  }\n\n  _createClass(User, [{\n    key: \"userId\",\n    get: function get() {\n      return this.privUserId;\n    }\n  }]);\n\n  return User;\n}(); // tslint:disable-next-line: max-classes-per-file\n\nexport var Participant = /*#__PURE__*/function () {\n  function Participant(id, avatar, displayName, isHost, isMuted, isUsingTts, preferredLanguage) {\n    _classCallCheck(this, Participant);\n\n    this.privId = id;\n    this.privAvatar = avatar;\n    this.privDisplayName = displayName;\n    this.privIsHost = isHost;\n    this.privIsMuted = isMuted;\n    this.privIsUsingTts = isUsingTts;\n    this.privPreferredLanguage = preferredLanguage;\n    this.privPoperties = new PropertyCollection();\n  }\n\n  _createClass(Participant, [{\n    key: \"avatar\",\n    get: function get() {\n      return this.privAvatar;\n    }\n  }, {\n    key: \"displayName\",\n    get: function get() {\n      return this.privDisplayName;\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this.privId;\n    }\n  }, {\n    key: \"preferredLanguage\",\n    get: function get() {\n      return this.privPreferredLanguage;\n    }\n  }, {\n    key: \"isHost\",\n    get: function get() {\n      return this.privIsHost;\n    }\n  }, {\n    key: \"isMuted\",\n    get: function get() {\n      return this.privIsMuted;\n    }\n  }, {\n    key: \"isUsingTts\",\n    get: function get() {\n      return this.privIsUsingTts;\n    }\n  }, {\n    key: \"properties\",\n    get: function get() {\n      return this.privPoperties;\n    }\n  }]);\n\n  return Participant;\n}();","map":{"version":3,"sources":["src/sdk/Transcription/IParticipant.ts"],"names":[],"mappings":";;AAAA;AACA;AACA;AAEA,SAAS,kBAAT,QAAmC,YAAnC;AAWA,WAAa,IAAb;AAGI,gBAAY,MAAZ,EAA0B;AAAA;;AACtB,SAAK,UAAL,GAAkB,MAAlB;AACH;;AALL;AAAA;AAAA,SAOI,eAAiB;AACb,aAAO,KAAK,UAAZ;AACH;AATL;;AAAA;AAAA,I,CAsCA;;AACA,WAAa,WAAb;AAUI,uBAAY,EAAZ,EAAwB,MAAxB,EAAwC,WAAxC,EAA6D,MAA7D,EAA8E,OAA9E,EAAgG,UAAhG,EAAqH,iBAArH,EAA8I;AAAA;;AAC1I,SAAK,MAAL,GAAc,EAAd;AACA,SAAK,UAAL,GAAkB,MAAlB;AACA,SAAK,eAAL,GAAuB,WAAvB;AACA,SAAK,UAAL,GAAkB,MAAlB;AACA,SAAK,WAAL,GAAmB,OAAnB;AACA,SAAK,cAAL,GAAsB,UAAtB;AACA,SAAK,qBAAL,GAA6B,iBAA7B;AACA,SAAK,aAAL,GAAqB,IAAI,kBAAJ,EAArB;AACH;;AAnBL;AAAA;AAAA,SAoBI,eAAiB;AACb,aAAO,KAAK,UAAZ;AACH;AAtBL;AAAA;AAAA,SAwBI,eAAsB;AAClB,aAAO,KAAK,eAAZ;AACH;AA1BL;AAAA;AAAA,SA4BI,eAAa;AACT,aAAO,KAAK,MAAZ;AACH;AA9BL;AAAA;AAAA,SAgCI,eAA4B;AACxB,aAAO,KAAK,qBAAZ;AACH;AAlCL;AAAA;AAAA,SAoCI,eAAiB;AACb,aAAO,KAAK,UAAZ;AACH;AAtCL;AAAA;AAAA,SAwCI,eAAkB;AACd,aAAO,KAAK,WAAZ;AACH;AA1CL;AAAA;AAAA,SA4CI,eAAqB;AACjB,aAAO,KAAK,cAAZ;AACH;AA9CL;AAAA;AAAA,SAgDI,eAAqB;AACjB,aAAO,KAAK,aAAZ;AACH;AAlDL;;AAAA;AAAA","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { PropertyCollection } from \"../Exports\";\r\n\r\n/**\r\n * Represents a user in a conversation.\r\n * Added in version 1.4.0\r\n */\r\nexport interface IUser {\r\n    /** Gets the user's ID */\r\n    readonly userId: string;\r\n}\r\n\r\nexport class User implements IUser {\r\n    private privUserId: string;\r\n\r\n    constructor(userId: string) {\r\n        this.privUserId = userId;\r\n    }\r\n\r\n    public get userId(): string {\r\n        return this.privUserId;\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a participant in a conversation.\r\n * Added in version 1.4.0\r\n */\r\nexport interface IParticipant {\r\n    /** Gets the colour of the user's avatar as an HTML hex string (e.g. FF0000 for red). */\r\n    readonly avatar: string;\r\n    /**\r\n     * The participant's display name. Please note that there may be more than one participant\r\n     * with the same name. You can use <see cref=\"Id\"/> property to tell them apart.\r\n     */\r\n    readonly displayName: string;\r\n    /** The unique identifier for the participant. */\r\n    readonly id: string;\r\n    /** Gets whether or not this participant is the host. */\r\n    readonly isHost: boolean;\r\n    /** Gets whether or not this participant is muted. */\r\n    readonly isMuted: boolean;\r\n    /** Gets whether or not the participant is using Text To Speech (TTS). */\r\n    readonly isUsingTts: boolean;\r\n    /** The participant's preferred spoken language. */\r\n    readonly preferredLanguage: string;\r\n    /** Contains properties of the participant. */\r\n    readonly properties: PropertyCollection;\r\n}\r\n\r\n// tslint:disable-next-line: max-classes-per-file\r\nexport class Participant implements IParticipant {\r\n    private privAvatar: string;\r\n    private privDisplayName: string;\r\n    private privId: string;\r\n    private privIsHost: boolean;\r\n    private privIsMuted: boolean;\r\n    private privIsUsingTts: boolean;\r\n    private privPreferredLanguage: string;\r\n    private privPoperties: PropertyCollection;\r\n\r\n    constructor(id: string, avatar: string, displayName: string, isHost: boolean, isMuted: boolean, isUsingTts: boolean, preferredLanguage: string) {\r\n        this.privId = id;\r\n        this.privAvatar = avatar;\r\n        this.privDisplayName = displayName;\r\n        this.privIsHost = isHost;\r\n        this.privIsMuted = isMuted;\r\n        this.privIsUsingTts = isUsingTts;\r\n        this.privPreferredLanguage = preferredLanguage;\r\n        this.privPoperties = new PropertyCollection();\r\n    }\r\n    public get avatar(): string {\r\n        return this.privAvatar;\r\n    }\r\n\r\n    public get displayName(): string {\r\n        return this.privDisplayName;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public get preferredLanguage(): string {\r\n        return this.privPreferredLanguage;\r\n    }\r\n\r\n    public get isHost(): boolean {\r\n        return this.privIsHost;\r\n    }\r\n\r\n    public get isMuted(): boolean {\r\n        return this.privIsMuted;\r\n    }\r\n\r\n    public get isUsingTts(): boolean {\r\n        return this.privIsUsingTts;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privPoperties;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}