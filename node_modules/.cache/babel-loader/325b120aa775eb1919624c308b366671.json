{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useMicrophoneButtonDisabled = useMicrophoneButtonDisabled;\nexports.useMicrophoneButtonClick = exports.connectMicrophoneButton = exports.default = void 0;\n\nvar _botframeworkWebchatCore = require(\"botframework-webchat-core\");\n\nvar _botframeworkWebchatApi = require(\"botframework-webchat-api\");\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _memoizeOne = _interopRequireDefault(require(\"memoize-one\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _connectToWebChat = _interopRequireDefault(require(\"../connectToWebChat\"));\n\nvar _IconButton = _interopRequireDefault(require(\"./IconButton\"));\n\nvar _MicrophoneIcon = _interopRequireDefault(require(\"./Assets/MicrophoneIcon\"));\n\nvar _useDictateAbortable3 = _interopRequireDefault(require(\"../hooks/useDictateAbortable\"));\n\nvar _useStyleSet3 = _interopRequireDefault(require(\"../hooks/useStyleSet\"));\n\nvar _useStyleToEmotionObject = _interopRequireDefault(require(\"../hooks/internal/useStyleToEmotionObject\"));\n\nvar _useWebSpeechPonyfill4 = _interopRequireDefault(require(\"../hooks/useWebSpeechPonyfill\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar DictateState = _botframeworkWebchatCore.Constants.DictateState;\nvar useDictateInterims = _botframeworkWebchatApi.hooks.useDictateInterims,\n    useDictateState = _botframeworkWebchatApi.hooks.useDictateState,\n    useDisabled = _botframeworkWebchatApi.hooks.useDisabled,\n    useLocalizer = _botframeworkWebchatApi.hooks.useLocalizer,\n    useSendBoxValue = _botframeworkWebchatApi.hooks.useSendBoxValue,\n    useShouldSpeakIncomingActivity = _botframeworkWebchatApi.hooks.useShouldSpeakIncomingActivity,\n    useStartDictate = _botframeworkWebchatApi.hooks.useStartDictate,\n    useStopDictate = _botframeworkWebchatApi.hooks.useStopDictate;\nvar ROOT_STYLE = {\n  display: 'flex',\n  height: '100%',\n  // .sr-only - This component is intended to be invisible to the visual Web Chat user, but read by the AT when using a screen reader\n  '& > .sr-only': {\n    color: 'transparent',\n    height: 1,\n    left: -10000,\n    overflow: 'hidden',\n    position: 'absolute',\n    top: 0,\n    whiteSpace: 'nowrap',\n    width: 1\n  }\n};\n\nvar connectMicrophoneButton = function connectMicrophoneButton() {\n  var primeSpeechSynthesis = (0, _memoizeOne.default)(function (speechSynthesis, SpeechSynthesisUtterance) {\n    if (speechSynthesis && SpeechSynthesisUtterance) {\n      var utterance = new SpeechSynthesisUtterance('');\n\n      var _speechSynthesis$getV = speechSynthesis.getVoices();\n\n      var _speechSynthesis$getV2 = _slicedToArray(_speechSynthesis$getV, 1);\n\n      utterance.voice = _speechSynthesis$getV2[0];\n      speechSynthesis.speak(utterance);\n    }\n  });\n\n  for (var _len = arguments.length, selectors = new Array(_len), _key = 0; _key < _len; _key++) {\n    selectors[_key] = arguments[_key];\n  }\n\n  return _connectToWebChat.default.apply(void 0, [function (_ref) {\n    var disabled = _ref.disabled,\n        dictateInterims = _ref.dictateInterims,\n        dictateState = _ref.dictateState,\n        language = _ref.language,\n        setSendBox = _ref.setSendBox,\n        startDictate = _ref.startDictate,\n        stopDictate = _ref.stopDictate,\n        stopSpeakingActivity = _ref.stopSpeakingActivity,\n        _ref$webSpeechPonyfil = _ref.webSpeechPonyfill;\n    _ref$webSpeechPonyfil = _ref$webSpeechPonyfil === void 0 ? {} : _ref$webSpeechPonyfil;\n    var speechSynthesis = _ref$webSpeechPonyfil.speechSynthesis,\n        SpeechSynthesisUtterance = _ref$webSpeechPonyfil.SpeechSynthesisUtterance;\n    return {\n      click: function click() {\n        if (dictateState === DictateState.WILL_START) {\n          stopSpeakingActivity();\n        } else if (dictateState === DictateState.DICTATING) {\n          stopDictate();\n          setSendBox(dictateInterims.join(' '));\n        } else {\n          stopSpeakingActivity();\n          startDictate();\n        }\n\n        primeSpeechSynthesis(speechSynthesis, SpeechSynthesisUtterance);\n      },\n      dictating: dictateState === DictateState.DICTATING,\n      disabled: disabled || dictateState === DictateState.STARTING && dictateState === DictateState.STOPPING,\n      language: language\n    };\n  }].concat(selectors));\n};\n\nexports.connectMicrophoneButton = connectMicrophoneButton;\n\nvar useMicrophoneButtonClick = function useMicrophoneButtonClick() {\n  var _useSendBoxValue = useSendBoxValue(),\n      _useSendBoxValue2 = _slicedToArray(_useSendBoxValue, 2),\n      setSendBox = _useSendBoxValue2[1];\n\n  var _useShouldSpeakIncomi = useShouldSpeakIncomingActivity(),\n      _useShouldSpeakIncomi2 = _slicedToArray(_useShouldSpeakIncomi, 2),\n      setShouldSpeakIncomingActivity = _useShouldSpeakIncomi2[1];\n\n  var _useWebSpeechPonyfill = (0, _useWebSpeechPonyfill4.default)(),\n      _useWebSpeechPonyfill2 = _slicedToArray(_useWebSpeechPonyfill, 1),\n      _useWebSpeechPonyfill3 = _useWebSpeechPonyfill2[0];\n\n  _useWebSpeechPonyfill3 = _useWebSpeechPonyfill3 === void 0 ? {} : _useWebSpeechPonyfill3;\n  var speechSynthesis = _useWebSpeechPonyfill3.speechSynthesis,\n      SpeechSynthesisUtterance = _useWebSpeechPonyfill3.SpeechSynthesisUtterance;\n\n  var _useDictateInterims = useDictateInterims(),\n      _useDictateInterims2 = _slicedToArray(_useDictateInterims, 1),\n      dictateInterims = _useDictateInterims2[0];\n\n  var _useDictateState = useDictateState(),\n      _useDictateState2 = _slicedToArray(_useDictateState, 1),\n      dictateState = _useDictateState2[0];\n\n  var startDictate = useStartDictate();\n  var stopDictate = useStopDictate();\n\n  var _useState = (0, _react.useState)(function () {\n    return (0, _memoizeOne.default)(function (speechSynthesis, SpeechSynthesisUtterance) {\n      if (speechSynthesis && SpeechSynthesisUtterance) {\n        var utterance = new SpeechSynthesisUtterance('');\n\n        var _speechSynthesis$getV3 = speechSynthesis.getVoices();\n\n        var _speechSynthesis$getV4 = _slicedToArray(_speechSynthesis$getV3, 1);\n\n        utterance.voice = _speechSynthesis$getV4[0];\n        speechSynthesis.speak(utterance);\n      }\n    });\n  }),\n      _useState2 = _slicedToArray(_useState, 1),\n      primeSpeechSynthesis = _useState2[0]; // TODO: [P2] We should revisit this function later\n  //       The click() logic seems local to the component, but may not be generalized across all implementations.\n\n\n  return (0, _react.useCallback)(function () {\n    if (dictateState === DictateState.WILL_START) {\n      setShouldSpeakIncomingActivity(false);\n    } else if (dictateState === DictateState.DICTATING) {\n      stopDictate();\n      setSendBox(dictateInterims.join(' '));\n    } else {\n      setShouldSpeakIncomingActivity(false);\n      startDictate();\n    }\n\n    primeSpeechSynthesis(speechSynthesis, SpeechSynthesisUtterance);\n  }, [dictateInterims, dictateState, primeSpeechSynthesis, setSendBox, setShouldSpeakIncomingActivity, speechSynthesis, SpeechSynthesisUtterance, startDictate, stopDictate]);\n};\n\nexports.useMicrophoneButtonClick = useMicrophoneButtonClick;\n\nfunction useMicrophoneButtonDisabled() {\n  var _useDictateAbortable = (0, _useDictateAbortable3.default)(),\n      _useDictateAbortable2 = _slicedToArray(_useDictateAbortable, 1),\n      abortable = _useDictateAbortable2[0];\n\n  var _useDictateState3 = useDictateState(),\n      _useDictateState4 = _slicedToArray(_useDictateState3, 1),\n      dictateState = _useDictateState4[0];\n\n  var _useDisabled = useDisabled(),\n      _useDisabled2 = _slicedToArray(_useDisabled, 1),\n      disabled = _useDisabled2[0];\n\n  return [disabled || dictateState === DictateState.STARTING || dictateState === DictateState.STOPPING || dictateState === DictateState.DICTATING && !abortable];\n}\n\nvar MicrophoneButton = function MicrophoneButton(_ref2) {\n  var className = _ref2.className;\n\n  var _useStyleSet = (0, _useStyleSet3.default)(),\n      _useStyleSet2 = _slicedToArray(_useStyleSet, 1),\n      microphoneButtonStyleSet = _useStyleSet2[0].microphoneButton;\n\n  var _useDictateState5 = useDictateState(),\n      _useDictateState6 = _slicedToArray(_useDictateState5, 1),\n      dictateState = _useDictateState6[0];\n\n  var _useMicrophoneButtonD = useMicrophoneButtonDisabled(),\n      _useMicrophoneButtonD2 = _slicedToArray(_useMicrophoneButtonD, 1),\n      disabled = _useMicrophoneButtonD2[0];\n\n  var click = useMicrophoneButtonClick();\n  var localize = useLocalizer();\n  var rootClassName = (0, _useStyleToEmotionObject.default)()(ROOT_STYLE) + '';\n  var dictating = dictateState === DictateState.DICTATING;\n  return /*#__PURE__*/_react.default.createElement(\"div\", {\n    \"aria-controls\": \"webchatSendBoxMicrophoneButton\",\n    className: (0, _classnames.default)(microphoneButtonStyleSet + '', rootClassName, (className || '') + '', {\n      dictating: dictating\n    })\n  }, /*#__PURE__*/_react.default.createElement(_IconButton.default, {\n    alt: localize('TEXT_INPUT_SPEAK_BUTTON_ALT'),\n    disabled: disabled,\n    onClick: click\n  }, /*#__PURE__*/_react.default.createElement(_MicrophoneIcon.default, null)), /*#__PURE__*/_react.default.createElement(\"div\", {\n    \"aria-live\": \"polite\",\n    className: \"sr-only\",\n    id: \"webchatSendBoxMicrophoneButton\",\n    role: \"status\"\n  }, localize(dictating ? 'SPEECH_INPUT_MICROPHONE_BUTTON_OPEN_ALT' : 'SPEECH_INPUT_MICROPHONE_BUTTON_CLOSE_ALT')));\n};\n\nMicrophoneButton.defaultProps = {\n  className: ''\n};\nMicrophoneButton.propTypes = {\n  className: _propTypes.default.string\n};\nvar _default = MicrophoneButton;\nexports.default = _default;","map":{"version":3,"sources":["../../src/SendBox/MicrophoneButton.js"],"names":["DictateState","Constants","useDictateInterims","useDictateState","useDisabled","useLocalizer","useSendBoxValue","useShouldSpeakIncomingActivity","useStartDictate","useStopDictate","hooks","ROOT_STYLE","display","height","color","left","overflow","position","top","whiteSpace","width","connectMicrophoneButton","selectors","primeSpeechSynthesis","speechSynthesis","utterance","disabled","dictateInterims","dictateState","language","setSendBox","startDictate","stopDictate","stopSpeakingActivity","SpeechSynthesisUtterance","click","dictating","useMicrophoneButtonClick","setShouldSpeakIncomingActivity","abortable","MicrophoneButton","className","microphoneButtonStyleSet","useMicrophoneButtonDisabled","localize","rootClassName","PropTypes","string"],"mappings":"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","sourcesContent":["// This is required for aria-controls.\n/* eslint react/forbid-dom-props: \"off\" */\n\nimport { Constants } from 'botframework-webchat-core';\nimport { hooks } from 'botframework-webchat-api';\nimport classNames from 'classnames';\nimport memoize from 'memoize-one';\nimport PropTypes from 'prop-types';\nimport React, { useCallback, useState } from 'react';\n\nimport connectToWebChat from '../connectToWebChat';\nimport IconButton from './IconButton';\nimport MicrophoneIcon from './Assets/MicrophoneIcon';\nimport useDictateAbortable from '../hooks/useDictateAbortable';\nimport useStyleSet from '../hooks/useStyleSet';\nimport useStyleToEmotionObject from '../hooks/internal/useStyleToEmotionObject';\nimport useWebSpeechPonyfill from '../hooks/useWebSpeechPonyfill';\n\nconst { DictateState } = Constants;\n\nconst {\n  useDictateInterims,\n  useDictateState,\n  useDisabled,\n  useLocalizer,\n  useSendBoxValue,\n  useShouldSpeakIncomingActivity,\n  useStartDictate,\n  useStopDictate\n} = hooks;\n\nconst ROOT_STYLE = {\n  display: 'flex',\n  height: '100%',\n\n  // .sr-only - This component is intended to be invisible to the visual Web Chat user, but read by the AT when using a screen reader\n\n  '& > .sr-only': {\n    color: 'transparent',\n    height: 1,\n    left: -10000,\n    overflow: 'hidden',\n    position: 'absolute',\n    top: 0,\n    whiteSpace: 'nowrap',\n    width: 1\n  }\n};\n\nconst connectMicrophoneButton = (...selectors) => {\n  const primeSpeechSynthesis = memoize((speechSynthesis, SpeechSynthesisUtterance) => {\n    if (speechSynthesis && SpeechSynthesisUtterance) {\n      const utterance = new SpeechSynthesisUtterance('');\n\n      [utterance.voice] = speechSynthesis.getVoices();\n      speechSynthesis.speak(utterance);\n    }\n  });\n\n  return connectToWebChat(\n    ({\n      disabled,\n      dictateInterims,\n      dictateState,\n      language,\n      setSendBox,\n      startDictate,\n      stopDictate,\n      stopSpeakingActivity,\n      webSpeechPonyfill: { speechSynthesis, SpeechSynthesisUtterance } = {}\n    }) => ({\n      click: () => {\n        if (dictateState === DictateState.WILL_START) {\n          stopSpeakingActivity();\n        } else if (dictateState === DictateState.DICTATING) {\n          stopDictate();\n          setSendBox(dictateInterims.join(' '));\n        } else {\n          stopSpeakingActivity();\n          startDictate();\n        }\n\n        primeSpeechSynthesis(speechSynthesis, SpeechSynthesisUtterance);\n      },\n      dictating: dictateState === DictateState.DICTATING,\n      disabled: disabled || (dictateState === DictateState.STARTING && dictateState === DictateState.STOPPING),\n      language\n    }),\n    ...selectors\n  );\n};\n\nconst useMicrophoneButtonClick = () => {\n  const [, setSendBox] = useSendBoxValue();\n  const [, setShouldSpeakIncomingActivity] = useShouldSpeakIncomingActivity();\n  const [{ speechSynthesis, SpeechSynthesisUtterance } = {}] = useWebSpeechPonyfill();\n  const [dictateInterims] = useDictateInterims();\n  const [dictateState] = useDictateState();\n  const startDictate = useStartDictate();\n  const stopDictate = useStopDictate();\n\n  const [primeSpeechSynthesis] = useState(() =>\n    memoize((speechSynthesis, SpeechSynthesisUtterance) => {\n      if (speechSynthesis && SpeechSynthesisUtterance) {\n        const utterance = new SpeechSynthesisUtterance('');\n\n        [utterance.voice] = speechSynthesis.getVoices();\n        speechSynthesis.speak(utterance);\n      }\n    })\n  );\n\n  // TODO: [P2] We should revisit this function later\n  //       The click() logic seems local to the component, but may not be generalized across all implementations.\n  return useCallback(() => {\n    if (dictateState === DictateState.WILL_START) {\n      setShouldSpeakIncomingActivity(false);\n    } else if (dictateState === DictateState.DICTATING) {\n      stopDictate();\n      setSendBox(dictateInterims.join(' '));\n    } else {\n      setShouldSpeakIncomingActivity(false);\n      startDictate();\n    }\n\n    primeSpeechSynthesis(speechSynthesis, SpeechSynthesisUtterance);\n  }, [\n    dictateInterims,\n    dictateState,\n    primeSpeechSynthesis,\n    setSendBox,\n    setShouldSpeakIncomingActivity,\n    speechSynthesis,\n    SpeechSynthesisUtterance,\n    startDictate,\n    stopDictate\n  ]);\n};\n\nfunction useMicrophoneButtonDisabled() {\n  const [abortable] = useDictateAbortable();\n  const [dictateState] = useDictateState();\n  const [disabled] = useDisabled();\n\n  return [\n    disabled ||\n      dictateState === DictateState.STARTING ||\n      dictateState === DictateState.STOPPING ||\n      (dictateState === DictateState.DICTATING && !abortable)\n  ];\n}\n\nconst MicrophoneButton = ({ className }) => {\n  const [{ microphoneButton: microphoneButtonStyleSet }] = useStyleSet();\n  const [dictateState] = useDictateState();\n  const [disabled] = useMicrophoneButtonDisabled();\n  const click = useMicrophoneButtonClick();\n  const localize = useLocalizer();\n  const rootClassName = useStyleToEmotionObject()(ROOT_STYLE) + '';\n\n  const dictating = dictateState === DictateState.DICTATING;\n\n  return (\n    <div\n      aria-controls=\"webchatSendBoxMicrophoneButton\"\n      className={classNames(microphoneButtonStyleSet + '', rootClassName, (className || '') + '', { dictating })}\n    >\n      <IconButton alt={localize('TEXT_INPUT_SPEAK_BUTTON_ALT')} disabled={disabled} onClick={click}>\n        <MicrophoneIcon />\n      </IconButton>\n      <div aria-live=\"polite\" className=\"sr-only\" id=\"webchatSendBoxMicrophoneButton\" role=\"status\">\n        {localize(dictating ? 'SPEECH_INPUT_MICROPHONE_BUTTON_OPEN_ALT' : 'SPEECH_INPUT_MICROPHONE_BUTTON_CLOSE_ALT')}\n      </div>\n    </div>\n  );\n};\n\nMicrophoneButton.defaultProps = {\n  className: ''\n};\n\nMicrophoneButton.propTypes = {\n  className: PropTypes.string\n};\n\nexport default MicrophoneButton;\n\nexport { connectMicrophoneButton, useMicrophoneButtonClick, useMicrophoneButtonDisabled };\n"],"sourceRoot":"component:///"},"metadata":{},"sourceType":"script"}