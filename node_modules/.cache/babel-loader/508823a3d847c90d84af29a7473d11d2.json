{"ast":null,"code":"'use strict';\n\nmodule.exports = strip;\n\nfunction strip() {\n  return one;\n} // Expose modifiers for available node types.\n// Node types not listed here are not changed (but their children are).\n\n\nvar map = {};\nmap.heading = paragraph;\nmap.text = text;\nmap.inlineCode = text;\nmap.image = image;\nmap.imageReference = image;\nmap.break = lineBreak;\nmap.blockquote = children;\nmap.list = children;\nmap.listItem = children;\nmap.strong = children;\nmap.emphasis = children;\nmap.delete = children;\nmap.link = children;\nmap.linkReference = children;\nmap.code = empty;\nmap.horizontalRule = empty;\nmap.thematicBreak = empty;\nmap.html = empty;\nmap.table = empty;\nmap.tableCell = empty;\nmap.definition = empty;\nmap.yaml = empty;\nmap.toml = empty;\n\nfunction one(node) {\n  var type = node && node.type;\n\n  if (type in map) {\n    node = map[type](node);\n  }\n\n  if ('length' in node) {\n    node = all(node);\n  }\n\n  if (node.children) {\n    node.children = all(node.children);\n  }\n\n  return node;\n}\n\nfunction all(nodes) {\n  var index = -1;\n  var length = nodes.length;\n  var result = [];\n  var value;\n\n  while (++index < length) {\n    value = one(nodes[index]);\n\n    if (value && typeof value.length === 'number') {\n      result = result.concat(value.map(one));\n    } else {\n      result.push(value);\n    }\n  }\n\n  return clean(result);\n} // Clean nodes: merges texts.\n\n\nfunction clean(values) {\n  var index = -1;\n  var length = values.length;\n  var result = [];\n  var prev = null;\n  var value;\n\n  while (++index < length) {\n    value = values[index];\n\n    if (prev && 'value' in value && value.type === prev.type) {\n      prev.value += value.value;\n    } else {\n      result.push(value);\n      prev = value;\n    }\n  }\n\n  return result;\n}\n\nfunction image(node) {\n  return {\n    type: 'text',\n    value: node.alt || node.title || ''\n  };\n}\n\nfunction text(node) {\n  return {\n    type: 'text',\n    value: node.value\n  };\n}\n\nfunction paragraph(node) {\n  return {\n    type: 'paragraph',\n    children: node.children\n  };\n}\n\nfunction children(node) {\n  return node.children;\n}\n\nfunction lineBreak() {\n  return {\n    type: 'text',\n    value: '\\n'\n  };\n}\n\nfunction empty() {\n  return {\n    type: 'text',\n    value: ''\n  };\n}","map":{"version":3,"sources":["/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/strip-markdown/index.js"],"names":["module","exports","strip","one","map","heading","paragraph","text","inlineCode","image","imageReference","break","lineBreak","blockquote","children","list","listItem","strong","emphasis","delete","link","linkReference","code","empty","horizontalRule","thematicBreak","html","table","tableCell","definition","yaml","toml","node","type","all","nodes","index","length","result","value","concat","push","clean","values","prev","alt","title"],"mappings":"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","sourcesContent":["'use strict'\n\nmodule.exports = strip\n\nfunction strip() {\n  return one\n}\n\n// Expose modifiers for available node types.\n// Node types not listed here are not changed (but their children are).\nvar map = {}\n\nmap.heading = paragraph\nmap.text = text\nmap.inlineCode = text\nmap.image = image\nmap.imageReference = image\nmap.break = lineBreak\n\nmap.blockquote = children\nmap.list = children\nmap.listItem = children\nmap.strong = children\nmap.emphasis = children\nmap.delete = children\nmap.link = children\nmap.linkReference = children\n\nmap.code = empty\nmap.horizontalRule = empty\nmap.thematicBreak = empty\nmap.html = empty\nmap.table = empty\nmap.tableCell = empty\nmap.definition = empty\nmap.yaml = empty\nmap.toml = empty\n\nfunction one(node) {\n  var type = node && node.type\n\n  if (type in map) {\n    node = map[type](node)\n  }\n\n  if ('length' in node) {\n    node = all(node)\n  }\n\n  if (node.children) {\n    node.children = all(node.children)\n  }\n\n  return node\n}\n\nfunction all(nodes) {\n  var index = -1\n  var length = nodes.length\n  var result = []\n  var value\n\n  while (++index < length) {\n    value = one(nodes[index])\n\n    if (value && typeof value.length === 'number') {\n      result = result.concat(value.map(one))\n    } else {\n      result.push(value)\n    }\n  }\n\n  return clean(result)\n}\n\n// Clean nodes: merges texts.\nfunction clean(values) {\n  var index = -1\n  var length = values.length\n  var result = []\n  var prev = null\n  var value\n\n  while (++index < length) {\n    value = values[index]\n\n    if (prev && 'value' in value && value.type === prev.type) {\n      prev.value += value.value\n    } else {\n      result.push(value)\n      prev = value\n    }\n  }\n\n  return result\n}\n\nfunction image(node) {\n  return {type: 'text', value: node.alt || node.title || ''}\n}\n\nfunction text(node) {\n  return {type: 'text', value: node.value}\n}\n\nfunction paragraph(node) {\n  return {type: 'paragraph', children: node.children}\n}\n\nfunction children(node) {\n  return node.children\n}\n\nfunction lineBreak() {\n  return {type: 'text', value: '\\n'}\n}\n\nfunction empty() {\n  return {type: 'text', value: ''}\n}\n"]},"metadata":{},"sourceType":"script"}