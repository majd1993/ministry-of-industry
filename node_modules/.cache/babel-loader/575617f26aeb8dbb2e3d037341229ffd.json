{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar payloadConstants_1 = require(\"./payloadConstants\");\n/**\n * Streaming header serializer\n */\n\n\nvar HeaderSerializer =\n/** @class */\nfunction () {\n  function HeaderSerializer() {}\n  /**\n   * Serializes the header into a buffer\n   *\n   * @param header The header to serialize.\n   * @param buffer The buffer into which to serialize the header.\n   */\n\n\n  HeaderSerializer.serialize = function (header, buffer) {\n    buffer.write(header.payloadType, this.TypeOffset, 1, this.Encoding);\n    buffer.write(this.Delimiter, this.TypeDelimiterOffset, 1, this.Encoding);\n    buffer.write(this.headerLengthPadder(header.payloadLength, this.LengthLength, '0'), this.LengthOffset, this.LengthLength, this.Encoding);\n    buffer.write(this.Delimiter, this.LengthDelimeterOffset, 1, this.Encoding);\n    buffer.write(header.id, this.IdOffset);\n    buffer.write(this.Delimiter, this.IdDelimeterOffset, 1, this.Encoding);\n    buffer.write(header.end ? this.End : this.NotEnd, this.EndOffset);\n    buffer.write(this.Terminator, this.TerminatorOffset);\n  };\n  /**\n   * Deserializes a buffer containing header information.\n   *\n   * @param buffer The buffer from which to obtain the data to deserialize.\n   * @returns The deserialized header from the buffer.\n   */\n\n\n  HeaderSerializer.deserialize = function (buffer) {\n    var jsonBuffer = buffer.toString(this.Encoding);\n    var headerArray = jsonBuffer.split(this.Delimiter);\n\n    if (headerArray.length !== 4) {\n      throw Error(\"Cannot parse header, header is malformed. Header: \" + jsonBuffer);\n    }\n\n    var payloadType = headerArray[0],\n        length = headerArray[1],\n        id = headerArray[2],\n        headerEnd = headerArray[3];\n    var end = headerEnd === '1\\n';\n    var payloadLength = Number(length);\n    var header = {\n      end: end,\n      payloadLength: payloadLength,\n      payloadType: payloadType,\n      id: id\n    };\n\n    if (!(header.payloadLength <= payloadConstants_1.PayloadConstants.MaxPayloadLength && header.payloadLength >= payloadConstants_1.PayloadConstants.MinLength)) {\n      throw Error(\"Header length of \" + header.payloadLength + \" is missing or malformed\");\n    }\n\n    if (header.payloadType.length !== this.TypeDelimiterOffset) {\n      throw Error(\"Header type '\" + header.payloadType.length + \"' is missing or malformed.\");\n    }\n\n    if (!header.id || !header.id.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i) || header.id.length !== this.IdLength) {\n      throw Error(\"Header ID '\" + header.id + \"' is missing or malformed.\");\n    }\n\n    if (!(headerEnd === '0\\n' || headerEnd === '1\\n')) {\n      throw Error(\"Header End is missing or not a valid value. Header end: '\" + headerEnd + \"'\");\n    }\n\n    return header;\n  };\n\n  HeaderSerializer.headerLengthPadder = function (lengthValue, totalLength, padChar) {\n    var result = Array(totalLength + 1).join(padChar);\n    var lengthString = lengthValue.toString();\n    return (result + lengthString).slice(lengthString.length);\n  };\n\n  HeaderSerializer.Delimiter = '.';\n  HeaderSerializer.Terminator = '\\n';\n  HeaderSerializer.End = '1';\n  HeaderSerializer.NotEnd = '0';\n  HeaderSerializer.TypeOffset = 0;\n  HeaderSerializer.TypeDelimiterOffset = 1;\n  HeaderSerializer.LengthOffset = 2;\n  HeaderSerializer.LengthLength = 6;\n  HeaderSerializer.LengthDelimeterOffset = 8;\n  HeaderSerializer.IdOffset = 9;\n  HeaderSerializer.IdLength = 36;\n  HeaderSerializer.IdDelimeterOffset = 45;\n  HeaderSerializer.EndOffset = 46;\n  HeaderSerializer.TerminatorOffset = 47;\n  HeaderSerializer.Encoding = 'utf8';\n  return HeaderSerializer;\n}();\n\nexports.HeaderSerializer = HeaderSerializer;","map":{"version":3,"sources":["../../src/payloads/headerSerializer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar payloadConstants_1 = require(\"./payloadConstants\");\n/**\n * Streaming header serializer\n */\nvar HeaderSerializer = /** @class */ (function () {\n    function HeaderSerializer() {\n    }\n    /**\n     * Serializes the header into a buffer\n     *\n     * @param header The header to serialize.\n     * @param buffer The buffer into which to serialize the header.\n     */\n    HeaderSerializer.serialize = function (header, buffer) {\n        buffer.write(header.payloadType, this.TypeOffset, 1, this.Encoding);\n        buffer.write(this.Delimiter, this.TypeDelimiterOffset, 1, this.Encoding);\n        buffer.write(this.headerLengthPadder(header.payloadLength, this.LengthLength, '0'), this.LengthOffset, this.LengthLength, this.Encoding);\n        buffer.write(this.Delimiter, this.LengthDelimeterOffset, 1, this.Encoding);\n        buffer.write(header.id, this.IdOffset);\n        buffer.write(this.Delimiter, this.IdDelimeterOffset, 1, this.Encoding);\n        buffer.write(header.end ? this.End : this.NotEnd, this.EndOffset);\n        buffer.write(this.Terminator, this.TerminatorOffset);\n    };\n    /**\n     * Deserializes a buffer containing header information.\n     *\n     * @param buffer The buffer from which to obtain the data to deserialize.\n     * @returns The deserialized header from the buffer.\n     */\n    HeaderSerializer.deserialize = function (buffer) {\n        var jsonBuffer = buffer.toString(this.Encoding);\n        var headerArray = jsonBuffer.split(this.Delimiter);\n        if (headerArray.length !== 4) {\n            throw Error(\"Cannot parse header, header is malformed. Header: \" + jsonBuffer);\n        }\n        var payloadType = headerArray[0], length = headerArray[1], id = headerArray[2], headerEnd = headerArray[3];\n        var end = headerEnd === '1\\n';\n        var payloadLength = Number(length);\n        var header = { end: end, payloadLength: payloadLength, payloadType: payloadType, id: id };\n        if (!(header.payloadLength <= payloadConstants_1.PayloadConstants.MaxPayloadLength && header.payloadLength >= payloadConstants_1.PayloadConstants.MinLength)) {\n            throw Error(\"Header length of \" + header.payloadLength + \" is missing or malformed\");\n        }\n        if (header.payloadType.length !== this.TypeDelimiterOffset) {\n            throw Error(\"Header type '\" + header.payloadType.length + \"' is missing or malformed.\");\n        }\n        if (!header.id || !header.id.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i) || header.id.length !== this.IdLength) {\n            throw Error(\"Header ID '\" + header.id + \"' is missing or malformed.\");\n        }\n        if (!(headerEnd === '0\\n' || headerEnd === '1\\n')) {\n            throw Error(\"Header End is missing or not a valid value. Header end: '\" + headerEnd + \"'\");\n        }\n        return header;\n    };\n    HeaderSerializer.headerLengthPadder = function (lengthValue, totalLength, padChar) {\n        var result = Array(totalLength + 1)\n            .join(padChar);\n        var lengthString = lengthValue.toString();\n        return (result + lengthString).slice(lengthString.length);\n    };\n    HeaderSerializer.Delimiter = '.';\n    HeaderSerializer.Terminator = '\\n';\n    HeaderSerializer.End = '1';\n    HeaderSerializer.NotEnd = '0';\n    HeaderSerializer.TypeOffset = 0;\n    HeaderSerializer.TypeDelimiterOffset = 1;\n    HeaderSerializer.LengthOffset = 2;\n    HeaderSerializer.LengthLength = 6;\n    HeaderSerializer.LengthDelimeterOffset = 8;\n    HeaderSerializer.IdOffset = 9;\n    HeaderSerializer.IdLength = 36;\n    HeaderSerializer.IdDelimeterOffset = 45;\n    HeaderSerializer.EndOffset = 46;\n    HeaderSerializer.TerminatorOffset = 47;\n    HeaderSerializer.Encoding = 'utf8';\n    return HeaderSerializer;\n}());\nexports.HeaderSerializer = HeaderSerializer;\n//# sourceMappingURL=headerSerializer.js.map"]},"metadata":{},"sourceType":"script"}