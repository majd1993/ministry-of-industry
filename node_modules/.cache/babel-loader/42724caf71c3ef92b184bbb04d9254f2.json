{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Exports_1 = require(\"../common.speech/Exports\");\n\nvar SpeechConnectionFactory_1 = require(\"../common.speech/SpeechConnectionFactory\");\n\nvar Contracts_1 = require(\"./Contracts\");\n\nvar Exports_2 = require(\"./Exports\");\n/**\n * Performs speech recognition from microphone, file, or other audio input streams, and gets transcribed text as result.\n * @class SpeechRecognizer\n */\n\n\nvar SpeechRecognizer =\n/** @class */\nfunction (_super) {\n  __extends(SpeechRecognizer, _super);\n  /**\n   * SpeechRecognizer constructor.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\n   * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\n   */\n\n\n  function SpeechRecognizer(speechConfig, audioConfig) {\n    var _this = this;\n\n    var speechConfigImpl = speechConfig;\n    Contracts_1.Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\n    Contracts_1.Contracts.throwIfNullOrWhitespace(speechConfigImpl.properties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_RecoLanguage), Exports_2.PropertyId[Exports_2.PropertyId.SpeechServiceConnection_RecoLanguage]);\n    _this = _super.call(this, audioConfig, speechConfigImpl.properties, new SpeechConnectionFactory_1.SpeechConnectionFactory()) || this;\n    _this.privDisposedSpeechRecognizer = false;\n    return _this;\n  }\n  /**\n   * SpeechRecognizer constructor.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\n   * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\n   * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\n   */\n\n\n  SpeechRecognizer.FromConfig = function (speechConfig, autoDetectSourceLanguageConfig, audioConfig) {\n    var speechConfigImpl = speechConfig;\n    autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\n    var recognizer = new SpeechRecognizer(speechConfig, audioConfig);\n    return recognizer;\n  };\n\n  Object.defineProperty(SpeechRecognizer.prototype, \"endpointId\", {\n    /**\n     * Gets the endpoint id of a customized speech model that is used for speech recognition.\n     * @member SpeechRecognizer.prototype.endpointId\n     * @function\n     * @public\n     * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.\n     */\n    get: function get() {\n      Contracts_1.Contracts.throwIfDisposed(this.privDisposedSpeechRecognizer);\n      return this.properties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_EndpointId, \"00000000-0000-0000-0000-000000000000\");\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SpeechRecognizer.prototype, \"authorizationToken\", {\n    /**\n     * Gets the authorization token used to communicate with the service.\n     * @member SpeechRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @returns {string} Authorization token.\n     */\n    get: function get() {\n      return this.properties.getProperty(Exports_2.PropertyId.SpeechServiceAuthorization_Token);\n    },\n\n    /**\n     * Gets/Sets the authorization token used to communicate with the service.\n     * @member SpeechRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} token - Authorization token.\n     */\n    set: function set(token) {\n      Contracts_1.Contracts.throwIfNullOrWhitespace(token, \"token\");\n      this.properties.setProperty(Exports_2.PropertyId.SpeechServiceAuthorization_Token, token);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SpeechRecognizer.prototype, \"speechRecognitionLanguage\", {\n    /**\n     * Gets the spoken language of recognition.\n     * @member SpeechRecognizer.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     * @returns {string} The spoken language of recognition.\n     */\n    get: function get() {\n      Contracts_1.Contracts.throwIfDisposed(this.privDisposedSpeechRecognizer);\n      return this.properties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_RecoLanguage);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SpeechRecognizer.prototype, \"outputFormat\", {\n    /**\n     * Gets the output format of recognition.\n     * @member SpeechRecognizer.prototype.outputFormat\n     * @function\n     * @public\n     * @returns {OutputFormat} The output format of recognition.\n     */\n    get: function get() {\n      Contracts_1.Contracts.throwIfDisposed(this.privDisposedSpeechRecognizer);\n\n      if (this.properties.getProperty(Exports_1.OutputFormatPropertyName, Exports_2.OutputFormat[Exports_2.OutputFormat.Simple]) === Exports_2.OutputFormat[Exports_2.OutputFormat.Simple]) {\n        return Exports_2.OutputFormat.Simple;\n      } else {\n        return Exports_2.OutputFormat.Detailed;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SpeechRecognizer.prototype, \"properties\", {\n    /**\n     * The collection of properties and their values defined for this SpeechRecognizer.\n     * @member SpeechRecognizer.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.\n     */\n    get: function get() {\n      return this.privProperties;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Starts speech recognition, and stops after the first utterance is recognized.\n   * The task returns the recognition text as result.\n   * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\n   *       so it is suitable only for single shot recognition\n   *       like command or query. For long-running recognition, use StartContinuousRecognitionAsync() instead.\n   * @member SpeechRecognizer.prototype.recognizeOnceAsync\n   * @function\n   * @public\n   * @param cb - Callback that received the SpeechRecognitionResult.\n   * @param err - Callback invoked in case of an error.\n   */\n\n  SpeechRecognizer.prototype.recognizeOnceAsync = function (cb, err) {\n    this.recognizeOnceAsyncImpl(Exports_1.RecognitionMode.Interactive, cb, err);\n  };\n  /**\n   * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\n   * User must subscribe to events to receive recognition results.\n   * @member SpeechRecognizer.prototype.startContinuousRecognitionAsync\n   * @function\n   * @public\n   * @param cb - Callback invoked once the recognition has started.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  SpeechRecognizer.prototype.startContinuousRecognitionAsync = function (cb, err) {\n    this.startContinuousRecognitionAsyncImpl(Exports_1.RecognitionMode.Conversation, cb, err);\n  };\n  /**\n   * Stops continuous speech recognition.\n   * @member SpeechRecognizer.prototype.stopContinuousRecognitionAsync\n   * @function\n   * @public\n   * @param cb - Callback invoked once the recognition has stopped.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  SpeechRecognizer.prototype.stopContinuousRecognitionAsync = function (cb, err) {\n    this.stopContinuousRecognitionAsyncImpl(cb, err);\n  };\n  /**\n   * Starts speech recognition with keyword spotting, until\n   * stopKeywordRecognitionAsync() is called.\n   * User must subscribe to events to receive recognition results.\n   * Note: Key word spotting functionality is only available on the\n   *      Speech Devices SDK. This functionality is currently not included in the SDK itself.\n   * @member SpeechRecognizer.prototype.startKeywordRecognitionAsync\n   * @function\n   * @public\n   * @param {KeywordRecognitionModel} model The keyword recognition model that\n   *        specifies the keyword to be recognized.\n   * @param cb - Callback invoked once the recognition has started.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  SpeechRecognizer.prototype.startKeywordRecognitionAsync = function (model, cb, err) {\n    Contracts_1.Contracts.throwIfNull(model, \"model\");\n\n    if (!!err) {\n      err(\"Not yet implemented.\");\n    }\n  };\n  /**\n   * Stops continuous speech recognition.\n   * Note: Key word spotting functionality is only available on the\n   *       Speech Devices SDK. This functionality is currently not included in the SDK itself.\n   * @member SpeechRecognizer.prototype.stopKeywordRecognitionAsync\n   * @function\n   * @public\n   * @param cb - Callback invoked once the recognition has stopped.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  SpeechRecognizer.prototype.stopKeywordRecognitionAsync = function (cb, err) {\n    if (!!cb) {\n      cb();\n    }\n  };\n  /**\n   * closes all external resources held by an instance of this class.\n   * @member SpeechRecognizer.prototype.close\n   * @function\n   * @public\n   */\n\n\n  SpeechRecognizer.prototype.close = function () {\n    Contracts_1.Contracts.throwIfDisposed(this.privDisposedSpeechRecognizer);\n    this.dispose(true);\n  };\n  /**\n   * Disposes any resources held by the object.\n   * @member SpeechRecognizer.prototype.dispose\n   * @function\n   * @public\n   * @param {boolean} disposing - true if disposing the object.\n   */\n\n\n  SpeechRecognizer.prototype.dispose = function (disposing) {\n    if (this.privDisposedSpeechRecognizer) {\n      return;\n    }\n\n    if (disposing) {\n      this.implRecognizerStop(); // Dispose is synchronous, so just start it....\n\n      this.privDisposedSpeechRecognizer = true;\n    }\n\n    _super.prototype.dispose.call(this, disposing);\n  };\n\n  SpeechRecognizer.prototype.createRecognizerConfig = function (speechConfig) {\n    return new Exports_1.RecognizerConfig(speechConfig, this.properties);\n  };\n\n  SpeechRecognizer.prototype.createServiceRecognizer = function (authentication, connectionFactory, audioConfig, recognizerConfig) {\n    var configImpl = audioConfig;\n    return new Exports_1.SpeechServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\n  };\n\n  return SpeechRecognizer;\n}(Exports_2.Recognizer);\n\nexports.SpeechRecognizer = SpeechRecognizer;","map":{"version":3,"sources":["src/sdk/SpeechRecognizer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OutputFormatPropertyName,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    SpeechServiceRecognizer,\r\n} from \"../common.speech/Exports\";\r\nimport { SpeechConnectionFactory } from \"../common.speech/SpeechConnectionFactory\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    AutoDetectSourceLanguageConfig,\r\n    KeywordRecognitionModel,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"./Exports\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Performs speech recognition from microphone, file, or other audio input streams, and gets transcribed text as result.\r\n * @class SpeechRecognizer\r\n */\r\nexport class SpeechRecognizer extends Recognizer {\r\n    private privDisposedSpeechRecognizer: boolean;\r\n\r\n    /**\r\n     * SpeechRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            speechConfigImpl.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        super(audioConfig, speechConfigImpl.properties, new SpeechConnectionFactory());\r\n        this.privDisposedSpeechRecognizer = false;\r\n    }\r\n\r\n    /**\r\n     * SpeechRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public static FromConfig(speechConfig: SpeechConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): SpeechRecognizer {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\r\n        const recognizer = new SpeechRecognizer(speechConfig, audioConfig);\r\n        return recognizer;\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member SpeechRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member SpeechRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member SpeechRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: Recognizer, event: SpeechRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the endpoint id of a customized speech model that is used for speech recognition.\r\n     * @member SpeechRecognizer.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.\r\n     */\r\n    public get endpointId(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedSpeechRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_EndpointId, \"00000000-0000-0000-0000-000000000000\");\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member SpeechRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member SpeechRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member SpeechRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} The spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedSpeechRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the output format of recognition.\r\n     * @member SpeechRecognizer.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} The output format of recognition.\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        Contracts.throwIfDisposed(this.privDisposedSpeechRecognizer);\r\n\r\n        if (this.properties.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) === OutputFormat[OutputFormat.Simple]) {\r\n            return OutputFormat.Simple;\r\n        } else {\r\n            return OutputFormat.Detailed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this SpeechRecognizer.\r\n     * @member SpeechRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, and stops after the first utterance is recognized.\r\n     * The task returns the recognition text as result.\r\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\r\n     *       so it is suitable only for single shot recognition\r\n     *       like command or query. For long-running recognition, use StartContinuousRecognitionAsync() instead.\r\n     * @member SpeechRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the SpeechRecognitionResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\r\n            this.recognizeOnceAsyncImpl(RecognitionMode.Interactive, cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * @member SpeechRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation, cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * @member SpeechRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        this.stopContinuousRecognitionAsyncImpl(cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition with keyword spotting, until\r\n     * stopKeywordRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * Note: Key word spotting functionality is only available on the\r\n     *      Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n     * @member SpeechRecognizer.prototype.startKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param {KeywordRecognitionModel} model The keyword recognition model that\r\n     *        specifies the keyword to be recognized.\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startKeywordRecognitionAsync(model: KeywordRecognitionModel, cb?: () => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        if (!!err) {\r\n            err(\"Not yet implemented.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * Note: Key word spotting functionality is only available on the\r\n     *       Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n     * @member SpeechRecognizer.prototype.stopKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopKeywordRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        if (!!cb) {\r\n            cb();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member SpeechRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        Contracts.throwIfDisposed(this.privDisposedSpeechRecognizer);\r\n\r\n        this.dispose(true);\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member SpeechRecognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected dispose(disposing: boolean): void {\r\n        if (this.privDisposedSpeechRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.implRecognizerStop(); // Dispose is synchronous, so just start it....\r\n            this.privDisposedSpeechRecognizer = true;\r\n        }\r\n\r\n        super.dispose(disposing);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(\r\n            speechConfig,\r\n            this.properties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new SpeechServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}