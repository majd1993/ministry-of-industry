{"ast":null,"code":"\"use strict\";\n\nvar Observable_1 = require('./Observable');\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\n\n\nvar Notification = function () {\n  function Notification(kind, value, error) {\n    this.kind = kind;\n    this.value = value;\n    this.error = error;\n    this.hasValue = kind === 'N';\n  }\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n\n\n  Notification.prototype.observe = function (observer) {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n\n      case 'E':\n        return observer.error && observer.error(this.error);\n\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  };\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n\n\n  Notification.prototype.do = function (next, error, complete) {\n    var kind = this.kind;\n\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n\n      case 'E':\n        return error && error(this.error);\n\n      case 'C':\n        return complete && complete();\n    }\n  };\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n\n\n  Notification.prototype.accept = function (nextOrObserver, error, complete) {\n    if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n      return this.observe(nextOrObserver);\n    } else {\n      return this.do(nextOrObserver, error, complete);\n    }\n  };\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n\n\n  Notification.prototype.toObservable = function () {\n    var kind = this.kind;\n\n    switch (kind) {\n      case 'N':\n        return Observable_1.Observable.of(this.value);\n\n      case 'E':\n        return Observable_1.Observable.throw(this.error);\n\n      case 'C':\n        return Observable_1.Observable.empty();\n    }\n\n    throw new Error('unexpected notification kind value');\n  };\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n\n\n  Notification.createNext = function (value) {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n\n    return Notification.undefinedValueNotification;\n  };\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n\n\n  Notification.createError = function (err) {\n    return new Notification('E', undefined, err);\n  };\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n\n\n  Notification.createComplete = function () {\n    return Notification.completeNotification;\n  };\n\n  Notification.completeNotification = new Notification('C');\n  Notification.undefinedValueNotification = new Notification('N', undefined);\n  return Notification;\n}();\n\nexports.Notification = Notification;","map":{"version":3,"sources":["../src/Notification.ts"],"names":[],"mappings":"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","sourcesContent":["import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.error);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}