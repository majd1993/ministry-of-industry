{"ast":null,"code":"import _inherits from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/Ubility/Desktop/ministry-of-industry-and-advanced-technology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { createNoDashGuid, Deferred, PromiseHelper, Stream } from \"../../common/Exports\";\nimport { Contracts } from \"../Contracts\";\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat\";\n/**\n * Represents audio output stream used for custom audio output configurations.\n * @class AudioOutputStream\n */\n\nexport var AudioOutputStream = /*#__PURE__*/function () {\n  /**\n   * Creates and initializes an instance.\n   * @constructor\n   */\n  function AudioOutputStream() {\n    _classCallCheck(this, AudioOutputStream);\n  }\n  /**\n   * Creates a memory backed PullAudioOutputStream with the specified audio format.\n   * @member AudioOutputStream.createPullStream\n   * @function\n   * @public\n   * @returns {PullAudioOutputStream} The audio output stream being created.\n   */\n\n\n  _createClass(AudioOutputStream, null, [{\n    key: \"createPullStream\",\n    value: function createPullStream() {\n      return PullAudioOutputStream.create();\n    }\n  }]);\n\n  return AudioOutputStream;\n}();\n/**\n * Represents memory backed push audio output stream used for custom audio output configurations.\n * @class PullAudioOutputStream\n */\n// tslint:disable-next-line:max-classes-per-file\n\nexport var PullAudioOutputStream = /*#__PURE__*/function (_AudioOutputStream) {\n  _inherits(PullAudioOutputStream, _AudioOutputStream);\n\n  var _super = _createSuper(PullAudioOutputStream);\n\n  function PullAudioOutputStream() {\n    _classCallCheck(this, PullAudioOutputStream);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PullAudioOutputStream, null, [{\n    key: \"create\",\n    value:\n    /**\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\n     * @member PullAudioOutputStream.create\n     * @function\n     * @public\n     * @returns {PullAudioOutputStream} The push audio output stream being created.\n     */\n    function create() {\n      return new PullAudioOutputStreamImpl();\n    }\n  }]);\n\n  return PullAudioOutputStream;\n}(AudioOutputStream);\n/**\n * Represents memory backed push audio output stream used for custom audio output configurations.\n * @private\n * @class PullAudioOutputStreamImpl\n */\n// tslint:disable-next-line:max-classes-per-file\n\nexport var PullAudioOutputStreamImpl = /*#__PURE__*/function (_PullAudioOutputStrea) {\n  _inherits(PullAudioOutputStreamImpl, _PullAudioOutputStrea);\n\n  var _super2 = _createSuper(PullAudioOutputStreamImpl);\n\n  /**\n   * Creates and initializes an instance with the given values.\n   * @constructor\n   */\n  function PullAudioOutputStreamImpl() {\n    var _this;\n\n    _classCallCheck(this, PullAudioOutputStreamImpl);\n\n    _this = _super2.call(this);\n    _this.privId = createNoDashGuid();\n    _this.privStream = new Stream();\n    return _this;\n  }\n  /**\n   * Sets the format information to the stream. For internal use only.\n   * @param {AudioStreamFormat} format - the format to be set.\n   */\n\n\n  _createClass(PullAudioOutputStreamImpl, [{\n    key: \"format\",\n    get:\n    /**\n     * Format information for the audio\n     */\n    function get() {\n      return this.privFormat;\n    }\n    /**\n     * Checks if the stream is closed\n     * @member PullAudioOutputStreamImpl.prototype.isClosed\n     * @property\n     * @public\n     */\n    ,\n    set: function set(format) {\n      if (format === undefined || format === null) {\n        this.privFormat = AudioOutputFormatImpl.getDefaultOutputFormat();\n      }\n\n      this.privFormat = format;\n    }\n  }, {\n    key: \"isClosed\",\n    get: function get() {\n      return this.privStream.isClosed;\n    }\n    /**\n     * Gets the id of the stream\n     * @member PullAudioOutputStreamImpl.prototype.id\n     * @property\n     * @public\n     */\n\n  }, {\n    key: \"id\",\n    value: function id() {\n      return this.privId;\n    }\n    /**\n     * Reads audio data from the internal buffer.\n     * @member PullAudioOutputStreamImpl.prototype.read\n     * @function\n     * @public\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\n     * @returns {Promise<number>} - Audio buffer length has been read.\n     */\n\n  }, {\n    key: \"read\",\n    value: function read(dataBuffer) {\n      var _this2 = this;\n\n      var intView = new Int8Array(dataBuffer);\n      var totalBytes = 0;\n\n      if (this.privLastChunkView !== undefined) {\n        if (this.privLastChunkView.length > dataBuffer.byteLength) {\n          intView.set(this.privLastChunkView.slice(0, dataBuffer.byteLength));\n          this.privLastChunkView = this.privLastChunkView.slice(dataBuffer.byteLength);\n          return PromiseHelper.fromResult(dataBuffer.byteLength);\n        }\n\n        intView.set(this.privLastChunkView);\n        totalBytes = this.privLastChunkView.length;\n        this.privLastChunkView = undefined;\n      }\n\n      var deffer = new Deferred(); // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\n\n      var readUntilFilled = function readUntilFilled() {\n        if (totalBytes < dataBuffer.byteLength && !_this2.privStream.isReadEnded) {\n          _this2.privStream.read().onSuccessContinueWith(function (chunk) {\n            if (chunk !== undefined && !chunk.isEnd) {\n              var tmpBuffer;\n\n              if (chunk.buffer.byteLength > dataBuffer.byteLength - totalBytes) {\n                tmpBuffer = chunk.buffer.slice(0, dataBuffer.byteLength - totalBytes);\n                _this2.privLastChunkView = new Int8Array(chunk.buffer.slice(dataBuffer.byteLength - totalBytes));\n              } else {\n                tmpBuffer = chunk.buffer;\n              }\n\n              intView.set(new Int8Array(tmpBuffer), totalBytes);\n              totalBytes += tmpBuffer.byteLength;\n              readUntilFilled();\n            } else {\n              _this2.privStream.readEnded();\n\n              deffer.resolve(totalBytes);\n            }\n          });\n        } else {\n          deffer.resolve(totalBytes);\n        }\n      };\n\n      readUntilFilled();\n      return deffer.promise();\n    }\n    /**\n     * Writes the audio data specified by making an internal copy of the data.\n     * @member PullAudioOutputStreamImpl.prototype.write\n     * @function\n     * @public\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(dataBuffer) {\n      Contracts.throwIfNullOrUndefined(this.privStream, \"must set format before writing\");\n      this.privStream.writeStreamChunk({\n        buffer: dataBuffer,\n        isEnd: false,\n        timeReceived: Date.now()\n      });\n    }\n    /**\n     * Closes the stream.\n     * @member PullAudioOutputStreamImpl.prototype.close\n     * @function\n     * @public\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.privStream.close();\n    }\n  }]);\n\n  return PullAudioOutputStreamImpl;\n}(PullAudioOutputStream);\n/*\n * Represents audio output stream used for custom audio output configurations.\n * @class PushAudioOutputStream\n */\n// tslint:disable-next-line:max-classes-per-file\n\nexport var PushAudioOutputStream = /*#__PURE__*/function (_AudioOutputStream2) {\n  _inherits(PushAudioOutputStream, _AudioOutputStream2);\n\n  var _super3 = _createSuper(PushAudioOutputStream);\n\n  /**\n   * Creates and initializes and instance.\n   * @constructor\n   */\n  function PushAudioOutputStream() {\n    _classCallCheck(this, PushAudioOutputStream);\n\n    return _super3.call(this);\n  }\n  /**\n   * Creates a PushAudioOutputStream that delegates to the specified callback interface for\n   * write() and close() methods.\n   * @member PushAudioOutputStream.create\n   * @function\n   * @public\n   * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\n   *        derived from PushAudioOutputStreamCallback\n   * @returns {PushAudioOutputStream} The push audio output stream being created.\n   */\n\n\n  _createClass(PushAudioOutputStream, null, [{\n    key: \"create\",\n    value: function create(callback) {\n      return new PushAudioOutputStreamImpl(callback);\n    }\n  }]);\n\n  return PushAudioOutputStream;\n}(AudioOutputStream);\n/**\n * Represents audio output stream used for custom audio output configurations.\n * @private\n * @class PushAudioOutputStreamImpl\n */\n// tslint:disable-next-line:max-classes-per-file\n\nexport var PushAudioOutputStreamImpl = /*#__PURE__*/function (_PushAudioOutputStrea) {\n  _inherits(PushAudioOutputStreamImpl, _PushAudioOutputStrea);\n\n  var _super4 = _createSuper(PushAudioOutputStreamImpl);\n\n  /**\n   * Creates a PushAudioOutputStream that delegates to the specified callback interface for\n   * read() and close() methods.\n   * @constructor\n   * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\n   *        derived from PushAudioOutputStreamCallback\n   */\n  function PushAudioOutputStreamImpl(callback) {\n    var _this3;\n\n    _classCallCheck(this, PushAudioOutputStreamImpl);\n\n    _this3 = _super4.call(this);\n    _this3.privId = createNoDashGuid();\n    _this3.privCallback = callback;\n    return _this3;\n  } // tslint:disable-next-line:no-empty\n\n\n  _createClass(PushAudioOutputStreamImpl, [{\n    key: \"format\",\n    set: function set(format) {}\n  }, {\n    key: \"write\",\n    value: function write(buffer) {\n      if (!!this.privCallback.write) {\n        this.privCallback.write(buffer);\n      }\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (!!this.privCallback.close) {\n        this.privCallback.close();\n      }\n    }\n  }, {\n    key: \"id\",\n    value: function id() {\n      return this.privId;\n    }\n  }]);\n\n  return PushAudioOutputStreamImpl;\n}(PushAudioOutputStream);","map":{"version":3,"sources":["src/sdk/Audio/AudioOutputStream.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    IAudioDestination,\r\n    IStreamChunk,\r\n    Promise,\r\n    PromiseHelper,\r\n    Stream,\r\n} from \"../../common/Exports\";\r\nimport {Contracts} from \"../Contracts\";\r\nimport {\r\n    AudioStreamFormat,\r\n    PushAudioOutputStreamCallback\r\n} from \"../Exports\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat\";\r\n\r\n/**\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @class AudioOutputStream\r\n */\r\nexport abstract class AudioOutputStream {\r\n\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() { }\r\n\r\n    /**\r\n     * Sets the format of the AudioOutputStream\r\n     * Note: the format is set by the synthesizer before writing. Do not set it before passing it to AudioConfig\r\n     * @member AudioOutputStream.prototype.format\r\n     */\r\n    public abstract set format(format: AudioStreamFormat);\r\n\r\n    /**\r\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\r\n     * @member AudioOutputStream.createPullStream\r\n     * @function\r\n     * @public\r\n     * @returns {PullAudioOutputStream} The audio output stream being created.\r\n     */\r\n    public static createPullStream(): PullAudioOutputStream {\r\n        return PullAudioOutputStream.create();\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio output stream used for custom audio output configurations.\r\n * @class PullAudioOutputStream\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport abstract class PullAudioOutputStream extends AudioOutputStream {\r\n\r\n    /**\r\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\r\n     * @member PullAudioOutputStream.create\r\n     * @function\r\n     * @public\r\n     * @returns {PullAudioOutputStream} The push audio output stream being created.\r\n     */\r\n    public static create(): PullAudioOutputStream {\r\n        return new PullAudioOutputStreamImpl();\r\n    }\r\n\r\n    /**\r\n     * Reads audio data from the internal buffer.\r\n     * @member PullAudioOutputStream.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\r\n     * @returns {Promise<number>} Audio buffer length has been read.\r\n     */\r\n    public abstract read(dataBuffer: ArrayBuffer): Promise<number>;\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio output stream used for custom audio output configurations.\r\n * @private\r\n * @class PullAudioOutputStreamImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class PullAudioOutputStreamImpl extends PullAudioOutputStream implements IAudioDestination {\r\n    private privFormat: AudioOutputFormatImpl;\r\n    private privId: string;\r\n    private privStream: Stream<ArrayBuffer>;\r\n    private privLastChunkView: Int8Array;\r\n\r\n    /**\r\n     * Creates and initializes an instance with the given values.\r\n     * @constructor\r\n     */\r\n    public constructor() {\r\n        super();\r\n        this.privId = createNoDashGuid();\r\n        this.privStream = new Stream<ArrayBuffer>();\r\n    }\r\n\r\n    /**\r\n     * Sets the format information to the stream. For internal use only.\r\n     * @param {AudioStreamFormat} format - the format to be set.\r\n     */\r\n    public set format(format: AudioStreamFormat) {\r\n        if (format === undefined || format === null) {\r\n            this.privFormat = AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        this.privFormat = format as AudioOutputFormatImpl;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): AudioStreamFormat {\r\n        return this.privFormat;\r\n    }\r\n\r\n    /**\r\n     * Checks if the stream is closed\r\n     * @member PullAudioOutputStreamImpl.prototype.isClosed\r\n     * @property\r\n     * @public\r\n     */\r\n    public get isClosed(): boolean {\r\n        return this.privStream.isClosed;\r\n    }\r\n\r\n    /**\r\n     * Gets the id of the stream\r\n     * @member PullAudioOutputStreamImpl.prototype.id\r\n     * @property\r\n     * @public\r\n     */\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    /**\r\n     * Reads audio data from the internal buffer.\r\n     * @member PullAudioOutputStreamImpl.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\r\n     * @returns {Promise<number>} - Audio buffer length has been read.\r\n     */\r\n    public read(dataBuffer: ArrayBuffer): Promise<number> {\r\n        const intView: Int8Array = new Int8Array(dataBuffer);\r\n        let totalBytes: number = 0;\r\n\r\n        if (this.privLastChunkView !== undefined) {\r\n            if (this.privLastChunkView.length > dataBuffer.byteLength) {\r\n                intView.set(this.privLastChunkView.slice(0, dataBuffer.byteLength));\r\n                this.privLastChunkView = this.privLastChunkView.slice(dataBuffer.byteLength);\r\n                return PromiseHelper.fromResult(dataBuffer.byteLength);\r\n            }\r\n            intView.set(this.privLastChunkView);\r\n            totalBytes = this.privLastChunkView.length;\r\n            this.privLastChunkView = undefined;\r\n        }\r\n\r\n        const deffer: Deferred<number> = new Deferred<number>();\r\n        // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\r\n        const readUntilFilled: () => void = (): void => {\r\n            if (totalBytes < dataBuffer.byteLength && !this.privStream.isReadEnded) {\r\n                this.privStream.read()\r\n                    .onSuccessContinueWith((chunk: IStreamChunk<ArrayBuffer>) => {\r\n                        if (chunk !== undefined && !chunk.isEnd) {\r\n                            let tmpBuffer: ArrayBuffer;\r\n                            if (chunk.buffer.byteLength > dataBuffer.byteLength - totalBytes) {\r\n                                tmpBuffer = chunk.buffer.slice(0, dataBuffer.byteLength - totalBytes);\r\n                                this.privLastChunkView = new Int8Array(chunk.buffer.slice(dataBuffer.byteLength - totalBytes));\r\n                            } else {\r\n                                tmpBuffer = chunk.buffer;\r\n                            }\r\n                            intView.set(new Int8Array(tmpBuffer), totalBytes);\r\n                            totalBytes += tmpBuffer.byteLength;\r\n                            readUntilFilled();\r\n                        } else {\r\n                            this.privStream.readEnded();\r\n                            deffer.resolve(totalBytes);\r\n                        }\r\n                    });\r\n            } else {\r\n                deffer.resolve(totalBytes);\r\n            }\r\n        };\r\n        readUntilFilled();\r\n        return deffer.promise();\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PullAudioOutputStreamImpl.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public write(dataBuffer: ArrayBuffer): void {\r\n        Contracts.throwIfNullOrUndefined(this.privStream, \"must set format before writing\");\r\n        this.privStream.writeStreamChunk({\r\n            buffer: dataBuffer,\r\n            isEnd: false,\r\n            timeReceived: Date.now()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioOutputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privStream.close();\r\n    }\r\n}\r\n\r\n/*\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @class PushAudioOutputStream\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport abstract class PushAudioOutputStream extends AudioOutputStream {\r\n    /**\r\n     * Creates and initializes and instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() { super(); }\r\n\r\n    /**\r\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\r\n     * write() and close() methods.\r\n     * @member PushAudioOutputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\r\n     *        derived from PushAudioOutputStreamCallback\r\n     * @returns {PushAudioOutputStream} The push audio output stream being created.\r\n     */\r\n    public static create(callback: PushAudioOutputStreamCallback): PushAudioOutputStream {\r\n        return new PushAudioOutputStreamImpl(callback);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member PushAudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @private\r\n * @class PushAudioOutputStreamImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class PushAudioOutputStreamImpl extends PushAudioOutputStream implements IAudioDestination {\r\n    private readonly privId: string;\r\n    private privCallback: PushAudioOutputStreamCallback;\r\n\r\n    /**\r\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\r\n     * read() and close() methods.\r\n     * @constructor\r\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\r\n     *        derived from PushAudioOutputStreamCallback\r\n     */\r\n    public constructor(callback: PushAudioOutputStreamCallback) {\r\n        super();\r\n        this.privId = createNoDashGuid();\r\n        this.privCallback = callback;\r\n    }\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public set format(format: AudioStreamFormat) {}\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        if (!!this.privCallback.write) {\r\n            this.privCallback.write(buffer);\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        if (!!this.privCallback.close) {\r\n            this.privCallback.close();\r\n        }\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}