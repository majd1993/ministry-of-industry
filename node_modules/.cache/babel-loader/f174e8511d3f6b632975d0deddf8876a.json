{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Exports_1 = require(\"../common.browser/Exports\");\n\nvar Exports_2 = require(\"../common.speech/Exports\");\n\nvar Exports_3 = require(\"../sdk/Exports\");\n\nvar ConnectionFactoryBase_1 = require(\"./ConnectionFactoryBase\");\n\nvar Exports_4 = require(\"./Exports\");\n\nvar QueryParameterNames_1 = require(\"./QueryParameterNames\");\n\nvar SpeechConnectionFactory =\n/** @class */\nfunction (_super) {\n  __extends(SpeechConnectionFactory, _super);\n\n  function SpeechConnectionFactory() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.interactiveRelativeUri = \"/speech/recognition/interactive/cognitiveservices/v1\";\n    _this.conversationRelativeUri = \"/speech/recognition/conversation/cognitiveservices/v1\";\n    _this.dictationRelativeUri = \"/speech/recognition/dictation/cognitiveservices/v1\";\n\n    _this.create = function (config, authInfo, connectionId) {\n      var endpoint = config.parameters.getProperty(Exports_3.PropertyId.SpeechServiceConnection_Endpoint, undefined);\n      var region = config.parameters.getProperty(Exports_3.PropertyId.SpeechServiceConnection_Region, undefined);\n      var hostSuffix = region && region.toLowerCase().startsWith(\"china\") ? \".azure.cn\" : \".microsoft.com\";\n      var host = config.parameters.getProperty(Exports_3.PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".stt.speech\" + hostSuffix);\n      var queryParams = {};\n      var endpointId = config.parameters.getProperty(Exports_3.PropertyId.SpeechServiceConnection_EndpointId, undefined);\n      var language = config.parameters.getProperty(Exports_3.PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\n\n      if (endpointId) {\n        if (!endpoint || endpoint.search(QueryParameterNames_1.QueryParameterNames.DeploymentIdParamName) === -1) {\n          queryParams[QueryParameterNames_1.QueryParameterNames.DeploymentIdParamName] = endpointId;\n        }\n      } else if (language) {\n        if (!endpoint || endpoint.search(QueryParameterNames_1.QueryParameterNames.LanguageParamName) === -1) {\n          queryParams[QueryParameterNames_1.QueryParameterNames.LanguageParamName] = language;\n        }\n      }\n\n      if (!endpoint || endpoint.search(QueryParameterNames_1.QueryParameterNames.FormatParamName) === -1) {\n        queryParams[QueryParameterNames_1.QueryParameterNames.FormatParamName] = config.parameters.getProperty(Exports_2.OutputFormatPropertyName, Exports_3.OutputFormat[Exports_3.OutputFormat.Simple]).toLowerCase();\n      }\n\n      if (config.autoDetectSourceLanguages !== undefined) {\n        queryParams[QueryParameterNames_1.QueryParameterNames.EnableLanguageID] = \"true\";\n      }\n\n      _this.setCommonUrlParams(config, queryParams, endpoint);\n\n      if (!endpoint) {\n        switch (config.recognitionMode) {\n          case Exports_4.RecognitionMode.Conversation:\n            if (config.parameters.getProperty(Exports_2.ForceDictationPropertyName, \"false\") === \"true\") {\n              endpoint = host + _this.dictationRelativeUri;\n            } else {\n              endpoint = host + _this.conversationRelativeUri;\n            }\n\n            break;\n\n          case Exports_4.RecognitionMode.Dictation:\n            endpoint = host + _this.dictationRelativeUri;\n            break;\n\n          default:\n            endpoint = host + _this.interactiveRelativeUri; // default is interactive\n\n            break;\n        }\n      }\n\n      var headers = {};\n\n      if (authInfo.token !== undefined && authInfo.token !== \"\") {\n        headers[authInfo.headerName] = authInfo.token;\n      }\n\n      headers[QueryParameterNames_1.QueryParameterNames.ConnectionIdHeader] = connectionId;\n      config.parameters.setProperty(Exports_3.PropertyId.SpeechServiceConnection_Url, endpoint);\n      return new Exports_1.WebsocketConnection(endpoint, queryParams, headers, new Exports_4.WebsocketMessageFormatter(), Exports_1.ProxyInfo.fromRecognizerConfig(config), connectionId);\n    };\n\n    return _this;\n  }\n\n  return SpeechConnectionFactory;\n}(ConnectionFactoryBase_1.ConnectionFactoryBase);\n\nexports.SpeechConnectionFactory = SpeechConnectionFactory;","map":{"version":3,"sources":["src/common.speech/SpeechConnectionFactory.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports\";\r\nimport {\r\n    OutputFormat,\r\n    PropertyId\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames\";\r\n\r\nexport class SpeechConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private readonly interactiveRelativeUri: string = \"/speech/recognition/interactive/cognitiveservices/v1\";\r\n    private readonly conversationRelativeUri: string = \"/speech/recognition/conversation/cognitiveservices/v1\";\r\n    private readonly dictationRelativeUri: string = \"/speech/recognition/dictation/cognitiveservices/v1\";\r\n\r\n    public create = (\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection => {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix: string =  (region && region.toLowerCase().startsWith(\"china\")) ? \".azure.cn\" : \".microsoft.com\";\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".stt.speech\" + hostSuffix);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.DeploymentIdParamName) === -1) {\r\n                queryParams[QueryParameterNames.DeploymentIdParamName] = endpointId;\r\n            }\r\n        } else if (language) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.LanguageParamName) === -1) {\r\n                queryParams[QueryParameterNames.LanguageParamName] = language;\r\n            }\r\n        }\r\n\r\n        if (!endpoint || endpoint.search(QueryParameterNames.FormatParamName) === -1) {\r\n            queryParams[QueryParameterNames.FormatParamName] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n        }\r\n\r\n        if (config.autoDetectSourceLanguages !== undefined) {\r\n            queryParams[QueryParameterNames.EnableLanguageID] = \"true\";\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        if (!endpoint) {\r\n            switch (config.recognitionMode) {\r\n                case RecognitionMode.Conversation:\r\n                    if (config.parameters.getProperty(ForceDictationPropertyName, \"false\") === \"true\") {\r\n                        endpoint = host + this.dictationRelativeUri;\r\n                    } else {\r\n                        endpoint = host + this.conversationRelativeUri;\r\n                    }\r\n                    break;\r\n                case RecognitionMode.Dictation:\r\n                    endpoint = host + this.dictationRelativeUri;\r\n                    break;\r\n                default:\r\n                    endpoint = host + this.interactiveRelativeUri; // default is interactive\r\n                    break;\r\n            }\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[QueryParameterNames.ConnectionIdHeader] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), connectionId);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}